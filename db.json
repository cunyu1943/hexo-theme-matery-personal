{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/friend_404.gif","path":"images/friend_404.gif","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/font/my.ttf","path":"font/my.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.png","path":"medias/featureimages/10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7670127b6ddadb7331a86e150abb45c048b2f8fe","modified":1611222723032},{"_id":"source/404/index.md","hash":"928267d82c7d33327886d7e6a06d8cf114bca3d0","modified":1619939093652},{"_id":"source/_data/friends.json","hash":"47c97298a52241a5f2beade5049f0f20f9011dde","modified":1619961099421},{"_id":"source/_data/link.yml","hash":"3190955b631846ba538b5b378aef762c179aacec","modified":1611287304184},{"_id":"source/_posts/【Java-从入坑到放弃】JDBC-编程指北.md","hash":"d980b1897d1ff28a3a0f21fb50fcc59278ff1bfa","modified":1620098589326},{"_id":"source/_posts/【Java-从入坑到放弃】No-2-玩转-IDEA.md","hash":"dabcd1396f90e6fbcf9f000200f1e0fef0a79872","modified":1620026531806},{"_id":"source/_posts/【Java-从入坑到放弃】No-1-Java-开发环境搭建.md","hash":"1872d868d8dc85a834e6c6e75e9e634f62fdfbcf","modified":1620026470782},{"_id":"source/_posts/【Java-从入坑到放弃】No-3-变量与数据类型.md","hash":"96902d06b9aa279aa63f937e4109def6e1a7cfee","modified":1620092475143},{"_id":"source/_posts/【Java-从入坑到放弃】No-4-操作符.md","hash":"eceaa71922c1df2b50c6a63501f8ba8f1e8c2e17","modified":1620026576336},{"_id":"source/_posts/【Java-从入坑到放弃】No-5-控制流程.md","hash":"dbcb9e842f8de4b4ae8990b1fa8b61af8d0b3a27","modified":1620026595671},{"_id":"source/_posts/【Java-从入坑到放弃】No-6-数组操作的奇技淫巧.md","hash":"34ac2e88f13db9dd2afde1f89a594a77d1deaa54","modified":1620026608186},{"_id":"source/_posts/【Java-从入坑到放弃】反射机制详解：入门、使用、实例.md","hash":"433fb286f8a7cd3fdac88cf4bf09427483ec9855","modified":1620098589315},{"_id":"source/_posts/【Java-从入坑到放弃】死磕-IO-流.md","hash":"cb002bb463771b44869ae4d97233c88611f89fff","modified":1620098589320},{"_id":"source/_posts/【Python-入门指北】No-2-玩转-Pycharm.md","hash":"601a45965bca58d013af89eec3e0b85e7c8eaba3","modified":1620093172962},{"_id":"source/_posts/【Python-入门指北】No-1-Python-简介.md","hash":"84e8142ff98bd401cccaa1fc21fed5c45349b943","modified":1620093172956},{"_id":"source/_posts/【Python-入门指北】No-3-Python-语言元素.md","hash":"79fd2297e8abbbbaa56c86544edec5310c36a06b","modified":1620093172973},{"_id":"source/_posts/【剑指-Java】第-1-弹：靠这份-Java-基础知识总结，我拿到了满意的-Offer.md","hash":"b27f7397aa7bfea297676cc50f88ce89954b116f","modified":1620092454455},{"_id":"source/_posts/【剑指-Java】第-3-弹：纯干货，计算机网络面试知识点总结.md","hash":"9d42a254fba5d55137443a0211802441d37be3b5","modified":1619967483028},{"_id":"source/_posts/【剑指-Java】第-2-弹：剑指大厂，这份数据库面试总结请收好.md","hash":"0f0a17fa80fd65d303b4ffbe088f2c1a9bc76ab0","modified":1619967488997},{"_id":"source/_posts/【剑指-Java】第-4-弹：绝对硬货，Spring-面试知识点总结大全.md","hash":"a3ee43763007237249c34b0f5c3e53197376f066","modified":1619967457700},{"_id":"source/_posts/【剑指-Offer】04-二维数组中的查找.md","hash":"6c1c71788b8e5b4b0bc36bd1b6c8aac090e226c4","modified":1620309747928},{"_id":"source/_posts/【剑指-Offer】03-数组中重复的数字.md","hash":"4540ff32c53e06c28b209df245d500f8c19f98c2","modified":1620117931284},{"_id":"source/_posts/【剑指-Offer】06-从尾到头打印链表.md","hash":"4a4942165ba8c22b1843bdfd1bd2ada9a6085c23","modified":1620117931292},{"_id":"source/_posts/【剑指-Offer】05-替换空格.md","hash":"b9dfc5ac7e3d8281f2ec72708701104b5ebac1a6","modified":1620117931288},{"_id":"source/_posts/【剑指-Offer】07-重建二叉树.md","hash":"f854d9a344e9fa16d6180660732b660c526892a3","modified":1620117931301},{"_id":"source/_posts/【剑指-Offer】09-用两个栈实现队列.md","hash":"0047cd9c904a5597669c0cc5e32fb969abeaa38d","modified":1620117931305},{"_id":"source/_posts/【剑指-Offer】10-I-斐波那契数列.md","hash":"12b328bd9e461cab4d69dd96088f37ce2c63ae91","modified":1620116901533},{"_id":"source/_posts/【剑指-Offer】10-II-青蛙跳台阶问题.md","hash":"79c57390501b26282e913ef6cf1ca2db7f54640f","modified":1620115164310},{"_id":"source/_posts/【剑指-Offer】11-旋转数组的最小数字.md","hash":"8b632466f00dd9cba17c5c35532e5792edbeb6a3","modified":1620115164313},{"_id":"source/_posts/【实战演练场】Java-学生成绩管理系统，附源码！.md","hash":"dca6eedf7c504f5f37f9388e31e50fe09a08908b","modified":1620098589334},{"_id":"source/_posts/【剑指-Offer】15-二进制中1的个数.md","hash":"1ea86763a6d607ad95358d1c3ac75b8172686042","modified":1620115164317},{"_id":"source/_posts/【效率为王】Gitee-Typora，搭建你的免费高速图床.md","hash":"658d78fa874dc18214775a128ebf5d7750730363","modified":1620117136382},{"_id":"source/_posts/【效率为王】利用-Github-搭建自己的免费图床.md","hash":"0e5663efe0c9637769c94929ccb32df72e3d9885","modified":1620094062788},{"_id":"source/_posts/【效率为王】十分钟入门-Markdown-写作.md","hash":"8f0756e84f40e90cb122e18f29a64f0f47f24657","modified":1620094935132},{"_id":"source/_posts/【效率为王】手把手教妹纸装系统，猛男必备！.md","hash":"35687649816d18c0100f96f76cc328c6b30e8d06","modified":1620094062797},{"_id":"source/_posts/【效率为王】帮妹子装系统？准备工作得做好！.md","hash":"f06a711aabbaaebd67c2ac49d55cfc5bf8b274b1","modified":1620094062794},{"_id":"source/_posts/【效率为王】技术写作中的那些神兵利器.md","hash":"4e28d5e29d5fae4eab74dd7cdedb046972ef4c4a","modified":1620098589291},{"_id":"source/_posts/【效率为王】论如何优雅的使用-Windows-10！.md","hash":"4bc7be66be8b9cf51bc0d827a8d8eec96e515415","modified":1620094935137},{"_id":"source/_posts/【效率为王】超详细-Halo-博客搭建教程.md","hash":"40a46b15fc6baf72e87431eb0e5ea6dcfdb8a8c9","modified":1620098589298},{"_id":"source/_posts/【效率为王】还在花冤枉钱找人做电子签名？看这儿，教你制作纯手写电子签名.md","hash":"6bf7da4434142454187e92b1dc14494417d6a60f","modified":1620093172969},{"_id":"source/_posts/【资源分享】发现-3-个-Github-项目，超赞！.md","hash":"937a4e29b58d519a08f191323ae3baa9a2b22be3","modified":1620112803375},{"_id":"source/_posts/【资源分享】学妹想学编程，我这个学长真是操碎了心.md","hash":"695d9fba214a4cef4cd129992d5897df519ec58b","modified":1620113599445},{"_id":"source/_posts/【资源分享】阿里云盘-PC-内测来了：颜值超高！.md","hash":"6c2a3238abad07a7b6d8bfd9a40d87f927c9b73c","modified":1620098589309},{"_id":"source/about/index.md","hash":"cf63e031a86682bba3da2b1d01c311b78843c719","modified":1620014492740},{"_id":"source/categories/index.md","hash":"4a7451d78d11a0b5cf8bff94578718f80f7291d4","modified":1619938629861},{"_id":"source/contact/index.md","hash":"3090044301ccf65f7cfb69b70c6d1e68adcab63b","modified":1619938814372},{"_id":"source/images/avatar.png","hash":"7406da06ed29c872dbd2ae867dccfe63e3c9b58b","modified":1594080272841},{"_id":"source/images/favicon.ico","hash":"295d2453634a3a7552a3f7b6696bf48674f35774","modified":1601549017945},{"_id":"source/friends/index.md","hash":"89b031b528e98c71eb7b8591bd0faa91c5a32137","modified":1619961708139},{"_id":"source/link/index.md","hash":"cc9f92fda412574ec9c0e61e979824bccbda86f5","modified":1611233427283},{"_id":"source/message/index.md","hash":"ce6863dfdad67b62594c667a5a3148011d6fa51a","modified":1611223580673},{"_id":"source/nav/index.md","hash":"33361c57a8e61560402aae96bc0280a00c2235cd","modified":1620047865784},{"_id":"source/tags/index.md","hash":"610a9bb88764fcbb8fa2a81c2087655444290e82","modified":1619938621642},{"_id":"source/images/404.jpg","hash":"826cf9b20e32b38de705b8ba7d7c0e9b9fc50100","modified":1607045691020},{"_id":"source/images/friend_404.gif","hash":"cd405df36a27bdf4dfc285f640b26e4d1583879c","modified":1606909826279},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1619937523166},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1619937523165},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1619937523167},{"_id":"themes/hexo-theme-matery/README.md","hash":"b604a56c98c2ffdcfbef9e27cc14b7deb3b8034b","modified":1619937523169},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"73af1520ef533bfce3af5c41ade2764dd48341cf","modified":1619937523169},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"1e7240b0a237f49ed2b91ab90f1495c5e8646c60","modified":1619937523172},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1619937523172},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1619937523173},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1619937523174},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1619937523202},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"83e9146ec85cb565ea8c59be7aa4675815d0ede6","modified":1620012884970},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1619937523204},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1619937523203},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1619937523205},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1619937523205},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"d8aab03e60391b3b71d550b825acb6d43d8a0a99","modified":1619937523206},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"bebe50e615b12ff9d4b5a0c556b8c945e5fd30ee","modified":1619966135357},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1619937523207},{"_id":"themes/hexo-theme-matery/layout/nav.ejs","hash":"74bf119ed2d0ed6e3f99661b1bec2288a00cff8f","modified":1620056131035},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1619937523207},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1619937523208},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1619937523208},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1594079359886},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1619937523195},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1619937523194},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1619937523194},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1619937523195},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1619937523196},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1619937523197},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1619937523197},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1619937523198},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1619937523199},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1619937523198},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1619937523199},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1619937523200},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1619937523200},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1619937523201},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1619937523176},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1619937523176},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1619937523177},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1619937523177},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1619937523178},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1619937523178},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1619937523179},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1619937523179},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"6b7d8df0d1531f5d6ef40522365359a953d8602b","modified":1619959233400},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1619937523180},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1619937523181},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1619937523181},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1619937523182},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1619937523182},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1619937523183},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"495e929d02a0fafb1a7ebbef7c5a6dda62dc60a8","modified":1619937523183},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1619937523184},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1619937523185},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1619937523186},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1619937523186},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1619937523187},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1619937523187},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1619937523187},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"64a5f8b9aac0cc9f95995dc17c37df667bb19c0a","modified":1619961157973},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1619937523189},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1619937523189},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1619937523190},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1619937523190},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1619937523191},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1619937523192},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"2a7d1a0d1a61862d6bfa0e4b31fcb923f68a0424","modified":1619941740921},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1619937523193},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5eea5e6da0cbfd3d93ae7e9193fa59997b467426","modified":1619937523193},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1619937523210},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1619937523210},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1619937523211},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"e40c0269f8b5a4e3779365762b31b0a45df3b8fb","modified":1620014490342},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1619937523213},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"68c20c8d7b1111f2b3f5f2fba690d2cdc59fe917","modified":1620049480914},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1619937523215},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1619937523215},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1619937523216},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1594079359886},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1619937523343},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1619937523374},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1594079359886},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1619937523341},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1619937523340},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1619937523342},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1619937523341},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"84ba122686eb375dac4e438337d5e037c8603a87","modified":1620058843087},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","hash":"ed58e36d22b2c7f6508e26b71897ae839c00e271","modified":1611133943246},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"18597d44dbeaa1eab4e86cb0f67285253e1ba1c3","modified":1610430353049},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1619937523218},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1619937523219},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1619937523220},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1619937523221},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1619937523222},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1619937523261},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1619937523261},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1619937523262},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1619937523263},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1619937523264},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1619937523265},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1619937523265},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1619937523266},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1619937523269},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1619937523267},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1619937523278},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1619937523282},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1619937523285},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1619937523286},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1619937523284},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1619937523297},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1619937523303},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1619937523303},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1619937523302},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1619937523304},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1619937523305},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1619937523312},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1619937523313},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1619937523240},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1619937523242},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1619937523243},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1619937523244},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1619937523290},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1619937523290},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1619937523292},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1619937523291},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1619937523292},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1619937523293},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1619937523293},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1619937523294},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1619937523295},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1619937523296},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1619937523307},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1619937523308},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1619937523309},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1619937523309},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1619937523306},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1619937523310},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1619937523311},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"bdf53f89030f5c1dbfe5aa64d759cce51a7826a0","modified":1620058729698},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"4dbe92857419508236a1651122ba781967cb302b","modified":1620057178672},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1619937523270},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1619937523283},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1619937523288},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1619937523225},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1619937523228},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1619937523237},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1619937523238},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1619937523239},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1619937523258},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1619937523259},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1619937523344},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"40eea37ebc326104ba3a3d4273fbf0d3fcd29bfd","modified":1620058876803},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1619937523280},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1619937523299},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1619937523301},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1619937523321},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1619937523241},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1619937523246},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1619937523257},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"b88b08f2e7a849b8fa8e24401b3d0edbce94dc6b","modified":1620058917119},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1619937523234},{"_id":"source/images/loading.gif","hash":"112a070f275e32e8bba9c3412aa93e5faabb2668","modified":1606909699594},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"ec60c4ede67ee9e6e938782e13fe758795458713","modified":1620058629122},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1619937523254},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"47dca5431ca51a228a1e9ce0a9570230b11bcc43","modified":1620058897098},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"063fe7d81d8876e8ce1a2ffb2cbdf0fe5d574e35","modified":1617350484956},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"649060d1267b4275f915e1fa11c26fe283723a60","modified":1617350501710},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"649060d1267b4275f915e1fa11c26fe283723a60","modified":1617350501710},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.png","hash":"8c7b27bb0c441d0959053a4b96a300d3bd5fcbdd","modified":1620057328880},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"048c30fb332416aa7e4860888399b228ea1c23de","modified":1617350449097},{"_id":"themes/hexo-theme-matery/source/font/my.ttf","hash":"fce73d4cffaddc241820692753d0c239388967cc","modified":1583065082000},{"_id":"public/atom.xml","hash":"65474796bd08b68706500944b6524900d3806e94","modified":1620310549885},{"_id":"public/search.xml","hash":"4ce1241e0d6eb1f9ea26589ad57c9a925a58df98","modified":1620310549885},{"_id":"public/404/index.html","hash":"97a8fde47dc1729b1d236bb60373e22dde913dc3","modified":1620310549885},{"_id":"public/about/index.html","hash":"89cbd4257791d0f71cf40faca2e5409dc5fa5343","modified":1620310549885},{"_id":"public/categories/index.html","hash":"ad322d5be9950d4469a621ea8d220080a6559c20","modified":1620310549885},{"_id":"public/contact/index.html","hash":"b13c65274011d1106f376ecee321e5714c041fc5","modified":1620310549885},{"_id":"public/friends/index.html","hash":"d68dedbfaed49be9dc5133470994449a02f45541","modified":1620310549885},{"_id":"public/link/index.html","hash":"552f2cdcb884e739e6d82998655c44fe4e3d02f2","modified":1620310549885},{"_id":"public/message/index.html","hash":"2f47ec52011e31565730099117827b8789d3ba4f","modified":1620310549885},{"_id":"public/nav/index.html","hash":"4f827162d7b594e0b52965c36939dc2e00d076b5","modified":1620310549885},{"_id":"public/tags/index.html","hash":"2e48cd87c73f528e7b432befda4a672758343bb7","modified":1620310549885},{"_id":"public/posts/14fc53a7/index.html","hash":"c87eddddf202051d6861fdcb92f7a24dec086605","modified":1620310549885},{"_id":"public/posts/4ba50e26/index.html","hash":"8d022ebafe08044d6d6d5c89c4bf32a129d13fd1","modified":1620310549885},{"_id":"public/posts/3a6d4dac/index.html","hash":"34e6232f0cfdd1b770d2701e0280f0270f8f84de","modified":1620310549885},{"_id":"public/posts/9f65392e/index.html","hash":"6b2f20f72bb035f366944f4bee0760c200ef65a5","modified":1620310549885},{"_id":"public/posts/2ca6942c/index.html","hash":"15cc4d5cc3f805fd970e6647e8c32b4a91e8105b","modified":1620310549885},{"_id":"public/posts/4eca9a09/index.html","hash":"307ee608fe56a9425f2a6ded997c5babd303a053","modified":1620310549885},{"_id":"public/posts/63d61223/index.html","hash":"a7645c16703a6679ce4beecb2240c293030310f1","modified":1620310549885},{"_id":"public/posts/de25b7ed/index.html","hash":"ce085244864039c8a27c65ebb4bc2637009155c0","modified":1620310549885},{"_id":"public/posts/bcb92c95/index.html","hash":"800a0470faa6a165a87d46bdc456dea9418f647d","modified":1620310549885},{"_id":"public/posts/71a265ba/index.html","hash":"851fec05b1c0e142312a3295bde0e07f19004ff5","modified":1620310549885},{"_id":"public/posts/d500dab8/index.html","hash":"41c14f0c815cf279caec00658f7e3bb0a09e95dc","modified":1620310549885},{"_id":"public/posts/4ee7faf9/index.html","hash":"d460acffe840bea02b9d917ddfb3f4c05b1a928e","modified":1620310549885},{"_id":"public/posts/a173fb1f/index.html","hash":"43aac5aaa1791adc899d42285d75c4dc9e696d80","modified":1620310549885},{"_id":"public/posts/67ecb459/index.html","hash":"068c24e449f30ee4a19e1537bc338f3780ee09f8","modified":1620310549885},{"_id":"public/posts/3e20d784/index.html","hash":"2a1b48b3fdf4c2719123387055a8cc9057882390","modified":1620310549885},{"_id":"public/posts/e313e5db/index.html","hash":"c398a877102059f3d33fc82bdf08ed00072ccaac","modified":1620310549885},{"_id":"public/posts/3e435af2/index.html","hash":"e68785372fe8e6d4d9cbb3ef8d12534e372fdfd7","modified":1620310549885},{"_id":"public/posts/53549ae6/index.html","hash":"6c53065ee88ef82f81d6fd2b97365fe111ebed92","modified":1620310549885},{"_id":"public/posts/16cb7ba0/index.html","hash":"76a14855b5061dccbfbea7505396925eb3ec6422","modified":1620310549885},{"_id":"public/posts/8389a3cf/index.html","hash":"3e17b3bd38c7f9a0e61d8152535545137e81c64d","modified":1620310549885},{"_id":"public/posts/8a341b7b/index.html","hash":"c0730e0391d6dcbc3691bfc7baf7c4190ea026ee","modified":1620310549885},{"_id":"public/posts/4709cff1/index.html","hash":"05bdf235307f305cfa54e1b022e623f94bb01cf6","modified":1620310549885},{"_id":"public/posts/29dbcdd7/index.html","hash":"09b82ff2f6e3daeb1c1c3d9136327033f212296c","modified":1620310549885},{"_id":"public/posts/9b0c5646/index.html","hash":"998d91fb4c2428713b57bf54d14a7866d8e86d49","modified":1620310549885},{"_id":"public/posts/df5721f6/index.html","hash":"c631bea4435549edb41295e7d671f28be3310fdb","modified":1620310549885},{"_id":"public/posts/19b409da/index.html","hash":"7c7b5f838c2c31315c09854cba31634a8f13f8a0","modified":1620310549885},{"_id":"public/posts/b7fc92d5/index.html","hash":"78f94da5273ebe879536d5fa22dbbe6a339970bb","modified":1620310549885},{"_id":"public/posts/a650a32b/index.html","hash":"ddc36bc5222cc5f5d1242925e8ce4c526a669823","modified":1620310549885},{"_id":"public/posts/afd62f34/index.html","hash":"0dc64e002e34f7018b2bcf825ae0983c50a7e9aa","modified":1620310549885},{"_id":"public/posts/fd17f455/index.html","hash":"bc3e54b75cecb97006e8d6854412e16d4843442c","modified":1620310549885},{"_id":"public/posts/5efee643/index.html","hash":"7407e3b418da8913dc99d965ad79a8e887c73e57","modified":1620310549885},{"_id":"public/posts/bb695896/index.html","hash":"06b0ee10041a21f733e0105ce39a49eba79221d8","modified":1620310549885},{"_id":"public/posts/f8bfd521/index.html","hash":"fcf288d2c1090e1a8ba115dca66b51182f278cda","modified":1620310549885},{"_id":"public/posts/f88149e6/index.html","hash":"6bae50f26f03f9bf1b968f64c55873a1f453d3f3","modified":1620310549885},{"_id":"public/posts/564e36a8/index.html","hash":"def40e877e4fd57ef1009c6239bc15351fb3cbd1","modified":1620310549885},{"_id":"public/posts/c97353d2/index.html","hash":"338cf3abb5b3a2b4f1bbf42a8db211089a46c07e","modified":1620310549885},{"_id":"public/posts/7eca1e70/index.html","hash":"33dcf10bfca8b227bf49be72a908712f64efd886","modified":1620310549885},{"_id":"public/posts/da8b2920/index.html","hash":"ec1a691bcc2e65b6eef49f6516bf94832af55203","modified":1620310549885},{"_id":"public/posts/6bac5157/index.html","hash":"c7dd77b36498ff1fccedb4227ec90e19fa6d3b8f","modified":1620310549885},{"_id":"public/archives/index.html","hash":"64aed62f164dc2a9df0048ed1c93d2cf4599a8ca","modified":1620310549885},{"_id":"public/archives/page/2/index.html","hash":"90e1f7a8e2994cc4d62047d538b690cf9aececc6","modified":1620310549885},{"_id":"public/archives/page/3/index.html","hash":"affd22af8831997f3b03a4d3bd3c2a027048c423","modified":1620310549885},{"_id":"public/archives/page/4/index.html","hash":"609f72a281011280accd45d1435d2d21cb424c2e","modified":1620310549885},{"_id":"public/archives/2021/index.html","hash":"779c869b3ae76e67422773482e287d5de7a95c16","modified":1620310549885},{"_id":"public/archives/2021/page/2/index.html","hash":"05a84e064fcad74980d08603cfa2e5606f58a9d5","modified":1620310549885},{"_id":"public/archives/2021/page/3/index.html","hash":"df25341940243aac38485b0fa99f59a53c7b63e8","modified":1620310549885},{"_id":"public/archives/2021/page/4/index.html","hash":"5eca41b1c332cf71d12c2ca8af04a0dafcb5ac59","modified":1620310549885},{"_id":"public/archives/2021/05/index.html","hash":"e3343c218a061427a87deb177d1c5142f452dcb9","modified":1620310549885},{"_id":"public/archives/2021/05/page/2/index.html","hash":"f6df50d88fe41ca320564bb80b16b0cc53d7f09d","modified":1620310549885},{"_id":"public/archives/2021/05/page/3/index.html","hash":"c06d75402c07d90d83836e8c2c9425f83167c490","modified":1620310549885},{"_id":"public/archives/2021/05/page/4/index.html","hash":"ec6289798a133972febae294c8c8c1f080fbec63","modified":1620310549885},{"_id":"public/categories/Java-修炼之路/index.html","hash":"6fbffe926cb1a5a8d587a1994e7b6cbdca47be72","modified":1620310549885},{"_id":"public/categories/Python-养成记/index.html","hash":"ae4ddb8f9e375ff1f56a5995ff32700f163b8cf8","modified":1620310549885},{"_id":"public/categories/Online-Judge/index.html","hash":"40cc4f903756450d984a07724f4e6f15f90962e4","modified":1620310549885},{"_id":"public/categories/效率为王/index.html","hash":"6499c07ab7529d599aae4419bf9a2b4233394821","modified":1620310549885},{"_id":"public/categories/资源分享/index.html","hash":"136d1e3326ad3fff21f2613d2915543d1d6ab6b8","modified":1620310549885},{"_id":"public/categories/剑指-Java/index.html","hash":"6bb2ac255a43356a158808b3c6c2dda374c22b4c","modified":1620310549885},{"_id":"public/categories/实战演练场/index.html","hash":"df3ffe2da2d35d3915d5d1365669dc297421100b","modified":1620310549885},{"_id":"public/index.html","hash":"67200c6e8aaef56429d91d61430116141dd7bf09","modified":1620310549885},{"_id":"public/page/2/index.html","hash":"9f26f2291045f73995ec50b71a8451c70c032549","modified":1620310549885},{"_id":"public/page/3/index.html","hash":"1910d6107119341ba892df102396d169f45e664d","modified":1620310549885},{"_id":"public/page/4/index.html","hash":"0d2b099fa0de0b0ab5ca792f086ac8643167bd96","modified":1620310549885},{"_id":"public/tags/Java/index.html","hash":"3b44aef111097e6222f63a27f7fb6504781b791d","modified":1620310549885},{"_id":"public/tags/Java/page/2/index.html","hash":"11931ec00cede8dfb640ea7cee433d483b5096f7","modified":1620310549885},{"_id":"public/tags/IDEA/index.html","hash":"6bfe6abe66b021224eeeef441cb65614d88ba1b4","modified":1620310549885},{"_id":"public/tags/Python/index.html","hash":"6b82a17d42ef587c71724a4b8ed454021559076f","modified":1620310549885},{"_id":"public/tags/Pycharm/index.html","hash":"39f3737aa983dda04f31195ef36e6ee9f8e21e70","modified":1620310549885},{"_id":"public/tags/剑指-Offer/index.html","hash":"9495a74dd318f442bab0ba04f4d173340e6b7793","modified":1620310549885},{"_id":"public/tags/工具/index.html","hash":"79bd454e5cd57b9eb4b5b837109a141b486e3e6a","modified":1620310549885},{"_id":"public/tags/教程/index.html","hash":"96c1e795cab95e80c8040e7cb2f797342bd38b71","modified":1620310549885},{"_id":"public/tags/Gitee/index.html","hash":"604befe19ae3434ae9f04def627787f76f7707d0","modified":1620310549885},{"_id":"public/tags/图床/index.html","hash":"ef4298805a91deb42b570cee06e3af01c8609d26","modified":1620310549885},{"_id":"public/tags/Github/index.html","hash":"275a2c91c5d43fcf4eaf5c3345fa7ee5304b901c","modified":1620310549885},{"_id":"public/tags/Markdown/index.html","hash":"4882dd5b4187f084df8572428fb6f9b0657181d9","modified":1620310549885},{"_id":"public/tags/Windows/index.html","hash":"ad483cd23eec7e7b530e68141f2b5944fbd5df7b","modified":1620310549885},{"_id":"public/tags/博客/index.html","hash":"e2379411a3e88418eb7681c0dfc86c00c987e05b","modified":1620310549885},{"_id":"public/tags/资源/index.html","hash":"efcc1fd2bb90b002826393093dd9a98ef3ae3045","modified":1620310549885},{"_id":"public/tags/反射/index.html","hash":"a917dc507c917e456c02d4e486cddefdbe7425ee","modified":1620310549885},{"_id":"public/tags/IO/index.html","hash":"e353212794333a5480d333ee054783b52678c69c","modified":1620310549885},{"_id":"public/tags/面试/index.html","hash":"8968dc47b6c9a097fa06caa1599c3ddf9bee2d7e","modified":1620310549885},{"_id":"public/tags/计算机网络/index.html","hash":"af8e9c9d887ea7162540e2aeacbe101172c2b534","modified":1620310549885},{"_id":"public/tags/数据库/index.html","hash":"effd788cecfe9599df2e53fafbccb25702e81e80","modified":1620310549885},{"_id":"public/tags/MySQL/index.html","hash":"8527def76ee47b3cbef85cbc255ca21416dd7d34","modified":1620310549885},{"_id":"public/tags/SQL/index.html","hash":"4fcd8070864d3ed17983325ee7d206df8d654fc1","modified":1620310549885},{"_id":"public/tags/Spring/index.html","hash":"9105e163415c8344f5791822de510ad860a993ed","modified":1620310549885},{"_id":"public/tags/SpringBoot/index.html","hash":"a437839381832d8dc2d99b113af0cd1dce03806c","modified":1620310549885},{"_id":"public/tags/SpringMVC/index.html","hash":"556aee6922c762bf1e61e0b8726afb5c96b93b47","modified":1620310549885},{"_id":"public/tags/JDBC/index.html","hash":"740884a75100dfb4f3abb529503e7d060f6497eb","modified":1620310549885},{"_id":"public/tags/项目/index.html","hash":"d5b2e2c1a4200703650e467d19e5eada802c7e60","modified":1620310549885},{"_id":"public/CNAME","hash":"7670127b6ddadb7331a86e150abb45c048b2f8fe","modified":1620117926067},{"_id":"public/images/avatar.png","hash":"7406da06ed29c872dbd2ae867dccfe63e3c9b58b","modified":1620117926067},{"_id":"public/images/favicon.ico","hash":"295d2453634a3a7552a3f7b6696bf48674f35774","modified":1620117926067},{"_id":"public/favicon.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1620117926067},{"_id":"public/medias/avatar.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1620117926067},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1620117926067},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1620117926067},{"_id":"public/medias/logo.png","hash":"ca3bafe159b9050a7ae15f4368fd7852749915ba","modified":1620117926067},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1620117926067},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1620117926067},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1620117926067},{"_id":"public/medias/featureimages/0.jpg","hash":"84ba122686eb375dac4e438337d5e037c8603a87","modified":1620117926067},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1620117926067},{"_id":"public/medias/reward/alipay.png","hash":"ed58e36d22b2c7f6508e26b71897ae839c00e271","modified":1620117926067},{"_id":"public/medias/reward/wechat.png","hash":"18597d44dbeaa1eab4e86cb0f67285253e1ba1c3","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1620117926067},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1620117926067},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1620117926067},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1620117926067},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1620117926067},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1620117926067},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1620117926067},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1620117926067},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1620117926067},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1620117926067},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1620117926067},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1620117926067},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1620117926067},{"_id":"public/images/404.jpg","hash":"826cf9b20e32b38de705b8ba7d7c0e9b9fc50100","modified":1620117926067},{"_id":"public/medias/featureimages/3.jpg","hash":"bdf53f89030f5c1dbfe5aa64d759cce51a7826a0","modified":1620117926067},{"_id":"public/medias/featureimages/7.jpg","hash":"4dbe92857419508236a1651122ba781967cb302b","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1620117926067},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1620117926067},{"_id":"public/medias/featureimages/6.jpg","hash":"40eea37ebc326104ba3a3d4273fbf0d3fcd29bfd","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1620117926067},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1620117926067},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1620117926067},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1620117926067},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1620117926067},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1620117926067},{"_id":"public/css/my.css","hash":"8dc15330d97ea7aec580d42e3b24840e924e5151","modified":1620117926067},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1620117926067},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1620117926067},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1620117926067},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1620117926067},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1620117926067},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1620117926067},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1620117926067},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1620117926067},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1620117926067},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1620117926067},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1620117926067},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1620117926067},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1620117926067},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1620117926067},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1620117926067},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1620117926067},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1620117926067},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1620117926067},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1620117926067},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1620117926067},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1620117926067},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1620117926067},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1620117926067},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1620117926067},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1620117926067},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1620117926067},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1620117926067},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1620117926067},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1620117926067},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1620117926067},{"_id":"public/css/matery.css","hash":"8cec71f80ae2fbbbb1d19b0e03fa19ec3375cc72","modified":1620117926067},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1620117926067},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1620117926067},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1620117926067},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1620117926067},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1620117926067},{"_id":"public/medias/featureimages/8.jpg","hash":"b88b08f2e7a849b8fa8e24401b3d0edbce94dc6b","modified":1620117926067},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1620117926067},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1620117926067},{"_id":"public/images/friend_404.gif","hash":"cd405df36a27bdf4dfc285f640b26e4d1583879c","modified":1620117926067},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1620117926067},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1620117926067},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1620117926067},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1620117926067},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1620117926067},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1620117926067},{"_id":"public/medias/featureimages/1.jpg","hash":"47dca5431ca51a228a1e9ce0a9570230b11bcc43","modified":1620117926067},{"_id":"public/medias/featureimages/2.jpg","hash":"ec60c4ede67ee9e6e938782e13fe758795458713","modified":1620117926067},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1620117926067},{"_id":"public/medias/featureimages/9.jpg","hash":"063fe7d81d8876e8ce1a2ffb2cbdf0fe5d574e35","modified":1620117926067},{"_id":"public/medias/featureimages/5.jpg","hash":"649060d1267b4275f915e1fa11c26fe283723a60","modified":1620117926067},{"_id":"public/medias/banner/0.jpg","hash":"649060d1267b4275f915e1fa11c26fe283723a60","modified":1620117926067},{"_id":"public/medias/featureimages/10.png","hash":"8c7b27bb0c441d0959053a4b96a300d3bd5fcbdd","modified":1620117926067},{"_id":"public/images/loading.gif","hash":"112a070f275e32e8bba9c3412aa93e5faabb2668","modified":1620117926067},{"_id":"public/medias/featureimages/4.jpg","hash":"048c30fb332416aa7e4860888399b228ea1c23de","modified":1620117926067},{"_id":"public/font/my.ttf","hash":"fce73d4cffaddc241820692753d0c239388967cc","modified":1620117926067},{"_id":"source/_posts/【LeetCode】1720-解码异或后的数组.md","hash":"e52e5beefdac943f90401083f22d24e40e93b310","modified":1620310857945},{"_id":"public/posts/8955af0c/index.html","hash":"77a51e2791f68dfc3bffca45f11ab0029148b139","modified":1620310549885},{"_id":"public/categories/Online-Judge/page/2/index.html","hash":"647377970e33a749246ec55e7517add86f624ecb","modified":1620310549885},{"_id":"public/tags/LeetCode/index.html","hash":"a7f863ddadf1deeb6bcda03a1863692fc6c6fb30","modified":1620310549885},{"_id":"public/tags/位运算/index.html","hash":"0f21822fdf0755a9fe702fb82ad66e69e6a36c12","modified":1620310549885},{"_id":"source/_posts/demo.md","hash":"c20c1ef67691528acd384b2a7bb6e07e7f17813c","modified":1620349892349}],"Category":[{"name":"Java 修炼之路","_id":"cko9sdvyw0004bw34fumugnj3"},{"name":"Python 养成记","_id":"cko9sdvzk000sbw34c9n78kof"},{"name":"Online Judge","_id":"cko9sdvzs0015bw34b42g4e9p"},{"name":"效率为王","_id":"cko9sdw0g002bbw34bjcnd424"},{"name":"资源分享","_id":"cko9sdw180048bw34a7k23wx8"},{"name":"剑指 Java","_id":"cko9sdw1s004xbw341yz1hz8z"},{"name":"实战演练场","_id":"cko9sdw2i0066bw342tc51au8"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}]},{"_id":"link","data":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}],"Page":[{"title":"页面丢失","date":"2021-05-02T07:03:53.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！未找到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 页面丢失\ndate: 2021-05-02 15:03:53\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！未找到你想要的页面 :(\"\n---\n","updated":"2021-05-02T07:04:53.652Z","path":"404/index.html","comments":1,"_id":"cko9sdvyj0000bw34a9j986g2","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""},{"title":"关于我","date":"2021-01-20T07:48:52.000Z","type":"about","layout":"about","_content":"\n## 👀 联系我\n\n### 📟 微信公众号\n\n>   名称：「**村雨遥**」，微信号：**cunyu1943**\n\n建议关注公众号 🤝🤝🤝，最新文章会优先发布到此处，此外也方便及时交流。\n\n<img src=\"https://gitee.com/cunyu1943/images/raw/master/ImgsUbuntu/20200510234310.png\" title=\"\" size=500 style=\"zoom: 50%;\" />\n\n### 📞 个人微信号\n\n>   名称：**K**，微信号：**cunyu1024**\n\n如果两三句话解释不清楚，又或者想要和我进一步交流，那么欢迎加我私人微信畅谈 😉😉😉。\n\n扫描如下二维码快速添加！\n\n![](https://s1.ax1x.com/2020/10/02/0QdkX4.png)\n\n### 👫 交流群\n\n为了方便大家一起交流，特地建立了微信群，主要是为了提供一个交流的平台，以技术交流为主，可以在群里边交流日常开发学习工作中所遇到的问题，拒绝营销广告，违者飞机票。有需要的朋友们可以加群呀（还有各种资源免费领 💥）。\n\n扫描添加我的微信或者直接搜索添加：**cunyu1024**，备注 【**加群**】即可；\n\n### 🌈 其他平台\n\n我全平台都叫 【村雨遥】，可以直接通过百度找到我，也可以通过如下链接直达对应平台 ~\n\n-   📌 **Github@村雨遥**：https://github.com/cunyu1943\n-   📌 **知乎@村雨遥**：https://www.zhihu.com/people/cunyu1943\n-   📌 **CSDN@村雨遥**：https://blog.csdn.net/github_39655029\n-   📌 **掘金@村雨遥**：https://juejin.cn/user/747323637904519\n-   📌 **牛客@村雨遥**：https://www.nowcoder.com/profile/806383223\n\n## 其他说明\n\n网站中的部分文章内容、资源收集自网络，版权归原作者所有，已经尽量标记出来了，但难免有遗漏的地方，如果您觉得侵犯了您的权益，请及时联系我，我将在第一时间处理，不胜感激！\n\n我的邮箱：[747731461@qq.com](mailto:747731461@qq.com)\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-01-20 15:48:52\ntype: \"about\"\nlayout: \"about\"\n---\n\n## 👀 联系我\n\n### 📟 微信公众号\n\n>   名称：「**村雨遥**」，微信号：**cunyu1943**\n\n建议关注公众号 🤝🤝🤝，最新文章会优先发布到此处，此外也方便及时交流。\n\n<img src=\"https://gitee.com/cunyu1943/images/raw/master/ImgsUbuntu/20200510234310.png\" title=\"\" size=500 style=\"zoom: 50%;\" />\n\n### 📞 个人微信号\n\n>   名称：**K**，微信号：**cunyu1024**\n\n如果两三句话解释不清楚，又或者想要和我进一步交流，那么欢迎加我私人微信畅谈 😉😉😉。\n\n扫描如下二维码快速添加！\n\n![](https://s1.ax1x.com/2020/10/02/0QdkX4.png)\n\n### 👫 交流群\n\n为了方便大家一起交流，特地建立了微信群，主要是为了提供一个交流的平台，以技术交流为主，可以在群里边交流日常开发学习工作中所遇到的问题，拒绝营销广告，违者飞机票。有需要的朋友们可以加群呀（还有各种资源免费领 💥）。\n\n扫描添加我的微信或者直接搜索添加：**cunyu1024**，备注 【**加群**】即可；\n\n### 🌈 其他平台\n\n我全平台都叫 【村雨遥】，可以直接通过百度找到我，也可以通过如下链接直达对应平台 ~\n\n-   📌 **Github@村雨遥**：https://github.com/cunyu1943\n-   📌 **知乎@村雨遥**：https://www.zhihu.com/people/cunyu1943\n-   📌 **CSDN@村雨遥**：https://blog.csdn.net/github_39655029\n-   📌 **掘金@村雨遥**：https://juejin.cn/user/747323637904519\n-   📌 **牛客@村雨遥**：https://www.nowcoder.com/profile/806383223\n\n## 其他说明\n\n网站中的部分文章内容、资源收集自网络，版权归原作者所有，已经尽量标记出来了，但难免有遗漏的地方，如果您觉得侵犯了您的权益，请及时联系我，我将在第一时间处理，不胜感激！\n\n我的邮箱：[747731461@qq.com](mailto:747731461@qq.com)\n\n","updated":"2021-05-03T04:01:32.740Z","path":"about/index.html","comments":1,"_id":"cko9sdvys0002bw3425b8b7x5","content":"<h2 id=\"👀-联系我\"><a href=\"#👀-联系我\" class=\"headerlink\" title=\"👀 联系我\"></a>👀 联系我</h2><h3 id=\"📟-微信公众号\"><a href=\"#📟-微信公众号\" class=\"headerlink\" title=\"📟 微信公众号\"></a>📟 微信公众号</h3><blockquote>\n<p>  名称：「<strong>村雨遥</strong>」，微信号：<strong>cunyu1943</strong></p>\n</blockquote>\n<p>建议关注公众号 🤝🤝🤝，最新文章会优先发布到此处，此外也方便及时交流。</p>\n<p><img src=\"https://gitee.com/cunyu1943/images/raw/master/ImgsUbuntu/20200510234310.png\" title=\"\" size=\"500\" style=\"zoom: 50%;\"></p>\n<h3 id=\"📞-个人微信号\"><a href=\"#📞-个人微信号\" class=\"headerlink\" title=\"📞 个人微信号\"></a>📞 个人微信号</h3><blockquote>\n<p>  名称：<strong>K</strong>，微信号：<strong>cunyu1024</strong></p>\n</blockquote>\n<p>如果两三句话解释不清楚，又或者想要和我进一步交流，那么欢迎加我私人微信畅谈 😉😉😉。</p>\n<p>扫描如下二维码快速添加！</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/02/0QdkX4.png\" alt=\"\"></p>\n<h3 id=\"👫-交流群\"><a href=\"#👫-交流群\" class=\"headerlink\" title=\"👫 交流群\"></a>👫 交流群</h3><p>为了方便大家一起交流，特地建立了微信群，主要是为了提供一个交流的平台，以技术交流为主，可以在群里边交流日常开发学习工作中所遇到的问题，拒绝营销广告，违者飞机票。有需要的朋友们可以加群呀（还有各种资源免费领 💥）。</p>\n<p>扫描添加我的微信或者直接搜索添加：<strong>cunyu1024</strong>，备注 【<strong>加群</strong>】即可；</p>\n<h3 id=\"🌈-其他平台\"><a href=\"#🌈-其他平台\" class=\"headerlink\" title=\"🌈 其他平台\"></a>🌈 其他平台</h3><p>我全平台都叫 【村雨遥】，可以直接通过百度找到我，也可以通过如下链接直达对应平台 ~</p>\n<ul>\n<li>📌 <strong>Github@村雨遥</strong>：<a href=\"https://github.com/cunyu1943\">https://github.com/cunyu1943</a></li>\n<li>📌 <strong>知乎@村雨遥</strong>：<a href=\"https://www.zhihu.com/people/cunyu1943\">https://www.zhihu.com/people/cunyu1943</a></li>\n<li>📌 <strong>CSDN@村雨遥</strong>：<a href=\"https://blog.csdn.net/github_39655029\">https://blog.csdn.net/github_39655029</a></li>\n<li>📌 <strong>掘金@村雨遥</strong>：<a href=\"https://juejin.cn/user/747323637904519\">https://juejin.cn/user/747323637904519</a></li>\n<li>📌 <strong>牛客@村雨遥</strong>：<a href=\"https://www.nowcoder.com/profile/806383223\">https://www.nowcoder.com/profile/806383223</a></li>\n</ul>\n<h2 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h2><p>网站中的部分文章内容、资源收集自网络，版权归原作者所有，已经尽量标记出来了，但难免有遗漏的地方，如果您觉得侵犯了您的权益，请及时联系我，我将在第一时间处理，不胜感激！</p>\n<p>我的邮箱：<a href=\"mailto:747731461@qq.com\">747731461@qq.com</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<h2 id=\"👀-联系我\"><a href=\"#👀-联系我\" class=\"headerlink\" title=\"👀 联系我\"></a>👀 联系我</h2><h3 id=\"📟-微信公众号\"><a href=\"#📟-微信公众号\" class=\"headerlink\" title=\"📟 微信公众号\"></a>📟 微信公众号</h3><blockquote>\n<p>  名称：「<strong>村雨遥</strong>」，微信号：<strong>cunyu1943</strong></p>\n</blockquote>\n<p>建议关注公众号 🤝🤝🤝，最新文章会优先发布到此处，此外也方便及时交流。</p>\n<p><img src=\"https://gitee.com/cunyu1943/images/raw/master/ImgsUbuntu/20200510234310.png\" title=\"\" size=500 style=\"zoom: 50%;\" /></p>\n<h3 id=\"📞-个人微信号\"><a href=\"#📞-个人微信号\" class=\"headerlink\" title=\"📞 个人微信号\"></a>📞 个人微信号</h3><blockquote>\n<p>  名称：<strong>K</strong>，微信号：<strong>cunyu1024</strong></p>\n</blockquote>\n<p>如果两三句话解释不清楚，又或者想要和我进一步交流，那么欢迎加我私人微信畅谈 😉😉😉。</p>\n<p>扫描如下二维码快速添加！</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/02/0QdkX4.png\" alt=\"\"></p>\n<h3 id=\"👫-交流群\"><a href=\"#👫-交流群\" class=\"headerlink\" title=\"👫 交流群\"></a>👫 交流群</h3><p>为了方便大家一起交流，特地建立了微信群，主要是为了提供一个交流的平台，以技术交流为主，可以在群里边交流日常开发学习工作中所遇到的问题，拒绝营销广告，违者飞机票。有需要的朋友们可以加群呀（还有各种资源免费领 💥）。</p>\n<p>扫描添加我的微信或者直接搜索添加：<strong>cunyu1024</strong>，备注 【<strong>加群</strong>】即可；</p>\n<h3 id=\"🌈-其他平台\"><a href=\"#🌈-其他平台\" class=\"headerlink\" title=\"🌈 其他平台\"></a>🌈 其他平台</h3><p>我全平台都叫 【村雨遥】，可以直接通过百度找到我，也可以通过如下链接直达对应平台 ~</p>\n<ul>\n<li>📌 <strong>Github@村雨遥</strong>：<a href=\"https://github.com/cunyu1943\">https://github.com/cunyu1943</a></li>\n<li>📌 <strong>知乎@村雨遥</strong>：<a href=\"https://www.zhihu.com/people/cunyu1943\">https://www.zhihu.com/people/cunyu1943</a></li>\n<li>📌 <strong>CSDN@村雨遥</strong>：<a href=\"https://blog.csdn.net/github_39655029\">https://blog.csdn.net/github_39655029</a></li>\n<li>📌 <strong>掘金@村雨遥</strong>：<a href=\"https://juejin.cn/user/747323637904519\">https://juejin.cn/user/747323637904519</a></li>\n<li>📌 <strong>牛客@村雨遥</strong>：<a href=\"https://www.nowcoder.com/profile/806383223\">https://www.nowcoder.com/profile/806383223</a></li>\n</ul>\n<h2 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h2><p>网站中的部分文章内容、资源收集自网络，版权归原作者所有，已经尽量标记出来了，但难免有遗漏的地方，如果您觉得侵犯了您的权益，请及时联系我，我将在第一时间处理，不胜感激！</p>\n<p>我的邮箱：<a href=\"mailto:747731461@qq.com\">747731461@qq.com</a></p>\n"},{"title":"分类","date":"2021-01-20T07:21:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-01-20 15:21:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-05-02T06:57:09.861Z","path":"categories/index.html","comments":1,"_id":"cko9sdvyz0006bw34aaln4ngo","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""},{"title":"留言板","date":"2021-05-02T06:59:22.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: 留言板\ndate: 2021-05-02 14:59:22\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-05-02T07:00:14.372Z","path":"contact/index.html","comments":1,"_id":"cko9sdvz20008bw34aw9t27po","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""},{"title":"友链","date":"2021-05-02T06:58:52.000Z","type":"friends","layout":"friends","_content":"## 友链交换\n\n想要交换友链的小伙伴，欢迎添加我的微信【cunyu1024】，然后告知以下信息：\n\n- **名称：** 你的博客名称\n- **地址：** 你的博客地址\n- **简介：** 一句话简介\n- **头像：** 你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里呀！：\n\n- **名称：** 村雨遥\n- **地址：** [https://cunyu1943.site](https://cunyu1943.github.io)\n- **简介：** 公众号【村雨遥】，分享 Java 学习与计算机知识\n- **头像：** [https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png](https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png)","source":"friends/index.md","raw":"---\ntitle: 友链\ndate: 2021-05-02 14:58:52\ntype: \"friends\"\nlayout: \"friends\"\n---\n## 友链交换\n\n想要交换友链的小伙伴，欢迎添加我的微信【cunyu1024】，然后告知以下信息：\n\n- **名称：** 你的博客名称\n- **地址：** 你的博客地址\n- **简介：** 一句话简介\n- **头像：** 你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里呀！：\n\n- **名称：** 村雨遥\n- **地址：** [https://cunyu1943.site](https://cunyu1943.github.io)\n- **简介：** 公众号【村雨遥】，分享 Java 学习与计算机知识\n- **头像：** [https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png](https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png)","updated":"2021-05-02T13:21:48.139Z","path":"friends/index.html","comments":1,"_id":"cko9sdvz4000abw348vxh82o7","content":"<h2 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h2><p>想要交换友链的小伙伴，欢迎添加我的微信【cunyu1024】，然后告知以下信息：</p>\n<ul>\n<li><strong>名称：</strong> 你的博客名称</li>\n<li><strong>地址：</strong> 你的博客地址</li>\n<li><strong>简介：</strong> 一句话简介</li>\n<li><strong>头像：</strong> 你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里呀！：</p>\n<ul>\n<li><strong>名称：</strong> 村雨遥</li>\n<li><strong>地址：</strong> <a href=\"https://cunyu1943.github.io\">https://cunyu1943.site</a></li>\n<li><strong>简介：</strong> 公众号【村雨遥】，分享 Java 学习与计算机知识</li>\n<li><strong>头像：</strong> <a href=\"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\">https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<h2 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h2><p>想要交换友链的小伙伴，欢迎添加我的微信【cunyu1024】，然后告知以下信息：</p>\n<ul>\n<li><strong>名称：</strong> 你的博客名称</li>\n<li><strong>地址：</strong> 你的博客地址</li>\n<li><strong>简介：</strong> 一句话简介</li>\n<li><strong>头像：</strong> 你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里呀！：</p>\n<ul>\n<li><strong>名称：</strong> 村雨遥</li>\n<li><strong>地址：</strong> <a href=\"https://cunyu1943.github.io\">https://cunyu1943.site</a></li>\n<li><strong>简介：</strong> 公众号【村雨遥】，分享 Java 学习与计算机知识</li>\n<li><strong>头像：</strong> <a href=\"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\">https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png</a></li>\n</ul>\n"},{"title":"友链","date":"2021-01-20T07:22:49.000Z","type":"link","comments":0,"_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2021-01-20 15:22:49\ntype: \"link\"\ncomments: false\n---\n","updated":"2021-01-21T12:50:27.283Z","path":"link/index.html","layout":"page","_id":"cko9sdvz9000fbw34hgcu22y3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""},{"title":"留言板","date":"2021-01-21T09:57:46.000Z","type":"message","_content":"\n## **有什麽想説的？**\n\n## **有什麽想問的？**\n\n## **有什麽想吐槽的？**\n\n## **都可以在下面留言...**\n\n---\n\n\n\n## 友链交换\n\n交换友链的朋友们，请先添加我的网站到您的友链，然后在下面留言！留言格式如下：\n\n-   name: 博客名\n-   link: 博客链接\n-   avatar: 博客头像\n-   descr: 博客描述\n\n比如我的信息：\n\n>   -   name: 村雨遥の杂货铺\n>   -   link: https://cunyu1943.site\n>   -   avatar: https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\n>   -   descr: 吾生也有涯，而知也无涯","source":"message/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-21 17:57:46\ntype: 'message'\n---\n\n## **有什麽想説的？**\n\n## **有什麽想問的？**\n\n## **有什麽想吐槽的？**\n\n## **都可以在下面留言...**\n\n---\n\n\n\n## 友链交换\n\n交换友链的朋友们，请先添加我的网站到您的友链，然后在下面留言！留言格式如下：\n\n-   name: 博客名\n-   link: 博客链接\n-   avatar: 博客头像\n-   descr: 博客描述\n\n比如我的信息：\n\n>   -   name: 村雨遥の杂货铺\n>   -   link: https://cunyu1943.site\n>   -   avatar: https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\n>   -   descr: 吾生也有涯，而知也无涯","updated":"2021-01-21T10:06:20.673Z","path":"message/index.html","comments":1,"layout":"page","_id":"cko9sdvzc000hbw340tryfbsk","content":"<h2 id=\"有什麽想説的？\"><a href=\"#有什麽想説的？\" class=\"headerlink\" title=\"有什麽想説的？\"></a><strong>有什麽想説的？</strong></h2><h2 id=\"有什麽想問的？\"><a href=\"#有什麽想問的？\" class=\"headerlink\" title=\"有什麽想問的？\"></a><strong>有什麽想問的？</strong></h2><h2 id=\"有什麽想吐槽的？\"><a href=\"#有什麽想吐槽的？\" class=\"headerlink\" title=\"有什麽想吐槽的？\"></a><strong>有什麽想吐槽的？</strong></h2><h2 id=\"都可以在下面留言…\"><a href=\"#都可以在下面留言…\" class=\"headerlink\" title=\"都可以在下面留言…\"></a><strong>都可以在下面留言…</strong></h2><hr>\n<h2 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h2><p>交换友链的朋友们，请先添加我的网站到您的友链，然后在下面留言！留言格式如下：</p>\n<ul>\n<li>name: 博客名</li>\n<li>link: 博客链接</li>\n<li>avatar: 博客头像</li>\n<li>descr: 博客描述</li>\n</ul>\n<p>比如我的信息：</p>\n<blockquote>\n<ul>\n<li>name: 村雨遥の杂货铺</li>\n<li>link: <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></li>\n<li>avatar: <a href=\"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\">https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png</a></li>\n<li>descr: 吾生也有涯，而知也无涯</li>\n</ul>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<h2 id=\"有什麽想説的？\"><a href=\"#有什麽想説的？\" class=\"headerlink\" title=\"有什麽想説的？\"></a><strong>有什麽想説的？</strong></h2><h2 id=\"有什麽想問的？\"><a href=\"#有什麽想問的？\" class=\"headerlink\" title=\"有什麽想問的？\"></a><strong>有什麽想問的？</strong></h2><h2 id=\"有什麽想吐槽的？\"><a href=\"#有什麽想吐槽的？\" class=\"headerlink\" title=\"有什麽想吐槽的？\"></a><strong>有什麽想吐槽的？</strong></h2><h2 id=\"都可以在下面留言…\"><a href=\"#都可以在下面留言…\" class=\"headerlink\" title=\"都可以在下面留言…\"></a><strong>都可以在下面留言…</strong></h2><hr>\n<h2 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h2><p>交换友链的朋友们，请先添加我的网站到您的友链，然后在下面留言！留言格式如下：</p>\n<ul>\n<li>name: 博客名</li>\n<li>link: 博客链接</li>\n<li>avatar: 博客头像</li>\n<li>descr: 博客描述</li>\n</ul>\n<p>比如我的信息：</p>\n<blockquote>\n<ul>\n<li>name: 村雨遥の杂货铺</li>\n<li>link: <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></li>\n<li>avatar: <a href=\"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png\">https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png</a></li>\n<li>descr: 吾生也有涯，而知也无涯</li>\n</ul>\n</blockquote>\n"},{"title":"导航","date":"2021-05-03T13:16:49.000Z","type":"nav","layout":"nav","_content":"","source":"nav/index.md","raw":"---\ntitle: 导航\ndate: 2021-05-03 21:16:49\ntype: \"nav\"\nlayout: \"nav\"\n---\n","updated":"2021-05-03T13:17:45.784Z","path":"nav/index.html","comments":1,"_id":"cko9sdvzg000mbw34ac38crdf","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""},{"title":"标签","date":"2021-01-20T07:21:16.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-01-20 15:21:16\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-05-02T06:57:01.642Z","path":"tags/index.html","comments":1,"_id":"cko9sdvzj000qbw34hoflc0wm","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":""}],"Post":[{"title":"【Java 从入坑到放弃】No 2. 玩转 IDEA","mathjax":true,"toc":true,"abbrlink":"f88149e6","date":"2021-05-03T07:18:50.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧的神兵利器，能让我们功力大增，大大提高我们的效率。\n\n但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，下面就来进行 IDEA 的安装工作！\n\n\n\n## 2. 安装前的准备工作\n\n开始安装之前，我们需要进行一些准备，首先是 **社区版和旗舰版该选谁**，接着是 **软硬件的支持**。\n\n### 2.1 旗舰版 VS 社区版\n\n对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 **语言支持、框架支持、Build 工具、部署工具、版本控制** 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：**旗舰版收费，而社区版免费**， 所以可以根据自己的需求进行选择。\n\n![](https://img-blog.csdnimg.cn/20200604092817501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### 2.2 软件\n\n- IntelliJ IDEA 安装包，下载地址：https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。\n\n### 2.3 硬件\n\n| 配置项目     | 最低配置                                                     | 推荐配置                                |\n| ------------ | :----------------------------------------------------------- | --------------------------------------- |\n| **内存**     | 2G +                                                         | 8 G +                                   |\n| **硬盘**     | 2.5 GB + 1 GB 缓存                                           | 至少 5GB+ 空间的 SSD                    |\n| **显示器**   | 1024 x 768                                                   | 1920×1080                               |\n| **操作系统** | 官方放出的 64 位操作系统：<br />1. Windows 8 +<br />2. macOS 10.13 +<br />3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br />4. 预览版系统可能支持不好 | 最新的 64 位 Windows、macOS、Linux 系统 |\n\n## 3. 安装工作\n\n### 3.1 Ubuntu\n\n#### 安装\n\n1. 下载安装包，根据自己的需求选择旗舰版或是社区版\n\n![](https://img-blog.csdnimg.cn/img_convert/c8e6ed571070c0f4e901afcabf1bb5dd.png)\n\n2. 将下载好的安装包 `ideaIU-2020.1.1.tar.gz` 移动到平时存放软件的目录下进行解压缩\n\n```shell\ntar -zxvf ideaIU-2020.1.1.tar.gz\n```\n\n![解压](https://img-blog.csdnimg.cn/img_convert/5c9639809d7c328e018fb6b61f61a398.png)\n\n![解压后的目录结构](https://img-blog.csdnimg.cn/img_convert/3d9686b9b627c266902bf8285e6e2070.png)\n\n3. 进入解压后的 `bin` 目录，然后在终端启动如下命令即可：\n\n```shell\n./idea.sh\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7bf398f1e0ffce8f7befe700382cfafd.png)\n\n4. 进入初始化启动后的设置即可。\n\n首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/50c45c95d8a949b84fa2fe9c9cf2610f.png)\n\n接着是否创建启动器脚本，同时选择自己的脚本保存目录\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/ceb4487d5361393427d4042c97eed63b.png)\n\n接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/6a9a3e366d5cb27097bfba77c72525d6.png)\n\n选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/5f82ed4452d9651f332cfdcd59b05534.png)\n\n#### 卸载\n\nLinux 下卸载只需要将对应目录（即刚才解压所后的目录）删除即可。\n\n### 3.2 Windows\n\n#### 安装\n\n安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。\n\n#### 卸载\n\n进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/44bfa0d6b9a4603a36aa97e6541f33fa.png)\n\n\n\n### 3.3 macOS\n\n#### 安装\n\n1.  首先去 [官网下载](https://www.jetbrains.com/idea/download/#section=mac) 对应安装包；\n\n![](https://img-blog.csdnimg.cn/img_convert/4ef290b1d198ca527be68976b2b0d1f9.png)\n\n2.  然后双击下载好的 `.dmg` 安装包，等待验证后拖拽到 `Applications` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/4fe048a188a173cd0af8c6554e9543af.png)\n\n3.  安装成功，打开的主页面如下图所示；\n\n![](https://img-blog.csdnimg.cn/img_convert/03d5e35d96a9d0e58de0417da5fa3904.png)\n\n#### 卸载\n\n打开访达中的 **应用程序**，然后找到 IDEA，将其拖到 **🗑️废纸篓** 即可，也可以单击鼠标右键，然后 **移到废纸篓**；\n\n![](https://img-blog.csdnimg.cn/img_convert/b07e6e7541c46d466b4a7d1ef4b74212.png)\n\n## 4. 创建 Java 项目\n\n1.  依次进入 `File -> New -> Project`，然后选择左侧 Java，配置项目 JDK；\n\n![](https://img-blog.csdnimg.cn/img_convert/96300c4662be3303a16b10a5c9e9f259.png)\n\n2.  下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 `HelloWorld`），不勾选就是一个空项目，看自己选择；\n\n![](https://img-blog.csdnimg.cn/img_convert/1c432029df5d079f9cfe8b8de7e325da.png)\n\n3.  再接下来，就是设置项目名以及项目存储目录了；\n\n![](https://img-blog.csdnimg.cn/img_convert/a736ab37266ffb211c86ae8c9c53426d.png)\n\n4.  最后点击完成，我们的普通 Java 项目就创建成功了；\n\n![](https://img-blog.csdnimg.cn/img_convert/be2c04c4161b0a22a7d8576c7c43988b.png)\n\n5.  项目创建成功了，我们在项目 `src` 目录上右键新建一个 Java 类文件，然后填入如下代码，一个 简单的 `HelloWorld` 就完成了；\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : HelloWorld\n * @date : 2020/10/23 11:14\n * @description : HelloWorld\n */\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/a2e8be34e51c7f05f82d4697003147b8.png)\n\n6.  最后运行结果，可以看到出了 Hello World，和我们在控制台打印出的一样！\n\n```bash\nHello World!\n```\n\n## 5. 总结\n\n今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，然后在不同系统下的以及卸载工作，最后则是给大家演示了如何 IDEA 编写我们的 `Hello World!` 程序，更多关于 IDEA 的使用技巧，我会抽空写一个完整的系列，敬请期待吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/85d2cb9103a5c2b2d328609210c1b113.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-2-玩转-IDEA.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 2. 玩转 IDEA\nmathjax: true\ntoc: true\ncategories:\n  - Java 修炼之路\nabbrlink: f88149e6\ndate: 2021-05-03 15:18:50\ntop:\ntags:\n    - Java\n    - IDEA\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧的神兵利器，能让我们功力大增，大大提高我们的效率。\n\n但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，下面就来进行 IDEA 的安装工作！\n\n\n\n## 2. 安装前的准备工作\n\n开始安装之前，我们需要进行一些准备，首先是 **社区版和旗舰版该选谁**，接着是 **软硬件的支持**。\n\n### 2.1 旗舰版 VS 社区版\n\n对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 **语言支持、框架支持、Build 工具、部署工具、版本控制** 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：**旗舰版收费，而社区版免费**， 所以可以根据自己的需求进行选择。\n\n![](https://img-blog.csdnimg.cn/20200604092817501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### 2.2 软件\n\n- IntelliJ IDEA 安装包，下载地址：https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。\n\n### 2.3 硬件\n\n| 配置项目     | 最低配置                                                     | 推荐配置                                |\n| ------------ | :----------------------------------------------------------- | --------------------------------------- |\n| **内存**     | 2G +                                                         | 8 G +                                   |\n| **硬盘**     | 2.5 GB + 1 GB 缓存                                           | 至少 5GB+ 空间的 SSD                    |\n| **显示器**   | 1024 x 768                                                   | 1920×1080                               |\n| **操作系统** | 官方放出的 64 位操作系统：<br />1. Windows 8 +<br />2. macOS 10.13 +<br />3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br />4. 预览版系统可能支持不好 | 最新的 64 位 Windows、macOS、Linux 系统 |\n\n## 3. 安装工作\n\n### 3.1 Ubuntu\n\n#### 安装\n\n1. 下载安装包，根据自己的需求选择旗舰版或是社区版\n\n![](https://img-blog.csdnimg.cn/img_convert/c8e6ed571070c0f4e901afcabf1bb5dd.png)\n\n2. 将下载好的安装包 `ideaIU-2020.1.1.tar.gz` 移动到平时存放软件的目录下进行解压缩\n\n```shell\ntar -zxvf ideaIU-2020.1.1.tar.gz\n```\n\n![解压](https://img-blog.csdnimg.cn/img_convert/5c9639809d7c328e018fb6b61f61a398.png)\n\n![解压后的目录结构](https://img-blog.csdnimg.cn/img_convert/3d9686b9b627c266902bf8285e6e2070.png)\n\n3. 进入解压后的 `bin` 目录，然后在终端启动如下命令即可：\n\n```shell\n./idea.sh\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7bf398f1e0ffce8f7befe700382cfafd.png)\n\n4. 进入初始化启动后的设置即可。\n\n首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/50c45c95d8a949b84fa2fe9c9cf2610f.png)\n\n接着是否创建启动器脚本，同时选择自己的脚本保存目录\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/ceb4487d5361393427d4042c97eed63b.png)\n\n接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/6a9a3e366d5cb27097bfba77c72525d6.png)\n\n选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装\n\n![图片源自 IDEA 官网](https://img-blog.csdnimg.cn/img_convert/5f82ed4452d9651f332cfdcd59b05534.png)\n\n#### 卸载\n\nLinux 下卸载只需要将对应目录（即刚才解压所后的目录）删除即可。\n\n### 3.2 Windows\n\n#### 安装\n\n安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。\n\n#### 卸载\n\n进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/44bfa0d6b9a4603a36aa97e6541f33fa.png)\n\n\n\n### 3.3 macOS\n\n#### 安装\n\n1.  首先去 [官网下载](https://www.jetbrains.com/idea/download/#section=mac) 对应安装包；\n\n![](https://img-blog.csdnimg.cn/img_convert/4ef290b1d198ca527be68976b2b0d1f9.png)\n\n2.  然后双击下载好的 `.dmg` 安装包，等待验证后拖拽到 `Applications` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/4fe048a188a173cd0af8c6554e9543af.png)\n\n3.  安装成功，打开的主页面如下图所示；\n\n![](https://img-blog.csdnimg.cn/img_convert/03d5e35d96a9d0e58de0417da5fa3904.png)\n\n#### 卸载\n\n打开访达中的 **应用程序**，然后找到 IDEA，将其拖到 **🗑️废纸篓** 即可，也可以单击鼠标右键，然后 **移到废纸篓**；\n\n![](https://img-blog.csdnimg.cn/img_convert/b07e6e7541c46d466b4a7d1ef4b74212.png)\n\n## 4. 创建 Java 项目\n\n1.  依次进入 `File -> New -> Project`，然后选择左侧 Java，配置项目 JDK；\n\n![](https://img-blog.csdnimg.cn/img_convert/96300c4662be3303a16b10a5c9e9f259.png)\n\n2.  下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 `HelloWorld`），不勾选就是一个空项目，看自己选择；\n\n![](https://img-blog.csdnimg.cn/img_convert/1c432029df5d079f9cfe8b8de7e325da.png)\n\n3.  再接下来，就是设置项目名以及项目存储目录了；\n\n![](https://img-blog.csdnimg.cn/img_convert/a736ab37266ffb211c86ae8c9c53426d.png)\n\n4.  最后点击完成，我们的普通 Java 项目就创建成功了；\n\n![](https://img-blog.csdnimg.cn/img_convert/be2c04c4161b0a22a7d8576c7c43988b.png)\n\n5.  项目创建成功了，我们在项目 `src` 目录上右键新建一个 Java 类文件，然后填入如下代码，一个 简单的 `HelloWorld` 就完成了；\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : HelloWorld\n * @date : 2020/10/23 11:14\n * @description : HelloWorld\n */\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/a2e8be34e51c7f05f82d4697003147b8.png)\n\n6.  最后运行结果，可以看到出了 Hello World，和我们在控制台打印出的一样！\n\n```bash\nHello World!\n```\n\n## 5. 总结\n\n今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，然后在不同系统下的以及卸载工作，最后则是给大家演示了如何 IDEA 编写我们的 `Hello World!` 程序，更多关于 IDEA 的使用技巧，我会抽空写一个完整的系列，敬请期待吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/85d2cb9103a5c2b2d328609210c1b113.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-2-玩转-IDEA","published":1,"updated":"2021-05-03T07:22:11.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvyo0001bw34cakb5jjc","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧的神兵利器，能让我们功力大增，大大提高我们的效率。</p>\n<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，下面就来进行 IDEA 的安装工作！</p>\n<h2 id=\"2-安装前的准备工作\"><a href=\"#2-安装前的准备工作\" class=\"headerlink\" title=\"2. 安装前的准备工作\"></a>2. 安装前的准备工作</h2><p>开始安装之前，我们需要进行一些准备，首先是 <strong>社区版和旗舰版该选谁</strong>，接着是 <strong>软硬件的支持</strong>。</p>\n<h3 id=\"2-1-旗舰版-VS-社区版\"><a href=\"#2-1-旗舰版-VS-社区版\" class=\"headerlink\" title=\"2.1 旗舰版 VS 社区版\"></a>2.1 旗舰版 VS 社区版</h3><p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200604092817501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"2-2-软件\"><a href=\"#2-2-软件\" class=\"headerlink\" title=\"2.2 软件\"></a>2.2 软件</h3><ul>\n<li>IntelliJ IDEA 安装包，下载地址：<a href=\"https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。\">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>\n</ul>\n<h3 id=\"2-3-硬件\"><a href=\"#2-3-硬件\" class=\"headerlink\" title=\"2.3 硬件\"></a>2.3 硬件</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置项目</th>\n<th style=\"text-align:left\">最低配置</th>\n<th>推荐配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>内存</strong></td>\n<td style=\"text-align:left\">2G +</td>\n<td>8 G +</td>\n</tr>\n<tr>\n<td><strong>硬盘</strong></td>\n<td style=\"text-align:left\">2.5 GB + 1 GB 缓存</td>\n<td>至少 5GB+ 空间的 SSD</td>\n</tr>\n<tr>\n<td><strong>显示器</strong></td>\n<td style=\"text-align:left\">1024 x 768</td>\n<td>1920×1080</td>\n</tr>\n<tr>\n<td><strong>操作系统</strong></td>\n<td style=\"text-align:left\">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>\n<td>最新的 64 位 Windows、macOS、Linux 系统</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-安装工作\"><a href=\"#3-安装工作\" class=\"headerlink\" title=\"3. 安装工作\"></a>3. 安装工作</h2><h3 id=\"3-1-Ubuntu\"><a href=\"#3-1-Ubuntu\" class=\"headerlink\" title=\"3.1 Ubuntu\"></a>3.1 Ubuntu</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c8e6ed571070c0f4e901afcabf1bb5dd.png\" alt=\"\"></p>\n<ol>\n<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf ideaIU-2020.1.1.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c9639809d7c328e018fb6b61f61a398.png\" alt=\"解压\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3d9686b9b627c266902bf8285e6e2070.png\" alt=\"解压后的目录结构\"></p>\n<ol>\n<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">./idea.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7bf398f1e0ffce8f7befe700382cfafd.png\" alt=\"\"></p>\n<ol>\n<li>进入初始化启动后的设置即可。</li>\n</ol>\n<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/50c45c95d8a949b84fa2fe9c9cf2610f.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ceb4487d5361393427d4042c97eed63b.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6a9a3e366d5cb27097bfba77c72525d6.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f82ed4452d9651f332cfdcd59b05534.png\" alt=\"图片源自 IDEA 官网\"></p>\n<h4 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>Linux 下卸载只需要将对应目录（即刚才解压所后的目录）删除即可。</p>\n<h3 id=\"3-2-Windows\"><a href=\"#3-2-Windows\" class=\"headerlink\" title=\"3.2 Windows\"></a>3.2 Windows</h3><h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>\n<h4 id=\"卸载-1\"><a href=\"#卸载-1\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44bfa0d6b9a4603a36aa97e6541f33fa.png\" alt=\"\"></p>\n<h3 id=\"3-3-macOS\"><a href=\"#3-3-macOS\" class=\"headerlink\" title=\"3.3 macOS\"></a>3.3 macOS</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li>首先去 <a href=\"https://www.jetbrains.com/idea/download/#section=mac\">官网下载</a> 对应安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ef290b1d198ca527be68976b2b0d1f9.png\" alt=\"\"></p>\n<ol>\n<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4fe048a188a173cd0af8c6554e9543af.png\" alt=\"\"></p>\n<ol>\n<li>安装成功，打开的主页面如下图所示；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/03d5e35d96a9d0e58de0417da5fa3904.png\" alt=\"\"></p>\n<h4 id=\"卸载-2\"><a href=\"#卸载-2\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b07e6e7541c46d466b4a7d1ef4b74212.png\" alt=\"\"></p>\n<h2 id=\"4-创建-Java-项目\"><a href=\"#4-创建-Java-项目\" class=\"headerlink\" title=\"4. 创建 Java 项目\"></a>4. 创建 Java 项目</h2><ol>\n<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/96300c4662be3303a16b10a5c9e9f259.png\" alt=\"\"></p>\n<ol>\n<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1c432029df5d079f9cfe8b8de7e325da.png\" alt=\"\"></p>\n<ol>\n<li>再接下来，就是设置项目名以及项目存储目录了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a736ab37266ffb211c86ae8c9c53426d.png\" alt=\"\"></p>\n<ol>\n<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be2c04c4161b0a22a7d8576c7c43988b.png\" alt=\"\"></p>\n<ol>\n<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件，然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : HelloWorld\n * @date : 2020/10/23 11:14\n * @description : HelloWorld\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2e8be34e51c7f05f82d4697003147b8.png\" alt=\"\"></p>\n<ol>\n<li>最后运行结果，可以看到出了 Hello World，和我们在控制台打印出的一样！</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，然后在不同系统下的以及卸载工作，最后则是给大家演示了如何 IDEA 编写我们的 <code>Hello World!</code> 程序，更多关于 IDEA 的使用技巧，我会抽空写一个完整的系列，敬请期待吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/85d2cb9103a5c2b2d328609210c1b113.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧的神兵利器，能让我们功力大增，大大提高我们的效率。</p>\n<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，下面就来进行 IDEA 的安装工作！</p>\n<h2 id=\"2-安装前的准备工作\"><a href=\"#2-安装前的准备工作\" class=\"headerlink\" title=\"2. 安装前的准备工作\"></a>2. 安装前的准备工作</h2><p>开始安装之前，我们需要进行一些准备，首先是 <strong>社区版和旗舰版该选谁</strong>，接着是 <strong>软硬件的支持</strong>。</p>\n<h3 id=\"2-1-旗舰版-VS-社区版\"><a href=\"#2-1-旗舰版-VS-社区版\" class=\"headerlink\" title=\"2.1 旗舰版 VS 社区版\"></a>2.1 旗舰版 VS 社区版</h3><p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200604092817501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"2-2-软件\"><a href=\"#2-2-软件\" class=\"headerlink\" title=\"2.2 软件\"></a>2.2 软件</h3><ul>\n<li>IntelliJ IDEA 安装包，下载地址：<a href=\"https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。\">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>\n</ul>\n<h3 id=\"2-3-硬件\"><a href=\"#2-3-硬件\" class=\"headerlink\" title=\"2.3 硬件\"></a>2.3 硬件</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置项目</th>\n<th style=\"text-align:left\">最低配置</th>\n<th>推荐配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>内存</strong></td>\n<td style=\"text-align:left\">2G +</td>\n<td>8 G +</td>\n</tr>\n<tr>\n<td><strong>硬盘</strong></td>\n<td style=\"text-align:left\">2.5 GB + 1 GB 缓存</td>\n<td>至少 5GB+ 空间的 SSD</td>\n</tr>\n<tr>\n<td><strong>显示器</strong></td>\n<td style=\"text-align:left\">1024 x 768</td>\n<td>1920×1080</td>\n</tr>\n<tr>\n<td><strong>操作系统</strong></td>\n<td style=\"text-align:left\">官方放出的 64 位操作系统：<br />1. Windows 8 +<br />2. macOS 10.13 +<br />3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br />4. 预览版系统可能支持不好</td>\n<td>最新的 64 位 Windows、macOS、Linux 系统</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-安装工作\"><a href=\"#3-安装工作\" class=\"headerlink\" title=\"3. 安装工作\"></a>3. 安装工作</h2><h3 id=\"3-1-Ubuntu\"><a href=\"#3-1-Ubuntu\" class=\"headerlink\" title=\"3.1 Ubuntu\"></a>3.1 Ubuntu</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c8e6ed571070c0f4e901afcabf1bb5dd.png\" alt=\"\"></p>\n<ol>\n<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf ideaIU-2020.1.1.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c9639809d7c328e018fb6b61f61a398.png\" alt=\"解压\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3d9686b9b627c266902bf8285e6e2070.png\" alt=\"解压后的目录结构\"></p>\n<ol>\n<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;idea.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7bf398f1e0ffce8f7befe700382cfafd.png\" alt=\"\"></p>\n<ol>\n<li>进入初始化启动后的设置即可。</li>\n</ol>\n<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/50c45c95d8a949b84fa2fe9c9cf2610f.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ceb4487d5361393427d4042c97eed63b.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6a9a3e366d5cb27097bfba77c72525d6.png\" alt=\"图片源自 IDEA 官网\"></p>\n<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f82ed4452d9651f332cfdcd59b05534.png\" alt=\"图片源自 IDEA 官网\"></p>\n<h4 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>Linux 下卸载只需要将对应目录（即刚才解压所后的目录）删除即可。</p>\n<h3 id=\"3-2-Windows\"><a href=\"#3-2-Windows\" class=\"headerlink\" title=\"3.2 Windows\"></a>3.2 Windows</h3><h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>\n<h4 id=\"卸载-1\"><a href=\"#卸载-1\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44bfa0d6b9a4603a36aa97e6541f33fa.png\" alt=\"\"></p>\n<h3 id=\"3-3-macOS\"><a href=\"#3-3-macOS\" class=\"headerlink\" title=\"3.3 macOS\"></a>3.3 macOS</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li>首先去 <a href=\"https://www.jetbrains.com/idea/download/#section=mac\">官网下载</a> 对应安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ef290b1d198ca527be68976b2b0d1f9.png\" alt=\"\"></p>\n<ol>\n<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4fe048a188a173cd0af8c6554e9543af.png\" alt=\"\"></p>\n<ol>\n<li>安装成功，打开的主页面如下图所示；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/03d5e35d96a9d0e58de0417da5fa3904.png\" alt=\"\"></p>\n<h4 id=\"卸载-2\"><a href=\"#卸载-2\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b07e6e7541c46d466b4a7d1ef4b74212.png\" alt=\"\"></p>\n<h2 id=\"4-创建-Java-项目\"><a href=\"#4-创建-Java-项目\" class=\"headerlink\" title=\"4. 创建 Java 项目\"></a>4. 创建 Java 项目</h2><ol>\n<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/96300c4662be3303a16b10a5c9e9f259.png\" alt=\"\"></p>\n<ol>\n<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1c432029df5d079f9cfe8b8de7e325da.png\" alt=\"\"></p>\n<ol>\n<li>再接下来，就是设置项目名以及项目存储目录了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a736ab37266ffb211c86ae8c9c53426d.png\" alt=\"\"></p>\n<ol>\n<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be2c04c4161b0a22a7d8576c7c43988b.png\" alt=\"\"></p>\n<ol>\n<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件，然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : HelloWorld\n * @date : 2020/10/23 11:14\n * @description : HelloWorld\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2e8be34e51c7f05f82d4697003147b8.png\" alt=\"\"></p>\n<ol>\n<li>最后运行结果，可以看到出了 Hello World，和我们在控制台打印出的一样！</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，然后在不同系统下的以及卸载工作，最后则是给大家演示了如何 IDEA 编写我们的 <code>Hello World!</code> 程序，更多关于 IDEA 的使用技巧，我会抽空写一个完整的系列，敬请期待吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/85d2cb9103a5c2b2d328609210c1b113.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】No 1. Java 开发环境搭建","mathjax":true,"toc":true,"abbrlink":"564e36a8","date":"2021-05-03T07:18:39.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；\n\n## 2. 下载并安装 JDK\n\n### 2.1 Windows\n\n#### 2.1.1 安装\n\n1.  首先进入  [Oracle 官网](https://www.oracle.com/java/technologies/javase-downloads.html)，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；\n\n![](https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png)\n\n2.  点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；\n\n![](https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png)\n\n3.  点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png)\n\n4.  下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；\n\n\n![](https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png)\n\n#### 2.1.2  配置 JDK\n\n好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；\n\n打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：\n\n1.  **Windows + R**  快捷键组合唤醒 Windows 运行窗口，然后输入 `sysdm.cpl`，紧接着回车即可，一般会打开如下界面，然后点击最上方的 **高级**；\n\n![](https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png)\n\n2.  点击高级后，就会打开如下界面，然后打开环境变量；\n\n\n![](https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png)\n3.  新建环境变量 **JAVA_HOME**，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；\n\n![](https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png)\n\n4.  编辑 **Path** 环境变量，然后新建一个变量值，填入如下内容：`%JAVA_HOME%\\bin`；\n\n![](https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png)\n\n\n5.  各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；\n\n\n\n#### 2.1.3 验证 JDK\n\n按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；\n\n```bash\n# 查看 JDK 版本\njava -version\n\n# 编译命令\njavac\n\n# 运行命令\njava\n```\n\n打开命令控制台（**Windows + R，然后输入 cmd 回车**），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；\n\n![](https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png)\n\n\n\n\n\n### 2.2 macOS\n\n#### 2.2.1 安装\n\n1.  首先去 [官网下载](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 对应安装包；\n\n![](https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png)\n\n2.  接受相关协议并登录下载；\n\n![](https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png)\n\n3.  双击下载好的 `.dmg` 安装包，然后开始安装；\n\n![](https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png)\n\n4.  安装过程中会让你输入密码，也就是你本机的秘密；\n\n![](https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png)\n\n5.  安装成功；\n\n![](https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png)\n\n#### 2.2.2 验证\n\n不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；\n\n1.  查看 JDK 版本；\n\n```bash\njava -version\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png)\n\n2.  编译命令；\n\n![](https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png)\n\n3.  运行命令；\n\n![](https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png)\n\n## 3. 你的第一个 Java程序：HelloWorld\n\n好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：\n\n1.  打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 `Main.java`；\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n2.  打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 `Main.class` 文件；\n\n```bash\njavac Main.java\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png)\n\n3.  运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！\n\n```bash\njava Main\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png)\n\n## 4. 知识点说明\n\n我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n完整的程序代码如上：\n\n-   `public`：权限修饰符，表示这一个可以公开访问的类，类似的还有 `protected、default、private`，后续学习过程中再一一介绍；\n-   `class`：Java 关键字，表示这是一个类；\n-   `Main`： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 `Main.java` 改成其他名字，你看看是不是还能编译成功呢？\n-   `public static void main(String[] args){}`：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 `main` 方法；\n-   `System.out.println(\"Hello World!\")`：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 `\"\"` 括起来，你可以把其中的 `Hello Wolrd!` 换成你想要打印的内容试试看；\n\n## 5. 总结\n\n好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 `Hello World` 程序。最后，则是对我们的 `Hello World` 程序中的相关知识进行了介绍。\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-1-Java-开发环境搭建.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 1. Java 开发环境搭建\nmathjax: true\ntoc: true\ntags:\n  - Java\ncategories:\n  - Java 修炼之路\nabbrlink: 564e36a8\ndate: 2021-05-03 15:18:39\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；\n\n## 2. 下载并安装 JDK\n\n### 2.1 Windows\n\n#### 2.1.1 安装\n\n1.  首先进入  [Oracle 官网](https://www.oracle.com/java/technologies/javase-downloads.html)，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；\n\n![](https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png)\n\n2.  点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；\n\n![](https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png)\n\n3.  点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png)\n\n4.  下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；\n\n\n![](https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png)\n\n#### 2.1.2  配置 JDK\n\n好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；\n\n打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：\n\n1.  **Windows + R**  快捷键组合唤醒 Windows 运行窗口，然后输入 `sysdm.cpl`，紧接着回车即可，一般会打开如下界面，然后点击最上方的 **高级**；\n\n![](https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png)\n\n2.  点击高级后，就会打开如下界面，然后打开环境变量；\n\n\n![](https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png)\n3.  新建环境变量 **JAVA_HOME**，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；\n\n![](https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png)\n\n4.  编辑 **Path** 环境变量，然后新建一个变量值，填入如下内容：`%JAVA_HOME%\\bin`；\n\n![](https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png)\n\n\n5.  各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；\n\n\n\n#### 2.1.3 验证 JDK\n\n按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；\n\n```bash\n# 查看 JDK 版本\njava -version\n\n# 编译命令\njavac\n\n# 运行命令\njava\n```\n\n打开命令控制台（**Windows + R，然后输入 cmd 回车**），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；\n\n![](https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png)\n\n\n\n\n\n### 2.2 macOS\n\n#### 2.2.1 安装\n\n1.  首先去 [官网下载](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 对应安装包；\n\n![](https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png)\n\n2.  接受相关协议并登录下载；\n\n![](https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png)\n\n3.  双击下载好的 `.dmg` 安装包，然后开始安装；\n\n![](https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png)\n\n4.  安装过程中会让你输入密码，也就是你本机的秘密；\n\n![](https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png)\n\n5.  安装成功；\n\n![](https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png)\n\n#### 2.2.2 验证\n\n不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；\n\n1.  查看 JDK 版本；\n\n```bash\njava -version\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png)\n\n2.  编译命令；\n\n![](https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png)\n\n3.  运行命令；\n\n![](https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png)\n\n## 3. 你的第一个 Java程序：HelloWorld\n\n好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：\n\n1.  打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 `Main.java`；\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n2.  打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 `Main.class` 文件；\n\n```bash\njavac Main.java\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png)\n\n3.  运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！\n\n```bash\njava Main\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png)\n\n## 4. 知识点说明\n\n我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n完整的程序代码如上：\n\n-   `public`：权限修饰符，表示这一个可以公开访问的类，类似的还有 `protected、default、private`，后续学习过程中再一一介绍；\n-   `class`：Java 关键字，表示这是一个类；\n-   `Main`： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 `Main.java` 改成其他名字，你看看是不是还能编译成功呢？\n-   `public static void main(String[] args){}`：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 `main` 方法；\n-   `System.out.println(\"Hello World!\")`：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 `\"\"` 括起来，你可以把其中的 `Hello Wolrd!` 换成你想要打印的内容试试看；\n\n## 5. 总结\n\n好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 `Hello World` 程序。最后，则是对我们的 `Hello World` 程序中的相关知识进行了介绍。\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-1-Java-开发环境搭建","published":1,"updated":"2021-05-03T07:21:10.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvyt0003bw34hlk9bcmc","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；</p>\n<h2 id=\"2-下载并安装-JDK\"><a href=\"#2-下载并安装-JDK\" class=\"headerlink\" title=\"2. 下载并安装 JDK\"></a>2. 下载并安装 JDK</h2><h3 id=\"2-1-Windows\"><a href=\"#2-1-Windows\" class=\"headerlink\" title=\"2.1 Windows\"></a>2.1 Windows</h3><h4 id=\"2-1-1-安装\"><a href=\"#2-1-1-安装\" class=\"headerlink\" title=\"2.1.1 安装\"></a>2.1.1 安装</h4><ol>\n<li>首先进入  <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png\" alt=\"\"></p>\n<ol>\n<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png\" alt=\"\"></p>\n<ol>\n<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png\" alt=\"\"></p>\n<ol>\n<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png\" alt=\"\"></p>\n<h4 id=\"2-1-2-配置-JDK\"><a href=\"#2-1-2-配置-JDK\" class=\"headerlink\" title=\"2.1.2  配置 JDK\"></a>2.1.2  配置 JDK</h4><p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>\n<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>\n<ol>\n<li><strong>Windows + R</strong>  快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png\" alt=\"\"></p>\n<ol>\n<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png\" alt=\"\"></p>\n<ol>\n<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png\" alt=\"\"></p>\n<ol>\n<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\\bin</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png\" alt=\"\"></p>\n<ol>\n<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>\n</ol>\n<h4 id=\"2-1-3-验证-JDK\"><a href=\"#2-1-3-验证-JDK\" class=\"headerlink\" title=\"2.1.3 验证 JDK\"></a>2.1.3 验证 JDK</h4><p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 JDK 版本</span>\njava -version\n\n<span class=\"token comment\"># 编译命令</span>\njavac\n\n<span class=\"token comment\"># 运行命令</span>\njava<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png\" alt=\"\"></p>\n<h3 id=\"2-2-macOS\"><a href=\"#2-2-macOS\" class=\"headerlink\" title=\"2.2 macOS\"></a>2.2 macOS</h3><h4 id=\"2-2-1-安装\"><a href=\"#2-2-1-安装\" class=\"headerlink\" title=\"2.2.1 安装\"></a>2.2.1 安装</h4><ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\">官网下载</a> 对应安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png\" alt=\"\"></p>\n<ol>\n<li>接受相关协议并登录下载；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png\" alt=\"\"></p>\n<ol>\n<li>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png\" alt=\"\"></p>\n<ol>\n<li>安装过程中会让你输入密码，也就是你本机的秘密；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png\" alt=\"\"></p>\n<ol>\n<li>安装成功；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-验证\"><a href=\"#2-2-2-验证\" class=\"headerlink\" title=\"2.2.2 验证\"></a>2.2.2 验证</h4><p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>\n<ol>\n<li>查看 JDK 版本；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png\" alt=\"\"></p>\n<ol>\n<li>编译命令；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png\" alt=\"\"></p>\n<ol>\n<li>运行命令；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png\" alt=\"\"></p>\n<h2 id=\"3-你的第一个-Java程序：HelloWorld\"><a href=\"#3-你的第一个-Java程序：HelloWorld\" class=\"headerlink\" title=\"3. 你的第一个 Java程序：HelloWorld\"></a>3. 你的第一个 Java程序：HelloWorld</h2><p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：</p>\n<ol>\n<li>打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">javac Main.java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png\" alt=\"\"></p>\n<ol>\n<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java Main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png\" alt=\"\"></p>\n<h2 id=\"4-知识点说明\"><a href=\"#4-知识点说明\" class=\"headerlink\" title=\"4. 知识点说明\"></a>4. 知识点说明</h2><p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整的程序代码如上：</p>\n<ul>\n<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>\n<li><code>class</code>：Java 关键字，表示这是一个类；</li>\n<li><code>Main</code>： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>\n<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>\n<li><code>System.out.println(\"Hello World!\")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>\"\"</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看；</li>\n</ul>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 <code>Hello World</code> 程序。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>要进行 Java 开发，那怎么能少得了 JDK 呢，那么就首先来教大家如何安装并配置 JDK；</p>\n<h2 id=\"2-下载并安装-JDK\"><a href=\"#2-下载并安装-JDK\" class=\"headerlink\" title=\"2. 下载并安装 JDK\"></a>2. 下载并安装 JDK</h2><h3 id=\"2-1-Windows\"><a href=\"#2-1-Windows\" class=\"headerlink\" title=\"2.1 Windows\"></a>2.1 Windows</h3><h4 id=\"2-1-1-安装\"><a href=\"#2-1-1-安装\" class=\"headerlink\" title=\"2.1.1 安装\"></a>2.1.1 安装</h4><ol>\n<li>首先进入  <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e0f644ac6dc11c0aad90950033f1ae9c.png\" alt=\"\"></p>\n<ol>\n<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b434fc59fc0db7b731efe183c785e5b2.png\" alt=\"\"></p>\n<ol>\n<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/df34758789f8162b21e126dde9c857a8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a52c51e77e39fff25acb7d4f619d5a64.png\" alt=\"\"></p>\n<ol>\n<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就不再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21aac5438217aba471cecb3b9c62ce8b.png\" alt=\"\"></p>\n<h4 id=\"2-1-2-配置-JDK\"><a href=\"#2-1-2-配置-JDK\" class=\"headerlink\" title=\"2.1.2  配置 JDK\"></a>2.1.2  配置 JDK</h4><p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>\n<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>\n<ol>\n<li><strong>Windows + R</strong>  快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1268d2679c0f59a877a167804b5e92fc.png\" alt=\"\"></p>\n<ol>\n<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6d1248017060238da834ebb76dde598.png\" alt=\"\"></p>\n<ol>\n<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f099376b3dc6464825053b8ff6d9d0d.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0c5bd96f68d6b380828ec2c18544c7fe.png\" alt=\"\"></p>\n<ol>\n<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\\bin</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e48caa51ec79038bd22c82b0aae616f6.png\" alt=\"\"></p>\n<ol>\n<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>\n</ol>\n<h4 id=\"2-1-3-验证-JDK\"><a href=\"#2-1-3-验证-JDK\" class=\"headerlink\" title=\"2.1.3 验证 JDK\"></a>2.1.3 验证 JDK</h4><p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 JDK 版本</span>\njava -version\n\n<span class=\"token comment\"># 编译命令</span>\njavac\n\n<span class=\"token comment\"># 运行命令</span>\njava<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/389fee69f4cfbba0de01137e77a817f8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e9b89e4068316fc20ae2553813b83075.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ceaa12cd2523d3ea3e96defea9fbd8e1.png\" alt=\"\"></p>\n<h3 id=\"2-2-macOS\"><a href=\"#2-2-macOS\" class=\"headerlink\" title=\"2.2 macOS\"></a>2.2 macOS</h3><h4 id=\"2-2-1-安装\"><a href=\"#2-2-1-安装\" class=\"headerlink\" title=\"2.2.1 安装\"></a>2.2.1 安装</h4><ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\">官网下载</a> 对应安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/05375fdb50e8a131d939192b67508871.png\" alt=\"\"></p>\n<ol>\n<li>接受相关协议并登录下载；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c98fde365fa3703b1defc363ab9bb1a6.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bcd00cd812ef7035ce24a4bb9b8c3082.png\" alt=\"\"></p>\n<ol>\n<li>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/305a9616bd833106e93cbc7a4cb58e57.png\" alt=\"\"></p>\n<ol>\n<li>安装过程中会让你输入密码，也就是你本机的秘密；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2f86de8bd7cab234fd2f1cc3bbde6660.png\" alt=\"\"></p>\n<ol>\n<li>安装成功；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d021a88d58cd2e14202014fd3766e3ec.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-验证\"><a href=\"#2-2-2-验证\" class=\"headerlink\" title=\"2.2.2 验证\"></a>2.2.2 验证</h4><p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>\n<ol>\n<li>查看 JDK 版本；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9ac7a39c9c0706fd11943f1fab98144e.png\" alt=\"\"></p>\n<ol>\n<li>编译命令；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fd382f325012a601e719bb3217bd2be5.png\" alt=\"\"></p>\n<ol>\n<li>运行命令；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ccd1031edf48f255964bfa5ee8d74584.png\" alt=\"\"></p>\n<h2 id=\"3-你的第一个-Java程序：HelloWorld\"><a href=\"#3-你的第一个-Java程序：HelloWorld\" class=\"headerlink\" title=\"3. 你的第一个 Java程序：HelloWorld\"></a>3. 你的第一个 Java程序：HelloWorld</h2><p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了，我们不需要任何的基础，只需要你按照上面的步骤配置好 JDK，就可以了，下面就来具体实践：</p>\n<ol>\n<li>打开的编辑器（推荐 VS Code），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">javac Main.java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/273c3a587a1de7098a4a3ae1b60eb2e4.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/88d272607c243733168f3cb18a26afee.png\" alt=\"\"></p>\n<ol>\n<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java Main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d4797369ca28be9d523f5977b98d0e3e.png\" alt=\"\"></p>\n<h2 id=\"4-知识点说明\"><a href=\"#4-知识点说明\" class=\"headerlink\" title=\"4. 知识点说明\"></a>4. 知识点说明</h2><p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整的程序代码如上：</p>\n<ul>\n<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>\n<li><code>class</code>：Java 关键字，表示这是一个类；</li>\n<li><code>Main</code>： 表示我们的类名，在保存时文件要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>\n<li><code>public static void main(String[] args)&#123;&#125;</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>\n<li><code>System.out.println(&quot;Hello World!&quot;)</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>&quot;&quot;</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看；</li>\n</ul>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，以及如何写我们的第一个 <code>Hello World</code> 程序。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】No 4. 操作符","mathjax":true,"toc":true,"abbrlink":"bb695896","date":"2021-05-03T07:19:12.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n[上一篇文章](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247493124&idx=1&sn=4290091f2c5beb706f7ad98a465df3ea&chksm=e87b9272df0c1b64ef67cda2c9fed9c1e2328d48b6bf7ac13cb6471b9f315934d81d74c1a3e5#rd) 中介绍了 Java 变量和数据类型，那么如何对他们进行运行算呢？这一节就来看看 Java 中的运算！\n\n本文主要内容：\n\n-   **算术运算符**\n-   **关系运算符**\n-   **位运算符**\n-   **逻辑运算符**\n-   **赋值运算符**\n-   **条件运算符**\n\n好了，话不多说，开始正式内容吧！\n\n## 算术运算符\n\n常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。\n\n| 操作符 | 描述                              |\n| :----- | :-------------------------------- |\n| `+`    | 加法 - 相加运算符两侧的值         |\n| `-`    | 减法 - 左操作数减去右操作数       |\n| `*`    | 乘法 - 相乘操作符两侧的值         |\n| `/`    | 除法 - 左操作数除以右操作数       |\n| `％`   | 取余 - 左操作数除以右操作数的余数 |\n| `++`   | 自增: 操作数的值增加1             |\n| `--`   | 自减: 操作数的值减少1             |\n\n**注意**：`++` 和 `--` 可以放在操作数之前，也可以放在操作数之后；**位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减**；总结起来就是 **符号在前就先加/减，符号在后就后加/减**。\n\n以下是部分算术运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:43\n * @description : 算术运算符演示\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 20;\n        int num3 = 30;\n        int num4 = 40;\n\n        System.out.println(\"num1 + num2 = \" + (num1 + num2));\n        System.out.println(\"num1 - num2 = \" + (num1 - num2));\n        System.out.println(\"num1 * num2 = \" + (num1 * num2));\n        System.out.println(\"num2 / num1 = \" + (num2 / num1));\n        System.out.println(\"num2 % num1 = \" + (num2 % num1));\n        System.out.println(\"num3 % num1 = \" + (num3 % num1));\n        System.out.println(\"num1++   = \" + (num1++));\n        System.out.println(\"num1--   = \" + (num1--));\n        // 查看 ++ 在操作数前后位置时结果的不同\n        System.out.println(\"num4++   = \" + (num4++));\n        System.out.println(\"++num4   = \" + (++num4));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/3626246f49b35364868db82aa3a1f8f4.png)\n\n## 关系运算符\n\n关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：\n\n| 运算符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `==`   | 检查如果两个操作数的值是否相等，如果相等则条件为真           |\n| `!=`   | 检查如果两个操作数的值是否相等，如果值不相等则条件为真       |\n| `> `   | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真     |\n| `< `   | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真     |\n| `>=`   | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真 |\n| `<=`   | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真 |\n\n以下是部分关系运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:45\n * @description : 关系运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 100;\n        int num2 = 220;\n\n\n        System.out.println(\"num1 == num2 = \" + (num1 == num2));\n        System.out.println(\"num1 != num2 = \" + (num1 != num2));\n        System.out.println(\"num1 > num2 = \" + (num1 > num2));\n        System.out.println(\"num2 < num1 = \" + (num2 < num1));\n        System.out.println(\"num2 <= num1 = \" + (num2 <= num1));\n        System.out.println(\"num2 >= num1 = \" + (num2 >= num1));\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/6145a306c72c0f0be11d984aa7097b6e.png)\n\n## 位运算符\n\n位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：\n\n| 操作符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| `＆`   | 如果相对应位都是 1，则结果为 1，否则为 0                     |\n| `|`    | 如果相对应位都是 0，则结果为 0，否则为 1                     |\n| `^`    | 如果相对应位值相同，则结果为 0，否则为 1                     |\n| `〜`   | 按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0      |\n| `<<`   | 按位左移运算符。左操作数按位左移右操作数指定的位数           |\n| `>>`   | 按位右移运算符。左操作数按位右移右操作数指定的位数           |\n| `>>>`  | 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充 |\n\n以下是部分位运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:02\n * @description : 位运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 20;\n\n        System.out.println(\"num1 & num2 = \" + (num1 & num2));\n        System.out.println(\"num1 | num2 = \" + (num1 | num2));\n        System.out.println(\"num1 ^ num2 = \" + (num1 ^ num2));\n        System.out.println(\"~ num2 = \" + (~num2));\n        System.out.println(\"num1 << 2 = \" + (num1 << 2));\n        System.out.println(\"num1 >> 2 = \" + (num1 >> 2));\n        System.out.println(\"num1 >>> 2 = \" + (num1 >>> 2));\n    }\n}\n```\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/272fa3f4b8a300fc2385824fcd477b55.png)\n\n##  逻辑运算符\n\n逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 `true` 或 `false`。\n\n| 操作符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `&&`   | 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真       |\n| `||`   | 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真   |\n| `!`    | 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 `true`，则逻辑非运算符将得到 `false` |\n\n以下是逻辑运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:07\n * @description : 逻辑运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        boolean positive = true;\n        boolean negative = false;\n\n        System.out.println(\"positive && negative = \" + (positive && negative));\n        System.out.println(\"positive || negative = \" + (positive || negative));\n        System.out.println(\"!(positive || negative) = \" + !(positive || negative));\n\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/edf27acad058b26488e9e728b4d1ec73.png)\n\n##  赋值运算符\n\n赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：\n\n| 操作符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `=`    | 简单的赋值运算符，将右操作数的值赋给左侧操作数               |\n| `+=`   | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     |\n| `-=`   | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     |\n| `*=`   | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     |\n| `/=`   | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     |\n| `％=`  | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 |\n| `<< =` | 左移位赋值运算符                                             |\n| `>>=`  | 右移位赋值运算符                                             |\n| `＆=`  | 按位与赋值运算符                                             |\n| `^=`   | 按位异或赋值操作符                                           |\n| `|=`   | 按位或赋值操作符                                             |\n\n以下是部分赋值运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:13\n * @description : 赋值运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 100;\n        int num2 = 1000;\n\n        System.out.println(\"num1 + num2 = \" + (num1 + num2));\n        System.out.println(\"num1 += num2 = \" + (num1 += num2));\n        System.out.println(\"num1 - num2 = \" + (num1 - num2));\n        System.out.println(\"num1 -= num2 = \" + (num1 -= num2));\n        System.out.println(\"num1 * num2 = \" + (num1 * num2));\n        System.out.println(\"num1 *= num2 = \" + (num1 *= num2));\n        System.out.println(\"num1 & num2 = \" + (num1 & num2));\n        System.out.println(\"num1 &= num2 = \" + (num1 &= num2));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/dac6097ae6ae2c1c6eb49622cb5e9011.png)\n\n##  条件运算符（? :）\n\n也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 `if-else` 语句。其语法结构如下所示：\n\n```java\nvariable x = (expression) ? value if true : value if false\n```\n\n以下是条件运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:18\n * @description : 条件运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 30;\n        int num2 = 300;\n\n        int result = num1 > num2 ? num1 : num2;\n        System.out.println(\"The max between num1 and num2 is \" + result);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/01d8416a973b2387d4f20d17ceb063c1.png)\n\n##  instanceof\n\n用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。\n\n```java\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n##  equals() 和 ==\n\n-   `==`\n\n基本数据类型用 `==` 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；\n\n>   本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；\n\n-   `equals()`\n\n作用也是判断两个对象是否相等，但是 **不能用于基本数据类型变量的比较**。存在于 `Object()` 类中，所以所有类都具有 `equals()` 方法存在两种使用情况：\n\n1.  **类未覆盖 `equals()` 方法**：此时通过 `equals()` 比较该类的两个对象时，等价于 `==` 比较这两个对象，默认使用  `Object` 类中的 `equals()` 方法；\n2.  **类覆盖了 `equals()` 方法**：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 `String、BitSet、Data、File` 就覆盖了 `equals()` 方法；\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:26\n * @description : == 和 equals 用法\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 10;\n        int num3 = 20;\n        String str1 = \"村雨遥\";\n        String str2 = new String(\"村雨遥\");\n\n        // == 用于基本数据类型，用于比较两者是否相等\n        System.out.println(\"num1 == num2：\" + (num1 == num2)); // true\n        System.out.println(\"num3 == num3：\" + (num2 == num3)); // false\n        // 而用于引用类型则表示两者是否指向同一对象\n        System.out.println(\"str1 == str2：\" + (str1 == str2)); // false\n\n        // equals 用于比较引用类型是否内容是否相同\n        System.out.println(\"str1 equals str2：\" + str1.equals(str2)); // true\n\n        // equals 不能用于基本数据类型比较\n        //        System.out.println(num1.equals(num2));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/64b73f3a7e947173a4dec9ea1e9848fc.png)\n\n## 总结\n\n好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.\n\n对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-4-操作符.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 4. 操作符\nmathjax: true\ntoc: true\nabbrlink: bb695896\ndate: 2021-05-03 15:19:12\ntop:\ntags:\n    - Java\ncategories:\n  - Java 修炼之路\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n[上一篇文章](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247493124&idx=1&sn=4290091f2c5beb706f7ad98a465df3ea&chksm=e87b9272df0c1b64ef67cda2c9fed9c1e2328d48b6bf7ac13cb6471b9f315934d81d74c1a3e5#rd) 中介绍了 Java 变量和数据类型，那么如何对他们进行运行算呢？这一节就来看看 Java 中的运算！\n\n本文主要内容：\n\n-   **算术运算符**\n-   **关系运算符**\n-   **位运算符**\n-   **逻辑运算符**\n-   **赋值运算符**\n-   **条件运算符**\n\n好了，话不多说，开始正式内容吧！\n\n## 算术运算符\n\n常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。\n\n| 操作符 | 描述                              |\n| :----- | :-------------------------------- |\n| `+`    | 加法 - 相加运算符两侧的值         |\n| `-`    | 减法 - 左操作数减去右操作数       |\n| `*`    | 乘法 - 相乘操作符两侧的值         |\n| `/`    | 除法 - 左操作数除以右操作数       |\n| `％`   | 取余 - 左操作数除以右操作数的余数 |\n| `++`   | 自增: 操作数的值增加1             |\n| `--`   | 自减: 操作数的值减少1             |\n\n**注意**：`++` 和 `--` 可以放在操作数之前，也可以放在操作数之后；**位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减**；总结起来就是 **符号在前就先加/减，符号在后就后加/减**。\n\n以下是部分算术运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:43\n * @description : 算术运算符演示\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 20;\n        int num3 = 30;\n        int num4 = 40;\n\n        System.out.println(\"num1 + num2 = \" + (num1 + num2));\n        System.out.println(\"num1 - num2 = \" + (num1 - num2));\n        System.out.println(\"num1 * num2 = \" + (num1 * num2));\n        System.out.println(\"num2 / num1 = \" + (num2 / num1));\n        System.out.println(\"num2 % num1 = \" + (num2 % num1));\n        System.out.println(\"num3 % num1 = \" + (num3 % num1));\n        System.out.println(\"num1++   = \" + (num1++));\n        System.out.println(\"num1--   = \" + (num1--));\n        // 查看 ++ 在操作数前后位置时结果的不同\n        System.out.println(\"num4++   = \" + (num4++));\n        System.out.println(\"++num4   = \" + (++num4));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/3626246f49b35364868db82aa3a1f8f4.png)\n\n## 关系运算符\n\n关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：\n\n| 运算符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `==`   | 检查如果两个操作数的值是否相等，如果相等则条件为真           |\n| `!=`   | 检查如果两个操作数的值是否相等，如果值不相等则条件为真       |\n| `> `   | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真     |\n| `< `   | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真     |\n| `>=`   | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真 |\n| `<=`   | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真 |\n\n以下是部分关系运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:45\n * @description : 关系运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 100;\n        int num2 = 220;\n\n\n        System.out.println(\"num1 == num2 = \" + (num1 == num2));\n        System.out.println(\"num1 != num2 = \" + (num1 != num2));\n        System.out.println(\"num1 > num2 = \" + (num1 > num2));\n        System.out.println(\"num2 < num1 = \" + (num2 < num1));\n        System.out.println(\"num2 <= num1 = \" + (num2 <= num1));\n        System.out.println(\"num2 >= num1 = \" + (num2 >= num1));\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/6145a306c72c0f0be11d984aa7097b6e.png)\n\n## 位运算符\n\n位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：\n\n| 操作符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| `＆`   | 如果相对应位都是 1，则结果为 1，否则为 0                     |\n| `|`    | 如果相对应位都是 0，则结果为 0，否则为 1                     |\n| `^`    | 如果相对应位值相同，则结果为 0，否则为 1                     |\n| `〜`   | 按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0      |\n| `<<`   | 按位左移运算符。左操作数按位左移右操作数指定的位数           |\n| `>>`   | 按位右移运算符。左操作数按位右移右操作数指定的位数           |\n| `>>>`  | 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充 |\n\n以下是部分位运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:02\n * @description : 位运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 20;\n\n        System.out.println(\"num1 & num2 = \" + (num1 & num2));\n        System.out.println(\"num1 | num2 = \" + (num1 | num2));\n        System.out.println(\"num1 ^ num2 = \" + (num1 ^ num2));\n        System.out.println(\"~ num2 = \" + (~num2));\n        System.out.println(\"num1 << 2 = \" + (num1 << 2));\n        System.out.println(\"num1 >> 2 = \" + (num1 >> 2));\n        System.out.println(\"num1 >>> 2 = \" + (num1 >>> 2));\n    }\n}\n```\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/272fa3f4b8a300fc2385824fcd477b55.png)\n\n##  逻辑运算符\n\n逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 `true` 或 `false`。\n\n| 操作符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `&&`   | 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真       |\n| `||`   | 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真   |\n| `!`    | 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 `true`，则逻辑非运算符将得到 `false` |\n\n以下是逻辑运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:07\n * @description : 逻辑运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        boolean positive = true;\n        boolean negative = false;\n\n        System.out.println(\"positive && negative = \" + (positive && negative));\n        System.out.println(\"positive || negative = \" + (positive || negative));\n        System.out.println(\"!(positive || negative) = \" + !(positive || negative));\n\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/edf27acad058b26488e9e728b4d1ec73.png)\n\n##  赋值运算符\n\n赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：\n\n| 操作符 | 描述                                                         |\n| :----- | :----------------------------------------------------------- |\n| `=`    | 简单的赋值运算符，将右操作数的值赋给左侧操作数               |\n| `+=`   | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     |\n| `-=`   | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     |\n| `*=`   | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     |\n| `/=`   | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     |\n| `％=`  | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 |\n| `<< =` | 左移位赋值运算符                                             |\n| `>>=`  | 右移位赋值运算符                                             |\n| `＆=`  | 按位与赋值运算符                                             |\n| `^=`   | 按位异或赋值操作符                                           |\n| `|=`   | 按位或赋值操作符                                             |\n\n以下是部分赋值运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:13\n * @description : 赋值运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 100;\n        int num2 = 1000;\n\n        System.out.println(\"num1 + num2 = \" + (num1 + num2));\n        System.out.println(\"num1 += num2 = \" + (num1 += num2));\n        System.out.println(\"num1 - num2 = \" + (num1 - num2));\n        System.out.println(\"num1 -= num2 = \" + (num1 -= num2));\n        System.out.println(\"num1 * num2 = \" + (num1 * num2));\n        System.out.println(\"num1 *= num2 = \" + (num1 *= num2));\n        System.out.println(\"num1 & num2 = \" + (num1 & num2));\n        System.out.println(\"num1 &= num2 = \" + (num1 &= num2));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/dac6097ae6ae2c1c6eb49622cb5e9011.png)\n\n##  条件运算符（? :）\n\n也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 `if-else` 语句。其语法结构如下所示：\n\n```java\nvariable x = (expression) ? value if true : value if false\n```\n\n以下是条件运算符的示例以及运行结果：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:18\n * @description : 条件运算符\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 30;\n        int num2 = 300;\n\n        int result = num1 > num2 ? num1 : num2;\n        System.out.println(\"The max between num1 and num2 is \" + result);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/01d8416a973b2387d4f20d17ceb063c1.png)\n\n##  instanceof\n\n用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。\n\n```java\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n##  equals() 和 ==\n\n-   `==`\n\n基本数据类型用 `==` 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；\n\n>   本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；\n\n-   `equals()`\n\n作用也是判断两个对象是否相等，但是 **不能用于基本数据类型变量的比较**。存在于 `Object()` 类中，所以所有类都具有 `equals()` 方法存在两种使用情况：\n\n1.  **类未覆盖 `equals()` 方法**：此时通过 `equals()` 比较该类的两个对象时，等价于 `==` 比较这两个对象，默认使用  `Object` 类中的 `equals()` 方法；\n2.  **类覆盖了 `equals()` 方法**：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 `String、BitSet、Data、File` 就覆盖了 `equals()` 方法；\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:26\n * @description : == 和 equals 用法\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 10;\n        int num3 = 20;\n        String str1 = \"村雨遥\";\n        String str2 = new String(\"村雨遥\");\n\n        // == 用于基本数据类型，用于比较两者是否相等\n        System.out.println(\"num1 == num2：\" + (num1 == num2)); // true\n        System.out.println(\"num3 == num3：\" + (num2 == num3)); // false\n        // 而用于引用类型则表示两者是否指向同一对象\n        System.out.println(\"str1 == str2：\" + (str1 == str2)); // false\n\n        // equals 用于比较引用类型是否内容是否相同\n        System.out.println(\"str1 equals str2：\" + str1.equals(str2)); // true\n\n        // equals 不能用于基本数据类型比较\n        //        System.out.println(num1.equals(num2));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/64b73f3a7e947173a4dec9ea1e9848fc.png)\n\n## 总结\n\n好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.\n\n对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-4-操作符","published":1,"updated":"2021-05-03T07:22:56.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvz00007bw34ftjgar60","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247493124&amp;idx=1&amp;sn=4290091f2c5beb706f7ad98a465df3ea&amp;chksm=e87b9272df0c1b64ef67cda2c9fed9c1e2328d48b6bf7ac13cb6471b9f315934d81d74c1a3e5#rd\">上一篇文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运行算呢？这一节就来看看 Java 中的运算！</p>\n<p>本文主要内容：</p>\n<ul>\n<li><strong>算术运算符</strong></li>\n<li><strong>关系运算符</strong></li>\n<li><strong>位运算符</strong></li>\n<li><strong>逻辑运算符</strong></li>\n<li><strong>赋值运算符</strong></li>\n<li><strong>条件运算符</strong></li>\n</ul>\n<p>好了，话不多说，开始正式内容吧！</p>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％</code></td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增: 操作数的值增加1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减: 操作数的值减少1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<p>以下是部分算术运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:43\n * @description : 算术运算符演示\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 + num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 - num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 * num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 / num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">/</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 % num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">%</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num3 % num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">%</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1++   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1--   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 查看 ++ 在操作数前后位置时结果的不同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num4++   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num4<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"++num4   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3626246f49b35364868db82aa3a1f8f4.png\" alt=\"\"></p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分关系运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:45\n * @description : 关系运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">220</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 == num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 != num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">!=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &gt; num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&gt;</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt; num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt;= num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;=</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &gt;= num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&gt;=</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6145a306c72c0f0be11d984aa7097b6e.png\" alt=\"\"></p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是 1，则结果为 1，否则为 0</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分位运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:02\n * @description : 位运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp; num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 | num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 ^ num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~ num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &gt;&gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/272fa3f4b8a300fc2385824fcd477b55.png\" alt=\"\"></p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\"></td>\n<td>`</td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!</code></td>\n<td style=\"text-align:left\">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是逻辑运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:07\n * @description : 逻辑运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> positive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> negative <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive &amp;&amp; negative = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>positive <span class=\"token operator\">&amp;&amp;</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive || negative = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>positive <span class=\"token operator\">||</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!(positive || negative) = \"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>positive <span class=\"token operator\">||</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/edf27acad058b26488e9e728b4d1ec73.png\" alt=\"\"></p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％=</code></td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt; =</code></td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>＆=</code></td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^=</code></td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">=`</td>\n<td>按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分赋值运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:13\n * @description : 赋值运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 + num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 += num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 - num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 -= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 * num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 *= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp; num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp;= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dac6097ae6ae2c1c6eb49622cb5e9011.png\" alt=\"\"></p>\n<h2 id=\"条件运算符（-）\"><a href=\"#条件运算符（-）\" class=\"headerlink\" title=\"条件运算符（? :）\"></a>条件运算符（? :）</h2><p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">variable x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>以下是条件运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:18\n * @description : 条件运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> num1 <span class=\"token operator\">&gt;</span> num2 <span class=\"token operator\">?</span> num1 <span class=\"token operator\">:</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The max between num1 and num2 is \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/01d8416a973b2387d4f20d17ceb063c1.png\" alt=\"\"></p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span> reference variable <span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token operator\">/</span><span class=\"token keyword\">interface</span> type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals() 和 ==\"></a>equals() 和 ==</h2><ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>  本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:26\n * @description : == 和 equals 用法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// == 用于基本数据类型，用于比较两者是否相等</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 == num2：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num3 == num3：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">==</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n        <span class=\"token comment\">// 而用于引用类型则表示两者是否指向同一对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 == str2：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n        <span class=\"token comment\">// equals 用于比较引用类型是否内容是否相同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 equals str2：\"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n        <span class=\"token comment\">// equals 不能用于基本数据类型比较</span>\n        <span class=\"token comment\">//        System.out.println(num1.equals(num2));</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/64b73f3a7e947173a4dec9ea1e9848fc.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>\n<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247493124&amp;idx=1&amp;sn=4290091f2c5beb706f7ad98a465df3ea&amp;chksm=e87b9272df0c1b64ef67cda2c9fed9c1e2328d48b6bf7ac13cb6471b9f315934d81d74c1a3e5#rd\">上一篇文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运行算呢？这一节就来看看 Java 中的运算！</p>\n<p>本文主要内容：</p>\n<ul>\n<li><strong>算术运算符</strong></li>\n<li><strong>关系运算符</strong></li>\n<li><strong>位运算符</strong></li>\n<li><strong>逻辑运算符</strong></li>\n<li><strong>赋值运算符</strong></li>\n<li><strong>条件运算符</strong></li>\n</ul>\n<p>好了，话不多说，开始正式内容吧！</p>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％</code></td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增: 操作数的值增加1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减: 操作数的值减少1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<p>以下是部分算术运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:43\n * @description : 算术运算符演示\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 + num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 - num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 * num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 / num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">/</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 % num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">%</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num3 % num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">%</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1++   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1--   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 查看 ++ 在操作数前后位置时结果的不同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num4++   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num4<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"++num4   = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3626246f49b35364868db82aa3a1f8f4.png\" alt=\"\"></p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分关系运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 9:45\n * @description : 关系运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">220</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 == num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 != num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">!=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 > num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt; num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt;= num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;=</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 >= num1 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">>=</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6145a306c72c0f0be11d984aa7097b6e.png\" alt=\"\"></p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是 1，则结果为 1，否则为 0</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分位运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:02\n * @description : 位运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp; num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 | num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 ^ num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~ num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 >> 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 >>> 2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/272fa3f4b8a300fc2385824fcd477b55.png\" alt=\"\"></p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\"></td>\n<td>`</td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!</code></td>\n<td style=\"text-align:left\">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是逻辑运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:07\n * @description : 逻辑运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> positive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> negative <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive &amp;&amp; negative = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>positive <span class=\"token operator\">&amp;&amp;</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive || negative = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>positive <span class=\"token operator\">||</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!(positive || negative) = \"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>positive <span class=\"token operator\">||</span> negative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/edf27acad058b26488e9e728b4d1ec73.png\" alt=\"\"></p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％=</code></td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt; =</code></td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>＆=</code></td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^=</code></td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">=`</td>\n<td>按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是部分赋值运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:13\n * @description : 赋值运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 + num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 += num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 - num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 -= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 * num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 *= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp; num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &amp;= num2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dac6097ae6ae2c1c6eb49622cb5e9011.png\" alt=\"\"></p>\n<h2 id=\"条件运算符（-）\"><a href=\"#条件运算符（-）\" class=\"headerlink\" title=\"条件运算符（? :）\"></a>条件运算符（? :）</h2><p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">variable x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>以下是条件运算符的示例以及运行结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 10:18\n * @description : 条件运算符\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> num1 <span class=\"token operator\">></span> num2 <span class=\"token operator\">?</span> num1 <span class=\"token operator\">:</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The max between num1 and num2 is \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/01d8416a973b2387d4f20d17ceb063c1.png\" alt=\"\"></p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span> reference variable <span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token operator\">/</span><span class=\"token keyword\">interface</span> type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals() 和 ==\"></a>equals() 和 ==</h2><ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>  本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:26\n * @description : == 和 equals 用法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// == 用于基本数据类型，用于比较两者是否相等</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 == num2：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num3 == num3：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">==</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n        <span class=\"token comment\">// 而用于引用类型则表示两者是否指向同一对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 == str2：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n        <span class=\"token comment\">// equals 用于比较引用类型是否内容是否相同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 equals str2：\"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n        <span class=\"token comment\">// equals 不能用于基本数据类型比较</span>\n        <span class=\"token comment\">//        System.out.println(num1.equals(num2));</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/64b73f3a7e947173a4dec9ea1e9848fc.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>\n<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】No 6. 数组操作的奇技淫巧","mathjax":true,"toc":true,"abbrlink":"fd17f455","date":"2021-05-03T07:19:33.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：\n\n-   **数组简介**\n-   **遍历**\n-   **排序**\n-   **常用方法**\n\n## 数组简介\n\n所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 `0` 开始计数，而不是我们日常所习惯的 `1`。\n\n要定义一个数组类型的遍历，其语法为 `数据类型 []`，比如 `int[]`，而且在初始化时必须指定数组大小，如 `int[] arr = new int[10]`，表示 `arr` 数组可以容纳 `10` 个 `int` 类型的元素。\n\n数组的特点：\n\n-   数组中的元素初始化时都是有默认值的，整型对应 `0`，浮点型对应 `0.0`，而布尔型对应 `false`；\n-   数组一经创建，其大小就不可再变；\n-   要访问数组中的某一元素，需要用到索引，索引从 `0` 开始；\n-   如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可；\n\n### 一维数组\n\n#### 初始化\n\n1.  静态初始化\n\n所谓静态初始化，就是在定义数组的同时将其初始化；\n\n```java\nint[] arr1 = {1, 3, 5, 8, 10};\nint[] arr2 = new int[] {1, 3, 5, 8, 10};\n```\n\n2.  动态初始化\n\n动态初始化，就是先声明数组定义之后，再对其进行赋值；\n\n```java\nint[] arr = new int[5];\narr[0] = 1;\narr[1] = 3;\narr[2] = 5;\narr[3] = 8;\narr[4] = 10;\n```\n\nPS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 `5`，所以我们数组的索引位置最大只能为 `4`，否则就会报数组越界错误。\n\n#### 求数组长度\n\n求数组的长度，利用数组的 `length` 属性即可；\n\n```java\nint[] arr = new int[10];\nint size = arr.length; // 10\nSystem.out.println(\"size = \" + size);\n```\n\n### 二维数组\n\n#### 初始化\n\n1.  静态初始化\n\n```java\nint[][] arr1 = {{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n```\n\n2.  动态初始化\n\n二位数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。\n\n```java\nint[][] arr1= new int[3][3];\narr1 = new int[][]{{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n\nint[][] arr2= new int[3][];\narr2 = new int[][]{{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n```\n\n#### 求数组长度\n\n不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。\n\n```java\nint[][] arr = new int[10][20];\n\n// 求行的长度\nint row = arr.lenght;\n// 求列的长度，此时求任意一行所在的列的长度即可\nint col = arr[0].length;\n```\n\n## 数组遍历\n\n既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。\n\n假设我们有一个数组如下：\n\n```java\nString[] arr = new String[5];\narr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n```\n\n### 标准 for 循环\n\n首先，我们来使用标准的 `for` 循环来遍历该数组，只需要通过数组的索引位置来访问即可。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TraverseTest\n * @date : 2021/4/25 11:52\n * @description : 遍历\n */\n\npublic class TraverseTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n\n//        数组长度\n        int size = arr.length;\n        for (int i = 0; i < size; i++) {\n            System.out.println(\"第 \" + (i + 1) + \" 个元素：\" + arr[i]);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2d24af85365e92bb29d8543a6d95cf16.png)\n\n### 增强 for 循环\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : EnforceTraverseTest\n * @date : 2021/4/26 9:14\n * @description : 增强 for 循环\n */\n\npublic class EnforceTraverseTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n        int index = 0;\n        for (String name : arr) {\n            System.out.println(\"第 \" + (index + 1) + \" 个元素：\" + name);\n            index++;\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/4619689f28322985a72ed0c4053c379f.png)\n\n**两者的区别**：标准 `for` 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 `for each` 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。\n\n### 标准库遍历\n\n通过调用标准库 `Arrays` 中的 `toString()` 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibraryTest\n * @date : 2021/4/26 9:22\n * @description : 标准库遍历\n */\n\npublic class StandardLibraryTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/5f8750c8bfd074f45925eb12ce6ea9aa.png)\n\n以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 `array[row][col]` 来进行访问，而对于二维及更多维的数组，可以使用  `Arrays.deepToString()`。\n\n## 数组排序\n\n### 使用排序算法\n\n排序算法多样，最常用的则有 **冒泡排序、插入排序、快速排序等**，进行排序时会修改数组本身；\n\n冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : BubbleSort\n * @date : 2021/4/26 10:16\n * @description : 冒泡排序\n */\n\npublic class BubbleSort {\n    public static void main(String[] args) {\n        char[] chArray = {'c', 'u', 'n', 'y', 'u'};\n        // 排序前\n        System.out.println(Arrays.toString(chArray));\n\n        for (int i = 0; i < chArray.length - 1; i++) {\n            for (int j = 0; j < chArray.length - 1 - i; j++) {\n                // 从大到小\n                if (chArray[j] < chArray[j + 1]) {\n                    // 交换\n                    char temp = chArray[j];\n                    chArray[j] = chArray[j + 1];\n                    chArray[j + 1] = temp;\n                }\n            }\n        }\n        // 冒泡排序后\n        System.out.println(Arrays.toString(chArray));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/b73ce00494d9de15a976862a17b89b24.png)\n\n### 标准库排序\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibrarySortTest\n * @date : 2021/4/26 10:22\n * @description : 标准库排序\n */\n\npublic class StandardLibrarySortTest {\n    public static void main(String[] args) {\n        String[] arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n\n//        排序前\n        System.out.println(Arrays.toString(arr));\n//        标准库排序\n        Arrays.sort(arr);\n//        排序后\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/e6e8974b6358119bf353d0ac4e87ba80.png)\n\n## 常用方法\n\n对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：\n\n| 返回值               | 方法                   | 描述                 |\n| -------------------- | ---------------------- | -------------------- |\n| `static String`      | `toString(Object[] a)` | 输出数组的字符串形式 |\n| `static <T> List<T>` | `asList(T…… a)`        | 数组转 `List`        |\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : CommonMethodsTest\n * @date : 2021/4/26 10:37\n * @description : 常用方法\n */\n\npublic class CommonMethodsTest {\n    public static void main(String[] args) {\n        String[] arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n//        输出数组的字符串形式\n        System.out.println(\"打印数组\");\n        System.out.println(Arrays.toString(arr));\n//        数组转列表\n        System.out.println(\"数组转列表\");\n        List<String> list = new ArrayList<String>(Arrays.asList(arr));\n        System.out.println(list);\n\n        System.out.println(\"列表转数组\");\n        list.add(\"镇魂街\");\n        String[] newArr = new String[list.size()];\n        list.toArray(newArr);\n        System.out.println(Arrays.toString(newArr));\n\n        System.out.println(\"数组是否包含某一元素\");\n        System.out.println(Arrays.asList(newArr).contains(\"进击的巨人\"));\n        System.out.println(Arrays.asList(newArr).contains(\"网球王子\"));\n    }\n}\n```\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/d9f61769262f1676bf0bf86c8ba8b806.png)\n\n## 总结\n\n数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-6-数组操作的奇技淫巧.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 6. 数组操作的奇技淫巧\nmathjax: true\ntoc: true\nabbrlink: fd17f455\ndate: 2021-05-03 15:19:33\ntop:\ntags:\n    - Java\ncategories:\n  - Java 修炼之路\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：\n\n-   **数组简介**\n-   **遍历**\n-   **排序**\n-   **常用方法**\n\n## 数组简介\n\n所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 `0` 开始计数，而不是我们日常所习惯的 `1`。\n\n要定义一个数组类型的遍历，其语法为 `数据类型 []`，比如 `int[]`，而且在初始化时必须指定数组大小，如 `int[] arr = new int[10]`，表示 `arr` 数组可以容纳 `10` 个 `int` 类型的元素。\n\n数组的特点：\n\n-   数组中的元素初始化时都是有默认值的，整型对应 `0`，浮点型对应 `0.0`，而布尔型对应 `false`；\n-   数组一经创建，其大小就不可再变；\n-   要访问数组中的某一元素，需要用到索引，索引从 `0` 开始；\n-   如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可；\n\n### 一维数组\n\n#### 初始化\n\n1.  静态初始化\n\n所谓静态初始化，就是在定义数组的同时将其初始化；\n\n```java\nint[] arr1 = {1, 3, 5, 8, 10};\nint[] arr2 = new int[] {1, 3, 5, 8, 10};\n```\n\n2.  动态初始化\n\n动态初始化，就是先声明数组定义之后，再对其进行赋值；\n\n```java\nint[] arr = new int[5];\narr[0] = 1;\narr[1] = 3;\narr[2] = 5;\narr[3] = 8;\narr[4] = 10;\n```\n\nPS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 `5`，所以我们数组的索引位置最大只能为 `4`，否则就会报数组越界错误。\n\n#### 求数组长度\n\n求数组的长度，利用数组的 `length` 属性即可；\n\n```java\nint[] arr = new int[10];\nint size = arr.length; // 10\nSystem.out.println(\"size = \" + size);\n```\n\n### 二维数组\n\n#### 初始化\n\n1.  静态初始化\n\n```java\nint[][] arr1 = {{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n```\n\n2.  动态初始化\n\n二位数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。\n\n```java\nint[][] arr1= new int[3][3];\narr1 = new int[][]{{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n\nint[][] arr2= new int[3][];\narr2 = new int[][]{{1, 2, 4}, {5, 7, 9}, {19, 12, 18}};\n```\n\n#### 求数组长度\n\n不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。\n\n```java\nint[][] arr = new int[10][20];\n\n// 求行的长度\nint row = arr.lenght;\n// 求列的长度，此时求任意一行所在的列的长度即可\nint col = arr[0].length;\n```\n\n## 数组遍历\n\n既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。\n\n假设我们有一个数组如下：\n\n```java\nString[] arr = new String[5];\narr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n```\n\n### 标准 for 循环\n\n首先，我们来使用标准的 `for` 循环来遍历该数组，只需要通过数组的索引位置来访问即可。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TraverseTest\n * @date : 2021/4/25 11:52\n * @description : 遍历\n */\n\npublic class TraverseTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n\n//        数组长度\n        int size = arr.length;\n        for (int i = 0; i < size; i++) {\n            System.out.println(\"第 \" + (i + 1) + \" 个元素：\" + arr[i]);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2d24af85365e92bb29d8543a6d95cf16.png)\n\n### 增强 for 循环\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : EnforceTraverseTest\n * @date : 2021/4/26 9:14\n * @description : 增强 for 循环\n */\n\npublic class EnforceTraverseTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n        int index = 0;\n        for (String name : arr) {\n            System.out.println(\"第 \" + (index + 1) + \" 个元素：\" + name);\n            index++;\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/4619689f28322985a72ed0c4053c379f.png)\n\n**两者的区别**：标准 `for` 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 `for each` 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。\n\n### 标准库遍历\n\n通过调用标准库 `Arrays` 中的 `toString()` 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibraryTest\n * @date : 2021/4/26 9:22\n * @description : 标准库遍历\n */\n\npublic class StandardLibraryTest {\n    public static void main(String[] args) {\n        String[] arr = new String[5];\n        arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/5f8750c8bfd074f45925eb12ce6ea9aa.png)\n\n以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 `array[row][col]` 来进行访问，而对于二维及更多维的数组，可以使用  `Arrays.deepToString()`。\n\n## 数组排序\n\n### 使用排序算法\n\n排序算法多样，最常用的则有 **冒泡排序、插入排序、快速排序等**，进行排序时会修改数组本身；\n\n冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : BubbleSort\n * @date : 2021/4/26 10:16\n * @description : 冒泡排序\n */\n\npublic class BubbleSort {\n    public static void main(String[] args) {\n        char[] chArray = {'c', 'u', 'n', 'y', 'u'};\n        // 排序前\n        System.out.println(Arrays.toString(chArray));\n\n        for (int i = 0; i < chArray.length - 1; i++) {\n            for (int j = 0; j < chArray.length - 1 - i; j++) {\n                // 从大到小\n                if (chArray[j] < chArray[j + 1]) {\n                    // 交换\n                    char temp = chArray[j];\n                    chArray[j] = chArray[j + 1];\n                    chArray[j + 1] = temp;\n                }\n            }\n        }\n        // 冒泡排序后\n        System.out.println(Arrays.toString(chArray));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/b73ce00494d9de15a976862a17b89b24.png)\n\n### 标准库排序\n\n```java\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibrarySortTest\n * @date : 2021/4/26 10:22\n * @description : 标准库排序\n */\n\npublic class StandardLibrarySortTest {\n    public static void main(String[] args) {\n        String[] arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n\n//        排序前\n        System.out.println(Arrays.toString(arr));\n//        标准库排序\n        Arrays.sort(arr);\n//        排序后\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/e6e8974b6358119bf353d0ac4e87ba80.png)\n\n## 常用方法\n\n对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：\n\n| 返回值               | 方法                   | 描述                 |\n| -------------------- | ---------------------- | -------------------- |\n| `static String`      | `toString(Object[] a)` | 输出数组的字符串形式 |\n| `static <T> List<T>` | `asList(T…… a)`        | 数组转 `List`        |\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : CommonMethodsTest\n * @date : 2021/4/26 10:37\n * @description : 常用方法\n */\n\npublic class CommonMethodsTest {\n    public static void main(String[] args) {\n        String[] arr = new String[]{\"村雨遥\", \"海贼王\", \"进击的巨人\", \"鬼灭之刃\", \"斗罗大陆\"};\n//        输出数组的字符串形式\n        System.out.println(\"打印数组\");\n        System.out.println(Arrays.toString(arr));\n//        数组转列表\n        System.out.println(\"数组转列表\");\n        List<String> list = new ArrayList<String>(Arrays.asList(arr));\n        System.out.println(list);\n\n        System.out.println(\"列表转数组\");\n        list.add(\"镇魂街\");\n        String[] newArr = new String[list.size()];\n        list.toArray(newArr);\n        System.out.println(Arrays.toString(newArr));\n\n        System.out.println(\"数组是否包含某一元素\");\n        System.out.println(Arrays.asList(newArr).contains(\"进击的巨人\"));\n        System.out.println(Arrays.asList(newArr).contains(\"网球王子\"));\n    }\n}\n```\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/d9f61769262f1676bf0bf86c8ba8b806.png)\n\n## 总结\n\n数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-6-数组操作的奇技淫巧","published":1,"updated":"2021-05-03T07:23:28.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvz30009bw341yfqex2p","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：</p>\n<ul>\n<li><strong>数组简介</strong></li>\n<li><strong>遍历</strong></li>\n<li><strong>排序</strong></li>\n<li><strong>常用方法</strong></li>\n</ul>\n<h2 id=\"数组简介\"><a href=\"#数组简介\" class=\"headerlink\" title=\"数组简介\"></a>数组简介</h2><p>所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 <code>0</code> 开始计数，而不是我们日常所习惯的 <code>1</code>。</p>\n<p>要定义一个数组类型的遍历，其语法为 <code>数据类型 []</code>，比如 <code>int[]</code>，而且在初始化时必须指定数组大小，如 <code>int[] arr = new int[10]</code>，表示 <code>arr</code> 数组可以容纳 <code>10</code> 个 <code>int</code> 类型的元素。</p>\n<p>数组的特点：</p>\n<ul>\n<li>数组中的元素初始化时都是有默认值的，整型对应 <code>0</code>，浮点型对应 <code>0.0</code>，而布尔型对应 <code>false</code>；</li>\n<li>数组一经创建，其大小就不可再变；</li>\n<li>要访问数组中的某一元素，需要用到索引，索引从 <code>0</code> 开始；</li>\n<li>如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可；</li>\n</ul>\n<h3 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>静态初始化</li>\n</ol>\n<p>所谓静态初始化，就是在定义数组的同时将其初始化；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>动态初始化</li>\n</ol>\n<p>动态初始化，就是先声明数组定义之后，再对其进行赋值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 <code>5</code>，所以我们数组的索引位置最大只能为 <code>4</code>，否则就会报数组越界错误。</p>\n<h4 id=\"求数组长度\"><a href=\"#求数组长度\" class=\"headerlink\" title=\"求数组长度\"></a>求数组长度</h4><p>求数组的长度，利用数组的 <code>length</code> 属性即可；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size = \"</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h3><h4 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>静态初始化</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>动态初始化</li>\n</ol>\n<p>二位数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"求数组长度-1\"><a href=\"#求数组长度-1\" class=\"headerlink\" title=\"求数组长度\"></a>求数组长度</h4><p>不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 求行的长度</span>\n<span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 求列的长度，此时求任意一行所在的列的长度即可</span>\n<span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h2><p>既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。</p>\n<p>假设我们有一个数组如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"标准-for-循环\"><a href=\"#标准-for-循环\" class=\"headerlink\" title=\"标准 for 循环\"></a>标准 for 循环</h3><p>首先，我们来使用标准的 <code>for</code> 循环来遍历该数组，只需要通过数组的索引位置来访问即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TraverseTest\n * @date : 2021/4/25 11:52\n * @description : 遍历\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TraverseTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        数组长度</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 个元素：\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d24af85365e92bb29d8543a6d95cf16.png\" alt=\"\"></p>\n<h3 id=\"增强-for-循环\"><a href=\"#增强-for-循环\" class=\"headerlink\" title=\"增强 for 循环\"></a>增强 for 循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : EnforceTraverseTest\n * @date : 2021/4/26 9:14\n * @description : 增强 for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnforceTraverseTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 个元素：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4619689f28322985a72ed0c4053c379f.png\" alt=\"\"></p>\n<p><strong>两者的区别</strong>：标准 <code>for</code> 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 <code>for each</code> 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。</p>\n<h3 id=\"标准库遍历\"><a href=\"#标准库遍历\" class=\"headerlink\" title=\"标准库遍历\"></a>标准库遍历</h3><p>通过调用标准库 <code>Arrays</code> 中的 <code>toString()</code> 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibraryTest\n * @date : 2021/4/26 9:22\n * @description : 标准库遍历\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardLibraryTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f8750c8bfd074f45925eb12ce6ea9aa.png\" alt=\"\"></p>\n<p>以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 <code>array[row][col]</code> 来进行访问，而对于二维及更多维的数组，可以使用  <code>Arrays.deepToString()</code>。</p>\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"使用排序算法\"><a href=\"#使用排序算法\" class=\"headerlink\" title=\"使用排序算法\"></a>使用排序算法</h3><p>排序算法多样，最常用的则有 <strong>冒泡排序、插入排序、快速排序等</strong>，进行排序时会修改数组本身；</p>\n<p>冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : BubbleSort\n * @date : 2021/4/26 10:16\n * @description : 冒泡排序\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 排序前</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 从大到小</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 交换</span>\n                    <span class=\"token keyword\">char</span> temp <span class=\"token operator\">=</span> chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 冒泡排序后</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b73ce00494d9de15a976862a17b89b24.png\" alt=\"\"></p>\n<h3 id=\"标准库排序\"><a href=\"#标准库排序\" class=\"headerlink\" title=\"标准库排序\"></a>标准库排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibrarySortTest\n * @date : 2021/4/26 10:22\n * @description : 标准库排序\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardLibrarySortTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        排序前</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        标准库排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        排序后</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e6e8974b6358119bf353d0ac4e87ba80.png\" alt=\"\"></p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p>对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static String</code></td>\n<td><code>toString(Object[] a)</code></td>\n<td>输出数组的字符串形式</td>\n</tr>\n<tr>\n<td><code>static &lt;T&gt; List&lt;T&gt;</code></td>\n<td><code>asList(T…… a)</code></td>\n<td>数组转 <code>List</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : CommonMethodsTest\n * @date : 2021/4/26 10:37\n * @description : 常用方法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonMethodsTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        输出数组的字符串形式</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印数组\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        数组转列表</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组转列表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表转数组\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"镇魂街\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组是否包含某一元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网球王子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d9f61769262f1676bf0bf86c8ba8b806.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：</p>\n<ul>\n<li><strong>数组简介</strong></li>\n<li><strong>遍历</strong></li>\n<li><strong>排序</strong></li>\n<li><strong>常用方法</strong></li>\n</ul>\n<h2 id=\"数组简介\"><a href=\"#数组简介\" class=\"headerlink\" title=\"数组简介\"></a>数组简介</h2><p>所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 <code>0</code> 开始计数，而不是我们日常所习惯的 <code>1</code>。</p>\n<p>要定义一个数组类型的遍历，其语法为 <code>数据类型 []</code>，比如 <code>int[]</code>，而且在初始化时必须指定数组大小，如 <code>int[] arr = new int[10]</code>，表示 <code>arr</code> 数组可以容纳 <code>10</code> 个 <code>int</code> 类型的元素。</p>\n<p>数组的特点：</p>\n<ul>\n<li>数组中的元素初始化时都是有默认值的，整型对应 <code>0</code>，浮点型对应 <code>0.0</code>，而布尔型对应 <code>false</code>；</li>\n<li>数组一经创建，其大小就不可再变；</li>\n<li>要访问数组中的某一元素，需要用到索引，索引从 <code>0</code> 开始；</li>\n<li>如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可；</li>\n</ul>\n<h3 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>静态初始化</li>\n</ol>\n<p>所谓静态初始化，就是在定义数组的同时将其初始化；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>动态初始化</li>\n</ol>\n<p>动态初始化，就是先声明数组定义之后，再对其进行赋值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 <code>5</code>，所以我们数组的索引位置最大只能为 <code>4</code>，否则就会报数组越界错误。</p>\n<h4 id=\"求数组长度\"><a href=\"#求数组长度\" class=\"headerlink\" title=\"求数组长度\"></a>求数组长度</h4><p>求数组的长度，利用数组的 <code>length</code> 属性即可；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size = \"</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h3><h4 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>静态初始化</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>动态初始化</li>\n</ol>\n<p>二位数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"求数组长度-1\"><a href=\"#求数组长度-1\" class=\"headerlink\" title=\"求数组长度\"></a>求数组长度</h4><p>不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 求行的长度</span>\n<span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 求列的长度，此时求任意一行所在的列的长度即可</span>\n<span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h2><p>既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。</p>\n<p>假设我们有一个数组如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"标准-for-循环\"><a href=\"#标准-for-循环\" class=\"headerlink\" title=\"标准 for 循环\"></a>标准 for 循环</h3><p>首先，我们来使用标准的 <code>for</code> 循环来遍历该数组，只需要通过数组的索引位置来访问即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TraverseTest\n * @date : 2021/4/25 11:52\n * @description : 遍历\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TraverseTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        数组长度</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 个元素：\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d24af85365e92bb29d8543a6d95cf16.png\" alt=\"\"></p>\n<h3 id=\"增强-for-循环\"><a href=\"#增强-for-循环\" class=\"headerlink\" title=\"增强 for 循环\"></a>增强 for 循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : EnforceTraverseTest\n * @date : 2021/4/26 9:14\n * @description : 增强 for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnforceTraverseTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 个元素：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4619689f28322985a72ed0c4053c379f.png\" alt=\"\"></p>\n<p><strong>两者的区别</strong>：标准 <code>for</code> 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 <code>for each</code> 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。</p>\n<h3 id=\"标准库遍历\"><a href=\"#标准库遍历\" class=\"headerlink\" title=\"标准库遍历\"></a>标准库遍历</h3><p>通过调用标准库 <code>Arrays</code> 中的 <code>toString()</code> 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibraryTest\n * @date : 2021/4/26 9:22\n * @description : 标准库遍历\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardLibraryTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f8750c8bfd074f45925eb12ce6ea9aa.png\" alt=\"\"></p>\n<p>以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 <code>array[row][col]</code> 来进行访问，而对于二维及更多维的数组，可以使用  <code>Arrays.deepToString()</code>。</p>\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"使用排序算法\"><a href=\"#使用排序算法\" class=\"headerlink\" title=\"使用排序算法\"></a>使用排序算法</h3><p>排序算法多样，最常用的则有 <strong>冒泡排序、插入排序、快速排序等</strong>，进行排序时会修改数组本身；</p>\n<p>冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : BubbleSort\n * @date : 2021/4/26 10:16\n * @description : 冒泡排序\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 排序前</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 从大到小</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 交换</span>\n                    <span class=\"token keyword\">char</span> temp <span class=\"token operator\">=</span> chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    chArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    chArray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 冒泡排序后</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>chArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b73ce00494d9de15a976862a17b89b24.png\" alt=\"\"></p>\n<h3 id=\"标准库排序\"><a href=\"#标准库排序\" class=\"headerlink\" title=\"标准库排序\"></a>标准库排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : StandardLibrarySortTest\n * @date : 2021/4/26 10:22\n * @description : 标准库排序\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardLibrarySortTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        排序前</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        标准库排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        排序后</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e6e8974b6358119bf353d0ac4e87ba80.png\" alt=\"\"></p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p>对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static String</code></td>\n<td><code>toString(Object[] a)</code></td>\n<td>输出数组的字符串形式</td>\n</tr>\n<tr>\n<td><code>static &lt;T&gt; List&lt;T&gt;</code></td>\n<td><code>asList(T…… a)</code></td>\n<td>数组转 <code>List</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : CommonMethodsTest\n * @date : 2021/4/26 10:37\n * @description : 常用方法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonMethodsTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"海贼王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"鬼灭之刃\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"斗罗大陆\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        输出数组的字符串形式</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印数组\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        数组转列表</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组转列表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表转数组\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"镇魂街\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组是否包含某一元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进击的巨人\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网球王子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d9f61769262f1676bf0bf86c8ba8b806.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Python 入门指北】No 2. 玩转 Pycharm","mathjax":true,"toc":true,"abbrlink":"a650a32b","date":"2021-05-04T01:47:00.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。\n\n那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：\n\n1.  **Pycharm 安装**\n2.  **Pycharm 配置**\n3.  **Pycharm 插件**\n4.  **如何用 Pycharm 写程序**\n\n## 2. Pycharm 安装\n\n这部分主要说一下如何安装 Pycharm，本文以 macOS 的安装为例，其他系统下的安装等有空了再做吧，😂，那下边就正式开始安装过程。\n\n关于社区版和专业版的区别就不再多说了，正常来讲我们选社区版就足够了，不过因为我有专业版的账号，所以下边还是以专业版为例来安装，不过大家不用担心，两者的安装过程是一样的。\n\n1.  首先去官网下载 [安装包](https://www.jetbrains.com/pycharm/)；\n\n![下载](https://img-blog.csdnimg.cn/img_convert/657a1c37ad44c9f7d200a45c38f446de.png)\n\n2.  双击下载好的 `.dmg` 安装包；\n\n![安装](https://img-blog.csdnimg.cn/img_convert/32d18b40bd507fbd10715c3d6284451f.png)\n\n3.  将图标拖动到右边的 `Applications` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/2e5961299d058a9cc3be2dfaffa4220b.png)\n\n4.  好了，就是这么简单，我们的 Pycharm 已经安装好了，从启动台找到并打开就好了；\n\n![选择打开](https://img-blog.csdnimg.cn/img_convert/0ab894d3cad273d805d2cd5ddb04418d.png)\n\n![Pycharm 主界面](https://img-blog.csdnimg.cn/img_convert/e4785159ea6460e7acad4ce985768c8d.png)\n\n\n\n## 3. Pycharm 配置\n\n### 3.1 字体、主题设置\n\n依次打开 `Customize -> All Settings -> Appearance & Behavior -> Appearance`，然后在右边选择自己喜欢的主题，以及字体，这里推荐使用 Jetbrains 家自己出品的字体 `JetBrains Mono`，然后大小的话，选择自己喜欢的号即可； \n\n![](https://img-blog.csdnimg.cn/img_convert/67ad4519e98752c322905ae12c3f7590.png)\n\n![IDE设置](https://img-blog.csdnimg.cn/img_convert/d43675988d4836f85ecc03d95d9af4b5.png)\n\n上面设置的是 IDE 总体界面的字体和主题，下面来进行代码编辑器的字体和主题；\n\n依次打开 `Customize -> All Settings -> Editor -> Font`，依次根据自己的喜好设置字体和大小；\n\n![字体设置](https://img-blog.csdnimg.cn/img_convert/f2b97a31864152f6a020e1fcb8c17d06.png)\n\n然后依次打开 `Customize -> All Settings -> Editor -> Color Scheme`，然后选择自己喜欢的主题就好；\n\n![主题设置](https://img-blog.csdnimg.cn/img_convert/951796848fec370e7b899626c1bf9e61.png)\n\n### 3.2 编码设置\n\n一般来讲，macOS 下的默认编码是 UTF-8，但是 Windows 下的却不是，所以要设置一下才行；\n\n依次打开 `Customize -> All Settings -> Editor -> File Encodings`，然后把右边框中的都设置为 UTF-8 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/295ccdc914251ca4be59e23b03209fbb.png)\n\n### 3.3 开发模版设置\n\n模板就是一种通用的格式，如果在 Pycharm 中设置了模板，那么每次创建一个 Python 文件的时候都会自动包含模板中的内容，方便我们后续开发；\n\n依次打开 `Customize -> All Settings -> Editor -> File and Code Templates`，然后选择 `Python Script`，在右边框中填入自己要自定义的模板即可。而如果你要对其他文件设置模板，那方法也是一样的。\n\n![](https://img-blog.csdnimg.cn/img_convert/31cc5795f221b0920d5ec675074e536d.png)\n\n然后我们以后每次创建 Python 文件，上面的模板内容就都会预先定义好了。\n\n![](https://img-blog.csdnimg.cn/img_convert/0ad01e95bc47ea0e43a84044e551ff90.png)\n\n### 3.4 插件\n\n虽然 Pycharm 已经很 🐂🍺 了，但是它还有个厉害的地方在于它可以扩展插件。通过插件，能让我们的 Pycharm 用起来更爽。如果我们把 Pycharm 比做王者荣耀里边的英雄，那么插件就像红蓝 Buff，能让我们的英雄变得更加厉害。接下来，就让我来推荐给大家几款我常用的插件吧。\n\n首先，既然要用插件，那我们得知道怎么安装吧。\n\n好的，让我们依次打开 `Customize -> All Settings ->Plugins`，然后在右边的框中输入你想要的插件搜索即可，搜到结果之后，点击安装即可；\n\n![插件安装](https://img-blog.csdnimg.cn/img_convert/1b05aca0d08e1c6c9e824180b19b0302.png)\n\n1.  **Rainbow Brackets**\n\n人如其名，Rainbow 意为彩虹，而这款插件的作用就是给你的代码块之间很清晰的显示出各种颜色的高亮。或许你早已被代码中繁多的括号给搞蒙了，有了它，你就再也不用担心这个问题了。\n\n![](https://img-blog.csdnimg.cn/img_convert/8810359a1f3f484534c45001ebd33a68.png)\n\n2.  **Material Theme UI**\n\nMaterial Theme UI 是JetBrains IDE（IntelliJ IDEA，WebStorm，Android Studio等）的插件，可将原始外观更改为 Material Design 外观。最初的灵感来自 Sublime Text 的 Material Theme，这个插件提供了一整套设置，可以按照你想要的方式调整 IDE，让你的 IDE 变得更加漂亮！\n\n![](https://img-blog.csdnimg.cn/img_convert/136acdb0ad11c14fc0e3d75be3788e9d.png)\n\n3.  **Key Promoter X**\n\nKey Promoter X 帮助你在工作时学习必要的快捷方式。当你在 IDE 内的按钮上使用鼠标时，Key Promoter X 会显示您应该使用的键盘快捷键。\n\n![](https://img-blog.csdnimg.cn/img_convert/9e322a042b24cec31a37c9d6a8150fbd.gif)\n\n4.  **CodeGlance**\n\n类似于 Sublime 中的代码小地图嵌入到编辑器窗格中，可用于快速定位代码；\n\n![](https://img-blog.csdnimg.cn/img_convert/87c302b9b3e26b4d6c3db9dda1e408d1.png)\n\n5.  **leetcode editor**\n\n作为一个程序员，摸鱼休闲的时候怎么能忘了刷题呢，这个插件能够让你在 Pycharm 中直接打开 Leetcode 的题目，就算你想在上班时间摸摸鱼，别人也看不出来你是在刷题呀，岂不是美哉。\n\n![](https://img-blog.csdnimg.cn/img_convert/2d52b43c4f1128f8b048f23789c8ab0b.gif)\n\n## 4. 用 Pycharm 写程序\n\n好了，经过上面的步骤之后，我们就可以用 Pycharm 来写程序了，这一节我们就看看怎么用 Pycharm 实现最简单的 `hello world` ！\n\n1.  首先，点击主界面中的 `New Project`；\n\n![](https://img-blog.csdnimg.cn/img_convert/9b852996af723edef6ee15b0109d4ad3.png)\n\n2.   然后设置项目存放地址，以及配置 Python 解释器，最后点击右下角 `Create` 按钮即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/c88c96317bdb8f7cc0c13095745a9329.png)\n\n3.  此时我们的项目就创建好了，不过此时项目是🈳️的，啥也没有，所以我们需要建立一个 Python 脚本，用来存放我们的代码。在项目上点击鼠标右键，依次点击 `New -> Python File`；\n\n![](https://img-blog.csdnimg.cn/img_convert/f1e913cb8be14c97ec5c61c945abc745.png)\n\n4.  填写你的脚本名称，⚠️ 虽然没明确说不能用中文，但是最好不要非主流，老老实实用英文就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/b32f87cbe4770ac6a23b33321917683a.png)\n\n5.  好了，脚本文件也建立好了，现在就是编写代码了；\n\n![](https://img-blog.csdnimg.cn/img_convert/ea925eda49e4b7242f098a9139bac9e4.png)\n\n6.  在代码编辑区域或者选中当前脚本文件，鼠标右键运行即可，或者你也可以使用快捷键 `Ctrl + Shift + F10` 运行；\n\n![](https://img-blog.csdnimg.cn/img_convert/44e27cca5a530d16cd5569d9ff592b40.png)\n\n## 5. 总结\n\n好了，关于 Pycharm 的安装和相关配置以及使用小技巧就介绍到这里了，更多进阶有趣的玩法，欢迎大家留言一起探讨，也欢迎大家加入我的交流群，和大家一起侃侃呀！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Python-入门指北】No-2-玩转-Pycharm.md","raw":"---\ntitle: 【Python 入门指北】No 2. 玩转 Pycharm\nmathjax: true\ntoc: true\ntags:\n  - Python\n  - Pycharm\ncategories:\n  - Python 养成记\nabbrlink: a650a32b\ndate: 2021-05-04 09:47:00\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。\n\n那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：\n\n1.  **Pycharm 安装**\n2.  **Pycharm 配置**\n3.  **Pycharm 插件**\n4.  **如何用 Pycharm 写程序**\n\n## 2. Pycharm 安装\n\n这部分主要说一下如何安装 Pycharm，本文以 macOS 的安装为例，其他系统下的安装等有空了再做吧，😂，那下边就正式开始安装过程。\n\n关于社区版和专业版的区别就不再多说了，正常来讲我们选社区版就足够了，不过因为我有专业版的账号，所以下边还是以专业版为例来安装，不过大家不用担心，两者的安装过程是一样的。\n\n1.  首先去官网下载 [安装包](https://www.jetbrains.com/pycharm/)；\n\n![下载](https://img-blog.csdnimg.cn/img_convert/657a1c37ad44c9f7d200a45c38f446de.png)\n\n2.  双击下载好的 `.dmg` 安装包；\n\n![安装](https://img-blog.csdnimg.cn/img_convert/32d18b40bd507fbd10715c3d6284451f.png)\n\n3.  将图标拖动到右边的 `Applications` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/2e5961299d058a9cc3be2dfaffa4220b.png)\n\n4.  好了，就是这么简单，我们的 Pycharm 已经安装好了，从启动台找到并打开就好了；\n\n![选择打开](https://img-blog.csdnimg.cn/img_convert/0ab894d3cad273d805d2cd5ddb04418d.png)\n\n![Pycharm 主界面](https://img-blog.csdnimg.cn/img_convert/e4785159ea6460e7acad4ce985768c8d.png)\n\n\n\n## 3. Pycharm 配置\n\n### 3.1 字体、主题设置\n\n依次打开 `Customize -> All Settings -> Appearance & Behavior -> Appearance`，然后在右边选择自己喜欢的主题，以及字体，这里推荐使用 Jetbrains 家自己出品的字体 `JetBrains Mono`，然后大小的话，选择自己喜欢的号即可； \n\n![](https://img-blog.csdnimg.cn/img_convert/67ad4519e98752c322905ae12c3f7590.png)\n\n![IDE设置](https://img-blog.csdnimg.cn/img_convert/d43675988d4836f85ecc03d95d9af4b5.png)\n\n上面设置的是 IDE 总体界面的字体和主题，下面来进行代码编辑器的字体和主题；\n\n依次打开 `Customize -> All Settings -> Editor -> Font`，依次根据自己的喜好设置字体和大小；\n\n![字体设置](https://img-blog.csdnimg.cn/img_convert/f2b97a31864152f6a020e1fcb8c17d06.png)\n\n然后依次打开 `Customize -> All Settings -> Editor -> Color Scheme`，然后选择自己喜欢的主题就好；\n\n![主题设置](https://img-blog.csdnimg.cn/img_convert/951796848fec370e7b899626c1bf9e61.png)\n\n### 3.2 编码设置\n\n一般来讲，macOS 下的默认编码是 UTF-8，但是 Windows 下的却不是，所以要设置一下才行；\n\n依次打开 `Customize -> All Settings -> Editor -> File Encodings`，然后把右边框中的都设置为 UTF-8 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/295ccdc914251ca4be59e23b03209fbb.png)\n\n### 3.3 开发模版设置\n\n模板就是一种通用的格式，如果在 Pycharm 中设置了模板，那么每次创建一个 Python 文件的时候都会自动包含模板中的内容，方便我们后续开发；\n\n依次打开 `Customize -> All Settings -> Editor -> File and Code Templates`，然后选择 `Python Script`，在右边框中填入自己要自定义的模板即可。而如果你要对其他文件设置模板，那方法也是一样的。\n\n![](https://img-blog.csdnimg.cn/img_convert/31cc5795f221b0920d5ec675074e536d.png)\n\n然后我们以后每次创建 Python 文件，上面的模板内容就都会预先定义好了。\n\n![](https://img-blog.csdnimg.cn/img_convert/0ad01e95bc47ea0e43a84044e551ff90.png)\n\n### 3.4 插件\n\n虽然 Pycharm 已经很 🐂🍺 了，但是它还有个厉害的地方在于它可以扩展插件。通过插件，能让我们的 Pycharm 用起来更爽。如果我们把 Pycharm 比做王者荣耀里边的英雄，那么插件就像红蓝 Buff，能让我们的英雄变得更加厉害。接下来，就让我来推荐给大家几款我常用的插件吧。\n\n首先，既然要用插件，那我们得知道怎么安装吧。\n\n好的，让我们依次打开 `Customize -> All Settings ->Plugins`，然后在右边的框中输入你想要的插件搜索即可，搜到结果之后，点击安装即可；\n\n![插件安装](https://img-blog.csdnimg.cn/img_convert/1b05aca0d08e1c6c9e824180b19b0302.png)\n\n1.  **Rainbow Brackets**\n\n人如其名，Rainbow 意为彩虹，而这款插件的作用就是给你的代码块之间很清晰的显示出各种颜色的高亮。或许你早已被代码中繁多的括号给搞蒙了，有了它，你就再也不用担心这个问题了。\n\n![](https://img-blog.csdnimg.cn/img_convert/8810359a1f3f484534c45001ebd33a68.png)\n\n2.  **Material Theme UI**\n\nMaterial Theme UI 是JetBrains IDE（IntelliJ IDEA，WebStorm，Android Studio等）的插件，可将原始外观更改为 Material Design 外观。最初的灵感来自 Sublime Text 的 Material Theme，这个插件提供了一整套设置，可以按照你想要的方式调整 IDE，让你的 IDE 变得更加漂亮！\n\n![](https://img-blog.csdnimg.cn/img_convert/136acdb0ad11c14fc0e3d75be3788e9d.png)\n\n3.  **Key Promoter X**\n\nKey Promoter X 帮助你在工作时学习必要的快捷方式。当你在 IDE 内的按钮上使用鼠标时，Key Promoter X 会显示您应该使用的键盘快捷键。\n\n![](https://img-blog.csdnimg.cn/img_convert/9e322a042b24cec31a37c9d6a8150fbd.gif)\n\n4.  **CodeGlance**\n\n类似于 Sublime 中的代码小地图嵌入到编辑器窗格中，可用于快速定位代码；\n\n![](https://img-blog.csdnimg.cn/img_convert/87c302b9b3e26b4d6c3db9dda1e408d1.png)\n\n5.  **leetcode editor**\n\n作为一个程序员，摸鱼休闲的时候怎么能忘了刷题呢，这个插件能够让你在 Pycharm 中直接打开 Leetcode 的题目，就算你想在上班时间摸摸鱼，别人也看不出来你是在刷题呀，岂不是美哉。\n\n![](https://img-blog.csdnimg.cn/img_convert/2d52b43c4f1128f8b048f23789c8ab0b.gif)\n\n## 4. 用 Pycharm 写程序\n\n好了，经过上面的步骤之后，我们就可以用 Pycharm 来写程序了，这一节我们就看看怎么用 Pycharm 实现最简单的 `hello world` ！\n\n1.  首先，点击主界面中的 `New Project`；\n\n![](https://img-blog.csdnimg.cn/img_convert/9b852996af723edef6ee15b0109d4ad3.png)\n\n2.   然后设置项目存放地址，以及配置 Python 解释器，最后点击右下角 `Create` 按钮即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/c88c96317bdb8f7cc0c13095745a9329.png)\n\n3.  此时我们的项目就创建好了，不过此时项目是🈳️的，啥也没有，所以我们需要建立一个 Python 脚本，用来存放我们的代码。在项目上点击鼠标右键，依次点击 `New -> Python File`；\n\n![](https://img-blog.csdnimg.cn/img_convert/f1e913cb8be14c97ec5c61c945abc745.png)\n\n4.  填写你的脚本名称，⚠️ 虽然没明确说不能用中文，但是最好不要非主流，老老实实用英文就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/b32f87cbe4770ac6a23b33321917683a.png)\n\n5.  好了，脚本文件也建立好了，现在就是编写代码了；\n\n![](https://img-blog.csdnimg.cn/img_convert/ea925eda49e4b7242f098a9139bac9e4.png)\n\n6.  在代码编辑区域或者选中当前脚本文件，鼠标右键运行即可，或者你也可以使用快捷键 `Ctrl + Shift + F10` 运行；\n\n![](https://img-blog.csdnimg.cn/img_convert/44e27cca5a530d16cd5569d9ff592b40.png)\n\n## 5. 总结\n\n好了，关于 Pycharm 的安装和相关配置以及使用小技巧就介绍到这里了，更多进阶有趣的玩法，欢迎大家留言一起探讨，也欢迎大家加入我的交流群，和大家一起侃侃呀！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Python-入门指北】No-2-玩转-Pycharm","published":1,"updated":"2021-05-04T01:52:52.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvz5000bbw34cel0ahc6","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。</p>\n<p>那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：</p>\n<ol>\n<li><strong>Pycharm 安装</strong></li>\n<li><strong>Pycharm 配置</strong></li>\n<li><strong>Pycharm 插件</strong></li>\n<li><strong>如何用 Pycharm 写程序</strong></li>\n</ol>\n<h2 id=\"2-Pycharm-安装\"><a href=\"#2-Pycharm-安装\" class=\"headerlink\" title=\"2. Pycharm 安装\"></a>2. Pycharm 安装</h2><p>这部分主要说一下如何安装 Pycharm，本文以 macOS 的安装为例，其他系统下的安装等有空了再做吧，😂，那下边就正式开始安装过程。</p>\n<p>关于社区版和专业版的区别就不再多说了，正常来讲我们选社区版就足够了，不过因为我有专业版的账号，所以下边还是以专业版为例来安装，不过大家不用担心，两者的安装过程是一样的。</p>\n<ol>\n<li>首先去官网下载 <a href=\"https://www.jetbrains.com/pycharm/\">安装包</a>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/657a1c37ad44c9f7d200a45c38f446de.png\" alt=\"下载\"></p>\n<ol>\n<li>双击下载好的 <code>.dmg</code> 安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/32d18b40bd507fbd10715c3d6284451f.png\" alt=\"安装\"></p>\n<ol>\n<li>将图标拖动到右边的 <code>Applications</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2e5961299d058a9cc3be2dfaffa4220b.png\" alt=\"\"></p>\n<ol>\n<li>好了，就是这么简单，我们的 Pycharm 已经安装好了，从启动台找到并打开就好了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ab894d3cad273d805d2cd5ddb04418d.png\" alt=\"选择打开\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e4785159ea6460e7acad4ce985768c8d.png\" alt=\"Pycharm 主界面\"></p>\n<h2 id=\"3-Pycharm-配置\"><a href=\"#3-Pycharm-配置\" class=\"headerlink\" title=\"3. Pycharm 配置\"></a>3. Pycharm 配置</h2><h3 id=\"3-1-字体、主题设置\"><a href=\"#3-1-字体、主题设置\" class=\"headerlink\" title=\"3.1 字体、主题设置\"></a>3.1 字体、主题设置</h3><p>依次打开 <code>Customize -&gt; All Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</code>，然后在右边选择自己喜欢的主题，以及字体，这里推荐使用 Jetbrains 家自己出品的字体 <code>JetBrains Mono</code>，然后大小的话，选择自己喜欢的号即可； </p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/67ad4519e98752c322905ae12c3f7590.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d43675988d4836f85ecc03d95d9af4b5.png\" alt=\"IDE设置\"></p>\n<p>上面设置的是 IDE 总体界面的字体和主题，下面来进行代码编辑器的字体和主题；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Font</code>，依次根据自己的喜好设置字体和大小；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f2b97a31864152f6a020e1fcb8c17d06.png\" alt=\"字体设置\"></p>\n<p>然后依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Color Scheme</code>，然后选择自己喜欢的主题就好；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/951796848fec370e7b899626c1bf9e61.png\" alt=\"主题设置\"></p>\n<h3 id=\"3-2-编码设置\"><a href=\"#3-2-编码设置\" class=\"headerlink\" title=\"3.2 编码设置\"></a>3.2 编码设置</h3><p>一般来讲，macOS 下的默认编码是 UTF-8，但是 Windows 下的却不是，所以要设置一下才行；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File Encodings</code>，然后把右边框中的都设置为 UTF-8 即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/295ccdc914251ca4be59e23b03209fbb.png\" alt=\"\"></p>\n<h3 id=\"3-3-开发模版设置\"><a href=\"#3-3-开发模版设置\" class=\"headerlink\" title=\"3.3 开发模版设置\"></a>3.3 开发模版设置</h3><p>模板就是一种通用的格式，如果在 Pycharm 中设置了模板，那么每次创建一个 Python 文件的时候都会自动包含模板中的内容，方便我们后续开发；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File and Code Templates</code>，然后选择 <code>Python Script</code>，在右边框中填入自己要自定义的模板即可。而如果你要对其他文件设置模板，那方法也是一样的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/31cc5795f221b0920d5ec675074e536d.png\" alt=\"\"></p>\n<p>然后我们以后每次创建 Python 文件，上面的模板内容就都会预先定义好了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ad01e95bc47ea0e43a84044e551ff90.png\" alt=\"\"></p>\n<h3 id=\"3-4-插件\"><a href=\"#3-4-插件\" class=\"headerlink\" title=\"3.4 插件\"></a>3.4 插件</h3><p>虽然 Pycharm 已经很 🐂🍺 了，但是它还有个厉害的地方在于它可以扩展插件。通过插件，能让我们的 Pycharm 用起来更爽。如果我们把 Pycharm 比做王者荣耀里边的英雄，那么插件就像红蓝 Buff，能让我们的英雄变得更加厉害。接下来，就让我来推荐给大家几款我常用的插件吧。</p>\n<p>首先，既然要用插件，那我们得知道怎么安装吧。</p>\n<p>好的，让我们依次打开 <code>Customize -&gt; All Settings -&gt;Plugins</code>，然后在右边的框中输入你想要的插件搜索即可，搜到结果之后，点击安装即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1b05aca0d08e1c6c9e824180b19b0302.png\" alt=\"插件安装\"></p>\n<ol>\n<li><strong>Rainbow Brackets</strong></li>\n</ol>\n<p>人如其名，Rainbow 意为彩虹，而这款插件的作用就是给你的代码块之间很清晰的显示出各种颜色的高亮。或许你早已被代码中繁多的括号给搞蒙了，有了它，你就再也不用担心这个问题了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8810359a1f3f484534c45001ebd33a68.png\" alt=\"\"></p>\n<ol>\n<li><strong>Material Theme UI</strong></li>\n</ol>\n<p>Material Theme UI 是JetBrains IDE（IntelliJ IDEA，WebStorm，Android Studio等）的插件，可将原始外观更改为 Material Design 外观。最初的灵感来自 Sublime Text 的 Material Theme，这个插件提供了一整套设置，可以按照你想要的方式调整 IDE，让你的 IDE 变得更加漂亮！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/136acdb0ad11c14fc0e3d75be3788e9d.png\" alt=\"\"></p>\n<ol>\n<li><strong>Key Promoter X</strong></li>\n</ol>\n<p>Key Promoter X 帮助你在工作时学习必要的快捷方式。当你在 IDE 内的按钮上使用鼠标时，Key Promoter X 会显示您应该使用的键盘快捷键。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9e322a042b24cec31a37c9d6a8150fbd.gif\" alt=\"\"></p>\n<ol>\n<li><strong>CodeGlance</strong></li>\n</ol>\n<p>类似于 Sublime 中的代码小地图嵌入到编辑器窗格中，可用于快速定位代码；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/87c302b9b3e26b4d6c3db9dda1e408d1.png\" alt=\"\"></p>\n<ol>\n<li><strong>leetcode editor</strong></li>\n</ol>\n<p>作为一个程序员，摸鱼休闲的时候怎么能忘了刷题呢，这个插件能够让你在 Pycharm 中直接打开 Leetcode 的题目，就算你想在上班时间摸摸鱼，别人也看不出来你是在刷题呀，岂不是美哉。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d52b43c4f1128f8b048f23789c8ab0b.gif\" alt=\"\"></p>\n<h2 id=\"4-用-Pycharm-写程序\"><a href=\"#4-用-Pycharm-写程序\" class=\"headerlink\" title=\"4. 用 Pycharm 写程序\"></a>4. 用 Pycharm 写程序</h2><p>好了，经过上面的步骤之后，我们就可以用 Pycharm 来写程序了，这一节我们就看看怎么用 Pycharm 实现最简单的 <code>hello world</code> ！</p>\n<ol>\n<li>首先，点击主界面中的 <code>New Project</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b852996af723edef6ee15b0109d4ad3.png\" alt=\"\"></p>\n<ol>\n<li>然后设置项目存放地址，以及配置 Python 解释器，最后点击右下角 <code>Create</code> 按钮即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c88c96317bdb8f7cc0c13095745a9329.png\" alt=\"\"></p>\n<ol>\n<li>此时我们的项目就创建好了，不过此时项目是🈳️的，啥也没有，所以我们需要建立一个 Python 脚本，用来存放我们的代码。在项目上点击鼠标右键，依次点击 <code>New -&gt; Python File</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f1e913cb8be14c97ec5c61c945abc745.png\" alt=\"\"></p>\n<ol>\n<li>填写你的脚本名称，⚠️ 虽然没明确说不能用中文，但是最好不要非主流，老老实实用英文就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b32f87cbe4770ac6a23b33321917683a.png\" alt=\"\"></p>\n<ol>\n<li>好了，脚本文件也建立好了，现在就是编写代码了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ea925eda49e4b7242f098a9139bac9e4.png\" alt=\"\"></p>\n<ol>\n<li>在代码编辑区域或者选中当前脚本文件，鼠标右键运行即可，或者你也可以使用快捷键 <code>Ctrl + Shift + F10</code> 运行；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44e27cca5a530d16cd5569d9ff592b40.png\" alt=\"\"></p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，关于 Pycharm 的安装和相关配置以及使用小技巧就介绍到这里了，更多进阶有趣的玩法，欢迎大家留言一起探讨，也欢迎大家加入我的交流群，和大家一起侃侃呀！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。</p>\n<p>那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：</p>\n<ol>\n<li><strong>Pycharm 安装</strong></li>\n<li><strong>Pycharm 配置</strong></li>\n<li><strong>Pycharm 插件</strong></li>\n<li><strong>如何用 Pycharm 写程序</strong></li>\n</ol>\n<h2 id=\"2-Pycharm-安装\"><a href=\"#2-Pycharm-安装\" class=\"headerlink\" title=\"2. Pycharm 安装\"></a>2. Pycharm 安装</h2><p>这部分主要说一下如何安装 Pycharm，本文以 macOS 的安装为例，其他系统下的安装等有空了再做吧，😂，那下边就正式开始安装过程。</p>\n<p>关于社区版和专业版的区别就不再多说了，正常来讲我们选社区版就足够了，不过因为我有专业版的账号，所以下边还是以专业版为例来安装，不过大家不用担心，两者的安装过程是一样的。</p>\n<ol>\n<li>首先去官网下载 <a href=\"https://www.jetbrains.com/pycharm/\">安装包</a>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/657a1c37ad44c9f7d200a45c38f446de.png\" alt=\"下载\"></p>\n<ol>\n<li>双击下载好的 <code>.dmg</code> 安装包；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/32d18b40bd507fbd10715c3d6284451f.png\" alt=\"安装\"></p>\n<ol>\n<li>将图标拖动到右边的 <code>Applications</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2e5961299d058a9cc3be2dfaffa4220b.png\" alt=\"\"></p>\n<ol>\n<li>好了，就是这么简单，我们的 Pycharm 已经安装好了，从启动台找到并打开就好了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ab894d3cad273d805d2cd5ddb04418d.png\" alt=\"选择打开\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e4785159ea6460e7acad4ce985768c8d.png\" alt=\"Pycharm 主界面\"></p>\n<h2 id=\"3-Pycharm-配置\"><a href=\"#3-Pycharm-配置\" class=\"headerlink\" title=\"3. Pycharm 配置\"></a>3. Pycharm 配置</h2><h3 id=\"3-1-字体、主题设置\"><a href=\"#3-1-字体、主题设置\" class=\"headerlink\" title=\"3.1 字体、主题设置\"></a>3.1 字体、主题设置</h3><p>依次打开 <code>Customize -&gt; All Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</code>，然后在右边选择自己喜欢的主题，以及字体，这里推荐使用 Jetbrains 家自己出品的字体 <code>JetBrains Mono</code>，然后大小的话，选择自己喜欢的号即可； </p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/67ad4519e98752c322905ae12c3f7590.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d43675988d4836f85ecc03d95d9af4b5.png\" alt=\"IDE设置\"></p>\n<p>上面设置的是 IDE 总体界面的字体和主题，下面来进行代码编辑器的字体和主题；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Font</code>，依次根据自己的喜好设置字体和大小；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f2b97a31864152f6a020e1fcb8c17d06.png\" alt=\"字体设置\"></p>\n<p>然后依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Color Scheme</code>，然后选择自己喜欢的主题就好；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/951796848fec370e7b899626c1bf9e61.png\" alt=\"主题设置\"></p>\n<h3 id=\"3-2-编码设置\"><a href=\"#3-2-编码设置\" class=\"headerlink\" title=\"3.2 编码设置\"></a>3.2 编码设置</h3><p>一般来讲，macOS 下的默认编码是 UTF-8，但是 Windows 下的却不是，所以要设置一下才行；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File Encodings</code>，然后把右边框中的都设置为 UTF-8 即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/295ccdc914251ca4be59e23b03209fbb.png\" alt=\"\"></p>\n<h3 id=\"3-3-开发模版设置\"><a href=\"#3-3-开发模版设置\" class=\"headerlink\" title=\"3.3 开发模版设置\"></a>3.3 开发模版设置</h3><p>模板就是一种通用的格式，如果在 Pycharm 中设置了模板，那么每次创建一个 Python 文件的时候都会自动包含模板中的内容，方便我们后续开发；</p>\n<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File and Code Templates</code>，然后选择 <code>Python Script</code>，在右边框中填入自己要自定义的模板即可。而如果你要对其他文件设置模板，那方法也是一样的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/31cc5795f221b0920d5ec675074e536d.png\" alt=\"\"></p>\n<p>然后我们以后每次创建 Python 文件，上面的模板内容就都会预先定义好了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ad01e95bc47ea0e43a84044e551ff90.png\" alt=\"\"></p>\n<h3 id=\"3-4-插件\"><a href=\"#3-4-插件\" class=\"headerlink\" title=\"3.4 插件\"></a>3.4 插件</h3><p>虽然 Pycharm 已经很 🐂🍺 了，但是它还有个厉害的地方在于它可以扩展插件。通过插件，能让我们的 Pycharm 用起来更爽。如果我们把 Pycharm 比做王者荣耀里边的英雄，那么插件就像红蓝 Buff，能让我们的英雄变得更加厉害。接下来，就让我来推荐给大家几款我常用的插件吧。</p>\n<p>首先，既然要用插件，那我们得知道怎么安装吧。</p>\n<p>好的，让我们依次打开 <code>Customize -&gt; All Settings -&gt;Plugins</code>，然后在右边的框中输入你想要的插件搜索即可，搜到结果之后，点击安装即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1b05aca0d08e1c6c9e824180b19b0302.png\" alt=\"插件安装\"></p>\n<ol>\n<li><strong>Rainbow Brackets</strong></li>\n</ol>\n<p>人如其名，Rainbow 意为彩虹，而这款插件的作用就是给你的代码块之间很清晰的显示出各种颜色的高亮。或许你早已被代码中繁多的括号给搞蒙了，有了它，你就再也不用担心这个问题了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8810359a1f3f484534c45001ebd33a68.png\" alt=\"\"></p>\n<ol>\n<li><strong>Material Theme UI</strong></li>\n</ol>\n<p>Material Theme UI 是JetBrains IDE（IntelliJ IDEA，WebStorm，Android Studio等）的插件，可将原始外观更改为 Material Design 外观。最初的灵感来自 Sublime Text 的 Material Theme，这个插件提供了一整套设置，可以按照你想要的方式调整 IDE，让你的 IDE 变得更加漂亮！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/136acdb0ad11c14fc0e3d75be3788e9d.png\" alt=\"\"></p>\n<ol>\n<li><strong>Key Promoter X</strong></li>\n</ol>\n<p>Key Promoter X 帮助你在工作时学习必要的快捷方式。当你在 IDE 内的按钮上使用鼠标时，Key Promoter X 会显示您应该使用的键盘快捷键。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9e322a042b24cec31a37c9d6a8150fbd.gif\" alt=\"\"></p>\n<ol>\n<li><strong>CodeGlance</strong></li>\n</ol>\n<p>类似于 Sublime 中的代码小地图嵌入到编辑器窗格中，可用于快速定位代码；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/87c302b9b3e26b4d6c3db9dda1e408d1.png\" alt=\"\"></p>\n<ol>\n<li><strong>leetcode editor</strong></li>\n</ol>\n<p>作为一个程序员，摸鱼休闲的时候怎么能忘了刷题呢，这个插件能够让你在 Pycharm 中直接打开 Leetcode 的题目，就算你想在上班时间摸摸鱼，别人也看不出来你是在刷题呀，岂不是美哉。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d52b43c4f1128f8b048f23789c8ab0b.gif\" alt=\"\"></p>\n<h2 id=\"4-用-Pycharm-写程序\"><a href=\"#4-用-Pycharm-写程序\" class=\"headerlink\" title=\"4. 用 Pycharm 写程序\"></a>4. 用 Pycharm 写程序</h2><p>好了，经过上面的步骤之后，我们就可以用 Pycharm 来写程序了，这一节我们就看看怎么用 Pycharm 实现最简单的 <code>hello world</code> ！</p>\n<ol>\n<li>首先，点击主界面中的 <code>New Project</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b852996af723edef6ee15b0109d4ad3.png\" alt=\"\"></p>\n<ol>\n<li>然后设置项目存放地址，以及配置 Python 解释器，最后点击右下角 <code>Create</code> 按钮即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c88c96317bdb8f7cc0c13095745a9329.png\" alt=\"\"></p>\n<ol>\n<li>此时我们的项目就创建好了，不过此时项目是🈳️的，啥也没有，所以我们需要建立一个 Python 脚本，用来存放我们的代码。在项目上点击鼠标右键，依次点击 <code>New -&gt; Python File</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f1e913cb8be14c97ec5c61c945abc745.png\" alt=\"\"></p>\n<ol>\n<li>填写你的脚本名称，⚠️ 虽然没明确说不能用中文，但是最好不要非主流，老老实实用英文就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b32f87cbe4770ac6a23b33321917683a.png\" alt=\"\"></p>\n<ol>\n<li>好了，脚本文件也建立好了，现在就是编写代码了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ea925eda49e4b7242f098a9139bac9e4.png\" alt=\"\"></p>\n<ol>\n<li>在代码编辑区域或者选中当前脚本文件，鼠标右键运行即可，或者你也可以使用快捷键 <code>Ctrl + Shift + F10</code> 运行；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44e27cca5a530d16cd5569d9ff592b40.png\" alt=\"\"></p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，关于 Pycharm 的安装和相关配置以及使用小技巧就介绍到这里了，更多进阶有趣的玩法，欢迎大家留言一起探讨，也欢迎大家加入我的交流群，和大家一起侃侃呀！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Python 入门指北】No 1. Python 简介","mathjax":true,"toc":true,"abbrlink":"afd62f34","date":"2021-05-04T01:46:49.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。\n\n本文内容安排如下：\n\n1.  **什么是 Python**\n2.  **Python 发展历史**\n3.  **Python 优缺点**\n4.  **Python 用途**\n5.  **Python 解释器**\n6.  **Python 开发工具**\n\n## 2. Python 简介\n\n### 2.1 Python 是什么\n\n正如你所知道的，Python 它和 Java、C、C++ 一样，是一门编程语言。但是不同于其他语言的是，它是一个结合了解释性、编译性、互动性和面向对象的脚本语言。\n\nPython 可以说是集大家所长，你可以用简单的几行代码就能实现神奇的效果，无论是简单的文字处理，还是大规模的数据分析，亦或是 WWW 游戏或者游戏，它都不在话下。\n\n总结起来，相比于其他语言，它有着如下几点特色语法结构：\n\n-   **解释性**：类似于 PHP 和 Perl，免去了编译这个环节；\n-   **交互式**：即我们能够在终端中 Python 提示符 `>>>` 的后面直接执行代码；\n-   **面向对象**：类似于 Java 和 C++，Python 也支持面向对象编程，即将代码封装在对象中；\n-   **面向初学者**：相比于其他编程语言，Python 语法简单，往往只需要简单的几行代码就能实现其他语言需要一大段同样效果；\n\n### 2.2 Python 发展历史\n\n-   1989 年圣诞节：Guido von Rossum（也就是大家说的 “龟叔”）开始动手写 Python 语言的编译器；\n\n-   1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，底层基于 C 语言实现的，可以调用 C 语言的库函数。在早期的版本中，Python 已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序；\n\n-   1994 年 1 月：Python 1.0 正式发布；\n\n-   2000 年 10 月 16 日：Python 2.0 发布，增加了完整的垃圾回收，提供了对 Unicode 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成；\n\n-   2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，因此目前还有不少公司在项目和运维中使用 Python 2.x 版本；\n\n后续的更新中，基本都是基于 Python 2.0 和 Python 3.0 更新，当前最新的版本应该是 Python 3.9.x 版本，是在 2021 年发布的。Python的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A，即 2 或 3；B 表示功能更新，当出现新功能时就需要增加 B；而 C 则表示小的改动（例如：修复了某个Bug），一旦有修改就增加 C；\n\n### 2.3 Python 优缺点\n\nPython 优点很多，总结起来主要有如下几点：\n\n-   优雅、明确、简单；\n-   开发效率高；\n-   可移植性强；\n-   可扩展性强；\n-   可嵌入性好；\n\n但是同时 Python 也存在着许多缺点，一般来讲主要集中在以下几点：\n\n-   相对于C/C++等语言而言，运行速度慢；\n-   线程间无法利用多CPU的问题；\n-   代码不能加密；\n\n### 2.4 应用领域\n\n- 云计算；\n- WEB开发；\n- 系统运维；\n- 图形GUI；\n- 金融分析；\n- 科学运算、人工智能；\n\n## 3. 安装 Python 解释器\n\n要正式迈入 Python 学习之路，首先你得保证你使用的电脑上已经有了 Python 解释器。安装之前，先介绍几个 Python 的解释器：\n\n- **CPython**\n    即 C 语言实现的 Python，当我们从 Python 官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行 Python 就是相当于启动了 CPyhton 解释器；\n- **IPython**\n    基于 CPython 之上的一个交互式的解释器，其底层还是基于 CPython，只不过交互性比起 CPython 更好。就好比 Chrome 和 360 极速浏览器，虽然不同，但 360 极速浏览器的内核却是Chrome；\n- **JPython**\n    运行于 Java 平台的 Python 解释器，能够直接将Python代码编译为 Java 字节码并执行；\n- **PyPy**\n    PyPy 最突出的优点就是可以提升Python代码的执行速度，它采用了JIT 技术，对 Python 代码进行了动态编译，这样一来 Python 代码的执行速度得以显著提升；\n- **IronPython**\n    类似于 JPython，它是运行于微软 .Net 平台上的解释器，能够将 Python 代码编译成 .Net 的字节码；\n\n通常来讲，要安装 Python 解释器，只需要去其 [官网](https://www.python.org/downloads/) 下载对应系统的安装包，然后进行安装即可，这也符合我们大多数人的使用习惯。但如果你确定要学习一段时间的 Python，并且以后要用它来进行各种工作，那么我更推荐使用 [`Miniconda`](https://docs.conda.io/en/latest/miniconda.html#)。它方便我们创建不同的环境，然后自由的在各个环境之间切换，对于后续的开发工作十分友好。\n\n### 3.1 Miniconda 的安装\n\n#### Windows\n\n1.  首先，我们需要去下载选择对应版本的 [安装包](https://docs.conda.io/en/latest/miniconda.html#windows-installers)；\n2.  然后双击下载好的 `.exe` 文件；\n3.  然后根据屏幕指示，一步一步选择安装位置以及其他指示即可；\n4.  完成安装之后，打开你的控制台，然后使用 `conda list` 进行测试，如果安装成功，此时就会列出你当前环境下所安装的包；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### Linux\n\n1.  首先下载对应 [安装包](https://docs.conda.io/en/latest/miniconda.html#linux-installers)；\n2.  接着打开终端，进入你的安装包所在路径，使用如下命令进行安装即可；\n\n```bash\nchmod +x Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n```\n\n3.  按照提示进行安装即可（主要就是选择自己的安装位置以及是否设置环境变量）；\n4.  安装完成后最好重启终端，然后使用 `conda list` 命令进行测试是否成功；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### macOS\n\n1.  下载 [安装包](https://docs.conda.io/en/latest/miniconda.html#macosx-installers)；\n2.  如果下载的是 `.pkg` 格式，双击打开安装即可，如果不是，则打开终端，进入安装包所在路径，然后使用如下命令进行安装；\n\n```bash\nbash Miniconda3-latest-MacOSX-x86_64.sh\n```\n\n3.  根据屏幕提示进行安装；\n4.  安装完成后最好重启终端，然后使用 `conda list` 命令进行测试是否成功；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### ⚠️ 注意\n\n一般来讲，Linux 和 macOS 都已经是默认安装了 Python 的，而且一般是 2.x 版本；\n\n如果上面给出的下载链接过慢，可以移步 [清华镜像源](https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/) 进行下载；\n\n### 3.2 Hello World！\n\n好了，我们的解释器安装好了，接下来就是激动人心的写代码了，那就从最最经典的 `hello world` 开始吧！\n\n打开命令行提示符（Windows）或者终端（Linux/macOS）；\n\n通过如下命令来查看我们的 Python 版本；\n\n```bash\npython -version\n```\n\n接着使用如下命令进入 Python 交互环境；\n\n```bash\npython\n```\n\n好了，现在就可以编写并运行我们的 `hello world` 程序了，只需要一行代码，就能打印出 `hello world`，而如果你要打印其他信息，只需要把括号中双引号引起的内容替换成你想要打印的信息即可，括号中的双引号不仅也可以用单引号代替；\n\n```python\nprint(\"hello world\")\n```\n\n运行结果如下图所示；\n\n![](https://img-blog.csdnimg.cn/img_convert/48764992e842434cc3b64b75d14df761.png)\n\n## 4. 开发工具\n\n要进行 Python 开发，我们只需要一个文本编辑器就可以了，但是要想提高效率，那你一定不能错过 Python 开发神器 - [Pycharm](https://www.jetbrains.com/pycharm/download/)。\n\nPycharm 分为社区版（Community）和专业版（Professional），两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号（或者去找个破解版）。关于它的安装和配置教程，到这里说的也挺多了，那就到下一篇文章再细说吧！\n\n## 5. 总结\n\n本文到此就算结束了，主要是对 Python 进行了简单介绍，让大家对 Python 有一个大概的认识。然后介绍了如何安装 Python 解释器以及如何在终端中实现自己的 `hello world`，最后则是给大家推荐了一个 Python 开发工具，不过关于它的具体安装和配置就准备在下一篇文章中去讲了。如果你也感兴趣，那就赶紧去关注我吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Python-入门指北】No-1-Python-简介.md","raw":"---\ntitle: 【Python 入门指北】No 1. Python 简介\nmathjax: true\ntoc: true\ntags:\n  - Python\ncategories:\n  - Python 养成记\nabbrlink: afd62f34\ndate: 2021-05-04 09:46:49\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。\n\n本文内容安排如下：\n\n1.  **什么是 Python**\n2.  **Python 发展历史**\n3.  **Python 优缺点**\n4.  **Python 用途**\n5.  **Python 解释器**\n6.  **Python 开发工具**\n\n## 2. Python 简介\n\n### 2.1 Python 是什么\n\n正如你所知道的，Python 它和 Java、C、C++ 一样，是一门编程语言。但是不同于其他语言的是，它是一个结合了解释性、编译性、互动性和面向对象的脚本语言。\n\nPython 可以说是集大家所长，你可以用简单的几行代码就能实现神奇的效果，无论是简单的文字处理，还是大规模的数据分析，亦或是 WWW 游戏或者游戏，它都不在话下。\n\n总结起来，相比于其他语言，它有着如下几点特色语法结构：\n\n-   **解释性**：类似于 PHP 和 Perl，免去了编译这个环节；\n-   **交互式**：即我们能够在终端中 Python 提示符 `>>>` 的后面直接执行代码；\n-   **面向对象**：类似于 Java 和 C++，Python 也支持面向对象编程，即将代码封装在对象中；\n-   **面向初学者**：相比于其他编程语言，Python 语法简单，往往只需要简单的几行代码就能实现其他语言需要一大段同样效果；\n\n### 2.2 Python 发展历史\n\n-   1989 年圣诞节：Guido von Rossum（也就是大家说的 “龟叔”）开始动手写 Python 语言的编译器；\n\n-   1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，底层基于 C 语言实现的，可以调用 C 语言的库函数。在早期的版本中，Python 已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序；\n\n-   1994 年 1 月：Python 1.0 正式发布；\n\n-   2000 年 10 月 16 日：Python 2.0 发布，增加了完整的垃圾回收，提供了对 Unicode 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成；\n\n-   2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，因此目前还有不少公司在项目和运维中使用 Python 2.x 版本；\n\n后续的更新中，基本都是基于 Python 2.0 和 Python 3.0 更新，当前最新的版本应该是 Python 3.9.x 版本，是在 2021 年发布的。Python的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A，即 2 或 3；B 表示功能更新，当出现新功能时就需要增加 B；而 C 则表示小的改动（例如：修复了某个Bug），一旦有修改就增加 C；\n\n### 2.3 Python 优缺点\n\nPython 优点很多，总结起来主要有如下几点：\n\n-   优雅、明确、简单；\n-   开发效率高；\n-   可移植性强；\n-   可扩展性强；\n-   可嵌入性好；\n\n但是同时 Python 也存在着许多缺点，一般来讲主要集中在以下几点：\n\n-   相对于C/C++等语言而言，运行速度慢；\n-   线程间无法利用多CPU的问题；\n-   代码不能加密；\n\n### 2.4 应用领域\n\n- 云计算；\n- WEB开发；\n- 系统运维；\n- 图形GUI；\n- 金融分析；\n- 科学运算、人工智能；\n\n## 3. 安装 Python 解释器\n\n要正式迈入 Python 学习之路，首先你得保证你使用的电脑上已经有了 Python 解释器。安装之前，先介绍几个 Python 的解释器：\n\n- **CPython**\n    即 C 语言实现的 Python，当我们从 Python 官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行 Python 就是相当于启动了 CPyhton 解释器；\n- **IPython**\n    基于 CPython 之上的一个交互式的解释器，其底层还是基于 CPython，只不过交互性比起 CPython 更好。就好比 Chrome 和 360 极速浏览器，虽然不同，但 360 极速浏览器的内核却是Chrome；\n- **JPython**\n    运行于 Java 平台的 Python 解释器，能够直接将Python代码编译为 Java 字节码并执行；\n- **PyPy**\n    PyPy 最突出的优点就是可以提升Python代码的执行速度，它采用了JIT 技术，对 Python 代码进行了动态编译，这样一来 Python 代码的执行速度得以显著提升；\n- **IronPython**\n    类似于 JPython，它是运行于微软 .Net 平台上的解释器，能够将 Python 代码编译成 .Net 的字节码；\n\n通常来讲，要安装 Python 解释器，只需要去其 [官网](https://www.python.org/downloads/) 下载对应系统的安装包，然后进行安装即可，这也符合我们大多数人的使用习惯。但如果你确定要学习一段时间的 Python，并且以后要用它来进行各种工作，那么我更推荐使用 [`Miniconda`](https://docs.conda.io/en/latest/miniconda.html#)。它方便我们创建不同的环境，然后自由的在各个环境之间切换，对于后续的开发工作十分友好。\n\n### 3.1 Miniconda 的安装\n\n#### Windows\n\n1.  首先，我们需要去下载选择对应版本的 [安装包](https://docs.conda.io/en/latest/miniconda.html#windows-installers)；\n2.  然后双击下载好的 `.exe` 文件；\n3.  然后根据屏幕指示，一步一步选择安装位置以及其他指示即可；\n4.  完成安装之后，打开你的控制台，然后使用 `conda list` 进行测试，如果安装成功，此时就会列出你当前环境下所安装的包；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### Linux\n\n1.  首先下载对应 [安装包](https://docs.conda.io/en/latest/miniconda.html#linux-installers)；\n2.  接着打开终端，进入你的安装包所在路径，使用如下命令进行安装即可；\n\n```bash\nchmod +x Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n```\n\n3.  按照提示进行安装即可（主要就是选择自己的安装位置以及是否设置环境变量）；\n4.  安装完成后最好重启终端，然后使用 `conda list` 命令进行测试是否成功；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### macOS\n\n1.  下载 [安装包](https://docs.conda.io/en/latest/miniconda.html#macosx-installers)；\n2.  如果下载的是 `.pkg` 格式，双击打开安装即可，如果不是，则打开终端，进入安装包所在路径，然后使用如下命令进行安装；\n\n```bash\nbash Miniconda3-latest-MacOSX-x86_64.sh\n```\n\n3.  根据屏幕提示进行安装；\n4.  安装完成后最好重启终端，然后使用 `conda list` 命令进行测试是否成功；\n5.  如果要升级，使用 `conda update conda` 命令进行升级即可；\n\n#### ⚠️ 注意\n\n一般来讲，Linux 和 macOS 都已经是默认安装了 Python 的，而且一般是 2.x 版本；\n\n如果上面给出的下载链接过慢，可以移步 [清华镜像源](https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/) 进行下载；\n\n### 3.2 Hello World！\n\n好了，我们的解释器安装好了，接下来就是激动人心的写代码了，那就从最最经典的 `hello world` 开始吧！\n\n打开命令行提示符（Windows）或者终端（Linux/macOS）；\n\n通过如下命令来查看我们的 Python 版本；\n\n```bash\npython -version\n```\n\n接着使用如下命令进入 Python 交互环境；\n\n```bash\npython\n```\n\n好了，现在就可以编写并运行我们的 `hello world` 程序了，只需要一行代码，就能打印出 `hello world`，而如果你要打印其他信息，只需要把括号中双引号引起的内容替换成你想要打印的信息即可，括号中的双引号不仅也可以用单引号代替；\n\n```python\nprint(\"hello world\")\n```\n\n运行结果如下图所示；\n\n![](https://img-blog.csdnimg.cn/img_convert/48764992e842434cc3b64b75d14df761.png)\n\n## 4. 开发工具\n\n要进行 Python 开发，我们只需要一个文本编辑器就可以了，但是要想提高效率，那你一定不能错过 Python 开发神器 - [Pycharm](https://www.jetbrains.com/pycharm/download/)。\n\nPycharm 分为社区版（Community）和专业版（Professional），两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号（或者去找个破解版）。关于它的安装和配置教程，到这里说的也挺多了，那就到下一篇文章再细说吧！\n\n## 5. 总结\n\n本文到此就算结束了，主要是对 Python 进行了简单介绍，让大家对 Python 有一个大概的认识。然后介绍了如何安装 Python 解释器以及如何在终端中实现自己的 `hello world`，最后则是给大家推荐了一个 Python 开发工具，不过关于它的具体安装和配置就准备在下一篇文章中去讲了。如果你也感兴趣，那就赶紧去关注我吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Python-入门指北】No-1-Python-简介","published":1,"updated":"2021-05-04T01:52:52.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvza000gbw342ir5fyy5","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。</p>\n<p>本文内容安排如下：</p>\n<ol>\n<li><strong>什么是 Python</strong></li>\n<li><strong>Python 发展历史</strong></li>\n<li><strong>Python 优缺点</strong></li>\n<li><strong>Python 用途</strong></li>\n<li><strong>Python 解释器</strong></li>\n<li><strong>Python 开发工具</strong></li>\n</ol>\n<h2 id=\"2-Python-简介\"><a href=\"#2-Python-简介\" class=\"headerlink\" title=\"2. Python 简介\"></a>2. Python 简介</h2><h3 id=\"2-1-Python-是什么\"><a href=\"#2-1-Python-是什么\" class=\"headerlink\" title=\"2.1 Python 是什么\"></a>2.1 Python 是什么</h3><p>正如你所知道的，Python 它和 Java、C、C++ 一样，是一门编程语言。但是不同于其他语言的是，它是一个结合了解释性、编译性、互动性和面向对象的脚本语言。</p>\n<p>Python 可以说是集大家所长，你可以用简单的几行代码就能实现神奇的效果，无论是简单的文字处理，还是大规模的数据分析，亦或是 WWW 游戏或者游戏，它都不在话下。</p>\n<p>总结起来，相比于其他语言，它有着如下几点特色语法结构：</p>\n<ul>\n<li><strong>解释性</strong>：类似于 PHP 和 Perl，免去了编译这个环节；</li>\n<li><strong>交互式</strong>：即我们能够在终端中 Python 提示符 <code>&gt;&gt;&gt;</code> 的后面直接执行代码；</li>\n<li><strong>面向对象</strong>：类似于 Java 和 C++，Python 也支持面向对象编程，即将代码封装在对象中；</li>\n<li><strong>面向初学者</strong>：相比于其他编程语言，Python 语法简单，往往只需要简单的几行代码就能实现其他语言需要一大段同样效果；</li>\n</ul>\n<h3 id=\"2-2-Python-发展历史\"><a href=\"#2-2-Python-发展历史\" class=\"headerlink\" title=\"2.2 Python 发展历史\"></a>2.2 Python 发展历史</h3><ul>\n<li><p>1989 年圣诞节：Guido von Rossum（也就是大家说的 “龟叔”）开始动手写 Python 语言的编译器；</p>\n</li>\n<li><p>1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，底层基于 C 语言实现的，可以调用 C 语言的库函数。在早期的版本中，Python 已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序；</p>\n</li>\n<li><p>1994 年 1 月：Python 1.0 正式发布；</p>\n</li>\n<li><p>2000 年 10 月 16 日：Python 2.0 发布，增加了完整的垃圾回收，提供了对 Unicode 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成；</p>\n</li>\n<li><p>2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，因此目前还有不少公司在项目和运维中使用 Python 2.x 版本；</p>\n</li>\n</ul>\n<p>后续的更新中，基本都是基于 Python 2.0 和 Python 3.0 更新，当前最新的版本应该是 Python 3.9.x 版本，是在 2021 年发布的。Python的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A，即 2 或 3；B 表示功能更新，当出现新功能时就需要增加 B；而 C 则表示小的改动（例如：修复了某个Bug），一旦有修改就增加 C；</p>\n<h3 id=\"2-3-Python-优缺点\"><a href=\"#2-3-Python-优缺点\" class=\"headerlink\" title=\"2.3 Python 优缺点\"></a>2.3 Python 优缺点</h3><p>Python 优点很多，总结起来主要有如下几点：</p>\n<ul>\n<li>优雅、明确、简单；</li>\n<li>开发效率高；</li>\n<li>可移植性强；</li>\n<li>可扩展性强；</li>\n<li>可嵌入性好；</li>\n</ul>\n<p>但是同时 Python 也存在着许多缺点，一般来讲主要集中在以下几点：</p>\n<ul>\n<li>相对于C/C++等语言而言，运行速度慢；</li>\n<li>线程间无法利用多CPU的问题；</li>\n<li>代码不能加密；</li>\n</ul>\n<h3 id=\"2-4-应用领域\"><a href=\"#2-4-应用领域\" class=\"headerlink\" title=\"2.4 应用领域\"></a>2.4 应用领域</h3><ul>\n<li>云计算；</li>\n<li>WEB开发；</li>\n<li>系统运维；</li>\n<li>图形GUI；</li>\n<li>金融分析；</li>\n<li>科学运算、人工智能；</li>\n</ul>\n<h2 id=\"3-安装-Python-解释器\"><a href=\"#3-安装-Python-解释器\" class=\"headerlink\" title=\"3. 安装 Python 解释器\"></a>3. 安装 Python 解释器</h2><p>要正式迈入 Python 学习之路，首先你得保证你使用的电脑上已经有了 Python 解释器。安装之前，先介绍几个 Python 的解释器：</p>\n<ul>\n<li><strong>CPython</strong><br>  即 C 语言实现的 Python，当我们从 Python 官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行 Python 就是相当于启动了 CPyhton 解释器；</li>\n<li><strong>IPython</strong><br>  基于 CPython 之上的一个交互式的解释器，其底层还是基于 CPython，只不过交互性比起 CPython 更好。就好比 Chrome 和 360 极速浏览器，虽然不同，但 360 极速浏览器的内核却是Chrome；</li>\n<li><strong>JPython</strong><br>  运行于 Java 平台的 Python 解释器，能够直接将Python代码编译为 Java 字节码并执行；</li>\n<li><strong>PyPy</strong><br>  PyPy 最突出的优点就是可以提升Python代码的执行速度，它采用了JIT 技术，对 Python 代码进行了动态编译，这样一来 Python 代码的执行速度得以显著提升；</li>\n<li><strong>IronPython</strong><br>  类似于 JPython，它是运行于微软 .Net 平台上的解释器，能够将 Python 代码编译成 .Net 的字节码；</li>\n</ul>\n<p>通常来讲，要安装 Python 解释器，只需要去其 <a href=\"https://www.python.org/downloads/\">官网</a> 下载对应系统的安装包，然后进行安装即可，这也符合我们大多数人的使用习惯。但如果你确定要学习一段时间的 Python，并且以后要用它来进行各种工作，那么我更推荐使用 <a href=\"https://docs.conda.io/en/latest/miniconda.html#\"><code>Miniconda</code></a>。它方便我们创建不同的环境，然后自由的在各个环境之间切换，对于后续的开发工作十分友好。</p>\n<h3 id=\"3-1-Miniconda-的安装\"><a href=\"#3-1-Miniconda-的安装\" class=\"headerlink\" title=\"3.1 Miniconda 的安装\"></a>3.1 Miniconda 的安装</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><ol>\n<li>首先，我们需要去下载选择对应版本的 <a href=\"https://docs.conda.io/en/latest/miniconda.html#windows-installers\">安装包</a>；</li>\n<li>然后双击下载好的 <code>.exe</code> 文件；</li>\n<li>然后根据屏幕指示，一步一步选择安装位置以及其他指示即可；</li>\n<li>完成安装之后，打开你的控制台，然后使用 <code>conda list</code> 进行测试，如果安装成功，此时就会列出你当前环境下所安装的包；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><ol>\n<li>首先下载对应 <a href=\"https://docs.conda.io/en/latest/miniconda.html#linux-installers\">安装包</a>；</li>\n<li>接着打开终端，进入你的安装包所在路径，使用如下命令进行安装即可；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh\n<span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>按照提示进行安装即可（主要就是选择自己的安装位置以及是否设置环境变量）；</li>\n<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h4><ol>\n<li>下载 <a href=\"https://docs.conda.io/en/latest/miniconda.html#macosx-installers\">安装包</a>；</li>\n<li>如果下载的是 <code>.pkg</code> 格式，双击打开安装即可，如果不是，则打开终端，进入安装包所在路径，然后使用如下命令进行安装；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> Miniconda3-latest-MacOSX-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>根据屏幕提示进行安装；</li>\n<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"⚠️-注意\"><a href=\"#⚠️-注意\" class=\"headerlink\" title=\"⚠️ 注意\"></a>⚠️ 注意</h4><p>一般来讲，Linux 和 macOS 都已经是默认安装了 Python 的，而且一般是 2.x 版本；</p>\n<p>如果上面给出的下载链接过慢，可以移步 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\">清华镜像源</a> 进行下载；</p>\n<h3 id=\"3-2-Hello-World！\"><a href=\"#3-2-Hello-World！\" class=\"headerlink\" title=\"3.2 Hello World！\"></a>3.2 Hello World！</h3><p>好了，我们的解释器安装好了，接下来就是激动人心的写代码了，那就从最最经典的 <code>hello world</code> 开始吧！</p>\n<p>打开命令行提示符（Windows）或者终端（Linux/macOS）；</p>\n<p>通过如下命令来查看我们的 Python 版本；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接着使用如下命令进入 Python 交互环境；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>好了，现在就可以编写并运行我们的 <code>hello world</code> 程序了，只需要一行代码，就能打印出 <code>hello world</code>，而如果你要打印其他信息，只需要把括号中双引号引起的内容替换成你想要打印的信息即可，括号中的双引号不仅也可以用单引号代替；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行结果如下图所示；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/48764992e842434cc3b64b75d14df761.png\" alt=\"\"></p>\n<h2 id=\"4-开发工具\"><a href=\"#4-开发工具\" class=\"headerlink\" title=\"4. 开发工具\"></a>4. 开发工具</h2><p>要进行 Python 开发，我们只需要一个文本编辑器就可以了，但是要想提高效率，那你一定不能错过 Python 开发神器 - <a href=\"https://www.jetbrains.com/pycharm/download/\">Pycharm</a>。</p>\n<p>Pycharm 分为社区版（Community）和专业版（Professional），两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号（或者去找个破解版）。关于它的安装和配置教程，到这里说的也挺多了，那就到下一篇文章再细说吧！</p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>本文到此就算结束了，主要是对 Python 进行了简单介绍，让大家对 Python 有一个大概的认识。然后介绍了如何安装 Python 解释器以及如何在终端中实现自己的 <code>hello world</code>，最后则是给大家推荐了一个 Python 开发工具，不过关于它的具体安装和配置就准备在下一篇文章中去讲了。如果你也感兴趣，那就赶紧去关注我吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。</p>\n<p>本文内容安排如下：</p>\n<ol>\n<li><strong>什么是 Python</strong></li>\n<li><strong>Python 发展历史</strong></li>\n<li><strong>Python 优缺点</strong></li>\n<li><strong>Python 用途</strong></li>\n<li><strong>Python 解释器</strong></li>\n<li><strong>Python 开发工具</strong></li>\n</ol>\n<h2 id=\"2-Python-简介\"><a href=\"#2-Python-简介\" class=\"headerlink\" title=\"2. Python 简介\"></a>2. Python 简介</h2><h3 id=\"2-1-Python-是什么\"><a href=\"#2-1-Python-是什么\" class=\"headerlink\" title=\"2.1 Python 是什么\"></a>2.1 Python 是什么</h3><p>正如你所知道的，Python 它和 Java、C、C++ 一样，是一门编程语言。但是不同于其他语言的是，它是一个结合了解释性、编译性、互动性和面向对象的脚本语言。</p>\n<p>Python 可以说是集大家所长，你可以用简单的几行代码就能实现神奇的效果，无论是简单的文字处理，还是大规模的数据分析，亦或是 WWW 游戏或者游戏，它都不在话下。</p>\n<p>总结起来，相比于其他语言，它有着如下几点特色语法结构：</p>\n<ul>\n<li><strong>解释性</strong>：类似于 PHP 和 Perl，免去了编译这个环节；</li>\n<li><strong>交互式</strong>：即我们能够在终端中 Python 提示符 <code>&gt;&gt;&gt;</code> 的后面直接执行代码；</li>\n<li><strong>面向对象</strong>：类似于 Java 和 C++，Python 也支持面向对象编程，即将代码封装在对象中；</li>\n<li><strong>面向初学者</strong>：相比于其他编程语言，Python 语法简单，往往只需要简单的几行代码就能实现其他语言需要一大段同样效果；</li>\n</ul>\n<h3 id=\"2-2-Python-发展历史\"><a href=\"#2-2-Python-发展历史\" class=\"headerlink\" title=\"2.2 Python 发展历史\"></a>2.2 Python 发展历史</h3><ul>\n<li><p>1989 年圣诞节：Guido von Rossum（也就是大家说的 “龟叔”）开始动手写 Python 语言的编译器；</p>\n</li>\n<li><p>1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，底层基于 C 语言实现的，可以调用 C 语言的库函数。在早期的版本中，Python 已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序；</p>\n</li>\n<li><p>1994 年 1 月：Python 1.0 正式发布；</p>\n</li>\n<li><p>2000 年 10 月 16 日：Python 2.0 发布，增加了完整的垃圾回收，提供了对 Unicode 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成；</p>\n</li>\n<li><p>2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，因此目前还有不少公司在项目和运维中使用 Python 2.x 版本；</p>\n</li>\n</ul>\n<p>后续的更新中，基本都是基于 Python 2.0 和 Python 3.0 更新，当前最新的版本应该是 Python 3.9.x 版本，是在 2021 年发布的。Python的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A，即 2 或 3；B 表示功能更新，当出现新功能时就需要增加 B；而 C 则表示小的改动（例如：修复了某个Bug），一旦有修改就增加 C；</p>\n<h3 id=\"2-3-Python-优缺点\"><a href=\"#2-3-Python-优缺点\" class=\"headerlink\" title=\"2.3 Python 优缺点\"></a>2.3 Python 优缺点</h3><p>Python 优点很多，总结起来主要有如下几点：</p>\n<ul>\n<li>优雅、明确、简单；</li>\n<li>开发效率高；</li>\n<li>可移植性强；</li>\n<li>可扩展性强；</li>\n<li>可嵌入性好；</li>\n</ul>\n<p>但是同时 Python 也存在着许多缺点，一般来讲主要集中在以下几点：</p>\n<ul>\n<li>相对于C/C++等语言而言，运行速度慢；</li>\n<li>线程间无法利用多CPU的问题；</li>\n<li>代码不能加密；</li>\n</ul>\n<h3 id=\"2-4-应用领域\"><a href=\"#2-4-应用领域\" class=\"headerlink\" title=\"2.4 应用领域\"></a>2.4 应用领域</h3><ul>\n<li>云计算；</li>\n<li>WEB开发；</li>\n<li>系统运维；</li>\n<li>图形GUI；</li>\n<li>金融分析；</li>\n<li>科学运算、人工智能；</li>\n</ul>\n<h2 id=\"3-安装-Python-解释器\"><a href=\"#3-安装-Python-解释器\" class=\"headerlink\" title=\"3. 安装 Python 解释器\"></a>3. 安装 Python 解释器</h2><p>要正式迈入 Python 学习之路，首先你得保证你使用的电脑上已经有了 Python 解释器。安装之前，先介绍几个 Python 的解释器：</p>\n<ul>\n<li><strong>CPython</strong><br>  即 C 语言实现的 Python，当我们从 Python 官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行 Python 就是相当于启动了 CPyhton 解释器；</li>\n<li><strong>IPython</strong><br>  基于 CPython 之上的一个交互式的解释器，其底层还是基于 CPython，只不过交互性比起 CPython 更好。就好比 Chrome 和 360 极速浏览器，虽然不同，但 360 极速浏览器的内核却是Chrome；</li>\n<li><strong>JPython</strong><br>  运行于 Java 平台的 Python 解释器，能够直接将Python代码编译为 Java 字节码并执行；</li>\n<li><strong>PyPy</strong><br>  PyPy 最突出的优点就是可以提升Python代码的执行速度，它采用了JIT 技术，对 Python 代码进行了动态编译，这样一来 Python 代码的执行速度得以显著提升；</li>\n<li><strong>IronPython</strong><br>  类似于 JPython，它是运行于微软 .Net 平台上的解释器，能够将 Python 代码编译成 .Net 的字节码；</li>\n</ul>\n<p>通常来讲，要安装 Python 解释器，只需要去其 <a href=\"https://www.python.org/downloads/\">官网</a> 下载对应系统的安装包，然后进行安装即可，这也符合我们大多数人的使用习惯。但如果你确定要学习一段时间的 Python，并且以后要用它来进行各种工作，那么我更推荐使用 <a href=\"https://docs.conda.io/en/latest/miniconda.html#\"><code>Miniconda</code></a>。它方便我们创建不同的环境，然后自由的在各个环境之间切换，对于后续的开发工作十分友好。</p>\n<h3 id=\"3-1-Miniconda-的安装\"><a href=\"#3-1-Miniconda-的安装\" class=\"headerlink\" title=\"3.1 Miniconda 的安装\"></a>3.1 Miniconda 的安装</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><ol>\n<li>首先，我们需要去下载选择对应版本的 <a href=\"https://docs.conda.io/en/latest/miniconda.html#windows-installers\">安装包</a>；</li>\n<li>然后双击下载好的 <code>.exe</code> 文件；</li>\n<li>然后根据屏幕指示，一步一步选择安装位置以及其他指示即可；</li>\n<li>完成安装之后，打开你的控制台，然后使用 <code>conda list</code> 进行测试，如果安装成功，此时就会列出你当前环境下所安装的包；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><ol>\n<li>首先下载对应 <a href=\"https://docs.conda.io/en/latest/miniconda.html#linux-installers\">安装包</a>；</li>\n<li>接着打开终端，进入你的安装包所在路径，使用如下命令进行安装即可；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh\n<span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>按照提示进行安装即可（主要就是选择自己的安装位置以及是否设置环境变量）；</li>\n<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h4><ol>\n<li>下载 <a href=\"https://docs.conda.io/en/latest/miniconda.html#macosx-installers\">安装包</a>；</li>\n<li>如果下载的是 <code>.pkg</code> 格式，双击打开安装即可，如果不是，则打开终端，进入安装包所在路径，然后使用如下命令进行安装；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> Miniconda3-latest-MacOSX-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>根据屏幕提示进行安装；</li>\n<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>\n<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>\n</ol>\n<h4 id=\"⚠️-注意\"><a href=\"#⚠️-注意\" class=\"headerlink\" title=\"⚠️ 注意\"></a>⚠️ 注意</h4><p>一般来讲，Linux 和 macOS 都已经是默认安装了 Python 的，而且一般是 2.x 版本；</p>\n<p>如果上面给出的下载链接过慢，可以移步 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\">清华镜像源</a> 进行下载；</p>\n<h3 id=\"3-2-Hello-World！\"><a href=\"#3-2-Hello-World！\" class=\"headerlink\" title=\"3.2 Hello World！\"></a>3.2 Hello World！</h3><p>好了，我们的解释器安装好了，接下来就是激动人心的写代码了，那就从最最经典的 <code>hello world</code> 开始吧！</p>\n<p>打开命令行提示符（Windows）或者终端（Linux/macOS）；</p>\n<p>通过如下命令来查看我们的 Python 版本；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接着使用如下命令进入 Python 交互环境；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>好了，现在就可以编写并运行我们的 <code>hello world</code> 程序了，只需要一行代码，就能打印出 <code>hello world</code>，而如果你要打印其他信息，只需要把括号中双引号引起的内容替换成你想要打印的信息即可，括号中的双引号不仅也可以用单引号代替；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行结果如下图所示；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/48764992e842434cc3b64b75d14df761.png\" alt=\"\"></p>\n<h2 id=\"4-开发工具\"><a href=\"#4-开发工具\" class=\"headerlink\" title=\"4. 开发工具\"></a>4. 开发工具</h2><p>要进行 Python 开发，我们只需要一个文本编辑器就可以了，但是要想提高效率，那你一定不能错过 Python 开发神器 - <a href=\"https://www.jetbrains.com/pycharm/download/\">Pycharm</a>。</p>\n<p>Pycharm 分为社区版（Community）和专业版（Professional），两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号（或者去找个破解版）。关于它的安装和配置教程，到这里说的也挺多了，那就到下一篇文章再细说吧！</p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>本文到此就算结束了，主要是对 Python 进行了简单介绍，让大家对 Python 有一个大概的认识。然后介绍了如何安装 Python 解释器以及如何在终端中实现自己的 <code>hello world</code>，最后则是给大家推荐了一个 Python 开发工具，不过关于它的具体安装和配置就准备在下一篇文章中去讲了。如果你也感兴趣，那就赶紧去关注我吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】04. 二维数组中的查找","mathjax":true,"toc":true,"abbrlink":"4ba50e26","date":"2021-05-04T08:36:28.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 04. 二维数组中的查找](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/)\n- 难度：中等\n\n## 描述\n\n>   在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n>\n>   示例:\n>\n>   现有矩阵 matrix 如下：\n>\n>   [\n>\n>   [1,   4,  7, 11, 15],\n>\n>   [2,   5,  8, 12, 19],\n>\n>   [3,   6,  9, 16, 22],\n>\n>   [10, 13, 14, 17, 24],\n>\n>   [18, 21, 23, 26, 30]\n>\n>   ]\n>\n>   给定 target = 5，返回 true。\n>\n>   给定 target = 20，返回 false。\n>\n>   限制：\n>\n>   $0 <= n <= 1000$\n>\n>   $0 <= m <= 1000$\n\n## 方法\n\n### 思路\n\n1.  暴力法\n2.  直接遍历二维数组，然后判断其中的各个元素是否和查找的目标值是否相等，一旦相等则返回 `true`\n3.  默认返回 `false`\n4.  主要操作是遍历操作，时间复杂度为 $O(m * n)$\n\n### 实现\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    // 暴力遍历\n    // 双层循环，然后判断二维数组中是否存在该整数，存在则返回 true\n    for(int i = 0; i < matrix.length; i++){\n        for(int j = 0; j < matrix[i].length; j++){\n            if(target == matrix[i][j]){\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】04-二维数组中的查找.md","raw":"---\ntitle: 【剑指 Offer】04. 二维数组中的查找\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 4ba50e26\ndate: 2021-05-04 16:36:28\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 04. 二维数组中的查找](https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/)\n- 难度：中等\n\n## 描述\n\n>   在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n>\n>   示例:\n>\n>   现有矩阵 matrix 如下：\n>\n>   [\n>\n>   [1,   4,  7, 11, 15],\n>\n>   [2,   5,  8, 12, 19],\n>\n>   [3,   6,  9, 16, 22],\n>\n>   [10, 13, 14, 17, 24],\n>\n>   [18, 21, 23, 26, 30]\n>\n>   ]\n>\n>   给定 target = 5，返回 true。\n>\n>   给定 target = 20，返回 false。\n>\n>   限制：\n>\n>   $0 <= n <= 1000$\n>\n>   $0 <= m <= 1000$\n\n## 方法\n\n### 思路\n\n1.  暴力法\n2.  直接遍历二维数组，然后判断其中的各个元素是否和查找的目标值是否相等，一旦相等则返回 `true`\n3.  默认返回 `false`\n4.  主要操作是遍历操作，时间复杂度为 $O(m * n)$\n\n### 实现\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    // 暴力遍历\n    // 双层循环，然后判断二维数组中是否存在该整数，存在则返回 true\n    for(int i = 0; i < matrix.length; i++){\n        for(int j = 0; j < matrix[i].length; j++){\n            if(target == matrix[i][j]){\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】04-二维数组中的查找","published":1,"updated":"2021-05-06T14:02:27.928Z","_id":"cko9sdvzd000ibw34f3q6d1cd","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/\">剑指 Offer 04. 二维数组中的查找</a></li>\n<li>难度：中等</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p>  示例:</p>\n<p>  现有矩阵 matrix 如下：</p>\n<p>  [</p>\n<p>  [1,   4,  7, 11, 15],</p>\n<p>  [2,   5,  8, 12, 19],</p>\n<p>  [3,   6,  9, 16, 22],</p>\n<p>  [10, 13, 14, 17, 24],</p>\n<p>  [18, 21, 23, 26, 30]</p>\n<p>  ]</p>\n<p>  给定 target = 5，返回 true。</p>\n<p>  给定 target = 20，返回 false。</p>\n<p>  限制：</p>\n<p>  $0 &lt;= n &lt;= 1000$</p>\n<p>  $0 &lt;= m &lt;= 1000$</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>暴力法</li>\n<li>直接遍历二维数组，然后判断其中的各个元素是否和查找的目标值是否相等，一旦相等则返回 <code>true</code></li>\n<li>默认返回 <code>false</code></li>\n<li>主要操作是遍历操作，时间复杂度为 $O(m * n)$</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">findNumberIn2DArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 暴力遍历</span>\n    <span class=\"token comment\">// 双层循环，然后判断二维数组中是否存在该整数，存在则返回 true</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/\">剑指 Offer 04. 二维数组中的查找</a></li>\n<li>难度：中等</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p>  示例:</p>\n<p>  现有矩阵 matrix 如下：</p>\n<p>  [</p>\n<p>  [1,   4,  7, 11, 15],</p>\n<p>  [2,   5,  8, 12, 19],</p>\n<p>  [3,   6,  9, 16, 22],</p>\n<p>  [10, 13, 14, 17, 24],</p>\n<p>  [18, 21, 23, 26, 30]</p>\n<p>  ]</p>\n<p>  给定 target = 5，返回 true。</p>\n<p>  给定 target = 20，返回 false。</p>\n<p>  限制：</p>\n<p>  $0 &lt;= n &lt;= 1000$</p>\n<p>  $0 &lt;= m &lt;= 1000$</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>暴力法</li>\n<li>直接遍历二维数组，然后判断其中的各个元素是否和查找的目标值是否相等，一旦相等则返回 <code>true</code></li>\n<li>默认返回 <code>false</code></li>\n<li>主要操作是遍历操作，时间复杂度为 $O(m * n)$</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">findNumberIn2DArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 暴力遍历</span>\n    <span class=\"token comment\">// 双层循环，然后判断二维数组中是否存在该整数，存在则返回 true</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】03. 数组中重复的数字","mathjax":true,"toc":true,"abbrlink":"14fc53a7","date":"2021-05-04T08:36:56.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 03. 数组中重复的数字](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/)\n-   难度：简单\n\n## 描述\n\n找出数组中重复的数字。\n\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n>   **输入**：\n>   [2, 3, 1, 0, 2, 5, 3]\n>\n>   **输出**：2 或 3 \n>\n>   **限制**：\n>\n>   2 <= n <= 100000\n\n## 方法\n\n\n\n### 思路\n\n1.  定义一个集合 `set` 来存放数组中出现过但不重复的数组；\n2.  然后对数组中的元素进行判断，若 `set` 中不含有，则加入 `set`；\n3.  若 `set` 中已有该元素，则说明该元素是数组中重复出现的元素；\n4.  打印该元素即可；\n5.  主要是对数组进行遍历操作，所以时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    Set<Integer> set = new HashSet<>();\n    int resutl = 0;\n    set.add(nums[0]);\n    for (int i = 1; i < nums.length; i++) {\n        if (set.contains(nums[i])) {\n            resutl = nums[i];\n        } else {\n            set.add(nums[i]);\n        }\n    }\n    return resutl;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】03-数组中重复的数字.md","raw":"---\ntitle: 【剑指 Offer】03. 数组中重复的数字\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 14fc53a7\ndate: 2021-05-04 16:36:56\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 03. 数组中重复的数字](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/)\n-   难度：简单\n\n## 描述\n\n找出数组中重复的数字。\n\n\n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n\n示例 1：\n\n>   **输入**：\n>   [2, 3, 1, 0, 2, 5, 3]\n>\n>   **输出**：2 或 3 \n>\n>   **限制**：\n>\n>   2 <= n <= 100000\n\n## 方法\n\n\n\n### 思路\n\n1.  定义一个集合 `set` 来存放数组中出现过但不重复的数组；\n2.  然后对数组中的元素进行判断，若 `set` 中不含有，则加入 `set`；\n3.  若 `set` 中已有该元素，则说明该元素是数组中重复出现的元素；\n4.  打印该元素即可；\n5.  主要是对数组进行遍历操作，所以时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    Set<Integer> set = new HashSet<>();\n    int resutl = 0;\n    set.add(nums[0]);\n    for (int i = 1; i < nums.length; i++) {\n        if (set.contains(nums[i])) {\n            resutl = nums[i];\n        } else {\n            set.add(nums[i]);\n        }\n    }\n    return resutl;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】03-数组中重复的数字","published":1,"updated":"2021-05-04T08:45:31.284Z","_id":"cko9sdvzh000nbw34ggtzfzla","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/\">剑指 Offer 03. 数组中重复的数字</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>找出数组中重复的数字。</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>  <strong>输入</strong>：<br>  [2, 3, 1, 0, 2, 5, 3]</p>\n<p>  <strong>输出</strong>：2 或 3 </p>\n<p>  <strong>限制</strong>：</p>\n<p>  2 &lt;= n &lt;= 100000</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义一个集合 <code>set</code> 来存放数组中出现过但不重复的数组；</li>\n<li>然后对数组中的元素进行判断，若 <code>set</code> 中不含有，则加入 <code>set</code>；</li>\n<li>若 <code>set</code> 中已有该元素，则说明该元素是数组中重复出现的元素；</li>\n<li>打印该元素即可；</li>\n<li>主要是对数组进行遍历操作，所以时间复杂度为 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findRepeatNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resutl <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resutl <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> resutl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/\">剑指 Offer 03. 数组中重复的数字</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>找出数组中重复的数字。</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>  <strong>输入</strong>：<br>  [2, 3, 1, 0, 2, 5, 3]</p>\n<p>  <strong>输出</strong>：2 或 3 </p>\n<p>  <strong>限制</strong>：</p>\n<p>  2 &lt;= n &lt;= 100000</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义一个集合 <code>set</code> 来存放数组中出现过但不重复的数组；</li>\n<li>然后对数组中的元素进行判断，若 <code>set</code> 中不含有，则加入 <code>set</code>；</li>\n<li>若 <code>set</code> 中已有该元素，则说明该元素是数组中重复出现的元素；</li>\n<li>打印该元素即可；</li>\n<li>主要是对数组进行遍历操作，所以时间复杂度为 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findRepeatNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resutl <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            resutl <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> resutl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】05. 替换空格","mathjax":true,"toc":true,"abbrlink":"3a6d4dac","date":"2021-05-04T08:36:14.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 05. 替换空格](https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/)\n- 难度：简单\n\n## 描述\n\n>   请实现一个函数，把字符串 `s` 中的每个空格替换成\"%20\"。\n>\n>   **示例 1：**\n>\n>   **输入**：s = \"We are happy.\"\n>\n>   **输出**：\"We%20are%20happy.\"\n>\n>   **限制：**\n>\n>   0 <= s 的长度 <= 10000\n\n## 方法\n\n### 思路\n\n1.  遍历字符串，对字符串中的每个字符进行判断；\n2.  若字符等于空格，则将字符串 `result` 加上 `%20`；\n3.  若不等于空格，则将字符串 `result` 加上字符串当前字符；\n4.  主要进行数组的遍历操作，所以时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic String replaceSpace(String s) {\n    StringBuilder resutl = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) != ' ') {\n            resutl.append(s.charAt(i));\n        } else {\n            resutl.append(\"%20\");\n        }\n    }\n    return resutl.toString();\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】05-替换空格.md","raw":"---\ntitle: 【剑指 Offer】05. 替换空格\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 3a6d4dac\ndate: 2021-05-04 16:36:14\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 05. 替换空格](https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/)\n- 难度：简单\n\n## 描述\n\n>   请实现一个函数，把字符串 `s` 中的每个空格替换成\"%20\"。\n>\n>   **示例 1：**\n>\n>   **输入**：s = \"We are happy.\"\n>\n>   **输出**：\"We%20are%20happy.\"\n>\n>   **限制：**\n>\n>   0 <= s 的长度 <= 10000\n\n## 方法\n\n### 思路\n\n1.  遍历字符串，对字符串中的每个字符进行判断；\n2.  若字符等于空格，则将字符串 `result` 加上 `%20`；\n3.  若不等于空格，则将字符串 `result` 加上字符串当前字符；\n4.  主要进行数组的遍历操作，所以时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic String replaceSpace(String s) {\n    StringBuilder resutl = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) != ' ') {\n            resutl.append(s.charAt(i));\n        } else {\n            resutl.append(\"%20\");\n        }\n    }\n    return resutl.toString();\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】05-替换空格","published":1,"updated":"2021-05-04T08:45:31.288Z","_id":"cko9sdvzj000rbw34fd7ldzkz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/\">剑指 Offer 05. 替换空格</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入</strong>：s = “We are happy.”</p>\n<p>  <strong>输出</strong>：”We%20are%20happy.”</p>\n<p>  <strong>限制：</strong></p>\n<p>  0 &lt;= s 的长度 &lt;= 10000</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历字符串，对字符串中的每个字符进行判断；</li>\n<li>若字符等于空格，则将字符串 <code>result</code> 加上 <code>%20</code>；</li>\n<li>若不等于空格，则将字符串 <code>result</code> 加上字符串当前字符；</li>\n<li>主要进行数组的遍历操作，所以时间复杂度为 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">StringBuilder</span> resutl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resutl<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            resutl<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> resutl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/\">剑指 Offer 05. 替换空格</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入</strong>：s = “We are happy.”</p>\n<p>  <strong>输出</strong>：”We%20are%20happy.”</p>\n<p>  <strong>限制：</strong></p>\n<p>  0 &lt;= s 的长度 &lt;= 10000</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历字符串，对字符串中的每个字符进行判断；</li>\n<li>若字符等于空格，则将字符串 <code>result</code> 加上 <code>%20</code>；</li>\n<li>若不等于空格，则将字符串 <code>result</code> 加上字符串当前字符；</li>\n<li>主要进行数组的遍历操作，所以时间复杂度为 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">StringBuilder</span> resutl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            resutl<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            resutl<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> resutl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】06. 从尾到头打印链表","mathjax":true,"toc":true,"abbrlink":"9f65392e","date":"2021-05-04T08:35:05.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 06. 从尾到头打印链表](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/)\n- 难度：简单\n\n## 描述\n\n>   输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n>\n>   **示例 1：**\n>\n>   **输入：** head = \\[1,3,2\\]\n>\n>   **输出：** [2,3,1\\]\n>\n>   **限制：**\n>\n>   `0 <= 链表长度 <= 10000`\n\n## 方法\n\n### 思路\n\n1.  借助栈的特点，先进后出，我们只需要将链表的元素存入栈中，然后从栈中取出元素，此时取出的顺序就是按照链表元素存入的反序；\n2.  此时将栈中取出的元素存入列表中返回即可；\n3.  主要进行取出链表元素并入栈，此时时间复杂度为 $O(n)$，$n$ 为链表元素个数；\n4.  然后进行出栈并存入操作，此时时间复杂度为 $O(n)$;\n5.  最终的时间复杂度为 $O(n) + O(n) = 2O(n)$，即 $O(n)$；\n\n### 实现\n\n```java\npublic int[] reversePrint(ListNode head) {\n    // 利用栈来存储链表元素，由于是先进后出的数据结构，所以从头到尾存储链表元素，最后出栈时即为从尾到头打印链表元素\n    Stack<Integer> stack = new Stack<>();\n\n    // 入栈\n    while (head != null) {\n        stack.push(head.val);\n        head = head.next;\n    }\n\n    int[] ans = new int[stack.size()];\n\n    // 出栈并存储到数组中\n    for (int i = 0; i < ans.length; i++) {\n        ans[i] = stack.pop();\n    }\n\n    return ans;\n\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】06-从尾到头打印链表.md","raw":"---\ntitle: 【剑指 Offer】06. 从尾到头打印链表\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 9f65392e\ndate: 2021-05-04 16:35:05\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n- [剑指 Offer 06. 从尾到头打印链表](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/)\n- 难度：简单\n\n## 描述\n\n>   输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n>\n>   **示例 1：**\n>\n>   **输入：** head = \\[1,3,2\\]\n>\n>   **输出：** [2,3,1\\]\n>\n>   **限制：**\n>\n>   `0 <= 链表长度 <= 10000`\n\n## 方法\n\n### 思路\n\n1.  借助栈的特点，先进后出，我们只需要将链表的元素存入栈中，然后从栈中取出元素，此时取出的顺序就是按照链表元素存入的反序；\n2.  此时将栈中取出的元素存入列表中返回即可；\n3.  主要进行取出链表元素并入栈，此时时间复杂度为 $O(n)$，$n$ 为链表元素个数；\n4.  然后进行出栈并存入操作，此时时间复杂度为 $O(n)$;\n5.  最终的时间复杂度为 $O(n) + O(n) = 2O(n)$，即 $O(n)$；\n\n### 实现\n\n```java\npublic int[] reversePrint(ListNode head) {\n    // 利用栈来存储链表元素，由于是先进后出的数据结构，所以从头到尾存储链表元素，最后出栈时即为从尾到头打印链表元素\n    Stack<Integer> stack = new Stack<>();\n\n    // 入栈\n    while (head != null) {\n        stack.push(head.val);\n        head = head.next;\n    }\n\n    int[] ans = new int[stack.size()];\n\n    // 出栈并存储到数组中\n    for (int i = 0; i < ans.length; i++) {\n        ans[i] = stack.pop();\n    }\n\n    return ans;\n\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】06-从尾到头打印链表","published":1,"updated":"2021-05-04T08:45:31.292Z","_id":"cko9sdvzm000wbw34963uaht5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/\">剑指 Offer 06. 从尾到头打印链表</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> head = [1,3,2]</p>\n<p>  <strong>输出：</strong> [2,3,1]</p>\n<p>  <strong>限制：</strong></p>\n<p>  <code>0 &lt;= 链表长度 &lt;= 10000</code></p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>借助栈的特点，先进后出，我们只需要将链表的元素存入栈中，然后从栈中取出元素，此时取出的顺序就是按照链表元素存入的反序；</li>\n<li>此时将栈中取出的元素存入列表中返回即可；</li>\n<li>主要进行取出链表元素并入栈，此时时间复杂度为 $O(n)$，$n$ 为链表元素个数；</li>\n<li>然后进行出栈并存入操作，此时时间复杂度为 $O(n)$;</li>\n<li>最终的时间复杂度为 $O(n) + O(n) = 2O(n)$，即 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 利用栈来存储链表元素，由于是先进后出的数据结构，所以从头到尾存储链表元素，最后出栈时即为从尾到头打印链表元素</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 入栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 出栈并存储到数组中</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ans<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/\">剑指 Offer 06. 从尾到头打印链表</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> head = [1,3,2]</p>\n<p>  <strong>输出：</strong> [2,3,1]</p>\n<p>  <strong>限制：</strong></p>\n<p>  <code>0 &lt;= 链表长度 &lt;= 10000</code></p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>借助栈的特点，先进后出，我们只需要将链表的元素存入栈中，然后从栈中取出元素，此时取出的顺序就是按照链表元素存入的反序；</li>\n<li>此时将栈中取出的元素存入列表中返回即可；</li>\n<li>主要进行取出链表元素并入栈，此时时间复杂度为 $O(n)$，$n$ 为链表元素个数；</li>\n<li>然后进行出栈并存入操作，此时时间复杂度为 $O(n)$;</li>\n<li>最终的时间复杂度为 $O(n) + O(n) = 2O(n)$，即 $O(n)$；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 利用栈来存储链表元素，由于是先进后出的数据结构，所以从头到尾存储链表元素，最后出栈时即为从尾到头打印链表元素</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 入栈</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 出栈并存储到数组中</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ans<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指-Offer】07. 重建二叉树","mathjax":true,"toc":true,"abbrlink":"2ca6942c","date":"2021-05-04T08:34:34.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 07. 重建二叉树](https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/)\n-   难度：中等\n\n## 描述\n\n>   输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n>\n>   例如，给出\n>\n>   前序遍历 preorder = \\[3,9,20,15,7\\]\n>\n>   中序遍历 inorder = \\[9,3,15,20,7\\]\n>\n>   返回如下的二叉树：\n>\n>     3\n>    / \\\\\n>   9  20\n>     /  \\\\\n>    15   7\n>\n>   **限制：**\n>\n>   `0 <= 节点个数 <= 5000`\n\n## 方法\n\n### 思路\n\n1.  利用指针\n2.  前序遍历的第一个元素肯定是二叉树的根节点，我么可以查找该节点在中序遍历中的位置，然后拆分出左右子树；\n3.  其中用一个指针用于指向根节点所在索引位置，然后根据该指针位置来拆分左右子树；\n4.  最后递归求出左右子树即可；\n\n### 实现\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    return recursive(0, 0, inorder.length - 1, preorder, inorder);\n}\n\npublic TreeNode recursive(int preStart, int inStart, int inEnd, int[] preOrder, int[] inOrder){\n    // \n    if(inStart > inEnd || preStart > preOrder.length - 1){\n        return null;\n    }\n\n    // 创建根节点，根节点即为先序遍历中的第一个元素\n    TreeNode root = new TreeNode(preOrder[preStart]);\n    // 用于存储不同子树的根节点的索引位置\n    int index = 0;\n\n    // 在中序遍历中找到根节点 root 的位置，然后拆分出来左右子树\n    for(int i = inStart; i <= inEnd; i++){\n        if(root.val == inOrder[i]){\n            // 此时 root 在中序遍历中的索引位置为 i\n            index = i;\n            break;\n        }\n    }\n\n    // 递归拆分左右子树\n    // index-instart+1 就是当前节点左子树的数量加上当前节点的数量\n    // 所以preStart+(index-instart+1)就是当前节点右子树前序遍历开始的位置\n\n    root.left = recursive(preStart + 1, inStart, index - 1, preOrder, inOrder);\n    root.right = recursive(preStart + index - inStart + 1, index + 1, inEnd, preOrder,inOrder);\n\n    return root;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】07-重建二叉树.md","raw":"---\ntitle: 【剑指-Offer】07. 重建二叉树\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 2ca6942c\ndate: 2021-05-04 16:34:34\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 07. 重建二叉树](https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/)\n-   难度：中等\n\n## 描述\n\n>   输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n>\n>   例如，给出\n>\n>   前序遍历 preorder = \\[3,9,20,15,7\\]\n>\n>   中序遍历 inorder = \\[9,3,15,20,7\\]\n>\n>   返回如下的二叉树：\n>\n>     3\n>    / \\\\\n>   9  20\n>     /  \\\\\n>    15   7\n>\n>   **限制：**\n>\n>   `0 <= 节点个数 <= 5000`\n\n## 方法\n\n### 思路\n\n1.  利用指针\n2.  前序遍历的第一个元素肯定是二叉树的根节点，我么可以查找该节点在中序遍历中的位置，然后拆分出左右子树；\n3.  其中用一个指针用于指向根节点所在索引位置，然后根据该指针位置来拆分左右子树；\n4.  最后递归求出左右子树即可；\n\n### 实现\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    return recursive(0, 0, inorder.length - 1, preorder, inorder);\n}\n\npublic TreeNode recursive(int preStart, int inStart, int inEnd, int[] preOrder, int[] inOrder){\n    // \n    if(inStart > inEnd || preStart > preOrder.length - 1){\n        return null;\n    }\n\n    // 创建根节点，根节点即为先序遍历中的第一个元素\n    TreeNode root = new TreeNode(preOrder[preStart]);\n    // 用于存储不同子树的根节点的索引位置\n    int index = 0;\n\n    // 在中序遍历中找到根节点 root 的位置，然后拆分出来左右子树\n    for(int i = inStart; i <= inEnd; i++){\n        if(root.val == inOrder[i]){\n            // 此时 root 在中序遍历中的索引位置为 i\n            index = i;\n            break;\n        }\n    }\n\n    // 递归拆分左右子树\n    // index-instart+1 就是当前节点左子树的数量加上当前节点的数量\n    // 所以preStart+(index-instart+1)就是当前节点右子树前序遍历开始的位置\n\n    root.left = recursive(preStart + 1, inStart, index - 1, preOrder, inOrder);\n    root.right = recursive(preStart + index - inStart + 1, index + 1, inEnd, preOrder,inOrder);\n\n    return root;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】07-重建二叉树","published":1,"updated":"2021-05-04T08:45:31.301Z","_id":"cko9sdvzn000ybw343xt19nnp","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\">剑指 Offer 07. 重建二叉树</a></li>\n<li>难度：中等</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>\n<p>  例如，给出</p>\n<p>  前序遍历 preorder = [3,9,20,15,7]</p>\n<p>  中序遍历 inorder = [9,3,15,20,7]</p>\n<p>  返回如下的二叉树：</p>\n<pre><code>3\n</code></pre><p>   / \\\\<br>  9  20<br>    /  \\\\<br>   15   7</p>\n<p>  <strong>限制：</strong></p>\n<p>  <code>0 &lt;= 节点个数 &lt;= 5000</code></p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用指针</li>\n<li>前序遍历的第一个元素肯定是二叉树的根节点，我么可以查找该节点在中序遍历中的位置，然后拆分出左右子树；</li>\n<li>其中用一个指针用于指向根节点所在索引位置，然后根据该指针位置来拆分左右子树；</li>\n<li>最后递归求出左右子树即可；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preOrder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// </span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inStart <span class=\"token operator\">&gt;</span> inEnd <span class=\"token operator\">||</span> preStart <span class=\"token operator\">&gt;</span> preOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 创建根节点，根节点即为先序遍历中的第一个元素</span>\n    <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 用于存储不同子树的根节点的索引位置</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 在中序遍历中找到根节点 root 的位置，然后拆分出来左右子树</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> inOrder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 此时 root 在中序遍历中的索引位置为 i</span>\n            index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 递归拆分左右子树</span>\n    <span class=\"token comment\">// index-instart+1 就是当前节点左子树的数量加上当前节点的数量</span>\n    <span class=\"token comment\">// 所以preStart+(index-instart+1)就是当前节点右子树前序遍历开始的位置</span>\n\n    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">,</span> inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">+</span> index <span class=\"token operator\">-</span> inStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">,</span>inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\">剑指 Offer 07. 重建二叉树</a></li>\n<li>难度：中等</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>\n<p>  例如，给出</p>\n<p>  前序遍历 preorder = [3,9,20,15,7]</p>\n<p>  中序遍历 inorder = [9,3,15,20,7]</p>\n<p>  返回如下的二叉树：</p>\n<pre><code>3\n</code></pre><p>   / \\\\<br>  9  20<br>    /  \\\\<br>   15   7</p>\n<p>  <strong>限制：</strong></p>\n<p>  <code>0 &lt;= 节点个数 &lt;= 5000</code></p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用指针</li>\n<li>前序遍历的第一个元素肯定是二叉树的根节点，我么可以查找该节点在中序遍历中的位置，然后拆分出左右子树；</li>\n<li>其中用一个指针用于指向根节点所在索引位置，然后根据该指针位置来拆分左右子树；</li>\n<li>最后递归求出左右子树即可；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preOrder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// </span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inStart <span class=\"token operator\">></span> inEnd <span class=\"token operator\">||</span> preStart <span class=\"token operator\">></span> preOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 创建根节点，根节点即为先序遍历中的第一个元素</span>\n    <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 用于存储不同子树的根节点的索引位置</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 在中序遍历中找到根节点 root 的位置，然后拆分出来左右子树</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> inOrder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 此时 root 在中序遍历中的索引位置为 i</span>\n            index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 递归拆分左右子树</span>\n    <span class=\"token comment\">// index-instart+1 就是当前节点左子树的数量加上当前节点的数量</span>\n    <span class=\"token comment\">// 所以preStart+(index-instart+1)就是当前节点右子树前序遍历开始的位置</span>\n\n    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">,</span> inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">+</span> index <span class=\"token operator\">-</span> inStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">,</span>inOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指-Offer】09. 用两个栈实现队列","mathjax":true,"toc":true,"abbrlink":"4eca9a09","date":"2021-05-04T08:34:15.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 09. 用两个栈实现队列](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/)\n-   难度：简单\n\n## 描述\n\n>   用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 `appendTail` 和 `deleteHead` ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，`deleteHead` 操作返回 -1 )\n>\n>   **示例 1：**\n>\n>   **输入：**\n>\n>   [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"\\]\n>\n>   \\[\\[\\],\\[3\\],\\[\\],\\[\\]\\]\n>\n>   **输出：**\\[null,null,3,-1\\]\n>\n>   **示例 2：**\n>\n>   **输入：**\n>\n>   \\[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"\\]\n>\n>   \\[\\[\\],\\[\\],\\[5\\],\\[2\\],\\[\\],\\[\\]\\]\n>\n>   **输出：**\\[null,-1,null,null,5,2\\]\n>\n>   **提示：**\n>\n>   - `1 <= values <= 10000`\n>   - `最多会对 appendTail、deleteHead 进行 10000 次调用`\n\n## 方法 \n\n### 思路\n\n1.  队列是一种先进先出的数据结构，而栈是一种先进后出的数据结构，所以要用栈来实现队列，则需要栈，一个用于入队，一个用于出队；\n2.  入队时，只需要在对应入队的栈中插入数据即可；\n3.  出队时，优先从出队的栈中弹出数据，当出队的栈为空时，再来判断入队的栈是否为空，如果入队的栈为空，则返回 `-1`，当入队的栈不为空时，将入队的栈中的元素弹出并压入出队的栈中；\n4.  最后返回出队的栈中的元素即可；\n\n### 实现\n\n```java\nclass CQueue {\n    // 两个栈，一个用于入，一个用于出\n    // 入的栈 stackIn\n    private Stack<Integer> stackIn;\n    // 出的栈 stackOut\n    private Stack<Integer> stackOut;\n\n    // 构造函数\n    public CQueue() {\n        stackIn = new Stack<Integer>();\n        stackOut = new Stack<Integer>();\n    }\n\n    // 插入元素，即在入的栈中压入该元素\n    public void appendTail(int value) {\n        stackIn.push(value);\n    }\n\n    public int deleteHead() {\n        // 如果出的栈不为空，则直接从这里边出栈即可\n        if(!stackOut.isEmpty()){\n            return stackOut.pop();\n        }\n\n        // 若出和入的栈均为空，则返回 -1\n        if(stackIn.isEmpty()){\n            return - 1;\n        }\n\n        // 入的栈不为空，则弹出并压入出的栈\n        while(!stackIn.isEmpty()){\n            stackOut.push(stackIn.pop());\n        }\n\n        // 弹出由入的栈弹出并压入出的栈中的元素\n        return stackOut.pop();\n    }\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】09-用两个栈实现队列.md","raw":"---\ntitle: 【剑指-Offer】09. 用两个栈实现队列\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 4eca9a09\ndate: 2021-05-04 16:34:15\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 09. 用两个栈实现队列](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/)\n-   难度：简单\n\n## 描述\n\n>   用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 `appendTail` 和 `deleteHead` ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，`deleteHead` 操作返回 -1 )\n>\n>   **示例 1：**\n>\n>   **输入：**\n>\n>   [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"\\]\n>\n>   \\[\\[\\],\\[3\\],\\[\\],\\[\\]\\]\n>\n>   **输出：**\\[null,null,3,-1\\]\n>\n>   **示例 2：**\n>\n>   **输入：**\n>\n>   \\[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"\\]\n>\n>   \\[\\[\\],\\[\\],\\[5\\],\\[2\\],\\[\\],\\[\\]\\]\n>\n>   **输出：**\\[null,-1,null,null,5,2\\]\n>\n>   **提示：**\n>\n>   - `1 <= values <= 10000`\n>   - `最多会对 appendTail、deleteHead 进行 10000 次调用`\n\n## 方法 \n\n### 思路\n\n1.  队列是一种先进先出的数据结构，而栈是一种先进后出的数据结构，所以要用栈来实现队列，则需要栈，一个用于入队，一个用于出队；\n2.  入队时，只需要在对应入队的栈中插入数据即可；\n3.  出队时，优先从出队的栈中弹出数据，当出队的栈为空时，再来判断入队的栈是否为空，如果入队的栈为空，则返回 `-1`，当入队的栈不为空时，将入队的栈中的元素弹出并压入出队的栈中；\n4.  最后返回出队的栈中的元素即可；\n\n### 实现\n\n```java\nclass CQueue {\n    // 两个栈，一个用于入，一个用于出\n    // 入的栈 stackIn\n    private Stack<Integer> stackIn;\n    // 出的栈 stackOut\n    private Stack<Integer> stackOut;\n\n    // 构造函数\n    public CQueue() {\n        stackIn = new Stack<Integer>();\n        stackOut = new Stack<Integer>();\n    }\n\n    // 插入元素，即在入的栈中压入该元素\n    public void appendTail(int value) {\n        stackIn.push(value);\n    }\n\n    public int deleteHead() {\n        // 如果出的栈不为空，则直接从这里边出栈即可\n        if(!stackOut.isEmpty()){\n            return stackOut.pop();\n        }\n\n        // 若出和入的栈均为空，则返回 -1\n        if(stackIn.isEmpty()){\n            return - 1;\n        }\n\n        // 入的栈不为空，则弹出并压入出的栈\n        while(!stackIn.isEmpty()){\n            stackOut.push(stackIn.pop());\n        }\n\n        // 弹出由入的栈弹出并压入出的栈中的元素\n        return stackOut.pop();\n    }\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】09-用两个栈实现队列","published":1,"updated":"2021-05-04T08:45:31.305Z","_id":"cko9sdvzp0012bw34fh043rqs","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\">剑指 Offer 09. 用两个栈实现队列</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong></p>\n<p>  [“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]</p>\n<p>  [[],[3],[],[]]</p>\n<p>  <strong>输出：</strong>[null,null,3,-1]</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong></p>\n<p>  [“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]</p>\n<p>  [[],[],[5],[2],[],[]]</p>\n<p>  <strong>输出：</strong>[null,-1,null,null,5,2]</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>队列是一种先进先出的数据结构，而栈是一种先进后出的数据结构，所以要用栈来实现队列，则需要栈，一个用于入队，一个用于出队；</li>\n<li>入队时，只需要在对应入队的栈中插入数据即可；</li>\n<li>出队时，优先从出队的栈中弹出数据，当出队的栈为空时，再来判断入队的栈是否为空，如果入队的栈为空，则返回 <code>-1</code>，当入队的栈不为空时，将入队的栈中的元素弹出并压入出队的栈中；</li>\n<li>最后返回出队的栈中的元素即可；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CQueue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 两个栈，一个用于入，一个用于出</span>\n    <span class=\"token comment\">// 入的栈 stackIn</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stackIn<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 出的栈 stackOut</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stackOut<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 构造函数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stackIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stackOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 插入元素，即在入的栈中压入该元素</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果出的栈不为空，则直接从这里边出栈即可</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 若出和入的栈均为空，则返回 -1</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 入的栈不为空，则弹出并压入出的栈</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 弹出由入的栈弹出并压入出的栈中的元素</span>\n        <span class=\"token keyword\">return</span> stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\">剑指 Offer 09. 用两个栈实现队列</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong></p>\n<p>  [“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]</p>\n<p>  [[],[3],[],[]]</p>\n<p>  <strong>输出：</strong>[null,null,3,-1]</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong></p>\n<p>  [“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]</p>\n<p>  [[],[],[5],[2],[],[]]</p>\n<p>  <strong>输出：</strong>[null,-1,null,null,5,2]</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>队列是一种先进先出的数据结构，而栈是一种先进后出的数据结构，所以要用栈来实现队列，则需要栈，一个用于入队，一个用于出队；</li>\n<li>入队时，只需要在对应入队的栈中插入数据即可；</li>\n<li>出队时，优先从出队的栈中弹出数据，当出队的栈为空时，再来判断入队的栈是否为空，如果入队的栈为空，则返回 <code>-1</code>，当入队的栈不为空时，将入队的栈中的元素弹出并压入出队的栈中；</li>\n<li>最后返回出队的栈中的元素即可；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CQueue</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 两个栈，一个用于入，一个用于出</span>\n    <span class=\"token comment\">// 入的栈 stackIn</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stackIn<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 出的栈 stackOut</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stackOut<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 构造函数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stackIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stackOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 插入元素，即在入的栈中压入该元素</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果出的栈不为空，则直接从这里边出栈即可</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 若出和入的栈均为空，则返回 -1</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 入的栈不为空，则弹出并压入出的栈</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stackIn<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 弹出由入的栈弹出并压入出的栈中的元素</span>\n        <span class=\"token keyword\">return</span> stackOut<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】10-I. 斐波那契数列","mathjax":true,"toc":true,"top":null,"abbrlink":"63d61223","date":"2021-05-04T07:54:20.000Z","_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 10- I. 斐波那契数列](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/)\n\n-   难度：简单\n\n## 描述\n\n>   写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n>\n>   F(0) = 0,   F(1) = 1\n>\n>   F(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n>\n>   斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n>\n>   答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n>\n>   示例 1：\n>\n>   输入：n = 2\n>\n>   输出：1\n>\n>   示例 2：\n>\n>   输入：n = 5\n>\n>   输出：5\n>\n>\n>   提示：\n>\n>   0 <= n <= 100\n\n## 方法 1\n\n### 思路\n\n$F(0) = 0,   F(1) = 1$\n\n$F(N) = F(N - 1) + F(N - 2)$, 其中 $N > 1$\n\n利用递归的方法， 把 $f(n)$ 问题的计算拆分成 $f(n−1)$ 和 $f(n−2)$ 两个子问题的计算，并递归，以 $f(0)$ 和 $f(1)$ 为终止条件，虽然能求出结果，但是最终会超时；\n\n### 实现\n\n```java\nclass Solution {\n    public int fib(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        \n        return (fib(n - 1) + fib(n - 2)) % 1000000007;\n    }\n}\n```\n\n## 方法 2\n\n### 思路\n\n减少暴力递归中的重复运算，可以将子问题的答案存放到备忘录，进行下次运算时先从备忘录中查询，如果已经有对应答案，直接取出用就行，这样就可以大大减少运算的时间。\n\n通过添加备忘录，将原来的递归树进行了剪枝，大大减少了子问题，此时的子问题个数变成了 $n$，此时的时间复杂度变成了 $O(n)$；\n\n### 实现\n\n```java\nclass Solution {\n    // 用一个哈希表来当备忘录\n    HashMap<Integer, Integer> hashMap = new HashMap<>();\n\n    public int fib(int n) {\n        // Base Case\n        if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // 如果计算过了，就直接返回对应答案\n        if (hashMap.containsKey(n)) {\n            return hashMap.get(n);\n        } else {\n            // 没计算过的进行计算，同时存入备忘录\n            int val =( fib(n - 2) + fib(n - 1)) % 1000000007;\n            hashMap.put(n, val);\n            return val;\n        }\n    }\n}\n```\n\n## 方法 3\n\n### 思路\n\nF(0) = 0,   F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1\n\n利用上述条件，利用动态规划的思想；\n\n-   **状态定义**： 设 $dp$ 为一维数组，其中 $dp[i]$ 的值代表 斐波那契数列第 $i$ 个数字 。\n-   **转移方程**： $dp[i + 1] = dp[i] + dp[i - 1]$，即对应数列定义 $f(n + 1) = f(n) + f(n - 1) $；\n-   **初始状态**： $dp[0] = 0$,  $dp[1]=1$ ，即初始化前两个数字；\n-   **返回值**： $dp[n]$ ，即斐波那契数列的第 $n$ 个数字\n-   **时间复杂度**：此时主要进行循环操作，时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic int fib(int n) {\n    if(N == 0 || N == 1){\n        return N;\n    }\n\n    int prev = 0;\n    int curr = 1;\n    for(int i = 2; i <= N; i++){\n        int sum = (prev + curr) % 1000000007;\n        prev = curr;\n        curr = sum;\n    }\n\n    return curr;\n\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】10-I-斐波那契数列.md","raw":"---\ntitle: 【剑指 Offer】10-I. 斐波那契数列\nmathjax: true\ntoc: true\ntop:\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 63d61223\ndate: 2021-05-04 15:54:20\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 10- I. 斐波那契数列](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/)\n\n-   难度：简单\n\n## 描述\n\n>   写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n>\n>   F(0) = 0,   F(1) = 1\n>\n>   F(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n>\n>   斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n>\n>   答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n>\n>   示例 1：\n>\n>   输入：n = 2\n>\n>   输出：1\n>\n>   示例 2：\n>\n>   输入：n = 5\n>\n>   输出：5\n>\n>\n>   提示：\n>\n>   0 <= n <= 100\n\n## 方法 1\n\n### 思路\n\n$F(0) = 0,   F(1) = 1$\n\n$F(N) = F(N - 1) + F(N - 2)$, 其中 $N > 1$\n\n利用递归的方法， 把 $f(n)$ 问题的计算拆分成 $f(n−1)$ 和 $f(n−2)$ 两个子问题的计算，并递归，以 $f(0)$ 和 $f(1)$ 为终止条件，虽然能求出结果，但是最终会超时；\n\n### 实现\n\n```java\nclass Solution {\n    public int fib(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        \n        return (fib(n - 1) + fib(n - 2)) % 1000000007;\n    }\n}\n```\n\n## 方法 2\n\n### 思路\n\n减少暴力递归中的重复运算，可以将子问题的答案存放到备忘录，进行下次运算时先从备忘录中查询，如果已经有对应答案，直接取出用就行，这样就可以大大减少运算的时间。\n\n通过添加备忘录，将原来的递归树进行了剪枝，大大减少了子问题，此时的子问题个数变成了 $n$，此时的时间复杂度变成了 $O(n)$；\n\n### 实现\n\n```java\nclass Solution {\n    // 用一个哈希表来当备忘录\n    HashMap<Integer, Integer> hashMap = new HashMap<>();\n\n    public int fib(int n) {\n        // Base Case\n        if (n == 0 || n == 1) {\n            return n;\n        }\n\n        // 如果计算过了，就直接返回对应答案\n        if (hashMap.containsKey(n)) {\n            return hashMap.get(n);\n        } else {\n            // 没计算过的进行计算，同时存入备忘录\n            int val =( fib(n - 2) + fib(n - 1)) % 1000000007;\n            hashMap.put(n, val);\n            return val;\n        }\n    }\n}\n```\n\n## 方法 3\n\n### 思路\n\nF(0) = 0,   F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1\n\n利用上述条件，利用动态规划的思想；\n\n-   **状态定义**： 设 $dp$ 为一维数组，其中 $dp[i]$ 的值代表 斐波那契数列第 $i$ 个数字 。\n-   **转移方程**： $dp[i + 1] = dp[i] + dp[i - 1]$，即对应数列定义 $f(n + 1) = f(n) + f(n - 1) $；\n-   **初始状态**： $dp[0] = 0$,  $dp[1]=1$ ，即初始化前两个数字；\n-   **返回值**： $dp[n]$ ，即斐波那契数列的第 $n$ 个数字\n-   **时间复杂度**：此时主要进行循环操作，时间复杂度为 $O(n)$；\n\n### 实现\n\n```java\npublic int fib(int n) {\n    if(N == 0 || N == 1){\n        return N;\n    }\n\n    int prev = 0;\n    int curr = 1;\n    for(int i = 2; i <= N; i++){\n        int sum = (prev + curr) % 1000000007;\n        prev = curr;\n        curr = sum;\n    }\n\n    return curr;\n\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】10-I-斐波那契数列","published":1,"updated":"2021-05-04T08:28:21.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzr0014bw344eon9yys","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><p><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/\">剑指 Offer 10- I. 斐波那契数列</a></p>\n</li>\n<li><p>难度：简单</p>\n</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p>\n<p>  F(0) = 0,   F(1) = 1</p>\n<p>  F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p>\n<p>  斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>\n<p>  答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p>  示例 1：</p>\n<p>  输入：n = 2</p>\n<p>  输出：1</p>\n<p>  示例 2：</p>\n<p>  输入：n = 5</p>\n<p>  输出：5</p>\n<p>  提示：</p>\n<p>  0 &lt;= n &lt;= 100</p>\n</blockquote>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>$F(0) = 0,   F(1) = 1$</p>\n<p>$F(N) = F(N - 1) + F(N - 2)$, 其中 $N &gt; 1$</p>\n<p>利用递归的方法， 把 $f(n)$ 问题的计算拆分成 $f(n−1)$ 和 $f(n−2)$ 两个子问题的计算，并递归，以 $f(0)$ 和 $f(1)$ 为终止条件，虽然能求出结果，但是最终会超时；</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>减少暴力递归中的重复运算，可以将子问题的答案存放到备忘录，进行下次运算时先从备忘录中查询，如果已经有对应答案，直接取出用就行，这样就可以大大减少运算的时间。</p>\n<p>通过添加备忘录，将原来的递归树进行了剪枝，大大减少了子问题，此时的子问题个数变成了 $n$，此时的时间复杂度变成了 $O(n)$；</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 用一个哈希表来当备忘录</span>\n    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Base Case</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 如果计算过了，就直接返回对应答案</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 没计算过的进行计算，同时存入备忘录</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h2><h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>F(0) = 0,   F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1</p>\n<p>利用上述条件，利用动态规划的思想；</p>\n<ul>\n<li><strong>状态定义</strong>： 设 $dp$ 为一维数组，其中 $dp[i]$ 的值代表 斐波那契数列第 $i$ 个数字 。</li>\n<li><strong>转移方程</strong>： $dp[i + 1] = dp[i] + dp[i - 1]$，即对应数列定义 $f(n + 1) = f(n) + f(n - 1) $；</li>\n<li><strong>初始状态</strong>： $dp[0] = 0$,  $dp[1]=1$ ，即初始化前两个数字；</li>\n<li><strong>返回值</strong>： $dp[n]$ ，即斐波那契数列的第 $n$ 个数字</li>\n<li><strong>时间复杂度</strong>：此时主要进行循环操作，时间复杂度为 $O(n)$；</li>\n</ul>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">+</span> curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        curr <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><p><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/\">剑指 Offer 10- I. 斐波那契数列</a></p>\n</li>\n<li><p>难度：简单</p>\n</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p>\n<p>  F(0) = 0,   F(1) = 1</p>\n<p>  F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p>\n<p>  斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>\n<p>  答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p>  示例 1：</p>\n<p>  输入：n = 2</p>\n<p>  输出：1</p>\n<p>  示例 2：</p>\n<p>  输入：n = 5</p>\n<p>  输出：5</p>\n<p>  提示：</p>\n<p>  0 &lt;= n &lt;= 100</p>\n</blockquote>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>$F(0) = 0,   F(1) = 1$</p>\n<p>$F(N) = F(N - 1) + F(N - 2)$, 其中 $N &gt; 1$</p>\n<p>利用递归的方法， 把 $f(n)$ 问题的计算拆分成 $f(n−1)$ 和 $f(n−2)$ 两个子问题的计算，并递归，以 $f(0)$ 和 $f(1)$ 为终止条件，虽然能求出结果，但是最终会超时；</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>减少暴力递归中的重复运算，可以将子问题的答案存放到备忘录，进行下次运算时先从备忘录中查询，如果已经有对应答案，直接取出用就行，这样就可以大大减少运算的时间。</p>\n<p>通过添加备忘录，将原来的递归树进行了剪枝，大大减少了子问题，此时的子问题个数变成了 $n$，此时的时间复杂度变成了 $O(n)$；</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 用一个哈希表来当备忘录</span>\n    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Base Case</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 如果计算过了，就直接返回对应答案</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 没计算过的进行计算，同时存入备忘录</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h2><h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>F(0) = 0,   F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1</p>\n<p>利用上述条件，利用动态规划的思想；</p>\n<ul>\n<li><strong>状态定义</strong>： 设 $dp$ 为一维数组，其中 $dp[i]$ 的值代表 斐波那契数列第 $i$ 个数字 。</li>\n<li><strong>转移方程</strong>： $dp[i + 1] = dp[i] + dp[i - 1]$，即对应数列定义 $f(n + 1) = f(n) + f(n - 1) $；</li>\n<li><strong>初始状态</strong>： $dp[0] = 0$,  $dp[1]=1$ ，即初始化前两个数字；</li>\n<li><strong>返回值</strong>： $dp[n]$ ，即斐波那契数列的第 $n$ 个数字</li>\n<li><strong>时间复杂度</strong>：此时主要进行循环操作，时间复杂度为 $O(n)$；</li>\n</ul>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">+</span> curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        curr <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】10-II. 青蛙跳台阶问题","mathjax":true,"toc":true,"abbrlink":"de25b7ed","date":"2021-05-04T07:51:12.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 10- II. 青蛙跳台阶问题](https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/)\n-   难度：简单\n\n## 描述\n\n>   一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 `n` 级的台阶总共有多少种跳法。\n>\n>   答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n>\n>   **示例 1：**\n>\n>   **输入：** n = 2\n>\n>   **输出：** 2\n>\n>   **示例 2：**\n>\n>   **输入：** n = 7\n>\n>   **输出：** 21\n>\n>   **示例 3：**\n>\n>   **输入：** n = 0\n>\n>   **输出：** 1\n>\n>   **提示：**\n>\n>   - `0 <= n <= 100`\n\n## 方法 1\n\n### 思路\n\n1.  递归\n2.  自己在草稿上模拟一遍，可以发现其实就是个斐波那契数列\n3.  所以可以很容易写出递归版本\n4.  此时时间辅助度为 $O(2^n)$\n\n### 实现\n\n```java\npublic int numWays(int n) {\n\t// 基础情况\n    if(n <= 2){\n        return n;\n    }\n\n    // 递归实现\n    return (numWays(n - 1) + numWays(n - 2)) % 1000000007;\n}\n```\n\n## 方法 2\n\n### 思路\n\n用一个 HashMap 来保存已经计算过的状态，然后每次从里边判断是否要计算该状态；\n\n### 实现\n\n```java\nstatic Map<Integer, Integer> map = new HashMap();\npublic int numWays(int n) {\n    if(n <= 2){\n        return n;\n    }else{\n        // 判断是否计算过，计算过就直接获取该值\n        if(map.containsKey(n)){\n            return map.get(n);\n        }else{\n            // 如果没有计算过，就加入该值并返回\n            int tmp = numWays(n - 1) + numWays(n - 2) % 1000000007;\n            map.put(n, tmp);\n            return tmp;\n        }\n    }\n}\n```\n\n## 方法 3\n\n### 思路\n\n1.  利用递归实现很简单，但是时间复杂度太高，所以考虑用动态规划的方法\n2.  观察可以发现，其实当前状态只和前两个状态相关，所以定义两个状态 `prev` 和 `curr` 来前两个状态的值\n3.  然后然后不断切换两个状态值就可以得到最终结果\n4.  此时时间复杂度为 $O(n)$\n\n### 实现\n\n```java\npublic int numWays(int n) {\n    \n    if(n == 1 || n == 0){\n        return n;\n    }\n\n    int prev = 1;\n    int curr = 1;\n\n    for(int i = 2; i <= n; i++){\n        int sum = (prev + curr) % 1000000007;\n        prev = curr;\n        curr = sum;\n    }\n\n    return curr;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】10-II-青蛙跳台阶问题.md","raw":"---\ntitle: 【剑指 Offer】10-II. 青蛙跳台阶问题\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: de25b7ed\ndate: 2021-05-04 15:51:12\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 10- II. 青蛙跳台阶问题](https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/)\n-   难度：简单\n\n## 描述\n\n>   一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 `n` 级的台阶总共有多少种跳法。\n>\n>   答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n>\n>   **示例 1：**\n>\n>   **输入：** n = 2\n>\n>   **输出：** 2\n>\n>   **示例 2：**\n>\n>   **输入：** n = 7\n>\n>   **输出：** 21\n>\n>   **示例 3：**\n>\n>   **输入：** n = 0\n>\n>   **输出：** 1\n>\n>   **提示：**\n>\n>   - `0 <= n <= 100`\n\n## 方法 1\n\n### 思路\n\n1.  递归\n2.  自己在草稿上模拟一遍，可以发现其实就是个斐波那契数列\n3.  所以可以很容易写出递归版本\n4.  此时时间辅助度为 $O(2^n)$\n\n### 实现\n\n```java\npublic int numWays(int n) {\n\t// 基础情况\n    if(n <= 2){\n        return n;\n    }\n\n    // 递归实现\n    return (numWays(n - 1) + numWays(n - 2)) % 1000000007;\n}\n```\n\n## 方法 2\n\n### 思路\n\n用一个 HashMap 来保存已经计算过的状态，然后每次从里边判断是否要计算该状态；\n\n### 实现\n\n```java\nstatic Map<Integer, Integer> map = new HashMap();\npublic int numWays(int n) {\n    if(n <= 2){\n        return n;\n    }else{\n        // 判断是否计算过，计算过就直接获取该值\n        if(map.containsKey(n)){\n            return map.get(n);\n        }else{\n            // 如果没有计算过，就加入该值并返回\n            int tmp = numWays(n - 1) + numWays(n - 2) % 1000000007;\n            map.put(n, tmp);\n            return tmp;\n        }\n    }\n}\n```\n\n## 方法 3\n\n### 思路\n\n1.  利用递归实现很简单，但是时间复杂度太高，所以考虑用动态规划的方法\n2.  观察可以发现，其实当前状态只和前两个状态相关，所以定义两个状态 `prev` 和 `curr` 来前两个状态的值\n3.  然后然后不断切换两个状态值就可以得到最终结果\n4.  此时时间复杂度为 $O(n)$\n\n### 实现\n\n```java\npublic int numWays(int n) {\n    \n    if(n == 1 || n == 0){\n        return n;\n    }\n\n    int prev = 1;\n    int curr = 1;\n\n    for(int i = 2; i <= n; i++){\n        int sum = (prev + curr) % 1000000007;\n        prev = curr;\n        curr = sum;\n    }\n\n    return curr;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】10-II-青蛙跳台阶问题","published":1,"updated":"2021-05-04T07:59:24.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzt0018bw34hzgx6xxa","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/\">剑指 Offer 10- II. 青蛙跳台阶问题</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p>\n<p>  答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> n = 2</p>\n<p>  <strong>输出：</strong> 2</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong> n = 7</p>\n<p>  <strong>输出：</strong> 21</p>\n<p>  <strong>示例 3：</strong></p>\n<p>  <strong>输入：</strong> n = 0</p>\n<p>  <strong>输出：</strong> 1</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt;= 100</code></li>\n</ul>\n</blockquote>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>递归</li>\n<li>自己在草稿上模拟一遍，可以发现其实就是个斐波那契数列</li>\n<li>所以可以很容易写出递归版本</li>\n<li>此时时间辅助度为 $O(2^n)$</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 基础情况</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 递归实现</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>用一个 HashMap 来保存已经计算过的状态，然后每次从里边判断是否要计算该状态；</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断是否计算过，计算过就直接获取该值</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果没有计算过，就加入该值并返回</span>\n            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h2><h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用递归实现很简单，但是时间复杂度太高，所以考虑用动态规划的方法</li>\n<li>观察可以发现，其实当前状态只和前两个状态相关，所以定义两个状态 <code>prev</code> 和 <code>curr</code> 来前两个状态的值</li>\n<li>然后然后不断切换两个状态值就可以得到最终结果</li>\n<li>此时时间复杂度为 $O(n)$</li>\n</ol>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">+</span> curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        curr <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/\">剑指 Offer 10- II. 青蛙跳台阶问题</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p>\n<p>  答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> n = 2</p>\n<p>  <strong>输出：</strong> 2</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong> n = 7</p>\n<p>  <strong>输出：</strong> 21</p>\n<p>  <strong>示例 3：</strong></p>\n<p>  <strong>输入：</strong> n = 0</p>\n<p>  <strong>输出：</strong> 1</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt;= 100</code></li>\n</ul>\n</blockquote>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>递归</li>\n<li>自己在草稿上模拟一遍，可以发现其实就是个斐波那契数列</li>\n<li>所以可以很容易写出递归版本</li>\n<li>此时时间辅助度为 $O(2^n)$</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 基础情况</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 递归实现</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>用一个 HashMap 来保存已经计算过的状态，然后每次从里边判断是否要计算该状态；</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判断是否计算过，计算过就直接获取该值</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果没有计算过，就加入该值并返回</span>\n            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h2><h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用递归实现很简单，但是时间复杂度太高，所以考虑用动态规划的方法</li>\n<li>观察可以发现，其实当前状态只和前两个状态相关，所以定义两个状态 <code>prev</code> 和 <code>curr</code> 来前两个状态的值</li>\n<li>然后然后不断切换两个状态值就可以得到最终结果</li>\n<li>此时时间复杂度为 $O(n)$</li>\n</ol>\n<h3 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">+</span> curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        curr <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】11. 旋转数组的最小数字","mathjax":true,"toc":true,"abbrlink":"bcb92c95","date":"2021-05-04T07:48:04.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 11. 旋转数组的最小数字](https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/)\n-   难度：简单\n\n## 描述\n\n>   把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  \n>\n>   示例 1：\n>\n>   输入：[3,4,5,1,2]\n>\n>   输出：1\n>\n>   示例 2：\n>\n>   输入：[2,2,2,0,1]\n>\n>   输出：0\n\n## 方法\n\n\n\n### 思路\n\n第一反应是只要把数组排序，然后返回最小值就好了，跟旋不旋转没啥关系，于是就有了下面的实现；\n\n### 实现\n\n```java\npublic int minArray(int[] numbers) {\n    // 排序后输出最小值即可？？？\n    Arrays.sort(numbers);\n    return numbers[0];\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】11-旋转数组的最小数字.md","raw":"---\ntitle: 【剑指 Offer】11. 旋转数组的最小数字\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: bcb92c95\ndate: 2021-05-04 15:48:04\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 11. 旋转数组的最小数字](https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/)\n-   难度：简单\n\n## 描述\n\n>   把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  \n>\n>   示例 1：\n>\n>   输入：[3,4,5,1,2]\n>\n>   输出：1\n>\n>   示例 2：\n>\n>   输入：[2,2,2,0,1]\n>\n>   输出：0\n\n## 方法\n\n\n\n### 思路\n\n第一反应是只要把数组排序，然后返回最小值就好了，跟旋不旋转没啥关系，于是就有了下面的实现；\n\n### 实现\n\n```java\npublic int minArray(int[] numbers) {\n    // 排序后输出最小值即可？？？\n    Arrays.sort(numbers);\n    return numbers[0];\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】11-旋转数组的最小数字","published":1,"updated":"2021-05-04T07:59:24.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzu0019bw348xhg4xt5","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/\">剑指 Offer 11. 旋转数组的最小数字</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p>\n<p>  示例 1：</p>\n<p>  输入：[3,4,5,1,2]</p>\n<p>  输出：1</p>\n<p>  示例 2：</p>\n<p>  输入：[2,2,2,0,1]</p>\n<p>  输出：0</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一反应是只要把数组排序，然后返回最小值就好了，跟旋不旋转没啥关系，于是就有了下面的实现；</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 排序后输出最小值即可？？？</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/\">剑指 Offer 11. 旋转数组的最小数字</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p>\n<p>  示例 1：</p>\n<p>  输入：[3,4,5,1,2]</p>\n<p>  输出：1</p>\n<p>  示例 2：</p>\n<p>  输入：[2,2,2,0,1]</p>\n<p>  输出：0</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一反应是只要把数组排序，然后返回最小值就好了，跟旋不旋转没啥关系，于是就有了下面的实现；</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 排序后输出最小值即可？？？</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Offer】15. 二进制中1的个数","mathjax":true,"toc":true,"abbrlink":"71a265ba","date":"2021-05-04T07:46:12.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 15. 二进制中1的个数](https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/)\n-   难度：简单\n\n## 描述\n\n>   请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n>\n>   示例 1：\n>\n>   输入：`00000000000000000000000000001011`\n>\n>   输出：3\n>\n>   解释：输入的二进制串 `00000000000000000000000000001011 `中，共有三位为 '1'。\n>\n>   示例 2：\n>\n>   输入：`00000000000000000000000010000000`\n>\n>   输出：1\n>\n>   解释：输入的二进制串 `00000000000000000000000010000000 `中，共有一位为 '1'。\n>\n>   示例 3：\n>\n>   输入：`11111111111111111111111111111101`\n>\n>   输出：31\n>\n>   解释：输入的二进制串 `11111111111111111111111111111101` 中，共有 31 位为 '1'。\n\n## 方法\n\n### 思路\n\n1.  现将 `n` 转换为二进制字符串；\n2.  然后遍历字符串，将其中为 `‘1’` 的字符进行计数；\n\n### 实现\n\n```java\npublic int hammingWeight(int n) {\n    String binaryString = Integer.toBinaryString(n);\n    int count = 0;\n\n    for (int i = 0; i < binaryString.length(); i++) {\n        if (binaryString.charAt(i) == '1') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【剑指-Offer】15-二进制中1的个数.md","raw":"---\ntitle: 【剑指 Offer】15. 二进制中1的个数\nmathjax: true\ntoc: true\ntags:\n  - 剑指 Offer\ncategories:\n  - Online Judge\nabbrlink: 71a265ba\ndate: 2021-05-04 15:46:12\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [剑指 Offer 15. 二进制中1的个数](https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/)\n-   难度：简单\n\n## 描述\n\n>   请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n>\n>   示例 1：\n>\n>   输入：`00000000000000000000000000001011`\n>\n>   输出：3\n>\n>   解释：输入的二进制串 `00000000000000000000000000001011 `中，共有三位为 '1'。\n>\n>   示例 2：\n>\n>   输入：`00000000000000000000000010000000`\n>\n>   输出：1\n>\n>   解释：输入的二进制串 `00000000000000000000000010000000 `中，共有一位为 '1'。\n>\n>   示例 3：\n>\n>   输入：`11111111111111111111111111111101`\n>\n>   输出：31\n>\n>   解释：输入的二进制串 `11111111111111111111111111111101` 中，共有 31 位为 '1'。\n\n## 方法\n\n### 思路\n\n1.  现将 `n` 转换为二进制字符串；\n2.  然后遍历字符串，将其中为 `‘1’` 的字符进行计数；\n\n### 实现\n\n```java\npublic int hammingWeight(int n) {\n    String binaryString = Integer.toBinaryString(n);\n    int count = 0;\n\n    for (int i = 0; i < binaryString.length(); i++) {\n        if (binaryString.charAt(i) == '1') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【剑指-Offer】15-二进制中1的个数","published":1,"updated":"2021-05-04T07:59:24.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzv001dbw348l586y2s","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/\">剑指 Offer 15. 二进制中1的个数</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p>\n<p>  示例 1：</p>\n<p>  输入：<code>00000000000000000000000000001011</code></p>\n<p>  输出：3</p>\n<p>  解释：输入的二进制串 <code>00000000000000000000000000001011</code>中，共有三位为 ‘1’。</p>\n<p>  示例 2：</p>\n<p>  输入：<code>00000000000000000000000010000000</code></p>\n<p>  输出：1</p>\n<p>  解释：输入的二进制串 <code>00000000000000000000000010000000</code>中，共有一位为 ‘1’。</p>\n<p>  示例 3：</p>\n<p>  输入：<code>11111111111111111111111111111101</code></p>\n<p>  输出：31</p>\n<p>  解释：输入的二进制串 <code>11111111111111111111111111111101</code> 中，共有 31 位为 ‘1’。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>现将 <code>n</code> 转换为二进制字符串；</li>\n<li>然后遍历字符串，将其中为 <code>‘1’</code> 的字符进行计数；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> binaryString <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/\">剑指 Offer 15. 二进制中1的个数</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p>\n<p>  示例 1：</p>\n<p>  输入：<code>00000000000000000000000000001011</code></p>\n<p>  输出：3</p>\n<p>  解释：输入的二进制串 <code>00000000000000000000000000001011</code>中，共有三位为 ‘1’。</p>\n<p>  示例 2：</p>\n<p>  输入：<code>00000000000000000000000010000000</code></p>\n<p>  输出：1</p>\n<p>  解释：输入的二进制串 <code>00000000000000000000000010000000</code>中，共有一位为 ‘1’。</p>\n<p>  示例 3：</p>\n<p>  输入：<code>11111111111111111111111111111101</code></p>\n<p>  输出：31</p>\n<p>  解释：输入的二进制串 <code>11111111111111111111111111111101</code> 中，共有 31 位为 ‘1’。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>现将 <code>n</code> 转换为二进制字符串；</li>\n<li>然后遍历字符串，将其中为 <code>‘1’</code> 的字符进行计数；</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> binaryString <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】Gitee + Typora，搭建你的免费高速图床","mathjax":true,"toc":true,"abbrlink":"19b409da","date":"2021-05-04T01:50:35.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。\n\n上一篇文章中我们讲了如何 [利用 Github 搭建自己的免费图床](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492657&idx=1&sn=4420ebc879c2013ee564b832f6615d10&chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016&token=1963893699&lang=zh_CN#rd)，但有人反映 Github 访问有点慢，而且也不太稳定，所以就推荐用国内的 Gitee 来搭建，于是今天就带来新鲜热乎的基于 Gitee  所搭建的免费图床教程，也水一篇文章，希望对大家伙有所帮助。\n\n![](https://img-blog.csdnimg.cn/img_convert/a1175ca7afef8890b559176ff0c300e2.png)\n\n\n\n## 2. 准备工作\n\n那么在正式开始之前，同样的，你得提前准备以下东西：\n\n>   一个 Gitee 账号\n\n![](https://img-blog.csdnimg.cn/img_convert/933103092ccbcadb1d29903af21672f8.png)\n\n是的，就这么简单，只要你有一个 Gitee 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧出门去 [注册](http://gitee.com/) 一个账号吧。\n\n## 3. 搭建过程\n\n接下来就是正式开始搭建过程了，准备好大干一场吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/a7e297dc71806ccc735e9a3d3330ce92.png)\n\n1.  登录你的 Gitee 之后，创建一个新的仓库；\n\n![](https://img-blog.csdnimg.cn/img_convert/1d99293542926a94663b031fdabc31ee.png)\n\n2.  填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 `public` 其他的保持默认就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/977d285af7c75f66bb649c7f53866db1.png)\n\n3.  一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；\n\n![](https://img-blog.csdnimg.cn/img_convert/add49cec580d5f8e04c663c2c37d328e.png)\n\n## 4. 上传图片\n\n通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Gitee 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 [PicGo](https://molunerfinn.com/PicGo/) 来作为我们的图片上传工具；\n\nPicGo 的安装就不说了，去他的 [官网](https://molunerfinn.com/PicGo/) 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/fd315a7b98f83afd7c4348ff8c0ee46a.png)\n\n接下来就是配置 PicGo 的过程了。\n\n1.  首先，我们先要去 Gitee 创建一个 令牌；\n\n以此打开 `设置 -> 私人令牌`，最后点击右上角 `生成新令牌`；\n\n![](https://img-blog.csdnimg.cn/img_convert/cfd85a8b212b249c8ff39b3e867a9bdf.png)\n\n2.  填写令牌描述信息及勾选相关信息，然后点击 `提交` 即可，提交后会输入密码验证生成；\n\n![令牌生成](https://img-blog.csdnimg.cn/img_convert/0f2f5682347a044d9d4dcf451d6138b5.png)\n\n3.  `令牌` 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；\n\n4.  配置 PicGo，PicGo 默认是不支持 Gitee 图床的，但我们可以通过安装插件来实现。打开 **插件设置**，在右方搜索框中搜索 **picgo**，然后安装 **gitee-uploader** 插件，也可以安装 **github-plus** 或者 **gitee**；\n\n5.  然后到图床设置中打开 Gitee 图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/18c64c5739dbf997ff0173aa95138383.png)\n\n6.  填写相关信息，最后点击 `确定`即可，要将其作为默认图床的话，点击设为默认图床，其中的相关信息如下：\n    -   **repo**：就是刚才创建的 **用户名/仓库名**;\n    -   **branch**：默认为 **master** 即可；\n    -   **token**：刚才生成的令牌；\n    -   **path**：可自定义，但是要填，否则可能导致上传失败；\n    -   **customPath**：图片归档方式，以年、年月……\n    -   **customUrl**：保持默认；\n\n![设置](https://img-blog.csdnimg.cn/img_convert/c9bc8fa018e5356a3f6036a0734884cc.png)\n\n6.  上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 `Ctrl + Shift + P`）；\n\n![](https://img-blog.csdnimg.cn/img_convert/c4cbdc9bfe290a0bc153ded4cc99ba86.png)\n\n## 5. 搭配 Typora 使用\n\n[Typora](https://www.typora.io/) 是一款跨平台的本地 Markdown 编辑器（个人认为是同类最棒的一款软件了），通过搭配 Typora + Picgo，我们不用向上面上传图片那么麻烦，只需要在 Typora 设置后图片就能自动上传，设置方法如下：\n\n依次打开 `文件->偏好设置->图像`，然后选择插入图片时的动作为上传图片，并勾选对本地位置的图片应用，最后在 PicGo 路径中找到你安装 PicGo 的地址即可；\n\n![Typora 设置](https://img-blog.csdnimg.cn/img_convert/7d6ff8d82a0a0227e536f3085961296a.png)\n\n## 6. 总结\n\n至此，我们的搭建免费图床的教程就到此结束了，总体上来讲和 Github 搭建的方式还是一样的，只是有一些小细节需要注意。好了，总结一下本文，主要有如下几部分：\n\n1.  准备一个 Gitee 账号；\n2.  搭建图床仓库；\n3.  上传图片设置；\n4.  搭配 Typora 使用；\n\n如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！\n\n![](https://img-blog.csdnimg.cn/img_convert/d8ab81422553ad44ccab25c742ce5e5b.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】Gitee-Typora，搭建你的免费高速图床.md","raw":"---\ntitle: 【效率为王】Gitee + Typora，搭建你的免费高速图床\nmathjax: true\ntoc: true\ntags:\n  - 工具\n  - 教程\n  - Gitee\n  - 图床\ncategories:\n  - 效率为王\nabbrlink: 19b409da\ndate: 2021-05-04 09:50:35\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。\n\n上一篇文章中我们讲了如何 [利用 Github 搭建自己的免费图床](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492657&idx=1&sn=4420ebc879c2013ee564b832f6615d10&chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016&token=1963893699&lang=zh_CN#rd)，但有人反映 Github 访问有点慢，而且也不太稳定，所以就推荐用国内的 Gitee 来搭建，于是今天就带来新鲜热乎的基于 Gitee  所搭建的免费图床教程，也水一篇文章，希望对大家伙有所帮助。\n\n![](https://img-blog.csdnimg.cn/img_convert/a1175ca7afef8890b559176ff0c300e2.png)\n\n\n\n## 2. 准备工作\n\n那么在正式开始之前，同样的，你得提前准备以下东西：\n\n>   一个 Gitee 账号\n\n![](https://img-blog.csdnimg.cn/img_convert/933103092ccbcadb1d29903af21672f8.png)\n\n是的，就这么简单，只要你有一个 Gitee 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧出门去 [注册](http://gitee.com/) 一个账号吧。\n\n## 3. 搭建过程\n\n接下来就是正式开始搭建过程了，准备好大干一场吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/a7e297dc71806ccc735e9a3d3330ce92.png)\n\n1.  登录你的 Gitee 之后，创建一个新的仓库；\n\n![](https://img-blog.csdnimg.cn/img_convert/1d99293542926a94663b031fdabc31ee.png)\n\n2.  填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 `public` 其他的保持默认就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/977d285af7c75f66bb649c7f53866db1.png)\n\n3.  一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；\n\n![](https://img-blog.csdnimg.cn/img_convert/add49cec580d5f8e04c663c2c37d328e.png)\n\n## 4. 上传图片\n\n通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Gitee 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 [PicGo](https://molunerfinn.com/PicGo/) 来作为我们的图片上传工具；\n\nPicGo 的安装就不说了，去他的 [官网](https://molunerfinn.com/PicGo/) 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/fd315a7b98f83afd7c4348ff8c0ee46a.png)\n\n接下来就是配置 PicGo 的过程了。\n\n1.  首先，我们先要去 Gitee 创建一个 令牌；\n\n以此打开 `设置 -> 私人令牌`，最后点击右上角 `生成新令牌`；\n\n![](https://img-blog.csdnimg.cn/img_convert/cfd85a8b212b249c8ff39b3e867a9bdf.png)\n\n2.  填写令牌描述信息及勾选相关信息，然后点击 `提交` 即可，提交后会输入密码验证生成；\n\n![令牌生成](https://img-blog.csdnimg.cn/img_convert/0f2f5682347a044d9d4dcf451d6138b5.png)\n\n3.  `令牌` 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；\n\n4.  配置 PicGo，PicGo 默认是不支持 Gitee 图床的，但我们可以通过安装插件来实现。打开 **插件设置**，在右方搜索框中搜索 **picgo**，然后安装 **gitee-uploader** 插件，也可以安装 **github-plus** 或者 **gitee**；\n\n5.  然后到图床设置中打开 Gitee 图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/18c64c5739dbf997ff0173aa95138383.png)\n\n6.  填写相关信息，最后点击 `确定`即可，要将其作为默认图床的话，点击设为默认图床，其中的相关信息如下：\n    -   **repo**：就是刚才创建的 **用户名/仓库名**;\n    -   **branch**：默认为 **master** 即可；\n    -   **token**：刚才生成的令牌；\n    -   **path**：可自定义，但是要填，否则可能导致上传失败；\n    -   **customPath**：图片归档方式，以年、年月……\n    -   **customUrl**：保持默认；\n\n![设置](https://img-blog.csdnimg.cn/img_convert/c9bc8fa018e5356a3f6036a0734884cc.png)\n\n6.  上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 `Ctrl + Shift + P`）；\n\n![](https://img-blog.csdnimg.cn/img_convert/c4cbdc9bfe290a0bc153ded4cc99ba86.png)\n\n## 5. 搭配 Typora 使用\n\n[Typora](https://www.typora.io/) 是一款跨平台的本地 Markdown 编辑器（个人认为是同类最棒的一款软件了），通过搭配 Typora + Picgo，我们不用向上面上传图片那么麻烦，只需要在 Typora 设置后图片就能自动上传，设置方法如下：\n\n依次打开 `文件->偏好设置->图像`，然后选择插入图片时的动作为上传图片，并勾选对本地位置的图片应用，最后在 PicGo 路径中找到你安装 PicGo 的地址即可；\n\n![Typora 设置](https://img-blog.csdnimg.cn/img_convert/7d6ff8d82a0a0227e536f3085961296a.png)\n\n## 6. 总结\n\n至此，我们的搭建免费图床的教程就到此结束了，总体上来讲和 Github 搭建的方式还是一样的，只是有一些小细节需要注意。好了，总结一下本文，主要有如下几部分：\n\n1.  准备一个 Gitee 账号；\n2.  搭建图床仓库；\n3.  上传图片设置；\n4.  搭配 Typora 使用；\n\n如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！\n\n![](https://img-blog.csdnimg.cn/img_convert/d8ab81422553ad44ccab25c742ce5e5b.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】Gitee-Typora，搭建你的免费高速图床","published":1,"updated":"2021-05-04T08:32:16.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzw001fbw34ez9jhq7l","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。</p>\n<p>上一篇文章中我们讲了如何 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492657&amp;idx=1&amp;sn=4420ebc879c2013ee564b832f6615d10&amp;chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016&amp;token=1963893699&amp;lang=zh_CN#rd\">利用 Github 搭建自己的免费图床</a>，但有人反映 Github 访问有点慢，而且也不太稳定，所以就推荐用国内的 Gitee 来搭建，于是今天就带来新鲜热乎的基于 Gitee  所搭建的免费图床教程，也水一篇文章，希望对大家伙有所帮助。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1175ca7afef8890b559176ff0c300e2.png\" alt=\"\"></p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>那么在正式开始之前，同样的，你得提前准备以下东西：</p>\n<blockquote>\n<p>  一个 Gitee 账号</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/933103092ccbcadb1d29903af21672f8.png\" alt=\"\"></p>\n<p>是的，就这么简单，只要你有一个 Gitee 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧出门去 <a href=\"http://gitee.com/\">注册</a> 一个账号吧。</p>\n<h2 id=\"3-搭建过程\"><a href=\"#3-搭建过程\" class=\"headerlink\" title=\"3. 搭建过程\"></a>3. 搭建过程</h2><p>接下来就是正式开始搭建过程了，准备好大干一场吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a7e297dc71806ccc735e9a3d3330ce92.png\" alt=\"\"></p>\n<ol>\n<li>登录你的 Gitee 之后，创建一个新的仓库；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1d99293542926a94663b031fdabc31ee.png\" alt=\"\"></p>\n<ol>\n<li>填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/977d285af7c75f66bb649c7f53866db1.png\" alt=\"\"></p>\n<ol>\n<li>一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/add49cec580d5f8e04c663c2c37d328e.png\" alt=\"\"></p>\n<h2 id=\"4-上传图片\"><a href=\"#4-上传图片\" class=\"headerlink\" title=\"4. 上传图片\"></a>4. 上传图片</h2><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Gitee 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href=\"https://molunerfinn.com/PicGo/\">PicGo</a> 来作为我们的图片上传工具；</p>\n<p>PicGo 的安装就不说了，去他的 <a href=\"https://molunerfinn.com/PicGo/\">官网</a> 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fd315a7b98f83afd7c4348ff8c0ee46a.png\" alt=\"\"></p>\n<p>接下来就是配置 PicGo 的过程了。</p>\n<ol>\n<li>首先，我们先要去 Gitee 创建一个 令牌；</li>\n</ol>\n<p>以此打开 <code>设置 -&gt; 私人令牌</code>，最后点击右上角 <code>生成新令牌</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cfd85a8b212b249c8ff39b3e867a9bdf.png\" alt=\"\"></p>\n<ol>\n<li>填写令牌描述信息及勾选相关信息，然后点击 <code>提交</code> 即可，提交后会输入密码验证生成；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0f2f5682347a044d9d4dcf451d6138b5.png\" alt=\"令牌生成\"></p>\n<ol>\n<li><p><code>令牌</code> 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；</p>\n</li>\n<li><p>配置 PicGo，PicGo 默认是不支持 Gitee 图床的，但我们可以通过安装插件来实现。打开 <strong>插件设置</strong>，在右方搜索框中搜索 <strong>picgo</strong>，然后安装 <strong>gitee-uploader</strong> 插件，也可以安装 <strong>github-plus</strong> 或者 <strong>gitee</strong>；</p>\n</li>\n<li><p>然后到图床设置中打开 Gitee 图床；</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/18c64c5739dbf997ff0173aa95138383.png\" alt=\"\"></p>\n<ol>\n<li>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床，其中的相关信息如下：<ul>\n<li><strong>repo</strong>：就是刚才创建的 <strong>用户名/仓库名</strong>;</li>\n<li><strong>branch</strong>：默认为 <strong>master</strong> 即可；</li>\n<li><strong>token</strong>：刚才生成的令牌；</li>\n<li><strong>path</strong>：可自定义，但是要填，否则可能导致上传失败；</li>\n<li><strong>customPath</strong>：图片归档方式，以年、年月……</li>\n<li><strong>customUrl</strong>：保持默认；</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c9bc8fa018e5356a3f6036a0734884cc.png\" alt=\"设置\"></p>\n<ol>\n<li>上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c4cbdc9bfe290a0bc153ded4cc99ba86.png\" alt=\"\"></p>\n<h2 id=\"5-搭配-Typora-使用\"><a href=\"#5-搭配-Typora-使用\" class=\"headerlink\" title=\"5. 搭配 Typora 使用\"></a>5. 搭配 Typora 使用</h2><p><a href=\"https://www.typora.io/\">Typora</a> 是一款跨平台的本地 Markdown 编辑器（个人认为是同类最棒的一款软件了），通过搭配 Typora + Picgo，我们不用向上面上传图片那么麻烦，只需要在 Typora 设置后图片就能自动上传，设置方法如下：</p>\n<p>依次打开 <code>文件-&gt;偏好设置-&gt;图像</code>，然后选择插入图片时的动作为上传图片，并勾选对本地位置的图片应用，最后在 PicGo 路径中找到你安装 PicGo 的地址即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7d6ff8d82a0a0227e536f3085961296a.png\" alt=\"Typora 设置\"></p>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>至此，我们的搭建免费图床的教程就到此结束了，总体上来讲和 Github 搭建的方式还是一样的，只是有一些小细节需要注意。好了，总结一下本文，主要有如下几部分：</p>\n<ol>\n<li>准备一个 Gitee 账号；</li>\n<li>搭建图床仓库；</li>\n<li>上传图片设置；</li>\n<li>搭配 Typora 使用；</li>\n</ol>\n<p>如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d8ab81422553ad44ccab25c742ce5e5b.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。</p>\n<p>上一篇文章中我们讲了如何 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492657&amp;idx=1&amp;sn=4420ebc879c2013ee564b832f6615d10&amp;chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016&amp;token=1963893699&amp;lang=zh_CN#rd\">利用 Github 搭建自己的免费图床</a>，但有人反映 Github 访问有点慢，而且也不太稳定，所以就推荐用国内的 Gitee 来搭建，于是今天就带来新鲜热乎的基于 Gitee  所搭建的免费图床教程，也水一篇文章，希望对大家伙有所帮助。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a1175ca7afef8890b559176ff0c300e2.png\" alt=\"\"></p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>那么在正式开始之前，同样的，你得提前准备以下东西：</p>\n<blockquote>\n<p>  一个 Gitee 账号</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/933103092ccbcadb1d29903af21672f8.png\" alt=\"\"></p>\n<p>是的，就这么简单，只要你有一个 Gitee 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧出门去 <a href=\"http://gitee.com/\">注册</a> 一个账号吧。</p>\n<h2 id=\"3-搭建过程\"><a href=\"#3-搭建过程\" class=\"headerlink\" title=\"3. 搭建过程\"></a>3. 搭建过程</h2><p>接下来就是正式开始搭建过程了，准备好大干一场吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a7e297dc71806ccc735e9a3d3330ce92.png\" alt=\"\"></p>\n<ol>\n<li>登录你的 Gitee 之后，创建一个新的仓库；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1d99293542926a94663b031fdabc31ee.png\" alt=\"\"></p>\n<ol>\n<li>填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/977d285af7c75f66bb649c7f53866db1.png\" alt=\"\"></p>\n<ol>\n<li>一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/add49cec580d5f8e04c663c2c37d328e.png\" alt=\"\"></p>\n<h2 id=\"4-上传图片\"><a href=\"#4-上传图片\" class=\"headerlink\" title=\"4. 上传图片\"></a>4. 上传图片</h2><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Gitee 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href=\"https://molunerfinn.com/PicGo/\">PicGo</a> 来作为我们的图片上传工具；</p>\n<p>PicGo 的安装就不说了，去他的 <a href=\"https://molunerfinn.com/PicGo/\">官网</a> 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fd315a7b98f83afd7c4348ff8c0ee46a.png\" alt=\"\"></p>\n<p>接下来就是配置 PicGo 的过程了。</p>\n<ol>\n<li>首先，我们先要去 Gitee 创建一个 令牌；</li>\n</ol>\n<p>以此打开 <code>设置 -&gt; 私人令牌</code>，最后点击右上角 <code>生成新令牌</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cfd85a8b212b249c8ff39b3e867a9bdf.png\" alt=\"\"></p>\n<ol>\n<li>填写令牌描述信息及勾选相关信息，然后点击 <code>提交</code> 即可，提交后会输入密码验证生成；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0f2f5682347a044d9d4dcf451d6138b5.png\" alt=\"令牌生成\"></p>\n<ol>\n<li><p><code>令牌</code> 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；</p>\n</li>\n<li><p>配置 PicGo，PicGo 默认是不支持 Gitee 图床的，但我们可以通过安装插件来实现。打开 <strong>插件设置</strong>，在右方搜索框中搜索 <strong>picgo</strong>，然后安装 <strong>gitee-uploader</strong> 插件，也可以安装 <strong>github-plus</strong> 或者 <strong>gitee</strong>；</p>\n</li>\n<li><p>然后到图床设置中打开 Gitee 图床；</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/18c64c5739dbf997ff0173aa95138383.png\" alt=\"\"></p>\n<ol>\n<li>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床，其中的相关信息如下：<ul>\n<li><strong>repo</strong>：就是刚才创建的 <strong>用户名/仓库名</strong>;</li>\n<li><strong>branch</strong>：默认为 <strong>master</strong> 即可；</li>\n<li><strong>token</strong>：刚才生成的令牌；</li>\n<li><strong>path</strong>：可自定义，但是要填，否则可能导致上传失败；</li>\n<li><strong>customPath</strong>：图片归档方式，以年、年月……</li>\n<li><strong>customUrl</strong>：保持默认；</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c9bc8fa018e5356a3f6036a0734884cc.png\" alt=\"设置\"></p>\n<ol>\n<li>上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c4cbdc9bfe290a0bc153ded4cc99ba86.png\" alt=\"\"></p>\n<h2 id=\"5-搭配-Typora-使用\"><a href=\"#5-搭配-Typora-使用\" class=\"headerlink\" title=\"5. 搭配 Typora 使用\"></a>5. 搭配 Typora 使用</h2><p><a href=\"https://www.typora.io/\">Typora</a> 是一款跨平台的本地 Markdown 编辑器（个人认为是同类最棒的一款软件了），通过搭配 Typora + Picgo，我们不用向上面上传图片那么麻烦，只需要在 Typora 设置后图片就能自动上传，设置方法如下：</p>\n<p>依次打开 <code>文件-&gt;偏好设置-&gt;图像</code>，然后选择插入图片时的动作为上传图片，并勾选对本地位置的图片应用，最后在 PicGo 路径中找到你安装 PicGo 的地址即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7d6ff8d82a0a0227e536f3085961296a.png\" alt=\"Typora 设置\"></p>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>至此，我们的搭建免费图床的教程就到此结束了，总体上来讲和 Github 搭建的方式还是一样的，只是有一些小细节需要注意。好了，总结一下本文，主要有如下几部分：</p>\n<ol>\n<li>准备一个 Gitee 账号；</li>\n<li>搭建图床仓库；</li>\n<li>上传图片设置；</li>\n<li>搭配 Typora 使用；</li>\n</ol>\n<p>如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d8ab81422553ad44ccab25c742ce5e5b.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】利用 Github 搭建自己的免费图床","mathjax":true,"toc":true,"abbrlink":"9b0c5646","date":"2021-05-04T02:02:49.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。\n\n对于不清楚这个东西的朋友，我就在这儿大概说一下图床是个啥东西。所谓图床，其实可以就相当于我们手机上的相册，不过他是在线的，而且是对大家开放的，大家都可以访问查看，但是编辑删除这些功能仅限于拥有者，就相当于用百度云分享的公开照片，你可以查看，也可以下载下来编辑，但是拥有权还是属于分享者。\n\n那你可能会疑惑，那这个东西和写博客的我们有啥关系呢？\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50fa99ec14644fbfaaf97992d0955a9b~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom: 50%;\" />\n\n你想想，我们写博客，是不是有很多图片需要插入，我们这些博客要保留在本地的时候你可以预览到图片，但一旦你要把它发布到网上，这时候问题来了！发现图片上传失败，那是因为你本地的图片都是存在本地的，平台不会自动给你上传，那这个时候就凸显出图床的重要性了。当然了，如果你是直接在平台进行编辑，那着一点就不用担心了，基本平台都会自动给你上传到它自己的服务器。\n\n有了图床，我们在本地写好博客之后，就能够任意复制到其他平台，不用担心图片丢失问题了。\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22061b36742741968d22ec8056802658~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n今天的文章就是给大家分享一个搭建免费图床的教程，既是方便自己后续的复习，也希望对大家也有所帮助。\n\n## 2. 准备工作\n\n那么在正式开始之前，你需要提前准备以下东西：\n\n> 一个 Github 账号\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c67db74bcaa640578447b77b567a7c95~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n好了，就这么简单，只要你有一个 Github 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧去 [注册](https://github.com/cunyu1943 \"注册\") 一个账号吧。\n\n## 3. 搭建过程\n\n这一部分就是正式开始大家过程了，准备好大干一场吧！\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc01deed8984a33995e5b1f17324892~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n1.  登录你的 Github 之后，创建一个新的仓库；\n\n![](https://img-blog.csdnimg.cn/img_convert/bdafff4aed63d1e10572254fedc8501d.png)\n\n2.  填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 `public` 其他的保持默认就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/48d90f2f80c66abb90a50d6f474da77e.png)\n\n3.  一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；\n\n![](https://img-blog.csdnimg.cn/img_convert/fde08bc299258dd6f7fd1f12703c13f8.png)\n\n## 4. 上传图片\n\n通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 [PicGo](https://molunerfinn.com/PicGo/ \"PicGo\") 来作为我们的图片上传工具；\n\nPicGo 的安装就不说了，去他的 [官网](https://molunerfinn.com/PicGo/ \"官网\") 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/7bcb336a2f6b7a947f9348d284fea772.png)\n\n接下来就是配置 PicGo 的过程了。\n\n1.  首先，我们先要去 Github 创建一个 token；\n\n以此打开 `Settings -> Developer settings -> Personal access tokens`，最后点击 `generate new token`；\n\n![](https://img-blog.csdnimg.cn/img_convert/add0cfb7d9f65cb8eefc5df76b8ebe10.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/bf9946c73d66a78d1b07c505433b6ad2.png)\n\n2.  填写及勾选相关信息，然后点击 `Genetate token` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/51874cbe8b2d405c01a5763fbd1c8c14.png)\n\n3.  `token` 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；\n\n![](https://img-blog.csdnimg.cn/img_convert/c8d7a85d377067762c7d5016c9c41863.png)\n\n4.  配置 PicGo，依次打开 图床设置 -> Github 图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/c0db4ee374b28ed38cae4c9ac8dfd234.png)\n\n5.  填写相关信息，最后点击 `确定`即可，要将其作为默认图床的话，点击设为默认图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/92d13b74836d918391810d6c859c65da.png)\n\n6.  上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 `Ctrl + Shift + P`）；\n\n![](https://img-blog.csdnimg.cn/img_convert/701f0783e772e05a782a7f0863ac1322.png)\n\n## 5. 加速访问\n\n大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？\n\n这时候我们就可以用 [jsDelivr](https://www.jsdelivr.com/ \"jsDelivr\") 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；\n\n> `https://cdn.jsdelivr.net/gh/用户名/仓库名`\n\n比如我的就是 `https://cdn.jsdelivr.net/gh/cunyu1943/blog-imgs`\n\n![](https://img-blog.csdnimg.cn/img_convert/6494fa2eec3fa16acafcfe992fe22262.png)\n\n## 6. 图床推荐\n\n除开用 Github 搭建的方式之后，我们也可以用 Gitee 进行搭建，搭建方式和本文大致相同。此外，我也推荐几个免费的图床给大家，大家可以根据自己的喜好进行选择；\n\n1.  [路过图床](https://imgchr.com/ \"路过图床\")\n2.  [SM.MS](https://sm.ms/ \"SM.MS\")\n3.  [Imgur](https://imgur.com/ \"Imgur\")\n\n## 7. 总结\n\n至此，我们的搭建免费图床的教程就到此结束了，总结一下主要有如下几部分：\n\n1.  准备一个 Github 账号；\n2.  搭建图床仓库；\n3.  上传图片设置；\n4.  加速访问；\n5.  免费图床推荐；\n\n如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！\n\n![](https://img-blog.csdnimg.cn/img_convert/796f38768fedfc1e32ce123aa898c5c0.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】利用-Github-搭建自己的免费图床.md","raw":"---\ntitle: 【效率为王】利用 Github 搭建自己的免费图床\nmathjax: true\ntoc: true\ntags:\n  - Github\n  - 教程\n  - 图床\ncategories:\n  - 效率为王\nabbrlink: 9b0c5646\ndate: 2021-05-04 10:02:49\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。\n\n对于不清楚这个东西的朋友，我就在这儿大概说一下图床是个啥东西。所谓图床，其实可以就相当于我们手机上的相册，不过他是在线的，而且是对大家开放的，大家都可以访问查看，但是编辑删除这些功能仅限于拥有者，就相当于用百度云分享的公开照片，你可以查看，也可以下载下来编辑，但是拥有权还是属于分享者。\n\n那你可能会疑惑，那这个东西和写博客的我们有啥关系呢？\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50fa99ec14644fbfaaf97992d0955a9b~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom: 50%;\" />\n\n你想想，我们写博客，是不是有很多图片需要插入，我们这些博客要保留在本地的时候你可以预览到图片，但一旦你要把它发布到网上，这时候问题来了！发现图片上传失败，那是因为你本地的图片都是存在本地的，平台不会自动给你上传，那这个时候就凸显出图床的重要性了。当然了，如果你是直接在平台进行编辑，那着一点就不用担心了，基本平台都会自动给你上传到它自己的服务器。\n\n有了图床，我们在本地写好博客之后，就能够任意复制到其他平台，不用担心图片丢失问题了。\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22061b36742741968d22ec8056802658~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n今天的文章就是给大家分享一个搭建免费图床的教程，既是方便自己后续的复习，也希望对大家也有所帮助。\n\n## 2. 准备工作\n\n那么在正式开始之前，你需要提前准备以下东西：\n\n> 一个 Github 账号\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c67db74bcaa640578447b77b567a7c95~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n好了，就这么简单，只要你有一个 Github 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧去 [注册](https://github.com/cunyu1943 \"注册\") 一个账号吧。\n\n## 3. 搭建过程\n\n这一部分就是正式开始大家过程了，准备好大干一场吧！\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc01deed8984a33995e5b1f17324892~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" />\n\n1.  登录你的 Github 之后，创建一个新的仓库；\n\n![](https://img-blog.csdnimg.cn/img_convert/bdafff4aed63d1e10572254fedc8501d.png)\n\n2.  填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 `public` 其他的保持默认就好；\n\n![](https://img-blog.csdnimg.cn/img_convert/48d90f2f80c66abb90a50d6f474da77e.png)\n\n3.  一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；\n\n![](https://img-blog.csdnimg.cn/img_convert/fde08bc299258dd6f7fd1f12703c13f8.png)\n\n## 4. 上传图片\n\n通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 [PicGo](https://molunerfinn.com/PicGo/ \"PicGo\") 来作为我们的图片上传工具；\n\nPicGo 的安装就不说了，去他的 [官网](https://molunerfinn.com/PicGo/ \"官网\") 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/7bcb336a2f6b7a947f9348d284fea772.png)\n\n接下来就是配置 PicGo 的过程了。\n\n1.  首先，我们先要去 Github 创建一个 token；\n\n以此打开 `Settings -> Developer settings -> Personal access tokens`，最后点击 `generate new token`；\n\n![](https://img-blog.csdnimg.cn/img_convert/add0cfb7d9f65cb8eefc5df76b8ebe10.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/bf9946c73d66a78d1b07c505433b6ad2.png)\n\n2.  填写及勾选相关信息，然后点击 `Genetate token` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/51874cbe8b2d405c01a5763fbd1c8c14.png)\n\n3.  `token` 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；\n\n![](https://img-blog.csdnimg.cn/img_convert/c8d7a85d377067762c7d5016c9c41863.png)\n\n4.  配置 PicGo，依次打开 图床设置 -> Github 图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/c0db4ee374b28ed38cae4c9ac8dfd234.png)\n\n5.  填写相关信息，最后点击 `确定`即可，要将其作为默认图床的话，点击设为默认图床；\n\n![](https://img-blog.csdnimg.cn/img_convert/92d13b74836d918391810d6c859c65da.png)\n\n6.  上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 `Ctrl + Shift + P`）；\n\n![](https://img-blog.csdnimg.cn/img_convert/701f0783e772e05a782a7f0863ac1322.png)\n\n## 5. 加速访问\n\n大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？\n\n这时候我们就可以用 [jsDelivr](https://www.jsdelivr.com/ \"jsDelivr\") 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；\n\n> `https://cdn.jsdelivr.net/gh/用户名/仓库名`\n\n比如我的就是 `https://cdn.jsdelivr.net/gh/cunyu1943/blog-imgs`\n\n![](https://img-blog.csdnimg.cn/img_convert/6494fa2eec3fa16acafcfe992fe22262.png)\n\n## 6. 图床推荐\n\n除开用 Github 搭建的方式之后，我们也可以用 Gitee 进行搭建，搭建方式和本文大致相同。此外，我也推荐几个免费的图床给大家，大家可以根据自己的喜好进行选择；\n\n1.  [路过图床](https://imgchr.com/ \"路过图床\")\n2.  [SM.MS](https://sm.ms/ \"SM.MS\")\n3.  [Imgur](https://imgur.com/ \"Imgur\")\n\n## 7. 总结\n\n至此，我们的搭建免费图床的教程就到此结束了，总结一下主要有如下几部分：\n\n1.  准备一个 Github 账号；\n2.  搭建图床仓库；\n3.  上传图片设置；\n4.  加速访问；\n5.  免费图床推荐；\n\n如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！\n\n![](https://img-blog.csdnimg.cn/img_convert/796f38768fedfc1e32ce123aa898c5c0.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】利用-Github-搭建自己的免费图床","published":1,"updated":"2021-05-04T02:07:42.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdvzz001kbw344jf6cl2s","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。</p>\n<p>对于不清楚这个东西的朋友，我就在这儿大概说一下图床是个啥东西。所谓图床，其实可以就相当于我们手机上的相册，不过他是在线的，而且是对大家开放的，大家都可以访问查看，但是编辑删除这些功能仅限于拥有者，就相当于用百度云分享的公开照片，你可以查看，也可以下载下来编辑，但是拥有权还是属于分享者。</p>\n<p>那你可能会疑惑，那这个东西和写博客的我们有啥关系呢？</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50fa99ec14644fbfaaf97992d0955a9b~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom: 50%;\"></p>\n<p>你想想，我们写博客，是不是有很多图片需要插入，我们这些博客要保留在本地的时候你可以预览到图片，但一旦你要把它发布到网上，这时候问题来了！发现图片上传失败，那是因为你本地的图片都是存在本地的，平台不会自动给你上传，那这个时候就凸显出图床的重要性了。当然了，如果你是直接在平台进行编辑，那着一点就不用担心了，基本平台都会自动给你上传到它自己的服务器。</p>\n<p>有了图床，我们在本地写好博客之后，就能够任意复制到其他平台，不用担心图片丢失问题了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22061b36742741968d22ec8056802658~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\"></p>\n<p>今天的文章就是给大家分享一个搭建免费图床的教程，既是方便自己后续的复习，也希望对大家也有所帮助。</p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>那么在正式开始之前，你需要提前准备以下东西：</p>\n<blockquote>\n<p>一个 Github 账号</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c67db74bcaa640578447b77b567a7c95~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\"></p>\n<p>好了，就这么简单，只要你有一个 Github 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧去 <a href=\"https://github.com/cunyu1943\" title=\"注册\">注册</a> 一个账号吧。</p>\n<h2 id=\"3-搭建过程\"><a href=\"#3-搭建过程\" class=\"headerlink\" title=\"3. 搭建过程\"></a>3. 搭建过程</h2><p>这一部分就是正式开始大家过程了，准备好大干一场吧！</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc01deed8984a33995e5b1f17324892~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\"></p>\n<ol>\n<li>登录你的 Github 之后，创建一个新的仓库；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bdafff4aed63d1e10572254fedc8501d.png\" alt=\"\"></p>\n<ol>\n<li>填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/48d90f2f80c66abb90a50d6f474da77e.png\" alt=\"\"></p>\n<ol>\n<li>一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fde08bc299258dd6f7fd1f12703c13f8.png\" alt=\"\"></p>\n<h2 id=\"4-上传图片\"><a href=\"#4-上传图片\" class=\"headerlink\" title=\"4. 上传图片\"></a>4. 上传图片</h2><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href=\"https://molunerfinn.com/PicGo/\" title=\"PicGo\">PicGo</a> 来作为我们的图片上传工具；</p>\n<p>PicGo 的安装就不说了，去他的 <a href=\"https://molunerfinn.com/PicGo/\" title=\"官网\">官网</a> 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7bcb336a2f6b7a947f9348d284fea772.png\" alt=\"\"></p>\n<p>接下来就是配置 PicGo 的过程了。</p>\n<ol>\n<li>首先，我们先要去 Github 创建一个 token；</li>\n</ol>\n<p>以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/add0cfb7d9f65cb8eefc5df76b8ebe10.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bf9946c73d66a78d1b07c505433b6ad2.png\" alt=\"\"></p>\n<ol>\n<li>填写及勾选相关信息，然后点击 <code>Genetate token</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/51874cbe8b2d405c01a5763fbd1c8c14.png\" alt=\"\"></p>\n<ol>\n<li><code>token</code> 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c8d7a85d377067762c7d5016c9c41863.png\" alt=\"\"></p>\n<ol>\n<li>配置 PicGo，依次打开 图床设置 -&gt; Github 图床；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c0db4ee374b28ed38cae4c9ac8dfd234.png\" alt=\"\"></p>\n<ol>\n<li>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/92d13b74836d918391810d6c859c65da.png\" alt=\"\"></p>\n<ol>\n<li>上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/701f0783e772e05a782a7f0863ac1322.png\" alt=\"\"></p>\n<h2 id=\"5-加速访问\"><a href=\"#5-加速访问\" class=\"headerlink\" title=\"5. 加速访问\"></a>5. 加速访问</h2><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>\n<p>这时候我们就可以用 <a href=\"https://www.jsdelivr.com/\" title=\"jsDelivr\">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>\n<blockquote>\n<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>\n</blockquote>\n<p>比如我的就是 <code>https://cdn.jsdelivr.net/gh/cunyu1943/blog-imgs</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6494fa2eec3fa16acafcfe992fe22262.png\" alt=\"\"></p>\n<h2 id=\"6-图床推荐\"><a href=\"#6-图床推荐\" class=\"headerlink\" title=\"6. 图床推荐\"></a>6. 图床推荐</h2><p>除开用 Github 搭建的方式之后，我们也可以用 Gitee 进行搭建，搭建方式和本文大致相同。此外，我也推荐几个免费的图床给大家，大家可以根据自己的喜好进行选择；</p>\n<ol>\n<li><a href=\"https://imgchr.com/\" title=\"路过图床\">路过图床</a></li>\n<li><a href=\"https://sm.ms/\" title=\"SM.MS\">SM.MS</a></li>\n<li><a href=\"https://imgur.com/\" title=\"Imgur\">Imgur</a></li>\n</ol>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h2><p>至此，我们的搭建免费图床的教程就到此结束了，总结一下主要有如下几部分：</p>\n<ol>\n<li>准备一个 Github 账号；</li>\n<li>搭建图床仓库；</li>\n<li>上传图片设置；</li>\n<li>加速访问；</li>\n<li>免费图床推荐；</li>\n</ol>\n<p>如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/796f38768fedfc1e32ce123aa898c5c0.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。</p>\n<p>对于不清楚这个东西的朋友，我就在这儿大概说一下图床是个啥东西。所谓图床，其实可以就相当于我们手机上的相册，不过他是在线的，而且是对大家开放的，大家都可以访问查看，但是编辑删除这些功能仅限于拥有者，就相当于用百度云分享的公开照片，你可以查看，也可以下载下来编辑，但是拥有权还是属于分享者。</p>\n<p>那你可能会疑惑，那这个东西和写博客的我们有啥关系呢？</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50fa99ec14644fbfaaf97992d0955a9b~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom: 50%;\" /></p>\n<p>你想想，我们写博客，是不是有很多图片需要插入，我们这些博客要保留在本地的时候你可以预览到图片，但一旦你要把它发布到网上，这时候问题来了！发现图片上传失败，那是因为你本地的图片都是存在本地的，平台不会自动给你上传，那这个时候就凸显出图床的重要性了。当然了，如果你是直接在平台进行编辑，那着一点就不用担心了，基本平台都会自动给你上传到它自己的服务器。</p>\n<p>有了图床，我们在本地写好博客之后，就能够任意复制到其他平台，不用担心图片丢失问题了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22061b36742741968d22ec8056802658~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /></p>\n<p>今天的文章就是给大家分享一个搭建免费图床的教程，既是方便自己后续的复习，也希望对大家也有所帮助。</p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>那么在正式开始之前，你需要提前准备以下东西：</p>\n<blockquote>\n<p>一个 Github 账号</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c67db74bcaa640578447b77b567a7c95~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /></p>\n<p>好了，就这么简单，只要你有一个 Github 账号就够了，你就能拥有一个免费的图床了，如果你还没有，那赶紧去 <a href=\"https://github.com/cunyu1943\" title=\"注册\">注册</a> 一个账号吧。</p>\n<h2 id=\"3-搭建过程\"><a href=\"#3-搭建过程\" class=\"headerlink\" title=\"3. 搭建过程\"></a>3. 搭建过程</h2><p>这一部分就是正式开始大家过程了，准备好大干一场吧！</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc01deed8984a33995e5b1f17324892~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /></p>\n<ol>\n<li>登录你的 Github 之后，创建一个新的仓库；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bdafff4aed63d1e10572254fedc8501d.png\" alt=\"\"></p>\n<ol>\n<li>填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/48d90f2f80c66abb90a50d6f474da77e.png\" alt=\"\"></p>\n<ol>\n<li>一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fde08bc299258dd6f7fd1f12703c13f8.png\" alt=\"\"></p>\n<h2 id=\"4-上传图片\"><a href=\"#4-上传图片\" class=\"headerlink\" title=\"4. 上传图片\"></a>4. 上传图片</h2><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href=\"https://molunerfinn.com/PicGo/\" title=\"PicGo\">PicGo</a> 来作为我们的图片上传工具；</p>\n<p>PicGo 的安装就不说了，去他的 <a href=\"https://molunerfinn.com/PicGo/\" title=\"官网\">官网</a> 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7bcb336a2f6b7a947f9348d284fea772.png\" alt=\"\"></p>\n<p>接下来就是配置 PicGo 的过程了。</p>\n<ol>\n<li>首先，我们先要去 Github 创建一个 token；</li>\n</ol>\n<p>以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/add0cfb7d9f65cb8eefc5df76b8ebe10.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bf9946c73d66a78d1b07c505433b6ad2.png\" alt=\"\"></p>\n<ol>\n<li>填写及勾选相关信息，然后点击 <code>Genetate token</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/51874cbe8b2d405c01a5763fbd1c8c14.png\" alt=\"\"></p>\n<ol>\n<li><code>token</code> 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c8d7a85d377067762c7d5016c9c41863.png\" alt=\"\"></p>\n<ol>\n<li>配置 PicGo，依次打开 图床设置 -&gt; Github 图床；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c0db4ee374b28ed38cae4c9ac8dfd234.png\" alt=\"\"></p>\n<ol>\n<li>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/92d13b74836d918391810d6c859c65da.png\" alt=\"\"></p>\n<ol>\n<li>上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/701f0783e772e05a782a7f0863ac1322.png\" alt=\"\"></p>\n<h2 id=\"5-加速访问\"><a href=\"#5-加速访问\" class=\"headerlink\" title=\"5. 加速访问\"></a>5. 加速访问</h2><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>\n<p>这时候我们就可以用 <a href=\"https://www.jsdelivr.com/\" title=\"jsDelivr\">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>\n<blockquote>\n<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>\n</blockquote>\n<p>比如我的就是 <code>https://cdn.jsdelivr.net/gh/cunyu1943/blog-imgs</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6494fa2eec3fa16acafcfe992fe22262.png\" alt=\"\"></p>\n<h2 id=\"6-图床推荐\"><a href=\"#6-图床推荐\" class=\"headerlink\" title=\"6. 图床推荐\"></a>6. 图床推荐</h2><p>除开用 Github 搭建的方式之后，我们也可以用 Gitee 进行搭建，搭建方式和本文大致相同。此外，我也推荐几个免费的图床给大家，大家可以根据自己的喜好进行选择；</p>\n<ol>\n<li><a href=\"https://imgchr.com/\" title=\"路过图床\">路过图床</a></li>\n<li><a href=\"https://sm.ms/\" title=\"SM.MS\">SM.MS</a></li>\n<li><a href=\"https://imgur.com/\" title=\"Imgur\">Imgur</a></li>\n</ol>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h2><p>至此，我们的搭建免费图床的教程就到此结束了，总结一下主要有如下几部分：</p>\n<ol>\n<li>准备一个 Github 账号；</li>\n<li>搭建图床仓库；</li>\n<li>上传图片设置；</li>\n<li>加速访问；</li>\n<li>免费图床推荐；</li>\n</ol>\n<p>如果你对上面的部分有疑问，欢迎留言或者私信，我会在看到的第一时间回复你！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/796f38768fedfc1e32ce123aa898c5c0.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】十分钟入门 Markdown 写作","mathjax":true,"toc":true,"abbrlink":"8389a3cf","date":"2021-05-04T02:21:26.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 什么是Markdown格式\n\nMarkdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版。如果你经常逛 Github，你会发现大多数项目下边都会有一个 `README.md` 的项目说明文件，而它就是利用 Markdown 来进行编写的。而现在的大多数博客平台如 CSDN、博客园、掘金等，基本都支持 Markdown 格式，如果你有多平台发布文章的需求，那么学会用 Markdown 来编写内容未尝不是一个好的方法。\n\n而且就算微信公众号，我们也可以借助第三方工具来进行排版，比起之前用 Word 来排版的方式省去了很多麻烦，实现一文多发变得更加容易，不用再去调格式适应不同平台。\n\n## 2. 优点\n\n-   语法简洁易学，且功能比纯文本强大；\n\n-   格式转换方便，兼容性强，可读性极好；\n-   专注内容写作而不用关注排版样式；\n-   能导出PDF、HTML 等格式的文件；\n-   迁移、反复编辑不会导致格式错乱；\n\n## 3. 写作格式\n\n### 标题\n\n一到六级标题如下，每多一级则多加一个`#`号，**注意**：符号和标题内容间的空格不能省略，具体格式如下：\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n![标题](https://img-blog.csdnimg.cn/img_convert/672101c511accfd49ddc29d150003b4b.png)\n\n### 列表\n\n列表又分为有序列表和无序列表；\n\n-   有序列表：`阿拉伯数字 + . + 空格 + 内容`，具体格式如下：\n\n```markdown\n  1. 蒂姆.邓肯\n  2. 马努.比诺比利\n  3. 托尼.帕克\n```\n\n![有序列表](https://img-blog.csdnimg.cn/img_convert/8c663af45633769901188f8c23b65197.png)\n\n- 无序列表：`英文横杠 + 空格 + 内容`，具体格式如下：\n\n```markdown\n  - Apple\n  - Orange\n  - Banana\n```\n\n![无序](https://img-blog.csdnimg.cn/img_convert/1175509f13955ff4b8e42bae4adbb664.png)\n\n### 加粗\n\n内容前后分别用两个 `*` 将其括起来，即 `** + 内容 + **`，具体格式如下：\n\n```markdown\n**公众号：村雨遥**\n```\n\n![加粗](https://img-blog.csdnimg.cn/img_convert/6d3ae1e555ef047c8dea8047a73800ae.png)\n\n### 斜体\n\n和加粗很类似，不过只需要将内容前后分别用一个 `*` 包围起来即可，即 `* + 内容 + *`，具体格式如下：\n\n```markdown\n*公众号：村雨遥*\n```\n\n![斜体](https://img-blog.csdnimg.cn/img_convert/40c6f14a2bfeedc70a0e8ce0b54a8946.png)\n\n### 删除线\n\n要给内容加上删除线的效果，只需要在内容前后分别用两个 `~` 将其包围即可，即 `~~ + 内容 + ~~`，具体格式如下：\n\n```markdown\n~~ 公众号：村雨遥 ~~\n```\n\n![删除线](https://img-blog.csdnimg.cn/img_convert/82400b4392299ffd875685c48e4b9b4e.png)\n\n### 下划线\n\n要实现下划线的效果，可以借助 HTML 语法 `<u> + 内容 + </u>`，具体格式如下：\n\n```markdown\n<u>公众号：村雨遥</u>\n```\n\n![下划线](https://img-blog.csdnimg.cn/img_convert/876350d1738471c1c40b69ee99499c63.png)\n\n### 分割线\n\n如果要将不同内容之间插入一条分割线，可以使用 `---` 单独占一行来实现，具体格式如下：\n\n```markdown\n公众号：村雨遥\n\n---\n\n个人博客：https://cunyu1943.github.io\n\n---\n\n知乎：https://www.zhihu.com/people/cunyu1943\n\n---\n```\n\n![分割线](https://img-blog.csdnimg.cn/img_convert/bc3aac4e55592319e53b399b6ab8ce6d.png)\n\n### 引用\n\n要引用其他人的话时，可以使用 `> + 内容` 的形式，具体格式如下：\n\n```markdown\n> 吾生也有涯，而知也无涯。\n```\n\n![引用](https://img-blog.csdnimg.cn/img_convert/abdc6aa5ec426d7ad5693923a19399a4.png)\n\n### 上下标\n\n当我们需要写化学公式或者需要标记上下标时，该怎么办呢？\n\n- 上标：`^内容^`\n- 下标：`~内容~`\n\n```markdown\n1. 上标\n\n    H^2^O\n\n2. 下标\n\n    H~2~O\n```\n\n![上下标](https://img-blog.csdnimg.cn/img_convert/10f60efe3d7dcae87aa04535e8666aec.png)\n\n### 高亮\n\n高亮语法在有的 Markdown 标准中可能不支持，但在这里也给出其用法，即 `== + 内容 + ==`，具体格式如下：\n\n```markdown\n==公众号：村雨遥==\n```\n\n![高亮](https://img-blog.csdnimg.cn/img_convert/5246d6d566f919afdcd9be104165cb40.png)\n\n### 任务列表\n\n任务列表是我们经常接触到的东西，比如我们的备忘录，完成的事件和未完成事件，要在 Markdown 中实现同样效果，可以使用如下的格式：\n\n- 已完成：`[x] + 内容`\n- 未完成：`[] + 内容`\n\n```markdown\n1. 未完成任务\n\n    - [ ] 公众号：村雨遥\n    - [ ] 个人博客：https://cunyu1943.github.io\n\n2. 已完成任务\n    - [x] 知乎：https://www.zhihu.com/people/cunyu1943\n    - [x] CSDN：https://blog.csdn.net/github_39655029\n```\n\n![任务列表](https://img-blog.csdnimg.cn/img_convert/3bca5f634b83c145eff86a28ce6b6490.png)\n\n### 目录生成\n\n当我们文章写完之后，想要像 Word 中那样自动生成目录，此时就可以使用 `[TOC]` 单独占一行来实现，但是要注意，有的平台可能不支持该用法，具体格式如下：\n\n```markdown\n@[toc]\n```\n\n![目录](https://img-blog.csdnimg.cn/img_convert/13440fec07b45faacc238f2dcee43a23.png)\n\n### 表格\n\nMarkdown 中的表格也很方便，我们可以用 `:` 来调整表格对齐的方式，具体格式如下：\n\n```markdown\n1. 左对齐\n| 平台     | 链接                                   |\n| :------- | :------------------------------------- |\n| 公众号   | 村雨遥                                 |\n| 个人博客 | https://cunyu1943.github.io            |\n| 知乎     | https://www.zhihu.com/people/cunyu1943 |\n\n2. 居中对齐\n\n|   平台   |                  链接                  |\n| :------: | :------------------------------------: |\n|  公众号  |                 村雨遥                 |\n| 个人博客 |      https://cunyu1943.github.io       |\n|   知乎   | https://www.zhihu.com/people/cunyu1943 |\n\n3. 右对齐\n|     平台 |                                   链接 |\n| -------: | -------------------------------------: |\n|   公众号 |                                 村雨遥 |\n| 个人博客 |            https://cunyu1943.github.io |\n|     知乎 | https://www.zhihu.com/people/cunyu1943 |\n```\n\n![表格](https://img-blog.csdnimg.cn/img_convert/ec474b8f727bba158731159036c7457b.png)\n\n### 公式\n\nMarkdown 支持 LaTeX 语法，可以实现行间公式和独立公式块，公式的写法和 LaTeX 语法一样，具体格式如下\n\n- 行间公式：`$ + 公式 + $`\n- 独立公式块：`$$ + 公式 + $$`\n\n```markdown\n1. 行间公式\n\n    $x_1+x_2=0$\n\n2. 独立公式块\n\n    $$x^2+y^2=0$$\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/607a345cc47c3965c94412d261abec43.png)\n\n### 代码块\n\n同公式一样，代码块同样可以分为行间代码块和独立代码块，其区别在于用一个或多个 \\`  将其括起来，具体格式如下：\n\n![代码块](https://img-blog.csdnimg.cn/img_convert/b39aa6a4d026691f678260467ce2b4c8.png)\n\n![代码块预览](https://img-blog.csdnimg.cn/img_convert/24bd3f04dcac021d89ee3ea4148b314f.png)\n\n### 链接与图片\n\n链接和图片的唯一区别在于图片需要在最前面加上一个 `!`，两个具体格式如下：\n\n- 链接：`[链接说明](url)`\n- 图片：`![图片说明](url)`\n\n```markdown\n1. 链接\n\n[村雨遥的杂货铺](https://cunyu1943.site)\n\n2. 图片\n\n![村雨遥的杂货铺](https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png)\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2ebd90c8f04ec1bbdead2a0461f2acae.png)\n\n## 4. 编辑器推荐\n\n好了，学习了上面的之后，是不是想马上动手试试。既然如此，那就再给大家推荐几款编辑器，让你的效率更上一层楼，PS：**多学习快捷键使用，效果更佳哦！**\n\n1. [Typora](https://www.typora.io/)：跨平台多功能 Markdown 编辑器，支持导出 PDF、HTML 等格式。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTYxMTY0YWExZjY5YzY4MjgucG5n?x-oss-process=image/format,png)\n\n2.  [MarkText](https://marktext.app/)：跨平台开源 Markdown 编辑器，支持斗图哦！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTQ0NmU4YWNjMTRlYjE4ZjMucG5n?x-oss-process=image/format,png)\n\n3.  [Visual Studio Code](https://code.visualstudio.com/)：巨硬出品，必属精品，哈哈，需要配合插件使用！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWRkNDliNjE2ZmQ5ZWZmMzUucG5n?x-oss-process=image/format,png)\n\n## 5. 注意事项\n\n1. `Markdown`兼容`HTML`相关语法；\n2. 对于特殊字符，可以通过转义字符`\\`将其显示出来；\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】十分钟入门-Markdown-写作.md","raw":"---\ntitle: 【效率为王】十分钟入门 Markdown 写作\nmathjax: true\ntoc: true\ntags:\n  - 教程\n  - Markdown\ncategories:\n  - 效率为王\nabbrlink: 8389a3cf\ndate: 2021-05-04 10:21:26\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 什么是Markdown格式\n\nMarkdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版。如果你经常逛 Github，你会发现大多数项目下边都会有一个 `README.md` 的项目说明文件，而它就是利用 Markdown 来进行编写的。而现在的大多数博客平台如 CSDN、博客园、掘金等，基本都支持 Markdown 格式，如果你有多平台发布文章的需求，那么学会用 Markdown 来编写内容未尝不是一个好的方法。\n\n而且就算微信公众号，我们也可以借助第三方工具来进行排版，比起之前用 Word 来排版的方式省去了很多麻烦，实现一文多发变得更加容易，不用再去调格式适应不同平台。\n\n## 2. 优点\n\n-   语法简洁易学，且功能比纯文本强大；\n\n-   格式转换方便，兼容性强，可读性极好；\n-   专注内容写作而不用关注排版样式；\n-   能导出PDF、HTML 等格式的文件；\n-   迁移、反复编辑不会导致格式错乱；\n\n## 3. 写作格式\n\n### 标题\n\n一到六级标题如下，每多一级则多加一个`#`号，**注意**：符号和标题内容间的空格不能省略，具体格式如下：\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n![标题](https://img-blog.csdnimg.cn/img_convert/672101c511accfd49ddc29d150003b4b.png)\n\n### 列表\n\n列表又分为有序列表和无序列表；\n\n-   有序列表：`阿拉伯数字 + . + 空格 + 内容`，具体格式如下：\n\n```markdown\n  1. 蒂姆.邓肯\n  2. 马努.比诺比利\n  3. 托尼.帕克\n```\n\n![有序列表](https://img-blog.csdnimg.cn/img_convert/8c663af45633769901188f8c23b65197.png)\n\n- 无序列表：`英文横杠 + 空格 + 内容`，具体格式如下：\n\n```markdown\n  - Apple\n  - Orange\n  - Banana\n```\n\n![无序](https://img-blog.csdnimg.cn/img_convert/1175509f13955ff4b8e42bae4adbb664.png)\n\n### 加粗\n\n内容前后分别用两个 `*` 将其括起来，即 `** + 内容 + **`，具体格式如下：\n\n```markdown\n**公众号：村雨遥**\n```\n\n![加粗](https://img-blog.csdnimg.cn/img_convert/6d3ae1e555ef047c8dea8047a73800ae.png)\n\n### 斜体\n\n和加粗很类似，不过只需要将内容前后分别用一个 `*` 包围起来即可，即 `* + 内容 + *`，具体格式如下：\n\n```markdown\n*公众号：村雨遥*\n```\n\n![斜体](https://img-blog.csdnimg.cn/img_convert/40c6f14a2bfeedc70a0e8ce0b54a8946.png)\n\n### 删除线\n\n要给内容加上删除线的效果，只需要在内容前后分别用两个 `~` 将其包围即可，即 `~~ + 内容 + ~~`，具体格式如下：\n\n```markdown\n~~ 公众号：村雨遥 ~~\n```\n\n![删除线](https://img-blog.csdnimg.cn/img_convert/82400b4392299ffd875685c48e4b9b4e.png)\n\n### 下划线\n\n要实现下划线的效果，可以借助 HTML 语法 `<u> + 内容 + </u>`，具体格式如下：\n\n```markdown\n<u>公众号：村雨遥</u>\n```\n\n![下划线](https://img-blog.csdnimg.cn/img_convert/876350d1738471c1c40b69ee99499c63.png)\n\n### 分割线\n\n如果要将不同内容之间插入一条分割线，可以使用 `---` 单独占一行来实现，具体格式如下：\n\n```markdown\n公众号：村雨遥\n\n---\n\n个人博客：https://cunyu1943.github.io\n\n---\n\n知乎：https://www.zhihu.com/people/cunyu1943\n\n---\n```\n\n![分割线](https://img-blog.csdnimg.cn/img_convert/bc3aac4e55592319e53b399b6ab8ce6d.png)\n\n### 引用\n\n要引用其他人的话时，可以使用 `> + 内容` 的形式，具体格式如下：\n\n```markdown\n> 吾生也有涯，而知也无涯。\n```\n\n![引用](https://img-blog.csdnimg.cn/img_convert/abdc6aa5ec426d7ad5693923a19399a4.png)\n\n### 上下标\n\n当我们需要写化学公式或者需要标记上下标时，该怎么办呢？\n\n- 上标：`^内容^`\n- 下标：`~内容~`\n\n```markdown\n1. 上标\n\n    H^2^O\n\n2. 下标\n\n    H~2~O\n```\n\n![上下标](https://img-blog.csdnimg.cn/img_convert/10f60efe3d7dcae87aa04535e8666aec.png)\n\n### 高亮\n\n高亮语法在有的 Markdown 标准中可能不支持，但在这里也给出其用法，即 `== + 内容 + ==`，具体格式如下：\n\n```markdown\n==公众号：村雨遥==\n```\n\n![高亮](https://img-blog.csdnimg.cn/img_convert/5246d6d566f919afdcd9be104165cb40.png)\n\n### 任务列表\n\n任务列表是我们经常接触到的东西，比如我们的备忘录，完成的事件和未完成事件，要在 Markdown 中实现同样效果，可以使用如下的格式：\n\n- 已完成：`[x] + 内容`\n- 未完成：`[] + 内容`\n\n```markdown\n1. 未完成任务\n\n    - [ ] 公众号：村雨遥\n    - [ ] 个人博客：https://cunyu1943.github.io\n\n2. 已完成任务\n    - [x] 知乎：https://www.zhihu.com/people/cunyu1943\n    - [x] CSDN：https://blog.csdn.net/github_39655029\n```\n\n![任务列表](https://img-blog.csdnimg.cn/img_convert/3bca5f634b83c145eff86a28ce6b6490.png)\n\n### 目录生成\n\n当我们文章写完之后，想要像 Word 中那样自动生成目录，此时就可以使用 `[TOC]` 单独占一行来实现，但是要注意，有的平台可能不支持该用法，具体格式如下：\n\n```markdown\n@[toc]\n```\n\n![目录](https://img-blog.csdnimg.cn/img_convert/13440fec07b45faacc238f2dcee43a23.png)\n\n### 表格\n\nMarkdown 中的表格也很方便，我们可以用 `:` 来调整表格对齐的方式，具体格式如下：\n\n```markdown\n1. 左对齐\n| 平台     | 链接                                   |\n| :------- | :------------------------------------- |\n| 公众号   | 村雨遥                                 |\n| 个人博客 | https://cunyu1943.github.io            |\n| 知乎     | https://www.zhihu.com/people/cunyu1943 |\n\n2. 居中对齐\n\n|   平台   |                  链接                  |\n| :------: | :------------------------------------: |\n|  公众号  |                 村雨遥                 |\n| 个人博客 |      https://cunyu1943.github.io       |\n|   知乎   | https://www.zhihu.com/people/cunyu1943 |\n\n3. 右对齐\n|     平台 |                                   链接 |\n| -------: | -------------------------------------: |\n|   公众号 |                                 村雨遥 |\n| 个人博客 |            https://cunyu1943.github.io |\n|     知乎 | https://www.zhihu.com/people/cunyu1943 |\n```\n\n![表格](https://img-blog.csdnimg.cn/img_convert/ec474b8f727bba158731159036c7457b.png)\n\n### 公式\n\nMarkdown 支持 LaTeX 语法，可以实现行间公式和独立公式块，公式的写法和 LaTeX 语法一样，具体格式如下\n\n- 行间公式：`$ + 公式 + $`\n- 独立公式块：`$$ + 公式 + $$`\n\n```markdown\n1. 行间公式\n\n    $x_1+x_2=0$\n\n2. 独立公式块\n\n    $$x^2+y^2=0$$\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/607a345cc47c3965c94412d261abec43.png)\n\n### 代码块\n\n同公式一样，代码块同样可以分为行间代码块和独立代码块，其区别在于用一个或多个 \\`  将其括起来，具体格式如下：\n\n![代码块](https://img-blog.csdnimg.cn/img_convert/b39aa6a4d026691f678260467ce2b4c8.png)\n\n![代码块预览](https://img-blog.csdnimg.cn/img_convert/24bd3f04dcac021d89ee3ea4148b314f.png)\n\n### 链接与图片\n\n链接和图片的唯一区别在于图片需要在最前面加上一个 `!`，两个具体格式如下：\n\n- 链接：`[链接说明](url)`\n- 图片：`![图片说明](url)`\n\n```markdown\n1. 链接\n\n[村雨遥的杂货铺](https://cunyu1943.site)\n\n2. 图片\n\n![村雨遥的杂货铺](https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png)\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2ebd90c8f04ec1bbdead2a0461f2acae.png)\n\n## 4. 编辑器推荐\n\n好了，学习了上面的之后，是不是想马上动手试试。既然如此，那就再给大家推荐几款编辑器，让你的效率更上一层楼，PS：**多学习快捷键使用，效果更佳哦！**\n\n1. [Typora](https://www.typora.io/)：跨平台多功能 Markdown 编辑器，支持导出 PDF、HTML 等格式。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTYxMTY0YWExZjY5YzY4MjgucG5n?x-oss-process=image/format,png)\n\n2.  [MarkText](https://marktext.app/)：跨平台开源 Markdown 编辑器，支持斗图哦！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTQ0NmU4YWNjMTRlYjE4ZjMucG5n?x-oss-process=image/format,png)\n\n3.  [Visual Studio Code](https://code.visualstudio.com/)：巨硬出品，必属精品，哈哈，需要配合插件使用！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWRkNDliNjE2ZmQ5ZWZmMzUucG5n?x-oss-process=image/format,png)\n\n## 5. 注意事项\n\n1. `Markdown`兼容`HTML`相关语法；\n2. 对于特殊字符，可以通过转义字符`\\`将其显示出来；\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】十分钟入门-Markdown-写作","published":1,"updated":"2021-05-04T02:22:15.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw00001nbw34gvi97qi7","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-什么是Markdown格式\"><a href=\"#1-什么是Markdown格式\" class=\"headerlink\" title=\"1. 什么是Markdown格式\"></a>1. 什么是Markdown格式</h2><p>Markdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版。如果你经常逛 Github，你会发现大多数项目下边都会有一个 <code>README.md</code> 的项目说明文件，而它就是利用 Markdown 来进行编写的。而现在的大多数博客平台如 CSDN、博客园、掘金等，基本都支持 Markdown 格式，如果你有多平台发布文章的需求，那么学会用 Markdown 来编写内容未尝不是一个好的方法。</p>\n<p>而且就算微信公众号，我们也可以借助第三方工具来进行排版，比起之前用 Word 来排版的方式省去了很多麻烦，实现一文多发变得更加容易，不用再去调格式适应不同平台。</p>\n<h2 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h2><ul>\n<li><p>语法简洁易学，且功能比纯文本强大；</p>\n</li>\n<li><p>格式转换方便，兼容性强，可读性极好；</p>\n</li>\n<li>专注内容写作而不用关注排版样式；</li>\n<li>能导出PDF、HTML 等格式的文件；</li>\n<li>迁移、反复编辑不会导致格式错乱；</li>\n</ul>\n<h2 id=\"3-写作格式\"><a href=\"#3-写作格式\" class=\"headerlink\" title=\"3. 写作格式\"></a>3. 写作格式</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>一到六级标题如下，每多一级则多加一个<code>#</code>号，<strong>注意</strong>：符号和标题内容间的空格不能省略，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/672101c511accfd49ddc29d150003b4b.png\" alt=\"标题\"></p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表又分为有序列表和无序列表；</p>\n<ul>\n<li>有序列表：<code>阿拉伯数字 + . + 空格 + 内容</code>，具体格式如下：</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 蒂姆.邓肯\n<span class=\"token list punctuation\">2.</span> 马努.比诺比利\n<span class=\"token list punctuation\">3.</span> 托尼.帕克<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c663af45633769901188f8c23b65197.png\" alt=\"有序列表\"></p>\n<ul>\n<li>无序列表：<code>英文横杠 + 空格 + 内容</code>，具体格式如下：</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> Apple\n<span class=\"token list punctuation\">-</span> Orange\n<span class=\"token list punctuation\">-</span> Banana<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1175509f13955ff4b8e42bae4adbb664.png\" alt=\"无序\"></p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>内容前后分别用两个 <code>*</code> 将其括起来，即 <code>** + 内容 + **</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">公众号：村雨遥</span><span class=\"token punctuation\">**</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6d3ae1e555ef047c8dea8047a73800ae.png\" alt=\"加粗\"></p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>和加粗很类似，不过只需要将内容前后分别用一个 <code>*</code> 包围起来即可，即 <code>* + 内容 + *</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">公众号：村雨遥</span><span class=\"token punctuation\">*</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/40c6f14a2bfeedc70a0e8ce0b54a8946.png\" alt=\"斜体\"></p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>要给内容加上删除线的效果，只需要在内容前后分别用两个 <code>~</code> 将其包围即可，即 <code>~~ + 内容 + ~~</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\"> 公众号：村雨遥 </span><span class=\"token punctuation\">~~</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/82400b4392299ffd875685c48e4b9b4e.png\" alt=\"删除线\"></p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>要实现下划线的效果，可以借助 HTML 语法 <code>&lt;u&gt; + 内容 + &lt;/u&gt;</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">&gt;</span></span>公众号：村雨遥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/876350d1738471c1c40b69ee99499c63.png\" alt=\"下划线\"></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>如果要将不同内容之间插入一条分割线，可以使用 <code>---</code> 单独占一行来实现，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">公众号：村雨遥\n\n<span class=\"token hr punctuation\">---</span>\n\n个人博客：https://cunyu1943.github.io\n\n<span class=\"token hr punctuation\">---</span>\n\n知乎：https://www.zhihu.com/people/cunyu1943\n\n<span class=\"token hr punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bc3aac4e55592319e53b399b6ab8ce6d.png\" alt=\"分割线\"></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>要引用其他人的话时，可以使用 <code>&gt; + 内容</code> 的形式，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token blockquote punctuation\">&gt;</span> 吾生也有涯，而知也无涯。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/abdc6aa5ec426d7ad5693923a19399a4.png\" alt=\"引用\"></p>\n<h3 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h3><p>当我们需要写化学公式或者需要标记上下标时，该怎么办呢？</p>\n<ul>\n<li>上标：<code>^内容^</code></li>\n<li>下标：<code>~内容~</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 上标\n\n<span class=\"token code keyword\">    H^2^O</span>\n\n<span class=\"token list punctuation\">2.</span> 下标\n\n<span class=\"token code keyword\">    H~2~O</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/10f60efe3d7dcae87aa04535e8666aec.png\" alt=\"上下标\"></p>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>高亮语法在有的 Markdown 标准中可能不支持，但在这里也给出其用法，即 <code>== + 内容 + ==</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">==公众号：村雨遥==<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5246d6d566f919afdcd9be104165cb40.png\" alt=\"高亮\"></p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>任务列表是我们经常接触到的东西，比如我们的备忘录，完成的事件和未完成事件，要在 Markdown 中实现同样效果，可以使用如下的格式：</p>\n<ul>\n<li>已完成：<code>[x] + 内容</code></li>\n<li>未完成：<code>[] + 内容</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 未完成任务\n\n<span class=\"token code keyword\">    - [ ] 公众号：村雨遥\n    - [ ] 个人博客：https://cunyu1943.github.io</span>\n\n<span class=\"token list punctuation\">2.</span> 已完成任务\n    <span class=\"token list punctuation\">-</span> [x] 知乎：https://www.zhihu.com/people/cunyu1943\n    <span class=\"token list punctuation\">-</span> [x] CSDN：https://blog.csdn.net/github_39655029<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3bca5f634b83c145eff86a28ce6b6490.png\" alt=\"任务列表\"></p>\n<h3 id=\"目录生成\"><a href=\"#目录生成\" class=\"headerlink\" title=\"目录生成\"></a>目录生成</h3><p>当我们文章写完之后，想要像 Word 中那样自动生成目录，此时就可以使用 <code>[TOC]</code> 单独占一行来实现，但是要注意，有的平台可能不支持该用法，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">@[toc]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/13440fec07b45faacc238f2dcee43a23.png\" alt=\"目录\"></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>Markdown 中的表格也很方便，我们可以用 <code>:</code> 来调整表格对齐的方式，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 左对齐\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> 平台     </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> 链接                                   </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:-------</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:-------------------------------------</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\"> 公众号   </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> 村雨遥                                 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://cunyu1943.github.io            </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 知乎     </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span>\n</span></span>\n<span class=\"token list punctuation\">2.</span> 居中对齐\n\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\">   平台   </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\">                  链接                  </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:------:</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:------------------------------------:</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\">  公众号  </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">                 村雨遥                 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">      https://cunyu1943.github.io       </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\">   知乎   </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span>\n</span></span>\n<span class=\"token list punctuation\">3.</span> 右对齐\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\">     平台 </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\">                                   链接 </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">-------:</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">-------------------------------------:</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\">   公众号 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">                                 村雨遥 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">            https://cunyu1943.github.io </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\">     知乎 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec474b8f727bba158731159036c7457b.png\" alt=\"表格\"></p>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>Markdown 支持 LaTeX 语法，可以实现行间公式和独立公式块，公式的写法和 LaTeX 语法一样，具体格式如下</p>\n<ul>\n<li>行间公式：<script type=\"math/tex\">+ 公式 +</script></li>\n<li>独立公式块：$$$ + 公式 + $$$</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 行间公式\n\n<span class=\"token code keyword\">    $x_1+x_2=0$</span>\n\n<span class=\"token list punctuation\">2.</span> 独立公式块\n\n<span class=\"token code keyword\">    $$x^2+y^2=0$$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/607a345cc47c3965c94412d261abec43.png\" alt=\"\"></p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>同公式一样，代码块同样可以分为行间代码块和独立代码块，其区别在于用一个或多个 `  将其括起来，具体格式如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b39aa6a4d026691f678260467ce2b4c8.png\" alt=\"代码块\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/24bd3f04dcac021d89ee3ea4148b314f.png\" alt=\"代码块预览\"></p>\n<h3 id=\"链接与图片\"><a href=\"#链接与图片\" class=\"headerlink\" title=\"链接与图片\"></a>链接与图片</h3><p>链接和图片的唯一区别在于图片需要在最前面加上一个 <code>!</code>，两个具体格式如下：</p>\n<ul>\n<li>链接：<code>[链接说明](url)</code></li>\n<li>图片：<code>![图片说明](url)</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 链接\n\n<span class=\"token url\">[<span class=\"token content\">村雨遥的杂货铺</span>](<span class=\"token url\">https://cunyu1943.site</span>)</span>\n\n<span class=\"token list punctuation\">2.</span> 图片\n\n<span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">村雨遥的杂货铺</span>](<span class=\"token url\">https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png</span>)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ebd90c8f04ec1bbdead2a0461f2acae.png\" alt=\"\"></p>\n<h2 id=\"4-编辑器推荐\"><a href=\"#4-编辑器推荐\" class=\"headerlink\" title=\"4. 编辑器推荐\"></a>4. 编辑器推荐</h2><p>好了，学习了上面的之后，是不是想马上动手试试。既然如此，那就再给大家推荐几款编辑器，让你的效率更上一层楼，PS：<strong>多学习快捷键使用，效果更佳哦！</strong></p>\n<ol>\n<li><a href=\"https://www.typora.io/\">Typora</a>：跨平台多功能 Markdown 编辑器，支持导出 PDF、HTML 等格式。</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTYxMTY0YWExZjY5YzY4MjgucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ol>\n<li><a href=\"https://marktext.app/\">MarkText</a>：跨平台开源 Markdown 编辑器，支持斗图哦！</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTQ0NmU4YWNjMTRlYjE4ZjMucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ol>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>：巨硬出品，必属精品，哈哈，需要配合插件使用！</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWRkNDliNjE2ZmQ5ZWZmMzUucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h2><ol>\n<li><code>Markdown</code>兼容<code>HTML</code>相关语法；</li>\n<li>对于特殊字符，可以通过转义字符<code>\\</code>将其显示出来；</li>\n</ol>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-什么是Markdown格式\"><a href=\"#1-什么是Markdown格式\" class=\"headerlink\" title=\"1. 什么是Markdown格式\"></a>1. 什么是Markdown格式</h2><p>Markdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版。如果你经常逛 Github，你会发现大多数项目下边都会有一个 <code>README.md</code> 的项目说明文件，而它就是利用 Markdown 来进行编写的。而现在的大多数博客平台如 CSDN、博客园、掘金等，基本都支持 Markdown 格式，如果你有多平台发布文章的需求，那么学会用 Markdown 来编写内容未尝不是一个好的方法。</p>\n<p>而且就算微信公众号，我们也可以借助第三方工具来进行排版，比起之前用 Word 来排版的方式省去了很多麻烦，实现一文多发变得更加容易，不用再去调格式适应不同平台。</p>\n<h2 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h2><ul>\n<li><p>语法简洁易学，且功能比纯文本强大；</p>\n</li>\n<li><p>格式转换方便，兼容性强，可读性极好；</p>\n</li>\n<li>专注内容写作而不用关注排版样式；</li>\n<li>能导出PDF、HTML 等格式的文件；</li>\n<li>迁移、反复编辑不会导致格式错乱；</li>\n</ul>\n<h2 id=\"3-写作格式\"><a href=\"#3-写作格式\" class=\"headerlink\" title=\"3. 写作格式\"></a>3. 写作格式</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>一到六级标题如下，每多一级则多加一个<code>#</code>号，<strong>注意</strong>：符号和标题内容间的空格不能省略，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/672101c511accfd49ddc29d150003b4b.png\" alt=\"标题\"></p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表又分为有序列表和无序列表；</p>\n<ul>\n<li>有序列表：<code>阿拉伯数字 + . + 空格 + 内容</code>，具体格式如下：</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 蒂姆.邓肯\n<span class=\"token list punctuation\">2.</span> 马努.比诺比利\n<span class=\"token list punctuation\">3.</span> 托尼.帕克<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c663af45633769901188f8c23b65197.png\" alt=\"有序列表\"></p>\n<ul>\n<li>无序列表：<code>英文横杠 + 空格 + 内容</code>，具体格式如下：</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> Apple\n<span class=\"token list punctuation\">-</span> Orange\n<span class=\"token list punctuation\">-</span> Banana<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1175509f13955ff4b8e42bae4adbb664.png\" alt=\"无序\"></p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>内容前后分别用两个 <code>*</code> 将其括起来，即 <code>** + 内容 + **</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">公众号：村雨遥</span><span class=\"token punctuation\">**</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6d3ae1e555ef047c8dea8047a73800ae.png\" alt=\"加粗\"></p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>和加粗很类似，不过只需要将内容前后分别用一个 <code>*</code> 包围起来即可，即 <code>* + 内容 + *</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">公众号：村雨遥</span><span class=\"token punctuation\">*</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/40c6f14a2bfeedc70a0e8ce0b54a8946.png\" alt=\"斜体\"></p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>要给内容加上删除线的效果，只需要在内容前后分别用两个 <code>~</code> 将其包围即可，即 <code>~~ + 内容 + ~~</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\"> 公众号：村雨遥 </span><span class=\"token punctuation\">~~</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/82400b4392299ffd875685c48e4b9b4e.png\" alt=\"删除线\"></p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>要实现下划线的效果，可以借助 HTML 语法 <code>&lt;u&gt; + 内容 + &lt;/u&gt;</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span>公众号：村雨遥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/876350d1738471c1c40b69ee99499c63.png\" alt=\"下划线\"></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>如果要将不同内容之间插入一条分割线，可以使用 <code>---</code> 单独占一行来实现，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">公众号：村雨遥\n\n<span class=\"token hr punctuation\">---</span>\n\n个人博客：https://cunyu1943.github.io\n\n<span class=\"token hr punctuation\">---</span>\n\n知乎：https://www.zhihu.com/people/cunyu1943\n\n<span class=\"token hr punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bc3aac4e55592319e53b399b6ab8ce6d.png\" alt=\"分割线\"></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>要引用其他人的话时，可以使用 <code>&gt; + 内容</code> 的形式，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token blockquote punctuation\">></span> 吾生也有涯，而知也无涯。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/abdc6aa5ec426d7ad5693923a19399a4.png\" alt=\"引用\"></p>\n<h3 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h3><p>当我们需要写化学公式或者需要标记上下标时，该怎么办呢？</p>\n<ul>\n<li>上标：<code>^内容^</code></li>\n<li>下标：<code>~内容~</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 上标\n\n<span class=\"token code keyword\">    H^2^O</span>\n\n<span class=\"token list punctuation\">2.</span> 下标\n\n<span class=\"token code keyword\">    H~2~O</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/10f60efe3d7dcae87aa04535e8666aec.png\" alt=\"上下标\"></p>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>高亮语法在有的 Markdown 标准中可能不支持，但在这里也给出其用法，即 <code>== + 内容 + ==</code>，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">==公众号：村雨遥==<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5246d6d566f919afdcd9be104165cb40.png\" alt=\"高亮\"></p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>任务列表是我们经常接触到的东西，比如我们的备忘录，完成的事件和未完成事件，要在 Markdown 中实现同样效果，可以使用如下的格式：</p>\n<ul>\n<li>已完成：<code>[x] + 内容</code></li>\n<li>未完成：<code>[] + 内容</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 未完成任务\n\n<span class=\"token code keyword\">    - [ ] 公众号：村雨遥\n    - [ ] 个人博客：https://cunyu1943.github.io</span>\n\n<span class=\"token list punctuation\">2.</span> 已完成任务\n    <span class=\"token list punctuation\">-</span> [x] 知乎：https://www.zhihu.com/people/cunyu1943\n    <span class=\"token list punctuation\">-</span> [x] CSDN：https://blog.csdn.net/github_39655029<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3bca5f634b83c145eff86a28ce6b6490.png\" alt=\"任务列表\"></p>\n<h3 id=\"目录生成\"><a href=\"#目录生成\" class=\"headerlink\" title=\"目录生成\"></a>目录生成</h3><p>当我们文章写完之后，想要像 Word 中那样自动生成目录，此时就可以使用 <code>[TOC]</code> 单独占一行来实现，但是要注意，有的平台可能不支持该用法，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">@[toc]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/13440fec07b45faacc238f2dcee43a23.png\" alt=\"目录\"></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>Markdown 中的表格也很方便，我们可以用 <code>:</code> 来调整表格对齐的方式，具体格式如下：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 左对齐\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> 平台     </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> 链接                                   </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:-------</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:-------------------------------------</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\"> 公众号   </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> 村雨遥                                 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://cunyu1943.github.io            </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 知乎     </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span>\n</span></span>\n<span class=\"token list punctuation\">2.</span> 居中对齐\n\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\">   平台   </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\">                  链接                  </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:------:</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">:------------------------------------:</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\">  公众号  </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">                 村雨遥                 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">      https://cunyu1943.github.io       </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\">   知乎   </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span>\n</span></span>\n<span class=\"token list punctuation\">3.</span> 右对齐\n<span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\">     平台 </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\">                                   链接 </span><span class=\"token punctuation\">|</span>\n</span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">-------:</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">-------------------------------------:</span> <span class=\"token punctuation\">|</span>\n</span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\">   公众号 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">                                 村雨遥 </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\"> 个人博客 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\">            https://cunyu1943.github.io </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token table-data\">     知乎 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> https://www.zhihu.com/people/cunyu1943 </span><span class=\"token punctuation\">|</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec474b8f727bba158731159036c7457b.png\" alt=\"表格\"></p>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>Markdown 支持 LaTeX 语法，可以实现行间公式和独立公式块，公式的写法和 LaTeX 语法一样，具体格式如下</p>\n<ul>\n<li>行间公式：<script type=\"math/tex\">+ 公式 +</script></li>\n<li>独立公式块：$$$ + 公式 + $$$</li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 行间公式\n\n<span class=\"token code keyword\">    $x_1+x_2=0$</span>\n\n<span class=\"token list punctuation\">2.</span> 独立公式块\n\n<span class=\"token code keyword\">    $$x^2+y^2=0$$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/607a345cc47c3965c94412d261abec43.png\" alt=\"\"></p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>同公式一样，代码块同样可以分为行间代码块和独立代码块，其区别在于用一个或多个 `  将其括起来，具体格式如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b39aa6a4d026691f678260467ce2b4c8.png\" alt=\"代码块\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/24bd3f04dcac021d89ee3ea4148b314f.png\" alt=\"代码块预览\"></p>\n<h3 id=\"链接与图片\"><a href=\"#链接与图片\" class=\"headerlink\" title=\"链接与图片\"></a>链接与图片</h3><p>链接和图片的唯一区别在于图片需要在最前面加上一个 <code>!</code>，两个具体格式如下：</p>\n<ul>\n<li>链接：<code>[链接说明](url)</code></li>\n<li>图片：<code>![图片说明](url)</code></li>\n</ul>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> 链接\n\n<span class=\"token url\">[<span class=\"token content\">村雨遥的杂货铺</span>](<span class=\"token url\">https://cunyu1943.site</span>)</span>\n\n<span class=\"token list punctuation\">2.</span> 图片\n\n<span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">村雨遥的杂货铺</span>](<span class=\"token url\">https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png</span>)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ebd90c8f04ec1bbdead2a0461f2acae.png\" alt=\"\"></p>\n<h2 id=\"4-编辑器推荐\"><a href=\"#4-编辑器推荐\" class=\"headerlink\" title=\"4. 编辑器推荐\"></a>4. 编辑器推荐</h2><p>好了，学习了上面的之后，是不是想马上动手试试。既然如此，那就再给大家推荐几款编辑器，让你的效率更上一层楼，PS：<strong>多学习快捷键使用，效果更佳哦！</strong></p>\n<ol>\n<li><a href=\"https://www.typora.io/\">Typora</a>：跨平台多功能 Markdown 编辑器，支持导出 PDF、HTML 等格式。</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTYxMTY0YWExZjY5YzY4MjgucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ol>\n<li><a href=\"https://marktext.app/\">MarkText</a>：跨平台开源 Markdown 编辑器，支持斗图哦！</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTQ0NmU4YWNjMTRlYjE4ZjMucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ol>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>：巨硬出品，必属精品，哈哈，需要配合插件使用！</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWRkNDliNjE2ZmQ5ZWZmMzUucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h2><ol>\n<li><code>Markdown</code>兼容<code>HTML</code>相关语法；</li>\n<li>对于特殊字符，可以通过转义字符<code>\\</code>将其显示出来；</li>\n</ol>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】帮妹子装系统？准备工作得做好！","mathjax":true,"toc":true,"abbrlink":"29dbcdd7","date":"2021-05-04T02:05:18.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n在我们日常使用电脑的过程中，难免会遇到电脑卡顿的情况，大多时候我们可以通过重装系统的方式来让我们的电脑重焕新生。但是这时候就遇到个难题呀，不会装系统咋办？？？去电脑城或者维修店花钱装？\n\n    ![](https://img-blog.csdnimg.cn/img_convert/fe07d99d29b4316fcec0bb781aab4409.png)\n\n作为我的读者，怎么可能让你花那么多钱就为了装个系统呢，留着买吃的他不香么？\n\n![](https://img-blog.csdnimg.cn/img_convert/376107a60395460790c78eb7f7f16649.png)\n\n那今天咱就来聊聊，怎么装系统！在正式开始装系统之前呢，我们需要做一些准备工作，那就是先得搞个系统启动盘呀。当然了，你可能说直接解压安装也行呀，但那样个人觉得始终安装不干净，还是有之前系统残留的一些东西。所以今天就来看看，怎么制作一个系统启动盘！\n\n在日常安装系统时，最好制作 U 盘启动盘来安装，而且往往需要每个系统做一次，既然这么麻烦，那有没有办法只做一次启动盘，然后每次换不同系统只要拷贝镜像文件即可呢？答案是：**当然有了！！！**。今天呢，就教给你们两种办法，一种是每次都需要制作的方式，而另一种呢则是一次制作，多次使用的方式！\n\n这里推荐大家使用 U 盘来制作启动盘，而且 **U 盘的容量最好是在 8G+**，而且在制作系统启动盘之前呢，一点要注意：\n\n>   **请一定事先备份好 U 盘中的重要资料！**\n>\n>   **请一定事先备份好 U 盘中的重要资料！**\n>\n>   **请一定事先备份好 U 盘中的重要资料！**\n\n重要的事情说三遍，那么接下来我们就分别介绍两种制作系统启动盘的方式。\n\n## 2. 单次单系统\n\n这里又可以分为两种方式，一种是 Refus，另一种是 UltraISO，大家可以根据自己的喜好来进行选择，那么我们就来正式开始吧！\n\n### 2.1 Refus：http://rufus.ie/\n\nRefus 十一款 Windows 下十分小巧强大的刻录软件，打开即用，十分方便，以下介绍如何通过 Refus 制作 U 盘启动盘的具体过程。\n\n1.  到上面给的链接下载好 Refus 后，不用安装，双击打开即可，打开后的界面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/f4aa0ff7fca4a7bfa20b2cf3ec57bea3.png)\n\n2.  然后选择镜像文件，然后选择分区类型，最后点击 **开始** 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/be4f0b65162f6591b1eeb101d7f62f33.png)\n\n3.  点击开始之后，会提示格式化 U 盘，确定后等待完成即可，之后我们就能得到一个刻录好的 U 盘启动盘了；\n\n![](https://img-blog.csdnimg.cn/img_convert/9ac0d0e174db3db80fdab0a3db6b31b2.png)\n\n### 2.2 UltraISO：https://cn.ultraiso.net/\n\nUltraISO（软碟通）是一款老牌的刻录工具，虽然可以免费提供试用，但是有广告。如果无法忍受这一点，可以自己去网上找找破解版，又或者自己买一个正式版本，下面就介绍利用 UltraISO 制作 U 盘启动盘。\n\n1.  插入 U 盘，打开 UltraISO，然后在 **文件 -> 打开** 准备好的系统镜像文件；\n\n![](https://img-blog.csdnimg.cn/img_convert/72a12261f88731512ca5b18af75f3e01.png)\n\n2.  然后点击 **启动 -> 写入硬盘映像…**，此时会自动识别出 U 盘；\n\n![](https://img-blog.csdnimg.cn/img_convert/447a54bc22ccad2aa4a57d0e8b10ea53.png)\n\n3.  不用修改其他配置，直接点击 **写入**，此时会提示操作会格式化 U 盘，点击 **是** 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/21dfddec496e369f6e2fbf9e37424dd1.png)\n\n4.  点击是之后，此时开始刻录过程，等待刻录完成，退出软件即可，此时我们就得到了一个刻录好的 U 盘启动盘了，拿它去安装系统就可以了！\n\n![](https://img-blog.csdnimg.cn/img_convert/f3e2e5693bdc7953007be40744c7c8ff.png)\n\n## 3. 单次多系统\n\n通过上面的方式我们每次都需要重新制作一次系统盘，尤其是当系统版本升级或者系统不同时，那这就很麻烦呀。\n\n那接下来我们就来看看，一次制作，多次使用的方式。不管你是系统版本升级还是系统不同，只要制作好了，你把系统镜像拷到 U 盘里边，你就能直接用了，方便的一批！那接下来就开始正式工作！\n\n### 3.1 准备工作\n\n今天的主角就是：**Ventoy**，一个新一代的多系统启动 U 盘解决方案，支持 Windows 和 Linux，其官网地址是：\n\n>   https://www.ventoy.net/cn/download.html\n\n### 3.2 具体步骤\n\n首先从官网上下载 Ventoy 之后，就可以动手实操了：\n\n1.  首先插入 U 盘；\n2.  双击打开下载好的 Ventoy 安装包，不需要安装，打开即用；\n3.  然后 Ventoy 会自动识别 U 盘，然后点击安装即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/0e06430b8d621c5bfa9a5559f29ce2e6.png)\n\n4.  开始安装前会提示抹除 U 盘数据，所以需要先将 U 盘中的资料备份好，然后等待安装过程结束即可；\n5.  接下来，将我们要安装的系统镜像拷贝到我们的 U 盘即可，然后就可以用来安装系统了；\n\n### 3.3 视频教程\n\n为了方便大家，单次多系统部分我还制作了视频教程，欢迎移步 B 站观看，记得关注投币一键三连哦 😘😘😘！\n\n详情请戳：https://www.bilibili.com/video/BV1MA411i7gj\n\n\n\n## 4. 总结\n\n通过上面的学习呢，大家应该都已经能独立完成 U 盘启动盘的制作了。但是不要高兴得太早，这才只是个准备工作呢。开玩笑开玩笑，其实只要把启动盘做好了，我们装系统的工作就算完成了一半了，接下来就是正式安装了。但今天呢讲的已经够多了，我得去休息休息了。\n![](https://img-blog.csdnimg.cn/img_convert/f6b3cdcd6892f111d87946f1b23b3573.gif)\n那具体的安装过程我们就下一期再见吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/238780006283eb52abbf99575f2439f5.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】帮妹子装系统？准备工作得做好！.md","raw":"---\ntitle: 【效率为王】帮妹子装系统？准备工作得做好！\nmathjax: true\ntoc: true\ntags:\n  - 教程\n  - 工具\ncategories:\n  - 效率为王\nabbrlink: 29dbcdd7\ndate: 2021-05-04 10:05:18\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n在我们日常使用电脑的过程中，难免会遇到电脑卡顿的情况，大多时候我们可以通过重装系统的方式来让我们的电脑重焕新生。但是这时候就遇到个难题呀，不会装系统咋办？？？去电脑城或者维修店花钱装？\n\n    ![](https://img-blog.csdnimg.cn/img_convert/fe07d99d29b4316fcec0bb781aab4409.png)\n\n作为我的读者，怎么可能让你花那么多钱就为了装个系统呢，留着买吃的他不香么？\n\n![](https://img-blog.csdnimg.cn/img_convert/376107a60395460790c78eb7f7f16649.png)\n\n那今天咱就来聊聊，怎么装系统！在正式开始装系统之前呢，我们需要做一些准备工作，那就是先得搞个系统启动盘呀。当然了，你可能说直接解压安装也行呀，但那样个人觉得始终安装不干净，还是有之前系统残留的一些东西。所以今天就来看看，怎么制作一个系统启动盘！\n\n在日常安装系统时，最好制作 U 盘启动盘来安装，而且往往需要每个系统做一次，既然这么麻烦，那有没有办法只做一次启动盘，然后每次换不同系统只要拷贝镜像文件即可呢？答案是：**当然有了！！！**。今天呢，就教给你们两种办法，一种是每次都需要制作的方式，而另一种呢则是一次制作，多次使用的方式！\n\n这里推荐大家使用 U 盘来制作启动盘，而且 **U 盘的容量最好是在 8G+**，而且在制作系统启动盘之前呢，一点要注意：\n\n>   **请一定事先备份好 U 盘中的重要资料！**\n>\n>   **请一定事先备份好 U 盘中的重要资料！**\n>\n>   **请一定事先备份好 U 盘中的重要资料！**\n\n重要的事情说三遍，那么接下来我们就分别介绍两种制作系统启动盘的方式。\n\n## 2. 单次单系统\n\n这里又可以分为两种方式，一种是 Refus，另一种是 UltraISO，大家可以根据自己的喜好来进行选择，那么我们就来正式开始吧！\n\n### 2.1 Refus：http://rufus.ie/\n\nRefus 十一款 Windows 下十分小巧强大的刻录软件，打开即用，十分方便，以下介绍如何通过 Refus 制作 U 盘启动盘的具体过程。\n\n1.  到上面给的链接下载好 Refus 后，不用安装，双击打开即可，打开后的界面如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/f4aa0ff7fca4a7bfa20b2cf3ec57bea3.png)\n\n2.  然后选择镜像文件，然后选择分区类型，最后点击 **开始** 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/be4f0b65162f6591b1eeb101d7f62f33.png)\n\n3.  点击开始之后，会提示格式化 U 盘，确定后等待完成即可，之后我们就能得到一个刻录好的 U 盘启动盘了；\n\n![](https://img-blog.csdnimg.cn/img_convert/9ac0d0e174db3db80fdab0a3db6b31b2.png)\n\n### 2.2 UltraISO：https://cn.ultraiso.net/\n\nUltraISO（软碟通）是一款老牌的刻录工具，虽然可以免费提供试用，但是有广告。如果无法忍受这一点，可以自己去网上找找破解版，又或者自己买一个正式版本，下面就介绍利用 UltraISO 制作 U 盘启动盘。\n\n1.  插入 U 盘，打开 UltraISO，然后在 **文件 -> 打开** 准备好的系统镜像文件；\n\n![](https://img-blog.csdnimg.cn/img_convert/72a12261f88731512ca5b18af75f3e01.png)\n\n2.  然后点击 **启动 -> 写入硬盘映像…**，此时会自动识别出 U 盘；\n\n![](https://img-blog.csdnimg.cn/img_convert/447a54bc22ccad2aa4a57d0e8b10ea53.png)\n\n3.  不用修改其他配置，直接点击 **写入**，此时会提示操作会格式化 U 盘，点击 **是** 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/21dfddec496e369f6e2fbf9e37424dd1.png)\n\n4.  点击是之后，此时开始刻录过程，等待刻录完成，退出软件即可，此时我们就得到了一个刻录好的 U 盘启动盘了，拿它去安装系统就可以了！\n\n![](https://img-blog.csdnimg.cn/img_convert/f3e2e5693bdc7953007be40744c7c8ff.png)\n\n## 3. 单次多系统\n\n通过上面的方式我们每次都需要重新制作一次系统盘，尤其是当系统版本升级或者系统不同时，那这就很麻烦呀。\n\n那接下来我们就来看看，一次制作，多次使用的方式。不管你是系统版本升级还是系统不同，只要制作好了，你把系统镜像拷到 U 盘里边，你就能直接用了，方便的一批！那接下来就开始正式工作！\n\n### 3.1 准备工作\n\n今天的主角就是：**Ventoy**，一个新一代的多系统启动 U 盘解决方案，支持 Windows 和 Linux，其官网地址是：\n\n>   https://www.ventoy.net/cn/download.html\n\n### 3.2 具体步骤\n\n首先从官网上下载 Ventoy 之后，就可以动手实操了：\n\n1.  首先插入 U 盘；\n2.  双击打开下载好的 Ventoy 安装包，不需要安装，打开即用；\n3.  然后 Ventoy 会自动识别 U 盘，然后点击安装即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/0e06430b8d621c5bfa9a5559f29ce2e6.png)\n\n4.  开始安装前会提示抹除 U 盘数据，所以需要先将 U 盘中的资料备份好，然后等待安装过程结束即可；\n5.  接下来，将我们要安装的系统镜像拷贝到我们的 U 盘即可，然后就可以用来安装系统了；\n\n### 3.3 视频教程\n\n为了方便大家，单次多系统部分我还制作了视频教程，欢迎移步 B 站观看，记得关注投币一键三连哦 😘😘😘！\n\n详情请戳：https://www.bilibili.com/video/BV1MA411i7gj\n\n\n\n## 4. 总结\n\n通过上面的学习呢，大家应该都已经能独立完成 U 盘启动盘的制作了。但是不要高兴得太早，这才只是个准备工作呢。开玩笑开玩笑，其实只要把启动盘做好了，我们装系统的工作就算完成了一半了，接下来就是正式安装了。但今天呢讲的已经够多了，我得去休息休息了。\n![](https://img-blog.csdnimg.cn/img_convert/f6b3cdcd6892f111d87946f1b23b3573.gif)\n那具体的安装过程我们就下一期再见吧！\n\n![](https://img-blog.csdnimg.cn/img_convert/238780006283eb52abbf99575f2439f5.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】帮妹子装系统？准备工作得做好！","published":1,"updated":"2021-05-04T02:07:42.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw02001qbw344hc8evbk","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>在我们日常使用电脑的过程中，难免会遇到电脑卡顿的情况，大多时候我们可以通过重装系统的方式来让我们的电脑重焕新生。但是这时候就遇到个难题呀，不会装系统咋办？？？去电脑城或者维修店花钱装？</p>\n<pre><code>![](https://img-blog.csdnimg.cn/img_convert/fe07d99d29b4316fcec0bb781aab4409.png)\n</code></pre><p>作为我的读者，怎么可能让你花那么多钱就为了装个系统呢，留着买吃的他不香么？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/376107a60395460790c78eb7f7f16649.png\" alt=\"\"></p>\n<p>那今天咱就来聊聊，怎么装系统！在正式开始装系统之前呢，我们需要做一些准备工作，那就是先得搞个系统启动盘呀。当然了，你可能说直接解压安装也行呀，但那样个人觉得始终安装不干净，还是有之前系统残留的一些东西。所以今天就来看看，怎么制作一个系统启动盘！</p>\n<p>在日常安装系统时，最好制作 U 盘启动盘来安装，而且往往需要每个系统做一次，既然这么麻烦，那有没有办法只做一次启动盘，然后每次换不同系统只要拷贝镜像文件即可呢？答案是：<strong>当然有了！！！</strong>。今天呢，就教给你们两种办法，一种是每次都需要制作的方式，而另一种呢则是一次制作，多次使用的方式！</p>\n<p>这里推荐大家使用 U 盘来制作启动盘，而且 <strong>U 盘的容量最好是在 8G+</strong>，而且在制作系统启动盘之前呢，一点要注意：</p>\n<blockquote>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n</blockquote>\n<p>重要的事情说三遍，那么接下来我们就分别介绍两种制作系统启动盘的方式。</p>\n<h2 id=\"2-单次单系统\"><a href=\"#2-单次单系统\" class=\"headerlink\" title=\"2. 单次单系统\"></a>2. 单次单系统</h2><p>这里又可以分为两种方式，一种是 Refus，另一种是 UltraISO，大家可以根据自己的喜好来进行选择，那么我们就来正式开始吧！</p>\n<h3 id=\"2-1-Refus：http-rufus-ie\"><a href=\"#2-1-Refus：http-rufus-ie\" class=\"headerlink\" title=\"2.1 Refus：http://rufus.ie/\"></a>2.1 Refus：<a href=\"http://rufus.ie/\">http://rufus.ie/</a></h3><p>Refus 十一款 Windows 下十分小巧强大的刻录软件，打开即用，十分方便，以下介绍如何通过 Refus 制作 U 盘启动盘的具体过程。</p>\n<ol>\n<li>到上面给的链接下载好 Refus 后，不用安装，双击打开即可，打开后的界面如下：</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f4aa0ff7fca4a7bfa20b2cf3ec57bea3.png\" alt=\"\"></p>\n<ol>\n<li>然后选择镜像文件，然后选择分区类型，最后点击 <strong>开始</strong> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be4f0b65162f6591b1eeb101d7f62f33.png\" alt=\"\"></p>\n<ol>\n<li>点击开始之后，会提示格式化 U 盘，确定后等待完成即可，之后我们就能得到一个刻录好的 U 盘启动盘了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9ac0d0e174db3db80fdab0a3db6b31b2.png\" alt=\"\"></p>\n<h3 id=\"2-2-UltraISO：https-cn-ultraiso-net\"><a href=\"#2-2-UltraISO：https-cn-ultraiso-net\" class=\"headerlink\" title=\"2.2 UltraISO：https://cn.ultraiso.net/\"></a>2.2 UltraISO：<a href=\"https://cn.ultraiso.net/\">https://cn.ultraiso.net/</a></h3><p>UltraISO（软碟通）是一款老牌的刻录工具，虽然可以免费提供试用，但是有广告。如果无法忍受这一点，可以自己去网上找找破解版，又或者自己买一个正式版本，下面就介绍利用 UltraISO 制作 U 盘启动盘。</p>\n<ol>\n<li>插入 U 盘，打开 UltraISO，然后在 <strong>文件 -&gt; 打开</strong> 准备好的系统镜像文件；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/72a12261f88731512ca5b18af75f3e01.png\" alt=\"\"></p>\n<ol>\n<li>然后点击 <strong>启动 -&gt; 写入硬盘映像…</strong>，此时会自动识别出 U 盘；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/447a54bc22ccad2aa4a57d0e8b10ea53.png\" alt=\"\"></p>\n<ol>\n<li>不用修改其他配置，直接点击 <strong>写入</strong>，此时会提示操作会格式化 U 盘，点击 <strong>是</strong> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21dfddec496e369f6e2fbf9e37424dd1.png\" alt=\"\"></p>\n<ol>\n<li>点击是之后，此时开始刻录过程，等待刻录完成，退出软件即可，此时我们就得到了一个刻录好的 U 盘启动盘了，拿它去安装系统就可以了！</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f3e2e5693bdc7953007be40744c7c8ff.png\" alt=\"\"></p>\n<h2 id=\"3-单次多系统\"><a href=\"#3-单次多系统\" class=\"headerlink\" title=\"3. 单次多系统\"></a>3. 单次多系统</h2><p>通过上面的方式我们每次都需要重新制作一次系统盘，尤其是当系统版本升级或者系统不同时，那这就很麻烦呀。</p>\n<p>那接下来我们就来看看，一次制作，多次使用的方式。不管你是系统版本升级还是系统不同，只要制作好了，你把系统镜像拷到 U 盘里边，你就能直接用了，方便的一批！那接下来就开始正式工作！</p>\n<h3 id=\"3-1-准备工作\"><a href=\"#3-1-准备工作\" class=\"headerlink\" title=\"3.1 准备工作\"></a>3.1 准备工作</h3><p>今天的主角就是：<strong>Ventoy</strong>，一个新一代的多系统启动 U 盘解决方案，支持 Windows 和 Linux，其官网地址是：</p>\n<blockquote>\n<p>  <a href=\"https://www.ventoy.net/cn/download.html\">https://www.ventoy.net/cn/download.html</a></p>\n</blockquote>\n<h3 id=\"3-2-具体步骤\"><a href=\"#3-2-具体步骤\" class=\"headerlink\" title=\"3.2 具体步骤\"></a>3.2 具体步骤</h3><p>首先从官网上下载 Ventoy 之后，就可以动手实操了：</p>\n<ol>\n<li>首先插入 U 盘；</li>\n<li>双击打开下载好的 Ventoy 安装包，不需要安装，打开即用；</li>\n<li>然后 Ventoy 会自动识别 U 盘，然后点击安装即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0e06430b8d621c5bfa9a5559f29ce2e6.png\" alt=\"\"></p>\n<ol>\n<li>开始安装前会提示抹除 U 盘数据，所以需要先将 U 盘中的资料备份好，然后等待安装过程结束即可；</li>\n<li>接下来，将我们要安装的系统镜像拷贝到我们的 U 盘即可，然后就可以用来安装系统了；</li>\n</ol>\n<h3 id=\"3-3-视频教程\"><a href=\"#3-3-视频教程\" class=\"headerlink\" title=\"3.3 视频教程\"></a>3.3 视频教程</h3><p>为了方便大家，单次多系统部分我还制作了视频教程，欢迎移步 B 站观看，记得关注投币一键三连哦 😘😘😘！</p>\n<p>详情请戳：<a href=\"https://www.bilibili.com/video/BV1MA411i7gj\">https://www.bilibili.com/video/BV1MA411i7gj</a></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>通过上面的学习呢，大家应该都已经能独立完成 U 盘启动盘的制作了。但是不要高兴得太早，这才只是个准备工作呢。开玩笑开玩笑，其实只要把启动盘做好了，我们装系统的工作就算完成了一半了，接下来就是正式安装了。但今天呢讲的已经够多了，我得去休息休息了。<br><img src=\"https://img-blog.csdnimg.cn/img_convert/f6b3cdcd6892f111d87946f1b23b3573.gif\" alt=\"\"><br>那具体的安装过程我们就下一期再见吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/238780006283eb52abbf99575f2439f5.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>在我们日常使用电脑的过程中，难免会遇到电脑卡顿的情况，大多时候我们可以通过重装系统的方式来让我们的电脑重焕新生。但是这时候就遇到个难题呀，不会装系统咋办？？？去电脑城或者维修店花钱装？</p>\n<pre><code>![](https://img-blog.csdnimg.cn/img_convert/fe07d99d29b4316fcec0bb781aab4409.png)\n</code></pre><p>作为我的读者，怎么可能让你花那么多钱就为了装个系统呢，留着买吃的他不香么？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/376107a60395460790c78eb7f7f16649.png\" alt=\"\"></p>\n<p>那今天咱就来聊聊，怎么装系统！在正式开始装系统之前呢，我们需要做一些准备工作，那就是先得搞个系统启动盘呀。当然了，你可能说直接解压安装也行呀，但那样个人觉得始终安装不干净，还是有之前系统残留的一些东西。所以今天就来看看，怎么制作一个系统启动盘！</p>\n<p>在日常安装系统时，最好制作 U 盘启动盘来安装，而且往往需要每个系统做一次，既然这么麻烦，那有没有办法只做一次启动盘，然后每次换不同系统只要拷贝镜像文件即可呢？答案是：<strong>当然有了！！！</strong>。今天呢，就教给你们两种办法，一种是每次都需要制作的方式，而另一种呢则是一次制作，多次使用的方式！</p>\n<p>这里推荐大家使用 U 盘来制作启动盘，而且 <strong>U 盘的容量最好是在 8G+</strong>，而且在制作系统启动盘之前呢，一点要注意：</p>\n<blockquote>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n<p>  <strong>请一定事先备份好 U 盘中的重要资料！</strong></p>\n</blockquote>\n<p>重要的事情说三遍，那么接下来我们就分别介绍两种制作系统启动盘的方式。</p>\n<h2 id=\"2-单次单系统\"><a href=\"#2-单次单系统\" class=\"headerlink\" title=\"2. 单次单系统\"></a>2. 单次单系统</h2><p>这里又可以分为两种方式，一种是 Refus，另一种是 UltraISO，大家可以根据自己的喜好来进行选择，那么我们就来正式开始吧！</p>\n<h3 id=\"2-1-Refus：http-rufus-ie\"><a href=\"#2-1-Refus：http-rufus-ie\" class=\"headerlink\" title=\"2.1 Refus：http://rufus.ie/\"></a>2.1 Refus：<a href=\"http://rufus.ie/\">http://rufus.ie/</a></h3><p>Refus 十一款 Windows 下十分小巧强大的刻录软件，打开即用，十分方便，以下介绍如何通过 Refus 制作 U 盘启动盘的具体过程。</p>\n<ol>\n<li>到上面给的链接下载好 Refus 后，不用安装，双击打开即可，打开后的界面如下：</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f4aa0ff7fca4a7bfa20b2cf3ec57bea3.png\" alt=\"\"></p>\n<ol>\n<li>然后选择镜像文件，然后选择分区类型，最后点击 <strong>开始</strong> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be4f0b65162f6591b1eeb101d7f62f33.png\" alt=\"\"></p>\n<ol>\n<li>点击开始之后，会提示格式化 U 盘，确定后等待完成即可，之后我们就能得到一个刻录好的 U 盘启动盘了；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9ac0d0e174db3db80fdab0a3db6b31b2.png\" alt=\"\"></p>\n<h3 id=\"2-2-UltraISO：https-cn-ultraiso-net\"><a href=\"#2-2-UltraISO：https-cn-ultraiso-net\" class=\"headerlink\" title=\"2.2 UltraISO：https://cn.ultraiso.net/\"></a>2.2 UltraISO：<a href=\"https://cn.ultraiso.net/\">https://cn.ultraiso.net/</a></h3><p>UltraISO（软碟通）是一款老牌的刻录工具，虽然可以免费提供试用，但是有广告。如果无法忍受这一点，可以自己去网上找找破解版，又或者自己买一个正式版本，下面就介绍利用 UltraISO 制作 U 盘启动盘。</p>\n<ol>\n<li>插入 U 盘，打开 UltraISO，然后在 <strong>文件 -&gt; 打开</strong> 准备好的系统镜像文件；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/72a12261f88731512ca5b18af75f3e01.png\" alt=\"\"></p>\n<ol>\n<li>然后点击 <strong>启动 -&gt; 写入硬盘映像…</strong>，此时会自动识别出 U 盘；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/447a54bc22ccad2aa4a57d0e8b10ea53.png\" alt=\"\"></p>\n<ol>\n<li>不用修改其他配置，直接点击 <strong>写入</strong>，此时会提示操作会格式化 U 盘，点击 <strong>是</strong> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/21dfddec496e369f6e2fbf9e37424dd1.png\" alt=\"\"></p>\n<ol>\n<li>点击是之后，此时开始刻录过程，等待刻录完成，退出软件即可，此时我们就得到了一个刻录好的 U 盘启动盘了，拿它去安装系统就可以了！</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f3e2e5693bdc7953007be40744c7c8ff.png\" alt=\"\"></p>\n<h2 id=\"3-单次多系统\"><a href=\"#3-单次多系统\" class=\"headerlink\" title=\"3. 单次多系统\"></a>3. 单次多系统</h2><p>通过上面的方式我们每次都需要重新制作一次系统盘，尤其是当系统版本升级或者系统不同时，那这就很麻烦呀。</p>\n<p>那接下来我们就来看看，一次制作，多次使用的方式。不管你是系统版本升级还是系统不同，只要制作好了，你把系统镜像拷到 U 盘里边，你就能直接用了，方便的一批！那接下来就开始正式工作！</p>\n<h3 id=\"3-1-准备工作\"><a href=\"#3-1-准备工作\" class=\"headerlink\" title=\"3.1 准备工作\"></a>3.1 准备工作</h3><p>今天的主角就是：<strong>Ventoy</strong>，一个新一代的多系统启动 U 盘解决方案，支持 Windows 和 Linux，其官网地址是：</p>\n<blockquote>\n<p>  <a href=\"https://www.ventoy.net/cn/download.html\">https://www.ventoy.net/cn/download.html</a></p>\n</blockquote>\n<h3 id=\"3-2-具体步骤\"><a href=\"#3-2-具体步骤\" class=\"headerlink\" title=\"3.2 具体步骤\"></a>3.2 具体步骤</h3><p>首先从官网上下载 Ventoy 之后，就可以动手实操了：</p>\n<ol>\n<li>首先插入 U 盘；</li>\n<li>双击打开下载好的 Ventoy 安装包，不需要安装，打开即用；</li>\n<li>然后 Ventoy 会自动识别 U 盘，然后点击安装即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0e06430b8d621c5bfa9a5559f29ce2e6.png\" alt=\"\"></p>\n<ol>\n<li>开始安装前会提示抹除 U 盘数据，所以需要先将 U 盘中的资料备份好，然后等待安装过程结束即可；</li>\n<li>接下来，将我们要安装的系统镜像拷贝到我们的 U 盘即可，然后就可以用来安装系统了；</li>\n</ol>\n<h3 id=\"3-3-视频教程\"><a href=\"#3-3-视频教程\" class=\"headerlink\" title=\"3.3 视频教程\"></a>3.3 视频教程</h3><p>为了方便大家，单次多系统部分我还制作了视频教程，欢迎移步 B 站观看，记得关注投币一键三连哦 😘😘😘！</p>\n<p>详情请戳：<a href=\"https://www.bilibili.com/video/BV1MA411i7gj\">https://www.bilibili.com/video/BV1MA411i7gj</a></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>通过上面的学习呢，大家应该都已经能独立完成 U 盘启动盘的制作了。但是不要高兴得太早，这才只是个准备工作呢。开玩笑开玩笑，其实只要把启动盘做好了，我们装系统的工作就算完成了一半了，接下来就是正式安装了。但今天呢讲的已经够多了，我得去休息休息了。<br><img src=\"https://img-blog.csdnimg.cn/img_convert/f6b3cdcd6892f111d87946f1b23b3573.gif\" alt=\"\"><br>那具体的安装过程我们就下一期再见吧！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/238780006283eb52abbf99575f2439f5.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】手把手教妹纸装系统，猛男必备！","mathjax":true,"toc":true,"abbrlink":"4709cff1","date":"2021-05-04T02:06:58.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n最近女朋友由于工作原因，一直缠着我教她装系统（连系统都不会装，大（la）佬（ji））。\n\n![](https://img-blog.csdnimg.cn/img_convert/20fb8a806184736cbc2a4760bc8ba9d5.png)\n\n嘘！！！小声 BB，别让她听见了，🤣🤣🤣。那没有办法呀，女朋友的话，你敢不听么，🤪🤪🤪。\n\n![](https://img-blog.csdnimg.cn/img_convert/8c9b212afe3fca0a89ae203b53602e3b.png)\n\n于是就有了[昨天那篇](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)和这篇文章，手把手教她如何安装 Windows 系统。也可以扔给你的女朋友看看，我不介意的哈 😏😏😏。\n\n![](https://img-blog.csdnimg.cn/img_convert/4314460ac35fb58e140136e21c576cd4.png)\n\n接下来就是正文部分了，各位看官准备好，那么开始之前，我们先来看看一些基本常识，备好小板凳和瓜子！\n\n![](https://img-blog.csdnimg.cn/img_convert/25d87aaba7d58bcda8a51b85cfce0140.gif)\n\n### 1.1 什么是 BIOS？\n\n> BIOS 是英文 \"Basic Input Output System\" 的缩略词，直译过来后中文名称就是\"基本输入输出系统\"。**其实，它是一组固化到计算机内主板上一个 ROM 芯片上的程序**，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从 CMOS 中读写系统设置的具体信息。其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。此外，BIOS 还向作业系统提供一些系统参数。系统硬件的变化是由 BIOS 隐藏，程序使用 BIOS 功能而不是直接控制硬件。\n\n上面来自百度百科，说白了我们了解这些基本没啥用，我们只想知道装系统为啥要涉及到 BIOS。这么说吧，BIOS 就是能够让我们正常打开电脑工作的重要工具。这么一说就明白了吧。\n\n![](https://img-blog.csdnimg.cn/img_convert/6ca62ed706fad33644bd01ae74bc43c7.png)\n\n我们装系统，其实也不用改 BIOS 里边的其他设置，一般来讲只用 **调整系统的启动介质的启动顺序。** 一般正常的都是优先从硬盘启动，而我们要通过 U 盘安装，所以我们要做的只是：\n\n> ✅✅✅\n>\n> **将 U 盘启动项调整到最前面，让它作为启动介质的优先级最高。**\n\n要进入 BIOS 的方式一般来讲就是：**开启电脑笔记本电源后，狂按 F2，然后一般就会听见 “哔” 的一声，这说明我们成功进入 BIOS 设置面板。**\n\n![狂按归狂按，别像这样把电脑砸了，hhh](https://img-blog.csdnimg.cn/img_convert/72c472b3bd3e926179915522f7667191.gif)\n\n当然了，对于大多数电脑是 **F2**，但实际上不同电脑厂家对应有不同的启动键，而且就算同一家的笔记本和台式机也可能不同，所以具体启动键可以在 **进入之前建议百度一下对应电脑的启动键**，一般的电脑厂商对应的 BIOS 启动键如下（只是部分，如果不知道是那一个，可以去网上百度对应型号电脑的启动键，一般都能找到）：\n\n| 电脑厂商 | 启动键 |\n| -------- | ------ |\n| Lenovo   | F2     |\n| Asus     | F2     |\n| DELL     | F2     |\n| HP       | F10    |\n| Acer     | F2     |\n\n### 1.2 MBR vs GPT\n\n具体介绍就不展开了，如果想要进一步了解，推荐阅读：https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘 GPT 模式，刻录 U 盘启动盘时选择 GPT 模式，一般是不会出错的。如果电脑稍微老一点的，选用 GTP 模式刻录后，安装会失败，此时选用 MBR 模式，一般就能解决这个问题。\n\n![](https://img-blog.csdnimg.cn/img_convert/3df650f0df688e078323b9ec2fb07c90.png)\n\n## 2. 准备工作\n\n既然要装系统，那么首先你需要事先准备好如下的工具：\n\n1.  **一个 8G 及以上内存的 U 盘**\n2.  **Windows 系统镜像**\n3.  **刻录软件**\n\n### 2.1 8G + 内存的 U 盘\n\n要装系统，虽然可以直接直接下载到本地后解压安装，但是更推荐使用 U 盘安装，此时就需要准备一个最小内存为 8G 的 U 盘（现在 Windows 系统镜像大小一般都超过了 4G）。然后需要注意一点：\n\n> ⚠⚠⚠\n>\n> **一定要事先把 U 盘中的重要文件进行备份 ❗❗❗，因为刻录时会抹除 U 盘中原有内容。**\n\n### 2.2 Windows 系统镜像\n\n要装系统，下一个纯净的镜像是十分重要的，因为现在网上大多都是经过植入一定软件，就算到时候自己卸载，也很麻烦，而且也保证不了别人往里边注入了啥软件，安全性也未可知，所以此处 **推荐在官方进行下载**。但是官方下载很慢呀，所以此处推荐两个下载渠道：\n\n1.  **MSDN**\n\n**https://next.itellyou.cn**\n\n![](https://img-blog.csdnimg.cn/img_convert/699a3cf7c7400e817112c115298b9fb4.png)\n\n这是一个老牌的 Windows 系统下载的网站，上图是进行改版后的界面，如果你想要访问之前的老版本网站，请移步：https://msdn.itellyou.cn/. 新版本的 MSDN 中，不仅仅提供 Windows 系统的下载，还包括 Linux、MacOS 和 Chromium OS 等系统的下载，比之前所提供下载的系统更丰富了。比如我们选中 Windows 10 的 2004 版后，只要复制 BT 或 ED2K 到相关下载软件（一般是迅雷）中，添加新任务进行下载即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/4457155a0b74d310dd68ff13679570ee.png)\n\n2.  **TechBench**\n\n**https://tb.rg-adguard.net/public.php**\n\n![](https://img-blog.csdnimg.cn/img_convert/895ecd95e696788b9f92bf3b7c9728e0.png)\n\n如上图，如果你不想通过种子的方式进行下载，那这个方式一定适合你。它无需通过其他下载工具进行下载，只需要选中系统类型、版本、版、语言以及文件后，右侧就会出现一个下载按钮，然后点击下载按钮就会进行下载，十分方便，如下图中我以 Windows 10 2004 版简体中文的 64 位系统，选中后点击下载进行下载即可。\n\n\n![](https://img-blog.csdnimg.cn/img_convert/5945fc60573ced2decce476c90f68024.png)\n### 2.3 刻录软件\n\n这一部分其实昨天都已经说过了，鉴于有的读者可能不爱翻了，就在这儿再啰嗦几句。\n\n![嫌啰嗦的可以直接跳过哈，hh](https://img-blog.csdnimg.cn/img_convert/a2eba056e55edb902944f3d41d4dfd42.gif)\n\n网上有很多刻录软件，比如什么老毛桃、大白菜等等，但是这些刻录软件都有个毛病：客户端不仅大，而且刻录后安装好系统里边会植入某些软件（别问我咋知道，这是自己当初是小白时一一踩过的坑 😭😭😭），本来我们就想要纯净的，这就很烦了。所以在此推荐几个刻录软件：\n\n1.  **Ventoy**\n\n**https://www.ventoy.net/cn/index.html**\n\n这是一个支持 Windows 和 Linux 双平台的刻录软件，**不需要进行安装，打开即用**。最大的特点就是：**可以一次制作，多次使用，即支持多系统**。我们只需要刻录一次，然后将我们的系统镜像拷到 U 盘中就行了（不管你的系统是 Windows 还是 Linux），具体使用可以参照我的另一篇文章 [如何一次制作多系统启动盘](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)。\n\n2.  **Refus**\n\n**https://rufus.ie/**\n\n这是一个 Windows 下小巧而强大的刻录软件，如果 **只是需要刻录某一个系统的启动盘，可以优先考虑这个软件，** 具体使用过程请参见 [制作 U 盘启动盘的两种方式](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)\n\n3.  **UltraISO**\n\n**https://cn.ultraiso.net/**\n\nUltraISO 软碟通是一款功能强大、方便实用、老牌优秀的光盘映像文件制作/编辑/转换工具。不仅可以直接编辑 ISO 文件，从 ISO 中提取文件和目录；也可以从 CD - ROM 制作光盘映像或者将硬盘上的文件制作成 ISO 文件；同时还可以处理 ISO 文件的启动信息，从而制作可引导光盘。使用 UltraISO，你可以随心所欲地制作/编辑/转换光盘映像文件。但是有个问题就是：**虽然 UltraISO 可以免费用，但是是有广告的，如果你比较烦广告，那你就得花钱购买。** 具体使用教程请参见 [制作 U 盘启动盘的两种方式](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)。\n\n## 3. 安装过程\n\n经过上面的准备过程之后，我们整理下现在手里的资源。不出意外地话，你应该已经手拿一个刻录好的系统启动盘（即刻录进系统镜像的 U 盘）。看吧，搞了半天，最后需要的就是这个玩意儿，是不是很简单 🤣🤣🤣。那接下来，我们就来开始安装过程吧。\n\n![](https://img-blog.csdnimg.cn/img_convert/2b3c1ef8d4cb877e819ba28fb97d5deb.png)\n\n### 3.1 设置 BIOS 启动顺序\n\n进入 BIOS 之后，一般是在 BOOT 选项下，将 U 盘的启动顺序调整到最前边（就是图中的 USB HDD 调到第 1 位），然后按 F10 保存退出即可。一般这个时候重启后就会进入 U 盘启动盘中，接下来就是具体的系统安装设置了。\n\n![](https://img-blog.csdnimg.cn/img_convert/217447e870d6f9b951d763f134513e4d.png)\n\n### 3.2 系统安装设置过程\n\n1.  设置好 BIOS 启动顺序之后，保存重启等一会儿会自动进入如下主安装界面，根据自己的喜好选择语言，时间格式和键盘输入方式后，点击 **下一步**；\n\n![](https://img-blog.csdnimg.cn/img_convert/26fdab8b030437d99030774e2f6f3590.png)\n\n2.  接着点击现在安装；\n\n![](https://img-blog.csdnimg.cn/img_convert/142517c9f6ee1a55747aadb6117f7d03.png)\n\n3.  接着会让你输入产品秘钥，如果有的话，直接输入后下一步即可，没有的话，直接点击我没有产品秘钥即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/9b0eca9f3a97732303a22cd6aa863b3a.png)\n\n4.  接着选择自己要安装的版本，然后点击下一步即可（一般 **推荐选择专业版**）；\n\n![](https://img-blog.csdnimg.cn/img_convert/403b84e584cca532e49fb4e03fb457a7.png)\n\n5.  接着勾选许可条款，继续下一步；\n\n![](https://img-blog.csdnimg.cn/img_convert/a5ee6989ae15e088db46664f9119bb6e.png)\n\n6.  选择自定义：仅安装 Windows；\n\n![](https://img-blog.csdnimg.cn/img_convert/e3ab961e4c9f8de7135b8d66de868da4.png)\n\n7.  接着选择你要安装系统的硬盘，接着下一步，**注意一定要选中你要安装系统的盘，否则可能把其他盘的数据也给搞掉，而且你也可以自己分区！！！**；\n\n![](https://img-blog.csdnimg.cn/img_convert/553658d77da95398433f17767ad9416c.png)\n\n8.  好了，到此系统正式安装开始了，等他装完，**拔掉 U 盘重启即可**；\n\n![](https://img-blog.csdnimg.cn/img_convert/a6b428ab638a259cbf368f5fb398f3dd.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/7f391a6c8fd1b62c67e3e3fb918a8f29.png)\n\n9.  重启之后就是 Windows 的一些初始化设置，一般是时区、用户、密码、输入方式等设置，这个没啥好讲了，根据自己的喜好进行选择即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/4fee49930e12ffa55ad6419be41bf97b.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/543b04be717a96490550768fece1b79d.png)\n\n## 4. 总结\n\n好了，看到这儿，那你就应该能够完整的安装好一个系统了，赶快去试试吧。\n\nPS：一开始可能会遇到不同的小问题，但是不要慌，电脑一般装个系统是不会坏的，我当初也是一遍遍尝试，最后才安装成功。如果实在是觉得搞不定，你也可以关注我的公众号或者添加我的私人微信，加入我的交流群，大家一起交流哦！！！\n\n🤪🤪🤪，完了完了，女朋友发现我发的文章了，我得溜了。\n\n![看来免不了跪键盘了](https://img-blog.csdnimg.cn/img_convert/5ba2fd71816e2205566499a900372409.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】手把手教妹纸装系统，猛男必备！.md","raw":"---\ntitle: 【效率为王】手把手教妹纸装系统，猛男必备！\nmathjax: true\ntoc: true\ntags:\n  - 教程\n  - Windows\ncategories:\n  - 效率为王\nabbrlink: 4709cff1\ndate: 2021-05-04 10:06:58\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n最近女朋友由于工作原因，一直缠着我教她装系统（连系统都不会装，大（la）佬（ji））。\n\n![](https://img-blog.csdnimg.cn/img_convert/20fb8a806184736cbc2a4760bc8ba9d5.png)\n\n嘘！！！小声 BB，别让她听见了，🤣🤣🤣。那没有办法呀，女朋友的话，你敢不听么，🤪🤪🤪。\n\n![](https://img-blog.csdnimg.cn/img_convert/8c9b212afe3fca0a89ae203b53602e3b.png)\n\n于是就有了[昨天那篇](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)和这篇文章，手把手教她如何安装 Windows 系统。也可以扔给你的女朋友看看，我不介意的哈 😏😏😏。\n\n![](https://img-blog.csdnimg.cn/img_convert/4314460ac35fb58e140136e21c576cd4.png)\n\n接下来就是正文部分了，各位看官准备好，那么开始之前，我们先来看看一些基本常识，备好小板凳和瓜子！\n\n![](https://img-blog.csdnimg.cn/img_convert/25d87aaba7d58bcda8a51b85cfce0140.gif)\n\n### 1.1 什么是 BIOS？\n\n> BIOS 是英文 \"Basic Input Output System\" 的缩略词，直译过来后中文名称就是\"基本输入输出系统\"。**其实，它是一组固化到计算机内主板上一个 ROM 芯片上的程序**，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从 CMOS 中读写系统设置的具体信息。其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。此外，BIOS 还向作业系统提供一些系统参数。系统硬件的变化是由 BIOS 隐藏，程序使用 BIOS 功能而不是直接控制硬件。\n\n上面来自百度百科，说白了我们了解这些基本没啥用，我们只想知道装系统为啥要涉及到 BIOS。这么说吧，BIOS 就是能够让我们正常打开电脑工作的重要工具。这么一说就明白了吧。\n\n![](https://img-blog.csdnimg.cn/img_convert/6ca62ed706fad33644bd01ae74bc43c7.png)\n\n我们装系统，其实也不用改 BIOS 里边的其他设置，一般来讲只用 **调整系统的启动介质的启动顺序。** 一般正常的都是优先从硬盘启动，而我们要通过 U 盘安装，所以我们要做的只是：\n\n> ✅✅✅\n>\n> **将 U 盘启动项调整到最前面，让它作为启动介质的优先级最高。**\n\n要进入 BIOS 的方式一般来讲就是：**开启电脑笔记本电源后，狂按 F2，然后一般就会听见 “哔” 的一声，这说明我们成功进入 BIOS 设置面板。**\n\n![狂按归狂按，别像这样把电脑砸了，hhh](https://img-blog.csdnimg.cn/img_convert/72c472b3bd3e926179915522f7667191.gif)\n\n当然了，对于大多数电脑是 **F2**，但实际上不同电脑厂家对应有不同的启动键，而且就算同一家的笔记本和台式机也可能不同，所以具体启动键可以在 **进入之前建议百度一下对应电脑的启动键**，一般的电脑厂商对应的 BIOS 启动键如下（只是部分，如果不知道是那一个，可以去网上百度对应型号电脑的启动键，一般都能找到）：\n\n| 电脑厂商 | 启动键 |\n| -------- | ------ |\n| Lenovo   | F2     |\n| Asus     | F2     |\n| DELL     | F2     |\n| HP       | F10    |\n| Acer     | F2     |\n\n### 1.2 MBR vs GPT\n\n具体介绍就不展开了，如果想要进一步了解，推荐阅读：https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘 GPT 模式，刻录 U 盘启动盘时选择 GPT 模式，一般是不会出错的。如果电脑稍微老一点的，选用 GTP 模式刻录后，安装会失败，此时选用 MBR 模式，一般就能解决这个问题。\n\n![](https://img-blog.csdnimg.cn/img_convert/3df650f0df688e078323b9ec2fb07c90.png)\n\n## 2. 准备工作\n\n既然要装系统，那么首先你需要事先准备好如下的工具：\n\n1.  **一个 8G 及以上内存的 U 盘**\n2.  **Windows 系统镜像**\n3.  **刻录软件**\n\n### 2.1 8G + 内存的 U 盘\n\n要装系统，虽然可以直接直接下载到本地后解压安装，但是更推荐使用 U 盘安装，此时就需要准备一个最小内存为 8G 的 U 盘（现在 Windows 系统镜像大小一般都超过了 4G）。然后需要注意一点：\n\n> ⚠⚠⚠\n>\n> **一定要事先把 U 盘中的重要文件进行备份 ❗❗❗，因为刻录时会抹除 U 盘中原有内容。**\n\n### 2.2 Windows 系统镜像\n\n要装系统，下一个纯净的镜像是十分重要的，因为现在网上大多都是经过植入一定软件，就算到时候自己卸载，也很麻烦，而且也保证不了别人往里边注入了啥软件，安全性也未可知，所以此处 **推荐在官方进行下载**。但是官方下载很慢呀，所以此处推荐两个下载渠道：\n\n1.  **MSDN**\n\n**https://next.itellyou.cn**\n\n![](https://img-blog.csdnimg.cn/img_convert/699a3cf7c7400e817112c115298b9fb4.png)\n\n这是一个老牌的 Windows 系统下载的网站，上图是进行改版后的界面，如果你想要访问之前的老版本网站，请移步：https://msdn.itellyou.cn/. 新版本的 MSDN 中，不仅仅提供 Windows 系统的下载，还包括 Linux、MacOS 和 Chromium OS 等系统的下载，比之前所提供下载的系统更丰富了。比如我们选中 Windows 10 的 2004 版后，只要复制 BT 或 ED2K 到相关下载软件（一般是迅雷）中，添加新任务进行下载即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/4457155a0b74d310dd68ff13679570ee.png)\n\n2.  **TechBench**\n\n**https://tb.rg-adguard.net/public.php**\n\n![](https://img-blog.csdnimg.cn/img_convert/895ecd95e696788b9f92bf3b7c9728e0.png)\n\n如上图，如果你不想通过种子的方式进行下载，那这个方式一定适合你。它无需通过其他下载工具进行下载，只需要选中系统类型、版本、版、语言以及文件后，右侧就会出现一个下载按钮，然后点击下载按钮就会进行下载，十分方便，如下图中我以 Windows 10 2004 版简体中文的 64 位系统，选中后点击下载进行下载即可。\n\n\n![](https://img-blog.csdnimg.cn/img_convert/5945fc60573ced2decce476c90f68024.png)\n### 2.3 刻录软件\n\n这一部分其实昨天都已经说过了，鉴于有的读者可能不爱翻了，就在这儿再啰嗦几句。\n\n![嫌啰嗦的可以直接跳过哈，hh](https://img-blog.csdnimg.cn/img_convert/a2eba056e55edb902944f3d41d4dfd42.gif)\n\n网上有很多刻录软件，比如什么老毛桃、大白菜等等，但是这些刻录软件都有个毛病：客户端不仅大，而且刻录后安装好系统里边会植入某些软件（别问我咋知道，这是自己当初是小白时一一踩过的坑 😭😭😭），本来我们就想要纯净的，这就很烦了。所以在此推荐几个刻录软件：\n\n1.  **Ventoy**\n\n**https://www.ventoy.net/cn/index.html**\n\n这是一个支持 Windows 和 Linux 双平台的刻录软件，**不需要进行安装，打开即用**。最大的特点就是：**可以一次制作，多次使用，即支持多系统**。我们只需要刻录一次，然后将我们的系统镜像拷到 U 盘中就行了（不管你的系统是 Windows 还是 Linux），具体使用可以参照我的另一篇文章 [如何一次制作多系统启动盘](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)。\n\n2.  **Refus**\n\n**https://rufus.ie/**\n\n这是一个 Windows 下小巧而强大的刻录软件，如果 **只是需要刻录某一个系统的启动盘，可以优先考虑这个软件，** 具体使用过程请参见 [制作 U 盘启动盘的两种方式](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)\n\n3.  **UltraISO**\n\n**https://cn.ultraiso.net/**\n\nUltraISO 软碟通是一款功能强大、方便实用、老牌优秀的光盘映像文件制作/编辑/转换工具。不仅可以直接编辑 ISO 文件，从 ISO 中提取文件和目录；也可以从 CD - ROM 制作光盘映像或者将硬盘上的文件制作成 ISO 文件；同时还可以处理 ISO 文件的启动信息，从而制作可引导光盘。使用 UltraISO，你可以随心所欲地制作/编辑/转换光盘映像文件。但是有个问题就是：**虽然 UltraISO 可以免费用，但是是有广告的，如果你比较烦广告，那你就得花钱购买。** 具体使用教程请参见 [制作 U 盘启动盘的两种方式](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492186&idx=1&sn=f5f51614b6d7de666f90aa7e4484f6d8&chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&token=2004299281&lang=zh_CN#rd)。\n\n## 3. 安装过程\n\n经过上面的准备过程之后，我们整理下现在手里的资源。不出意外地话，你应该已经手拿一个刻录好的系统启动盘（即刻录进系统镜像的 U 盘）。看吧，搞了半天，最后需要的就是这个玩意儿，是不是很简单 🤣🤣🤣。那接下来，我们就来开始安装过程吧。\n\n![](https://img-blog.csdnimg.cn/img_convert/2b3c1ef8d4cb877e819ba28fb97d5deb.png)\n\n### 3.1 设置 BIOS 启动顺序\n\n进入 BIOS 之后，一般是在 BOOT 选项下，将 U 盘的启动顺序调整到最前边（就是图中的 USB HDD 调到第 1 位），然后按 F10 保存退出即可。一般这个时候重启后就会进入 U 盘启动盘中，接下来就是具体的系统安装设置了。\n\n![](https://img-blog.csdnimg.cn/img_convert/217447e870d6f9b951d763f134513e4d.png)\n\n### 3.2 系统安装设置过程\n\n1.  设置好 BIOS 启动顺序之后，保存重启等一会儿会自动进入如下主安装界面，根据自己的喜好选择语言，时间格式和键盘输入方式后，点击 **下一步**；\n\n![](https://img-blog.csdnimg.cn/img_convert/26fdab8b030437d99030774e2f6f3590.png)\n\n2.  接着点击现在安装；\n\n![](https://img-blog.csdnimg.cn/img_convert/142517c9f6ee1a55747aadb6117f7d03.png)\n\n3.  接着会让你输入产品秘钥，如果有的话，直接输入后下一步即可，没有的话，直接点击我没有产品秘钥即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/9b0eca9f3a97732303a22cd6aa863b3a.png)\n\n4.  接着选择自己要安装的版本，然后点击下一步即可（一般 **推荐选择专业版**）；\n\n![](https://img-blog.csdnimg.cn/img_convert/403b84e584cca532e49fb4e03fb457a7.png)\n\n5.  接着勾选许可条款，继续下一步；\n\n![](https://img-blog.csdnimg.cn/img_convert/a5ee6989ae15e088db46664f9119bb6e.png)\n\n6.  选择自定义：仅安装 Windows；\n\n![](https://img-blog.csdnimg.cn/img_convert/e3ab961e4c9f8de7135b8d66de868da4.png)\n\n7.  接着选择你要安装系统的硬盘，接着下一步，**注意一定要选中你要安装系统的盘，否则可能把其他盘的数据也给搞掉，而且你也可以自己分区！！！**；\n\n![](https://img-blog.csdnimg.cn/img_convert/553658d77da95398433f17767ad9416c.png)\n\n8.  好了，到此系统正式安装开始了，等他装完，**拔掉 U 盘重启即可**；\n\n![](https://img-blog.csdnimg.cn/img_convert/a6b428ab638a259cbf368f5fb398f3dd.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/7f391a6c8fd1b62c67e3e3fb918a8f29.png)\n\n9.  重启之后就是 Windows 的一些初始化设置，一般是时区、用户、密码、输入方式等设置，这个没啥好讲了，根据自己的喜好进行选择即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/4fee49930e12ffa55ad6419be41bf97b.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/543b04be717a96490550768fece1b79d.png)\n\n## 4. 总结\n\n好了，看到这儿，那你就应该能够完整的安装好一个系统了，赶快去试试吧。\n\nPS：一开始可能会遇到不同的小问题，但是不要慌，电脑一般装个系统是不会坏的，我当初也是一遍遍尝试，最后才安装成功。如果实在是觉得搞不定，你也可以关注我的公众号或者添加我的私人微信，加入我的交流群，大家一起交流哦！！！\n\n🤪🤪🤪，完了完了，女朋友发现我发的文章了，我得溜了。\n\n![看来免不了跪键盘了](https://img-blog.csdnimg.cn/img_convert/5ba2fd71816e2205566499a900372409.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】手把手教妹纸装系统，猛男必备！","published":1,"updated":"2021-05-04T02:07:42.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw03001ubw346xf57dye","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>最近女朋友由于工作原因，一直缠着我教她装系统（连系统都不会装，大（la）佬（ji））。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/20fb8a806184736cbc2a4760bc8ba9d5.png\" alt=\"\"></p>\n<p>嘘！！！小声 BB，别让她听见了，🤣🤣🤣。那没有办法呀，女朋友的话，你敢不听么，🤪🤪🤪。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c9b212afe3fca0a89ae203b53602e3b.png\" alt=\"\"></p>\n<p>于是就有了<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">昨天那篇</a>和这篇文章，手把手教她如何安装 Windows 系统。也可以扔给你的女朋友看看，我不介意的哈 😏😏😏。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4314460ac35fb58e140136e21c576cd4.png\" alt=\"\"></p>\n<p>接下来就是正文部分了，各位看官准备好，那么开始之前，我们先来看看一些基本常识，备好小板凳和瓜子！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/25d87aaba7d58bcda8a51b85cfce0140.gif\" alt=\"\"></p>\n<h3 id=\"1-1-什么是-BIOS？\"><a href=\"#1-1-什么是-BIOS？\" class=\"headerlink\" title=\"1.1 什么是 BIOS？\"></a>1.1 什么是 BIOS？</h3><blockquote>\n<p>BIOS 是英文 “Basic Input Output System” 的缩略词，直译过来后中文名称就是”基本输入输出系统”。<strong>其实，它是一组固化到计算机内主板上一个 ROM 芯片上的程序</strong>，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从 CMOS 中读写系统设置的具体信息。其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。此外，BIOS 还向作业系统提供一些系统参数。系统硬件的变化是由 BIOS 隐藏，程序使用 BIOS 功能而不是直接控制硬件。</p>\n</blockquote>\n<p>上面来自百度百科，说白了我们了解这些基本没啥用，我们只想知道装系统为啥要涉及到 BIOS。这么说吧，BIOS 就是能够让我们正常打开电脑工作的重要工具。这么一说就明白了吧。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6ca62ed706fad33644bd01ae74bc43c7.png\" alt=\"\"></p>\n<p>我们装系统，其实也不用改 BIOS 里边的其他设置，一般来讲只用 <strong>调整系统的启动介质的启动顺序。</strong> 一般正常的都是优先从硬盘启动，而我们要通过 U 盘安装，所以我们要做的只是：</p>\n<blockquote>\n<p>✅✅✅</p>\n<p><strong>将 U 盘启动项调整到最前面，让它作为启动介质的优先级最高。</strong></p>\n</blockquote>\n<p>要进入 BIOS 的方式一般来讲就是：<strong>开启电脑笔记本电源后，狂按 F2，然后一般就会听见 “哔” 的一声，这说明我们成功进入 BIOS 设置面板。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/72c472b3bd3e926179915522f7667191.gif\" alt=\"狂按归狂按，别像这样把电脑砸了，hhh\"></p>\n<p>当然了，对于大多数电脑是 <strong>F2</strong>，但实际上不同电脑厂家对应有不同的启动键，而且就算同一家的笔记本和台式机也可能不同，所以具体启动键可以在 <strong>进入之前建议百度一下对应电脑的启动键</strong>，一般的电脑厂商对应的 BIOS 启动键如下（只是部分，如果不知道是那一个，可以去网上百度对应型号电脑的启动键，一般都能找到）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>电脑厂商</th>\n<th>启动键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lenovo</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>Asus</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>DELL</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>HP</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>Acer</td>\n<td>F2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"1-2-MBR-vs-GPT\"><a href=\"#1-2-MBR-vs-GPT\" class=\"headerlink\" title=\"1.2 MBR vs GPT\"></a>1.2 MBR vs GPT</h3><p>具体介绍就不展开了，如果想要进一步了解，推荐阅读：<a href=\"https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘\">https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘</a> GPT 模式，刻录 U 盘启动盘时选择 GPT 模式，一般是不会出错的。如果电脑稍微老一点的，选用 GTP 模式刻录后，安装会失败，此时选用 MBR 模式，一般就能解决这个问题。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3df650f0df688e078323b9ec2fb07c90.png\" alt=\"\"></p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>既然要装系统，那么首先你需要事先准备好如下的工具：</p>\n<ol>\n<li><strong>一个 8G 及以上内存的 U 盘</strong></li>\n<li><strong>Windows 系统镜像</strong></li>\n<li><strong>刻录软件</strong></li>\n</ol>\n<h3 id=\"2-1-8G-内存的-U-盘\"><a href=\"#2-1-8G-内存的-U-盘\" class=\"headerlink\" title=\"2.1 8G + 内存的 U 盘\"></a>2.1 8G + 内存的 U 盘</h3><p>要装系统，虽然可以直接直接下载到本地后解压安装，但是更推荐使用 U 盘安装，此时就需要准备一个最小内存为 8G 的 U 盘（现在 Windows 系统镜像大小一般都超过了 4G）。然后需要注意一点：</p>\n<blockquote>\n<p>⚠⚠⚠</p>\n<p><strong>一定要事先把 U 盘中的重要文件进行备份 ❗❗❗，因为刻录时会抹除 U 盘中原有内容。</strong></p>\n</blockquote>\n<h3 id=\"2-2-Windows-系统镜像\"><a href=\"#2-2-Windows-系统镜像\" class=\"headerlink\" title=\"2.2 Windows 系统镜像\"></a>2.2 Windows 系统镜像</h3><p>要装系统，下一个纯净的镜像是十分重要的，因为现在网上大多都是经过植入一定软件，就算到时候自己卸载，也很麻烦，而且也保证不了别人往里边注入了啥软件，安全性也未可知，所以此处 <strong>推荐在官方进行下载</strong>。但是官方下载很慢呀，所以此处推荐两个下载渠道：</p>\n<ol>\n<li><strong>MSDN</strong></li>\n</ol>\n<p><strong><a href=\"https://next.itellyou.cn\">https://next.itellyou.cn</a></strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/699a3cf7c7400e817112c115298b9fb4.png\" alt=\"\"></p>\n<p>这是一个老牌的 Windows 系统下载的网站，上图是进行改版后的界面，如果你想要访问之前的老版本网站，请移步：<a href=\"https://msdn.itellyou.cn/\">https://msdn.itellyou.cn/</a>. 新版本的 MSDN 中，不仅仅提供 Windows 系统的下载，还包括 Linux、MacOS 和 Chromium OS 等系统的下载，比之前所提供下载的系统更丰富了。比如我们选中 Windows 10 的 2004 版后，只要复制 BT 或 ED2K 到相关下载软件（一般是迅雷）中，添加新任务进行下载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4457155a0b74d310dd68ff13679570ee.png\" alt=\"\"></p>\n<ol>\n<li><strong>TechBench</strong></li>\n</ol>\n<p><strong><a href=\"https://tb.rg-adguard.net/public.php\">https://tb.rg-adguard.net/public.php</a></strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/895ecd95e696788b9f92bf3b7c9728e0.png\" alt=\"\"></p>\n<p>如上图，如果你不想通过种子的方式进行下载，那这个方式一定适合你。它无需通过其他下载工具进行下载，只需要选中系统类型、版本、版、语言以及文件后，右侧就会出现一个下载按钮，然后点击下载按钮就会进行下载，十分方便，如下图中我以 Windows 10 2004 版简体中文的 64 位系统，选中后点击下载进行下载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5945fc60573ced2decce476c90f68024.png\" alt=\"\"></p>\n<h3 id=\"2-3-刻录软件\"><a href=\"#2-3-刻录软件\" class=\"headerlink\" title=\"2.3 刻录软件\"></a>2.3 刻录软件</h3><p>这一部分其实昨天都已经说过了，鉴于有的读者可能不爱翻了，就在这儿再啰嗦几句。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2eba056e55edb902944f3d41d4dfd42.gif\" alt=\"嫌啰嗦的可以直接跳过哈，hh\"></p>\n<p>网上有很多刻录软件，比如什么老毛桃、大白菜等等，但是这些刻录软件都有个毛病：客户端不仅大，而且刻录后安装好系统里边会植入某些软件（别问我咋知道，这是自己当初是小白时一一踩过的坑 😭😭😭），本来我们就想要纯净的，这就很烦了。所以在此推荐几个刻录软件：</p>\n<ol>\n<li><strong>Ventoy</strong></li>\n</ol>\n<p><strong><a href=\"https://www.ventoy.net/cn/index.html\">https://www.ventoy.net/cn/index.html</a></strong></p>\n<p>这是一个支持 Windows 和 Linux 双平台的刻录软件，<strong>不需要进行安装，打开即用</strong>。最大的特点就是：<strong>可以一次制作，多次使用，即支持多系统</strong>。我们只需要刻录一次，然后将我们的系统镜像拷到 U 盘中就行了（不管你的系统是 Windows 还是 Linux），具体使用可以参照我的另一篇文章 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">如何一次制作多系统启动盘</a>。</p>\n<ol>\n<li><strong>Refus</strong></li>\n</ol>\n<p><strong><a href=\"https://rufus.ie/\">https://rufus.ie/</a></strong></p>\n<p>这是一个 Windows 下小巧而强大的刻录软件，如果 <strong>只是需要刻录某一个系统的启动盘，可以优先考虑这个软件，</strong> 具体使用过程请参见 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">制作 U 盘启动盘的两种方式</a></p>\n<ol>\n<li><strong>UltraISO</strong></li>\n</ol>\n<p><strong><a href=\"https://cn.ultraiso.net/\">https://cn.ultraiso.net/</a></strong></p>\n<p>UltraISO 软碟通是一款功能强大、方便实用、老牌优秀的光盘映像文件制作/编辑/转换工具。不仅可以直接编辑 ISO 文件，从 ISO 中提取文件和目录；也可以从 CD - ROM 制作光盘映像或者将硬盘上的文件制作成 ISO 文件；同时还可以处理 ISO 文件的启动信息，从而制作可引导光盘。使用 UltraISO，你可以随心所欲地制作/编辑/转换光盘映像文件。但是有个问题就是：<strong>虽然 UltraISO 可以免费用，但是是有广告的，如果你比较烦广告，那你就得花钱购买。</strong> 具体使用教程请参见 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">制作 U 盘启动盘的两种方式</a>。</p>\n<h2 id=\"3-安装过程\"><a href=\"#3-安装过程\" class=\"headerlink\" title=\"3. 安装过程\"></a>3. 安装过程</h2><p>经过上面的准备过程之后，我们整理下现在手里的资源。不出意外地话，你应该已经手拿一个刻录好的系统启动盘（即刻录进系统镜像的 U 盘）。看吧，搞了半天，最后需要的就是这个玩意儿，是不是很简单 🤣🤣🤣。那接下来，我们就来开始安装过程吧。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2b3c1ef8d4cb877e819ba28fb97d5deb.png\" alt=\"\"></p>\n<h3 id=\"3-1-设置-BIOS-启动顺序\"><a href=\"#3-1-设置-BIOS-启动顺序\" class=\"headerlink\" title=\"3.1 设置 BIOS 启动顺序\"></a>3.1 设置 BIOS 启动顺序</h3><p>进入 BIOS 之后，一般是在 BOOT 选项下，将 U 盘的启动顺序调整到最前边（就是图中的 USB HDD 调到第 1 位），然后按 F10 保存退出即可。一般这个时候重启后就会进入 U 盘启动盘中，接下来就是具体的系统安装设置了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/217447e870d6f9b951d763f134513e4d.png\" alt=\"\"></p>\n<h3 id=\"3-2-系统安装设置过程\"><a href=\"#3-2-系统安装设置过程\" class=\"headerlink\" title=\"3.2 系统安装设置过程\"></a>3.2 系统安装设置过程</h3><ol>\n<li>设置好 BIOS 启动顺序之后，保存重启等一会儿会自动进入如下主安装界面，根据自己的喜好选择语言，时间格式和键盘输入方式后，点击 <strong>下一步</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/26fdab8b030437d99030774e2f6f3590.png\" alt=\"\"></p>\n<ol>\n<li>接着点击现在安装；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/142517c9f6ee1a55747aadb6117f7d03.png\" alt=\"\"></p>\n<ol>\n<li>接着会让你输入产品秘钥，如果有的话，直接输入后下一步即可，没有的话，直接点击我没有产品秘钥即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b0eca9f3a97732303a22cd6aa863b3a.png\" alt=\"\"></p>\n<ol>\n<li>接着选择自己要安装的版本，然后点击下一步即可（一般 <strong>推荐选择专业版</strong>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/403b84e584cca532e49fb4e03fb457a7.png\" alt=\"\"></p>\n<ol>\n<li>接着勾选许可条款，继续下一步；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a5ee6989ae15e088db46664f9119bb6e.png\" alt=\"\"></p>\n<ol>\n<li>选择自定义：仅安装 Windows；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e3ab961e4c9f8de7135b8d66de868da4.png\" alt=\"\"></p>\n<ol>\n<li>接着选择你要安装系统的硬盘，接着下一步，<strong>注意一定要选中你要安装系统的盘，否则可能把其他盘的数据也给搞掉，而且你也可以自己分区！！！</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/553658d77da95398433f17767ad9416c.png\" alt=\"\"></p>\n<ol>\n<li>好了，到此系统正式安装开始了，等他装完，<strong>拔掉 U 盘重启即可</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a6b428ab638a259cbf368f5fb398f3dd.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7f391a6c8fd1b62c67e3e3fb918a8f29.png\" alt=\"\"></p>\n<ol>\n<li>重启之后就是 Windows 的一些初始化设置，一般是时区、用户、密码、输入方式等设置，这个没啥好讲了，根据自己的喜好进行选择即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4fee49930e12ffa55ad6419be41bf97b.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/543b04be717a96490550768fece1b79d.png\" alt=\"\"></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>好了，看到这儿，那你就应该能够完整的安装好一个系统了，赶快去试试吧。</p>\n<p>PS：一开始可能会遇到不同的小问题，但是不要慌，电脑一般装个系统是不会坏的，我当初也是一遍遍尝试，最后才安装成功。如果实在是觉得搞不定，你也可以关注我的公众号或者添加我的私人微信，加入我的交流群，大家一起交流哦！！！</p>\n<p>🤪🤪🤪，完了完了，女朋友发现我发的文章了，我得溜了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5ba2fd71816e2205566499a900372409.png\" alt=\"看来免不了跪键盘了\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>最近女朋友由于工作原因，一直缠着我教她装系统（连系统都不会装，大（la）佬（ji））。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/20fb8a806184736cbc2a4760bc8ba9d5.png\" alt=\"\"></p>\n<p>嘘！！！小声 BB，别让她听见了，🤣🤣🤣。那没有办法呀，女朋友的话，你敢不听么，🤪🤪🤪。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c9b212afe3fca0a89ae203b53602e3b.png\" alt=\"\"></p>\n<p>于是就有了<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">昨天那篇</a>和这篇文章，手把手教她如何安装 Windows 系统。也可以扔给你的女朋友看看，我不介意的哈 😏😏😏。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4314460ac35fb58e140136e21c576cd4.png\" alt=\"\"></p>\n<p>接下来就是正文部分了，各位看官准备好，那么开始之前，我们先来看看一些基本常识，备好小板凳和瓜子！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/25d87aaba7d58bcda8a51b85cfce0140.gif\" alt=\"\"></p>\n<h3 id=\"1-1-什么是-BIOS？\"><a href=\"#1-1-什么是-BIOS？\" class=\"headerlink\" title=\"1.1 什么是 BIOS？\"></a>1.1 什么是 BIOS？</h3><blockquote>\n<p>BIOS 是英文 “Basic Input Output System” 的缩略词，直译过来后中文名称就是”基本输入输出系统”。<strong>其实，它是一组固化到计算机内主板上一个 ROM 芯片上的程序</strong>，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从 CMOS 中读写系统设置的具体信息。其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。此外，BIOS 还向作业系统提供一些系统参数。系统硬件的变化是由 BIOS 隐藏，程序使用 BIOS 功能而不是直接控制硬件。</p>\n</blockquote>\n<p>上面来自百度百科，说白了我们了解这些基本没啥用，我们只想知道装系统为啥要涉及到 BIOS。这么说吧，BIOS 就是能够让我们正常打开电脑工作的重要工具。这么一说就明白了吧。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6ca62ed706fad33644bd01ae74bc43c7.png\" alt=\"\"></p>\n<p>我们装系统，其实也不用改 BIOS 里边的其他设置，一般来讲只用 <strong>调整系统的启动介质的启动顺序。</strong> 一般正常的都是优先从硬盘启动，而我们要通过 U 盘安装，所以我们要做的只是：</p>\n<blockquote>\n<p>✅✅✅</p>\n<p><strong>将 U 盘启动项调整到最前面，让它作为启动介质的优先级最高。</strong></p>\n</blockquote>\n<p>要进入 BIOS 的方式一般来讲就是：<strong>开启电脑笔记本电源后，狂按 F2，然后一般就会听见 “哔” 的一声，这说明我们成功进入 BIOS 设置面板。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/72c472b3bd3e926179915522f7667191.gif\" alt=\"狂按归狂按，别像这样把电脑砸了，hhh\"></p>\n<p>当然了，对于大多数电脑是 <strong>F2</strong>，但实际上不同电脑厂家对应有不同的启动键，而且就算同一家的笔记本和台式机也可能不同，所以具体启动键可以在 <strong>进入之前建议百度一下对应电脑的启动键</strong>，一般的电脑厂商对应的 BIOS 启动键如下（只是部分，如果不知道是那一个，可以去网上百度对应型号电脑的启动键，一般都能找到）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>电脑厂商</th>\n<th>启动键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lenovo</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>Asus</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>DELL</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>HP</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>Acer</td>\n<td>F2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"1-2-MBR-vs-GPT\"><a href=\"#1-2-MBR-vs-GPT\" class=\"headerlink\" title=\"1.2 MBR vs GPT\"></a>1.2 MBR vs GPT</h3><p>具体介绍就不展开了，如果想要进一步了解，推荐阅读：<a href=\"https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘\">https://zhuanlan.zhihu.com/p/26098509。你只需要记住，现在的新电脑一般都是硬盘</a> GPT 模式，刻录 U 盘启动盘时选择 GPT 模式，一般是不会出错的。如果电脑稍微老一点的，选用 GTP 模式刻录后，安装会失败，此时选用 MBR 模式，一般就能解决这个问题。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3df650f0df688e078323b9ec2fb07c90.png\" alt=\"\"></p>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><p>既然要装系统，那么首先你需要事先准备好如下的工具：</p>\n<ol>\n<li><strong>一个 8G 及以上内存的 U 盘</strong></li>\n<li><strong>Windows 系统镜像</strong></li>\n<li><strong>刻录软件</strong></li>\n</ol>\n<h3 id=\"2-1-8G-内存的-U-盘\"><a href=\"#2-1-8G-内存的-U-盘\" class=\"headerlink\" title=\"2.1 8G + 内存的 U 盘\"></a>2.1 8G + 内存的 U 盘</h3><p>要装系统，虽然可以直接直接下载到本地后解压安装，但是更推荐使用 U 盘安装，此时就需要准备一个最小内存为 8G 的 U 盘（现在 Windows 系统镜像大小一般都超过了 4G）。然后需要注意一点：</p>\n<blockquote>\n<p>⚠⚠⚠</p>\n<p><strong>一定要事先把 U 盘中的重要文件进行备份 ❗❗❗，因为刻录时会抹除 U 盘中原有内容。</strong></p>\n</blockquote>\n<h3 id=\"2-2-Windows-系统镜像\"><a href=\"#2-2-Windows-系统镜像\" class=\"headerlink\" title=\"2.2 Windows 系统镜像\"></a>2.2 Windows 系统镜像</h3><p>要装系统，下一个纯净的镜像是十分重要的，因为现在网上大多都是经过植入一定软件，就算到时候自己卸载，也很麻烦，而且也保证不了别人往里边注入了啥软件，安全性也未可知，所以此处 <strong>推荐在官方进行下载</strong>。但是官方下载很慢呀，所以此处推荐两个下载渠道：</p>\n<ol>\n<li><strong>MSDN</strong></li>\n</ol>\n<p><strong><a href=\"https://next.itellyou.cn\">https://next.itellyou.cn</a></strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/699a3cf7c7400e817112c115298b9fb4.png\" alt=\"\"></p>\n<p>这是一个老牌的 Windows 系统下载的网站，上图是进行改版后的界面，如果你想要访问之前的老版本网站，请移步：<a href=\"https://msdn.itellyou.cn/\">https://msdn.itellyou.cn/</a>. 新版本的 MSDN 中，不仅仅提供 Windows 系统的下载，还包括 Linux、MacOS 和 Chromium OS 等系统的下载，比之前所提供下载的系统更丰富了。比如我们选中 Windows 10 的 2004 版后，只要复制 BT 或 ED2K 到相关下载软件（一般是迅雷）中，添加新任务进行下载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4457155a0b74d310dd68ff13679570ee.png\" alt=\"\"></p>\n<ol>\n<li><strong>TechBench</strong></li>\n</ol>\n<p><strong><a href=\"https://tb.rg-adguard.net/public.php\">https://tb.rg-adguard.net/public.php</a></strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/895ecd95e696788b9f92bf3b7c9728e0.png\" alt=\"\"></p>\n<p>如上图，如果你不想通过种子的方式进行下载，那这个方式一定适合你。它无需通过其他下载工具进行下载，只需要选中系统类型、版本、版、语言以及文件后，右侧就会出现一个下载按钮，然后点击下载按钮就会进行下载，十分方便，如下图中我以 Windows 10 2004 版简体中文的 64 位系统，选中后点击下载进行下载即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5945fc60573ced2decce476c90f68024.png\" alt=\"\"></p>\n<h3 id=\"2-3-刻录软件\"><a href=\"#2-3-刻录软件\" class=\"headerlink\" title=\"2.3 刻录软件\"></a>2.3 刻录软件</h3><p>这一部分其实昨天都已经说过了，鉴于有的读者可能不爱翻了，就在这儿再啰嗦几句。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2eba056e55edb902944f3d41d4dfd42.gif\" alt=\"嫌啰嗦的可以直接跳过哈，hh\"></p>\n<p>网上有很多刻录软件，比如什么老毛桃、大白菜等等，但是这些刻录软件都有个毛病：客户端不仅大，而且刻录后安装好系统里边会植入某些软件（别问我咋知道，这是自己当初是小白时一一踩过的坑 😭😭😭），本来我们就想要纯净的，这就很烦了。所以在此推荐几个刻录软件：</p>\n<ol>\n<li><strong>Ventoy</strong></li>\n</ol>\n<p><strong><a href=\"https://www.ventoy.net/cn/index.html\">https://www.ventoy.net/cn/index.html</a></strong></p>\n<p>这是一个支持 Windows 和 Linux 双平台的刻录软件，<strong>不需要进行安装，打开即用</strong>。最大的特点就是：<strong>可以一次制作，多次使用，即支持多系统</strong>。我们只需要刻录一次，然后将我们的系统镜像拷到 U 盘中就行了（不管你的系统是 Windows 还是 Linux），具体使用可以参照我的另一篇文章 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">如何一次制作多系统启动盘</a>。</p>\n<ol>\n<li><strong>Refus</strong></li>\n</ol>\n<p><strong><a href=\"https://rufus.ie/\">https://rufus.ie/</a></strong></p>\n<p>这是一个 Windows 下小巧而强大的刻录软件，如果 <strong>只是需要刻录某一个系统的启动盘，可以优先考虑这个软件，</strong> 具体使用过程请参见 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">制作 U 盘启动盘的两种方式</a></p>\n<ol>\n<li><strong>UltraISO</strong></li>\n</ol>\n<p><strong><a href=\"https://cn.ultraiso.net/\">https://cn.ultraiso.net/</a></strong></p>\n<p>UltraISO 软碟通是一款功能强大、方便实用、老牌优秀的光盘映像文件制作/编辑/转换工具。不仅可以直接编辑 ISO 文件，从 ISO 中提取文件和目录；也可以从 CD - ROM 制作光盘映像或者将硬盘上的文件制作成 ISO 文件；同时还可以处理 ISO 文件的启动信息，从而制作可引导光盘。使用 UltraISO，你可以随心所欲地制作/编辑/转换光盘映像文件。但是有个问题就是：<strong>虽然 UltraISO 可以免费用，但是是有广告的，如果你比较烦广告，那你就得花钱购买。</strong> 具体使用教程请参见 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492186&amp;idx=1&amp;sn=f5f51614b6d7de666f90aa7e4484f6d8&amp;chksm=e87b962cdf0c1f3ae0889f530e7b8a6f95188f54eeb1d1773bed7c7568d0b302c4c58b6f885d&amp;token=2004299281&amp;lang=zh_CN#rd\">制作 U 盘启动盘的两种方式</a>。</p>\n<h2 id=\"3-安装过程\"><a href=\"#3-安装过程\" class=\"headerlink\" title=\"3. 安装过程\"></a>3. 安装过程</h2><p>经过上面的准备过程之后，我们整理下现在手里的资源。不出意外地话，你应该已经手拿一个刻录好的系统启动盘（即刻录进系统镜像的 U 盘）。看吧，搞了半天，最后需要的就是这个玩意儿，是不是很简单 🤣🤣🤣。那接下来，我们就来开始安装过程吧。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2b3c1ef8d4cb877e819ba28fb97d5deb.png\" alt=\"\"></p>\n<h3 id=\"3-1-设置-BIOS-启动顺序\"><a href=\"#3-1-设置-BIOS-启动顺序\" class=\"headerlink\" title=\"3.1 设置 BIOS 启动顺序\"></a>3.1 设置 BIOS 启动顺序</h3><p>进入 BIOS 之后，一般是在 BOOT 选项下，将 U 盘的启动顺序调整到最前边（就是图中的 USB HDD 调到第 1 位），然后按 F10 保存退出即可。一般这个时候重启后就会进入 U 盘启动盘中，接下来就是具体的系统安装设置了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/217447e870d6f9b951d763f134513e4d.png\" alt=\"\"></p>\n<h3 id=\"3-2-系统安装设置过程\"><a href=\"#3-2-系统安装设置过程\" class=\"headerlink\" title=\"3.2 系统安装设置过程\"></a>3.2 系统安装设置过程</h3><ol>\n<li>设置好 BIOS 启动顺序之后，保存重启等一会儿会自动进入如下主安装界面，根据自己的喜好选择语言，时间格式和键盘输入方式后，点击 <strong>下一步</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/26fdab8b030437d99030774e2f6f3590.png\" alt=\"\"></p>\n<ol>\n<li>接着点击现在安装；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/142517c9f6ee1a55747aadb6117f7d03.png\" alt=\"\"></p>\n<ol>\n<li>接着会让你输入产品秘钥，如果有的话，直接输入后下一步即可，没有的话，直接点击我没有产品秘钥即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b0eca9f3a97732303a22cd6aa863b3a.png\" alt=\"\"></p>\n<ol>\n<li>接着选择自己要安装的版本，然后点击下一步即可（一般 <strong>推荐选择专业版</strong>）；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/403b84e584cca532e49fb4e03fb457a7.png\" alt=\"\"></p>\n<ol>\n<li>接着勾选许可条款，继续下一步；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a5ee6989ae15e088db46664f9119bb6e.png\" alt=\"\"></p>\n<ol>\n<li>选择自定义：仅安装 Windows；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e3ab961e4c9f8de7135b8d66de868da4.png\" alt=\"\"></p>\n<ol>\n<li>接着选择你要安装系统的硬盘，接着下一步，<strong>注意一定要选中你要安装系统的盘，否则可能把其他盘的数据也给搞掉，而且你也可以自己分区！！！</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/553658d77da95398433f17767ad9416c.png\" alt=\"\"></p>\n<ol>\n<li>好了，到此系统正式安装开始了，等他装完，<strong>拔掉 U 盘重启即可</strong>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a6b428ab638a259cbf368f5fb398f3dd.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7f391a6c8fd1b62c67e3e3fb918a8f29.png\" alt=\"\"></p>\n<ol>\n<li>重启之后就是 Windows 的一些初始化设置，一般是时区、用户、密码、输入方式等设置，这个没啥好讲了，根据自己的喜好进行选择即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4fee49930e12ffa55ad6419be41bf97b.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/543b04be717a96490550768fece1b79d.png\" alt=\"\"></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>好了，看到这儿，那你就应该能够完整的安装好一个系统了，赶快去试试吧。</p>\n<p>PS：一开始可能会遇到不同的小问题，但是不要慌，电脑一般装个系统是不会坏的，我当初也是一遍遍尝试，最后才安装成功。如果实在是觉得搞不定，你也可以关注我的公众号或者添加我的私人微信，加入我的交流群，大家一起交流哦！！！</p>\n<p>🤪🤪🤪，完了完了，女朋友发现我发的文章了，我得溜了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5ba2fd71816e2205566499a900372409.png\" alt=\"看来免不了跪键盘了\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】技术写作中的那些神兵利器","mathjax":true,"toc":true,"abbrlink":"53549ae6","date":"2021-05-04T03:08:57.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n之前参加了由掘金社区组织的创作者训练营第二期活动，有幸见到了比如月影、工业聚、张晋涛等许多这个行业的大佬，也认识了许多技术写作的博主，可谓是一场大型网友面基会，哈哈哈 🤣. 针对大佬们的演讲和各位博主的提问，发现大家对于多平台分发这一块很感兴趣，也被这个问题困扰了许久，所以今天就来讲讲我这个小菜鸟在平常创作和发布这一块中摸索使用的一些工具总结，希望能对大家有所帮助。下面就来看看文章的主要内容，我主要会从如下几个方面来进行展开：\n\n-   **编辑器**\n-   **思维导图**\n\n-   **图床**\n-   **多平台分发**\n\n如果你对其中的某一部分比较感兴趣，那就直接跳到对应目录吧，当然你也可以看看全文，看看我的方法和你使用的方法是否相同呢 😉。\n\n## 编辑器\n\n主要针对的是使用 Markdown 语法的编辑器，如果你对 Markdown 语法还不太熟悉，可以先看看我的另一篇文章：[十分钟入门 Markdown 写作](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492604&idx=1&sn=a8ef3fe0dc72ed18e841f00236dc01d5&chksm=e87b978adf0c1e9c0b7120aee8826f15e387c5a1581456c7bb227b201c9ad2810a91ca576b2a#rd)。\n\n### Typora\n\n>   地址：https://www.typora.io/\n\n我愿称之为最强 Markdown 编辑器没有之一，这是一款支持 macOS、Windows、Linux 三大平台的 Markdown 编辑器，而且完全免费。简单而强大，一旦你熟悉其中的快捷键之后，你会发现比其他编辑器快很多！（个人觉得，当然你也可以有不同的意见哈 😁）不过有一个缺点就是，当前一旦文档过大，Typora 使用起来就会十分卡顿，而相同的文档在其它编辑器则不会出现这种情况。\n\n此外，Typora 支持多种主题，还能支持我们自定义主题，对于我们颜控的小伙伴来讲，那就是杀招呀！对于大多数其它编辑器支持的导出功能，它怎么能少呢，Typora 支持导出如下格式的文件：\n\n-   PDF\n-   HTML（With/Without Styles）\n-   Word\n-   OPenOffice\n-   RTF\n-   Epub\n-   LaTex\n-   Media Wiki\n-   reStructureText\n-   Textile\n-   OPML\n-   图像\n\n![](https://img-blog.csdnimg.cn/img_convert/93f5e642ec2df9f4800192fb7b634121.png)\n\n### MarkText\n\n>   地址：https://marktext.app/\n\n也是一款简单优雅免费的开源 Markdown 编辑器，专注于速度和可用性，而且同样支持 macOS、Windows、Linux 三大平台。支持如下特性：\n\n-   实时预览（所见即所得）和简洁明了的界面，使您获得无干扰的写作体验。\n-   支持 CommonMark 规范和 GitHub Flavored Markdown 规范。\n-   Markdown扩展，例如数学表达式（KaTeX）、front matter 和 emoji。\n-   支持段落和内联样式快捷方式，以提高您的写作效率。\n-   导出 **HTML** 和 **PDF** 文件。\n-   各种主题：**Cadmium Light**、**Material Dark** 等等。\n-   各种编辑模式：**源代码模式**、**打字机模式**、**专注模式**。\n-   直接从剪贴板中粘贴图片。\n\n![](https://img-blog.csdnimg.cn/img_convert/43b55f25b35d160e46ac3c74cc046d41.png)\n\n### VS Code\n\n>   地址：https://code.visualstudio.com/\n\n是的，VS Code 不仅仅可以作为我们的代码编辑器，我们还能把它当成 Markdown 编辑器，搭配 Markdown 增强插件，左边编辑，右边实时预览，爽歪歪！\n\n推荐插件：\n\n-   Markdown All in One\n-   Markdown Preview GitHub Styling\n\n![](https://img-blog.csdnimg.cn/img_convert/05a79ed98bd13b3a7dca992a89bbc4f6.png)\n\n## 思维导图\n\n### Process On\n\n>   地址：https://www.processon.com/i/5eec25bf1e08532637344b9c\n\n免费的在线作图工具，支持实时协作，方便团队，支持多种图的制作：\n\n-   流程图\n-   思维导图\n-   原型图\n-   UML\n-   网络拓扑图\n-   组织结构图\n-   ……\n\n![](https://img-blog.csdnimg.cn/img_convert/5f7d91517e741db88ea31cb08ffd6906.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/dc4fdd7d65efdcef9ca7aff90a068965.png)\n\n### 幕布\n\n>   地址：https://mubu.com/\n\n大纲式笔记工具，根据我们的大纲生成思维导图。免费账号支持 300 条多文档结点数量，支持 4 种结构、4 种风格思维导图样式，还能导出 Word、PDF、图片、HTML 等格式，完全足够我们日常个人使用。\n\n![](https://img-blog.csdnimg.cn/img_convert/6496690a8cbde7ed3741ad873273c64b.png)\n\n### GitMind\n\n>   地址：https://gitmind.cn/\n\n免费在线思维导图软件，简化逻辑梳理，集思广益，释放创造力在线脑图、思维导图、流程图、工业设计、工程管理，一图涵千面。\n\n![](https://img-blog.csdnimg.cn/img_convert/2e110d0c638da659f2c41688a3aba490.png)\n\n我们不仅能自己编辑，还能邀请小伙伴进行团队协作。此外，支持多种模板，不仅支持在线编辑，还支持多种导出形式。\n\n![](https://img-blog.csdnimg.cn/img_convert/b8f96e90ed0b0295a2b27e80ea2bb083.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/7c481ca35d6ff0e1055c51bfe3068405.png)\n\n### markmap\n\n>   地址：https://markmap.js.org/\n\n上面的工具都是直接图像化工具，和我们的 Markdown 工具无关。而今天这个工具，将两者结合起来，利用 Markdown 来画思维导图。markmap 将 Markdown 语法的文本通过思维导图的方式进行可视化，我们即可以使用在线版，也可以使用它在 VS Code 中的插件版，十分方便，而且支持导出 SVG 和 HTML，可以说是十分方便了！\n\n![](https://img-blog.csdnimg.cn/img_convert/4c69fd55e7e1032d866093822ac75db0.png)\n\n## 图床\n\n### Github\n\n>   地址：http://github.com/\n\n是的，你没有看错，就是万能的 GitHub，我们不仅仅可以从这里找到开源的项目、软件、教程等，你还能把它当成你自己的免费图床。关于具体的搭建过程，可以参考以下我之前的一篇文章：[如何利用 GitHub 搭建自己的免费图床？](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492657&idx=1&sn=4420ebc879c2013ee564b832f6615d10&chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016#rd)\n\n![](https://img-blog.csdnimg.cn/img_convert/9df4c097a6f575d570c34e7d68130eeb.png)\n\n### Gitee\n\n>   地址：http://gitee.com/\n\n既然 GitHub 可以用来搭建图床，那我们的国内的 Gitee 也必须可以呀，而且相对 GitHub 来讲访问的速度更快，岂不是美哉。具体的搭建过程可以参考我之前的一篇文章：[Gitee + Typora，搭建自己的免费图床！](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492731&idx=1&sn=3cef56ad4ce5ec462c6233381af2799c&chksm=e87b900ddf0c191bad9d126b0c7e1cc43e1b481f2ad6224f5ac5d3f4edee25fe6d4281f9edbb#rd)\n\n![](https://img-blog.csdnimg.cn/img_convert/90a698a4707f5d0a0b0c3a81e79df8b3.png)\n\n### SM.MS\n\n>   地址：https://sm.ms/\n\n提供免费图床，而且每个账户有 5 GB 的免费空间，方便我们自己管理，作为我们日常使用完全足够了。\n\n![](https://img-blog.csdnimg.cn/img_convert/9347fd7fa0b1edb839c22c80f3f9e1f9.png)\n\n### 路过图床\n\n>   地址：https://imgtu.com/\n\n路过图床，这是一款高速稳定的上传和外链服务的图床，支持全球 CDN 加速、支持外链、原图保持，而且最大单张支持 10 MB。至于它的稳定性，相信你也不用担心，它已经从 2011 运行至今 10 年的历程，截至到发文前托管了 16151781 张图片，还在犹豫什么，用起来就完事儿了！\n\n![](https://img-blog.csdnimg.cn/img_convert/b26f1bd57b635e0a1102f3e0b4016320.png)\n\n## 多平台分发\n\n### OpenWrite\n\n>   地址：https://openwrite.cn/\n\n主要提供群发功能、博客导流公众号等功能，此外还支持导出 Markdown 导微信公众号、多平台免费图床配置等，不过普通用户每月仅支持 10 次免费群发机会，其他功能则需要会员。\n\n普通用户和会员的功能对比：\n\n| 特权                       | 会员用户   | 普通用户 |\n| :------------------------- | :--------- | :------- |\n| VIP 客服群，1 对 1 解答    | **支持**   | 不支持   |\n| 无限渠道数量               | 支持       | 支持     |\n| 文章免费图床               | 支持       | 支持     |\n| 文章扩散次数               | **无限制** | 10 次/月 |\n| 文章定时扩散               | **支持**   | 不支持   |\n| 文章群删                   | **支持**   | 不支持   |\n| 文章自定义图床             | **支持**   | 不支持   |\n| 文章数据统计分析           | **支持**   | 不支持   |\n| 文章不同渠道自定义底部信息 | **支持**   | 不支持   |\n\n当前支持的渠道：\n\n-   思否\n-   CSDN\n-   掘金\n-   简书\n-   知乎\n-   开源中国\n-   Spring4All\n-   今日头条\n-   慕课手记\n-   微博\n-   百家号\n\n支持的图床：\n\n-   默认：OW 的免费七牛云，宽高限制在 800 px * 800 px，超出限制将缩放\n\n-   七牛云\n-   阿里云\n\n![渠道管理](https://img-blog.csdnimg.cn/img_convert/166a1a14756f06a2d7f5ce454f619b18.png)\n\n![文章管理](https://img-blog.csdnimg.cn/img_convert/4899edb48d76b22bdad0cf5e17315bc5.png)\n\n![图床配置](https://img-blog.csdnimg.cn/img_convert/e9f134196a0b63cc749fe1925eb7ff15.png)\n\n### ArtiPub\n\n>   地址：https://github.com/crawlab-team/artipub\n\nArtiPub (Article Publisher 的简称，意为 \"文章发布者\") 是一款开源的一文多发平台，目前支持文章编辑、文章发布、数据统计的功能。此外，ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。\n\n目前支持如下平台：\n\n-    掘金\n-    SegmentFault\n-    CSDN\n-    简书\n-    知乎\n-    开源中国\n-    今日头条\n-    博客园\n-    百度百家号\n-    51CTO\n-    开发者头条\n-    微信公众号\n\n![登陆注册](https://img-blog.csdnimg.cn/img_convert/858f33946ecbb1446983154fc4cb3c6f.png)\n\n![平台管理](https://img-blog.csdnimg.cn/img_convert/a5d533cd3c854c6f1b73b952543d240f.png)\n\n![文章管理](https://img-blog.csdnimg.cn/img_convert/9e310e1b7ef6aa3eed5e75fcf6cef1a1.png)\n\n![文章编辑](https://img-blog.csdnimg.cn/img_convert/3a7830643aca031b5809fcd9324d2303.png)\n\n![文章发布](https://img-blog.csdnimg.cn/img_convert/6af374723b950d11ad06f966c4b44e54.png)\n\n### BlogHelper\n\n>   地址：https://github.com/onblog/BlogHelper\n\n这是一款没有界面只存在于系统托盘的小助手，而且完全免费。\n\n通过它，我们可以将我们本地写好的文章分发到国内技术主流平台。此外，软件还支持多个图床，无论你是使用免费的图床还是自己搭建的图床，相信该软件总有适合你的一个图床吧。\n\n1.  支持的平台\n    -   知乎\n    -   掘金\n    -   简书\n    -   思否\n    -   CSDN\n    -   博客园\n    -   开源中国\n2.  支持的图床\n    -   新浪\n    -   七牛云\n    -   又拍云\n    -   阿里云\n    -   腾讯云\n    -   SM.MS\n    -   GitHub\n    -   ImgUR\n\n![图床管理](https://img-blog.csdnimg.cn/img_convert/9f662f4455952462aca4894af58457d1.png)\n\n![平台管理](https://img-blog.csdnimg.cn/img_convert/a2e945b1b3ef1a3a9eccd3c7be36f7eb.png)\n\n## 总结\n\n工具虽多，但不要贪杯哦，哈哈哈。以上也算是介绍了 10 多款用于不同功能的软件了，他们可能都不是很完美，但也都有着自己各自的特点，我们可以结合自己的需要来进行选择他们其中的一款或多款软件搭配使用，不过这都取决于你自己的喜好了。\n\n好了，今天的文章就到此结束了。如果本文对你也有所帮助，那就点个赞吧！\n\n当然，如果你有更好的工具推荐，也欢迎在评论区留言交流 ~\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】技术写作中的那些神兵利器.md","raw":"---\ntitle: 【效率为王】技术写作中的那些神兵利器\nmathjax: true\ntoc: true\ntags:\n  - 工具\ncategories:\n  - 效率为王\nabbrlink: 53549ae6\ndate: 2021-05-04 11:08:57\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n之前参加了由掘金社区组织的创作者训练营第二期活动，有幸见到了比如月影、工业聚、张晋涛等许多这个行业的大佬，也认识了许多技术写作的博主，可谓是一场大型网友面基会，哈哈哈 🤣. 针对大佬们的演讲和各位博主的提问，发现大家对于多平台分发这一块很感兴趣，也被这个问题困扰了许久，所以今天就来讲讲我这个小菜鸟在平常创作和发布这一块中摸索使用的一些工具总结，希望能对大家有所帮助。下面就来看看文章的主要内容，我主要会从如下几个方面来进行展开：\n\n-   **编辑器**\n-   **思维导图**\n\n-   **图床**\n-   **多平台分发**\n\n如果你对其中的某一部分比较感兴趣，那就直接跳到对应目录吧，当然你也可以看看全文，看看我的方法和你使用的方法是否相同呢 😉。\n\n## 编辑器\n\n主要针对的是使用 Markdown 语法的编辑器，如果你对 Markdown 语法还不太熟悉，可以先看看我的另一篇文章：[十分钟入门 Markdown 写作](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492604&idx=1&sn=a8ef3fe0dc72ed18e841f00236dc01d5&chksm=e87b978adf0c1e9c0b7120aee8826f15e387c5a1581456c7bb227b201c9ad2810a91ca576b2a#rd)。\n\n### Typora\n\n>   地址：https://www.typora.io/\n\n我愿称之为最强 Markdown 编辑器没有之一，这是一款支持 macOS、Windows、Linux 三大平台的 Markdown 编辑器，而且完全免费。简单而强大，一旦你熟悉其中的快捷键之后，你会发现比其他编辑器快很多！（个人觉得，当然你也可以有不同的意见哈 😁）不过有一个缺点就是，当前一旦文档过大，Typora 使用起来就会十分卡顿，而相同的文档在其它编辑器则不会出现这种情况。\n\n此外，Typora 支持多种主题，还能支持我们自定义主题，对于我们颜控的小伙伴来讲，那就是杀招呀！对于大多数其它编辑器支持的导出功能，它怎么能少呢，Typora 支持导出如下格式的文件：\n\n-   PDF\n-   HTML（With/Without Styles）\n-   Word\n-   OPenOffice\n-   RTF\n-   Epub\n-   LaTex\n-   Media Wiki\n-   reStructureText\n-   Textile\n-   OPML\n-   图像\n\n![](https://img-blog.csdnimg.cn/img_convert/93f5e642ec2df9f4800192fb7b634121.png)\n\n### MarkText\n\n>   地址：https://marktext.app/\n\n也是一款简单优雅免费的开源 Markdown 编辑器，专注于速度和可用性，而且同样支持 macOS、Windows、Linux 三大平台。支持如下特性：\n\n-   实时预览（所见即所得）和简洁明了的界面，使您获得无干扰的写作体验。\n-   支持 CommonMark 规范和 GitHub Flavored Markdown 规范。\n-   Markdown扩展，例如数学表达式（KaTeX）、front matter 和 emoji。\n-   支持段落和内联样式快捷方式，以提高您的写作效率。\n-   导出 **HTML** 和 **PDF** 文件。\n-   各种主题：**Cadmium Light**、**Material Dark** 等等。\n-   各种编辑模式：**源代码模式**、**打字机模式**、**专注模式**。\n-   直接从剪贴板中粘贴图片。\n\n![](https://img-blog.csdnimg.cn/img_convert/43b55f25b35d160e46ac3c74cc046d41.png)\n\n### VS Code\n\n>   地址：https://code.visualstudio.com/\n\n是的，VS Code 不仅仅可以作为我们的代码编辑器，我们还能把它当成 Markdown 编辑器，搭配 Markdown 增强插件，左边编辑，右边实时预览，爽歪歪！\n\n推荐插件：\n\n-   Markdown All in One\n-   Markdown Preview GitHub Styling\n\n![](https://img-blog.csdnimg.cn/img_convert/05a79ed98bd13b3a7dca992a89bbc4f6.png)\n\n## 思维导图\n\n### Process On\n\n>   地址：https://www.processon.com/i/5eec25bf1e08532637344b9c\n\n免费的在线作图工具，支持实时协作，方便团队，支持多种图的制作：\n\n-   流程图\n-   思维导图\n-   原型图\n-   UML\n-   网络拓扑图\n-   组织结构图\n-   ……\n\n![](https://img-blog.csdnimg.cn/img_convert/5f7d91517e741db88ea31cb08ffd6906.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/dc4fdd7d65efdcef9ca7aff90a068965.png)\n\n### 幕布\n\n>   地址：https://mubu.com/\n\n大纲式笔记工具，根据我们的大纲生成思维导图。免费账号支持 300 条多文档结点数量，支持 4 种结构、4 种风格思维导图样式，还能导出 Word、PDF、图片、HTML 等格式，完全足够我们日常个人使用。\n\n![](https://img-blog.csdnimg.cn/img_convert/6496690a8cbde7ed3741ad873273c64b.png)\n\n### GitMind\n\n>   地址：https://gitmind.cn/\n\n免费在线思维导图软件，简化逻辑梳理，集思广益，释放创造力在线脑图、思维导图、流程图、工业设计、工程管理，一图涵千面。\n\n![](https://img-blog.csdnimg.cn/img_convert/2e110d0c638da659f2c41688a3aba490.png)\n\n我们不仅能自己编辑，还能邀请小伙伴进行团队协作。此外，支持多种模板，不仅支持在线编辑，还支持多种导出形式。\n\n![](https://img-blog.csdnimg.cn/img_convert/b8f96e90ed0b0295a2b27e80ea2bb083.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/7c481ca35d6ff0e1055c51bfe3068405.png)\n\n### markmap\n\n>   地址：https://markmap.js.org/\n\n上面的工具都是直接图像化工具，和我们的 Markdown 工具无关。而今天这个工具，将两者结合起来，利用 Markdown 来画思维导图。markmap 将 Markdown 语法的文本通过思维导图的方式进行可视化，我们即可以使用在线版，也可以使用它在 VS Code 中的插件版，十分方便，而且支持导出 SVG 和 HTML，可以说是十分方便了！\n\n![](https://img-blog.csdnimg.cn/img_convert/4c69fd55e7e1032d866093822ac75db0.png)\n\n## 图床\n\n### Github\n\n>   地址：http://github.com/\n\n是的，你没有看错，就是万能的 GitHub，我们不仅仅可以从这里找到开源的项目、软件、教程等，你还能把它当成你自己的免费图床。关于具体的搭建过程，可以参考以下我之前的一篇文章：[如何利用 GitHub 搭建自己的免费图床？](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492657&idx=1&sn=4420ebc879c2013ee564b832f6615d10&chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016#rd)\n\n![](https://img-blog.csdnimg.cn/img_convert/9df4c097a6f575d570c34e7d68130eeb.png)\n\n### Gitee\n\n>   地址：http://gitee.com/\n\n既然 GitHub 可以用来搭建图床，那我们的国内的 Gitee 也必须可以呀，而且相对 GitHub 来讲访问的速度更快，岂不是美哉。具体的搭建过程可以参考我之前的一篇文章：[Gitee + Typora，搭建自己的免费图床！](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247492731&idx=1&sn=3cef56ad4ce5ec462c6233381af2799c&chksm=e87b900ddf0c191bad9d126b0c7e1cc43e1b481f2ad6224f5ac5d3f4edee25fe6d4281f9edbb#rd)\n\n![](https://img-blog.csdnimg.cn/img_convert/90a698a4707f5d0a0b0c3a81e79df8b3.png)\n\n### SM.MS\n\n>   地址：https://sm.ms/\n\n提供免费图床，而且每个账户有 5 GB 的免费空间，方便我们自己管理，作为我们日常使用完全足够了。\n\n![](https://img-blog.csdnimg.cn/img_convert/9347fd7fa0b1edb839c22c80f3f9e1f9.png)\n\n### 路过图床\n\n>   地址：https://imgtu.com/\n\n路过图床，这是一款高速稳定的上传和外链服务的图床，支持全球 CDN 加速、支持外链、原图保持，而且最大单张支持 10 MB。至于它的稳定性，相信你也不用担心，它已经从 2011 运行至今 10 年的历程，截至到发文前托管了 16151781 张图片，还在犹豫什么，用起来就完事儿了！\n\n![](https://img-blog.csdnimg.cn/img_convert/b26f1bd57b635e0a1102f3e0b4016320.png)\n\n## 多平台分发\n\n### OpenWrite\n\n>   地址：https://openwrite.cn/\n\n主要提供群发功能、博客导流公众号等功能，此外还支持导出 Markdown 导微信公众号、多平台免费图床配置等，不过普通用户每月仅支持 10 次免费群发机会，其他功能则需要会员。\n\n普通用户和会员的功能对比：\n\n| 特权                       | 会员用户   | 普通用户 |\n| :------------------------- | :--------- | :------- |\n| VIP 客服群，1 对 1 解答    | **支持**   | 不支持   |\n| 无限渠道数量               | 支持       | 支持     |\n| 文章免费图床               | 支持       | 支持     |\n| 文章扩散次数               | **无限制** | 10 次/月 |\n| 文章定时扩散               | **支持**   | 不支持   |\n| 文章群删                   | **支持**   | 不支持   |\n| 文章自定义图床             | **支持**   | 不支持   |\n| 文章数据统计分析           | **支持**   | 不支持   |\n| 文章不同渠道自定义底部信息 | **支持**   | 不支持   |\n\n当前支持的渠道：\n\n-   思否\n-   CSDN\n-   掘金\n-   简书\n-   知乎\n-   开源中国\n-   Spring4All\n-   今日头条\n-   慕课手记\n-   微博\n-   百家号\n\n支持的图床：\n\n-   默认：OW 的免费七牛云，宽高限制在 800 px * 800 px，超出限制将缩放\n\n-   七牛云\n-   阿里云\n\n![渠道管理](https://img-blog.csdnimg.cn/img_convert/166a1a14756f06a2d7f5ce454f619b18.png)\n\n![文章管理](https://img-blog.csdnimg.cn/img_convert/4899edb48d76b22bdad0cf5e17315bc5.png)\n\n![图床配置](https://img-blog.csdnimg.cn/img_convert/e9f134196a0b63cc749fe1925eb7ff15.png)\n\n### ArtiPub\n\n>   地址：https://github.com/crawlab-team/artipub\n\nArtiPub (Article Publisher 的简称，意为 \"文章发布者\") 是一款开源的一文多发平台，目前支持文章编辑、文章发布、数据统计的功能。此外，ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。\n\n目前支持如下平台：\n\n-    掘金\n-    SegmentFault\n-    CSDN\n-    简书\n-    知乎\n-    开源中国\n-    今日头条\n-    博客园\n-    百度百家号\n-    51CTO\n-    开发者头条\n-    微信公众号\n\n![登陆注册](https://img-blog.csdnimg.cn/img_convert/858f33946ecbb1446983154fc4cb3c6f.png)\n\n![平台管理](https://img-blog.csdnimg.cn/img_convert/a5d533cd3c854c6f1b73b952543d240f.png)\n\n![文章管理](https://img-blog.csdnimg.cn/img_convert/9e310e1b7ef6aa3eed5e75fcf6cef1a1.png)\n\n![文章编辑](https://img-blog.csdnimg.cn/img_convert/3a7830643aca031b5809fcd9324d2303.png)\n\n![文章发布](https://img-blog.csdnimg.cn/img_convert/6af374723b950d11ad06f966c4b44e54.png)\n\n### BlogHelper\n\n>   地址：https://github.com/onblog/BlogHelper\n\n这是一款没有界面只存在于系统托盘的小助手，而且完全免费。\n\n通过它，我们可以将我们本地写好的文章分发到国内技术主流平台。此外，软件还支持多个图床，无论你是使用免费的图床还是自己搭建的图床，相信该软件总有适合你的一个图床吧。\n\n1.  支持的平台\n    -   知乎\n    -   掘金\n    -   简书\n    -   思否\n    -   CSDN\n    -   博客园\n    -   开源中国\n2.  支持的图床\n    -   新浪\n    -   七牛云\n    -   又拍云\n    -   阿里云\n    -   腾讯云\n    -   SM.MS\n    -   GitHub\n    -   ImgUR\n\n![图床管理](https://img-blog.csdnimg.cn/img_convert/9f662f4455952462aca4894af58457d1.png)\n\n![平台管理](https://img-blog.csdnimg.cn/img_convert/a2e945b1b3ef1a3a9eccd3c7be36f7eb.png)\n\n## 总结\n\n工具虽多，但不要贪杯哦，哈哈哈。以上也算是介绍了 10 多款用于不同功能的软件了，他们可能都不是很完美，但也都有着自己各自的特点，我们可以结合自己的需要来进行选择他们其中的一款或多款软件搭配使用，不过这都取决于你自己的喜好了。\n\n好了，今天的文章就到此结束了。如果本文对你也有所帮助，那就点个赞吧！\n\n当然，如果你有更好的工具推荐，也欢迎在评论区留言交流 ~\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】技术写作中的那些神兵利器","published":1,"updated":"2021-05-04T03:23:09.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw05001xbw348zxqf4cc","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前参加了由掘金社区组织的创作者训练营第二期活动，有幸见到了比如月影、工业聚、张晋涛等许多这个行业的大佬，也认识了许多技术写作的博主，可谓是一场大型网友面基会，哈哈哈 🤣. 针对大佬们的演讲和各位博主的提问，发现大家对于多平台分发这一块很感兴趣，也被这个问题困扰了许久，所以今天就来讲讲我这个小菜鸟在平常创作和发布这一块中摸索使用的一些工具总结，希望能对大家有所帮助。下面就来看看文章的主要内容，我主要会从如下几个方面来进行展开：</p>\n<ul>\n<li><strong>编辑器</strong></li>\n<li><p><strong>思维导图</strong></p>\n</li>\n<li><p><strong>图床</strong></p>\n</li>\n<li><strong>多平台分发</strong></li>\n</ul>\n<p>如果你对其中的某一部分比较感兴趣，那就直接跳到对应目录吧，当然你也可以看看全文，看看我的方法和你使用的方法是否相同呢 😉。</p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p>主要针对的是使用 Markdown 语法的编辑器，如果你对 Markdown 语法还不太熟悉，可以先看看我的另一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492604&amp;idx=1&amp;sn=a8ef3fe0dc72ed18e841f00236dc01d5&amp;chksm=e87b978adf0c1e9c0b7120aee8826f15e387c5a1581456c7bb227b201c9ad2810a91ca576b2a#rd\">十分钟入门 Markdown 写作</a>。</p>\n<h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><blockquote>\n<p>  地址：<a href=\"https://www.typora.io/\">https://www.typora.io/</a></p>\n</blockquote>\n<p>我愿称之为最强 Markdown 编辑器没有之一，这是一款支持 macOS、Windows、Linux 三大平台的 Markdown 编辑器，而且完全免费。简单而强大，一旦你熟悉其中的快捷键之后，你会发现比其他编辑器快很多！（个人觉得，当然你也可以有不同的意见哈 😁）不过有一个缺点就是，当前一旦文档过大，Typora 使用起来就会十分卡顿，而相同的文档在其它编辑器则不会出现这种情况。</p>\n<p>此外，Typora 支持多种主题，还能支持我们自定义主题，对于我们颜控的小伙伴来讲，那就是杀招呀！对于大多数其它编辑器支持的导出功能，它怎么能少呢，Typora 支持导出如下格式的文件：</p>\n<ul>\n<li>PDF</li>\n<li>HTML（With/Without Styles）</li>\n<li>Word</li>\n<li>OPenOffice</li>\n<li>RTF</li>\n<li>Epub</li>\n<li>LaTex</li>\n<li>Media Wiki</li>\n<li>reStructureText</li>\n<li>Textile</li>\n<li>OPML</li>\n<li>图像</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/93f5e642ec2df9f4800192fb7b634121.png\" alt=\"\"></p>\n<h3 id=\"MarkText\"><a href=\"#MarkText\" class=\"headerlink\" title=\"MarkText\"></a>MarkText</h3><blockquote>\n<p>  地址：<a href=\"https://marktext.app/\">https://marktext.app/</a></p>\n</blockquote>\n<p>也是一款简单优雅免费的开源 Markdown 编辑器，专注于速度和可用性，而且同样支持 macOS、Windows、Linux 三大平台。支持如下特性：</p>\n<ul>\n<li>实时预览（所见即所得）和简洁明了的界面，使您获得无干扰的写作体验。</li>\n<li>支持 CommonMark 规范和 GitHub Flavored Markdown 规范。</li>\n<li>Markdown扩展，例如数学表达式（KaTeX）、front matter 和 emoji。</li>\n<li>支持段落和内联样式快捷方式，以提高您的写作效率。</li>\n<li>导出 <strong>HTML</strong> 和 <strong>PDF</strong> 文件。</li>\n<li>各种主题：<strong>Cadmium Light</strong>、<strong>Material Dark</strong> 等等。</li>\n<li>各种编辑模式：<strong>源代码模式</strong>、<strong>打字机模式</strong>、<strong>专注模式</strong>。</li>\n<li>直接从剪贴板中粘贴图片。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/43b55f25b35d160e46ac3c74cc046d41.png\" alt=\"\"></p>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><blockquote>\n<p>  地址：<a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a></p>\n</blockquote>\n<p>是的，VS Code 不仅仅可以作为我们的代码编辑器，我们还能把它当成 Markdown 编辑器，搭配 Markdown 增强插件，左边编辑，右边实时预览，爽歪歪！</p>\n<p>推荐插件：</p>\n<ul>\n<li>Markdown All in One</li>\n<li>Markdown Preview GitHub Styling</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/05a79ed98bd13b3a7dca992a89bbc4f6.png\" alt=\"\"></p>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><h3 id=\"Process-On\"><a href=\"#Process-On\" class=\"headerlink\" title=\"Process On\"></a>Process On</h3><blockquote>\n<p>  地址：<a href=\"https://www.processon.com/i/5eec25bf1e08532637344b9c\">https://www.processon.com/i/5eec25bf1e08532637344b9c</a></p>\n</blockquote>\n<p>免费的在线作图工具，支持实时协作，方便团队，支持多种图的制作：</p>\n<ul>\n<li>流程图</li>\n<li>思维导图</li>\n<li>原型图</li>\n<li>UML</li>\n<li>网络拓扑图</li>\n<li>组织结构图</li>\n<li>……</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f7d91517e741db88ea31cb08ffd6906.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dc4fdd7d65efdcef9ca7aff90a068965.png\" alt=\"\"></p>\n<h3 id=\"幕布\"><a href=\"#幕布\" class=\"headerlink\" title=\"幕布\"></a>幕布</h3><blockquote>\n<p>  地址：<a href=\"https://mubu.com/\">https://mubu.com/</a></p>\n</blockquote>\n<p>大纲式笔记工具，根据我们的大纲生成思维导图。免费账号支持 300 条多文档结点数量，支持 4 种结构、4 种风格思维导图样式，还能导出 Word、PDF、图片、HTML 等格式，完全足够我们日常个人使用。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6496690a8cbde7ed3741ad873273c64b.png\" alt=\"\"></p>\n<h3 id=\"GitMind\"><a href=\"#GitMind\" class=\"headerlink\" title=\"GitMind\"></a>GitMind</h3><blockquote>\n<p>  地址：<a href=\"https://gitmind.cn/\">https://gitmind.cn/</a></p>\n</blockquote>\n<p>免费在线思维导图软件，简化逻辑梳理，集思广益，释放创造力在线脑图、思维导图、流程图、工业设计、工程管理，一图涵千面。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2e110d0c638da659f2c41688a3aba490.png\" alt=\"\"></p>\n<p>我们不仅能自己编辑，还能邀请小伙伴进行团队协作。此外，支持多种模板，不仅支持在线编辑，还支持多种导出形式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b8f96e90ed0b0295a2b27e80ea2bb083.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c481ca35d6ff0e1055c51bfe3068405.png\" alt=\"\"></p>\n<h3 id=\"markmap\"><a href=\"#markmap\" class=\"headerlink\" title=\"markmap\"></a>markmap</h3><blockquote>\n<p>  地址：<a href=\"https://markmap.js.org/\">https://markmap.js.org/</a></p>\n</blockquote>\n<p>上面的工具都是直接图像化工具，和我们的 Markdown 工具无关。而今天这个工具，将两者结合起来，利用 Markdown 来画思维导图。markmap 将 Markdown 语法的文本通过思维导图的方式进行可视化，我们即可以使用在线版，也可以使用它在 VS Code 中的插件版，十分方便，而且支持导出 SVG 和 HTML，可以说是十分方便了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c69fd55e7e1032d866093822ac75db0.png\" alt=\"\"></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><blockquote>\n<p>  地址：<a href=\"http://github.com/\">http://github.com/</a></p>\n</blockquote>\n<p>是的，你没有看错，就是万能的 GitHub，我们不仅仅可以从这里找到开源的项目、软件、教程等，你还能把它当成你自己的免费图床。关于具体的搭建过程，可以参考以下我之前的一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492657&amp;idx=1&amp;sn=4420ebc879c2013ee564b832f6615d10&amp;chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016#rd\">如何利用 GitHub 搭建自己的免费图床？</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9df4c097a6f575d570c34e7d68130eeb.png\" alt=\"\"></p>\n<h3 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h3><blockquote>\n<p>  地址：<a href=\"http://gitee.com/\">http://gitee.com/</a></p>\n</blockquote>\n<p>既然 GitHub 可以用来搭建图床，那我们的国内的 Gitee 也必须可以呀，而且相对 GitHub 来讲访问的速度更快，岂不是美哉。具体的搭建过程可以参考我之前的一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492731&amp;idx=1&amp;sn=3cef56ad4ce5ec462c6233381af2799c&amp;chksm=e87b900ddf0c191bad9d126b0c7e1cc43e1b481f2ad6224f5ac5d3f4edee25fe6d4281f9edbb#rd\">Gitee + Typora，搭建自己的免费图床！</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/90a698a4707f5d0a0b0c3a81e79df8b3.png\" alt=\"\"></p>\n<h3 id=\"SM-MS\"><a href=\"#SM-MS\" class=\"headerlink\" title=\"SM.MS\"></a>SM.MS</h3><blockquote>\n<p>  地址：<a href=\"https://sm.ms/\">https://sm.ms/</a></p>\n</blockquote>\n<p>提供免费图床，而且每个账户有 5 GB 的免费空间，方便我们自己管理，作为我们日常使用完全足够了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9347fd7fa0b1edb839c22c80f3f9e1f9.png\" alt=\"\"></p>\n<h3 id=\"路过图床\"><a href=\"#路过图床\" class=\"headerlink\" title=\"路过图床\"></a>路过图床</h3><blockquote>\n<p>  地址：<a href=\"https://imgtu.com/\">https://imgtu.com/</a></p>\n</blockquote>\n<p>路过图床，这是一款高速稳定的上传和外链服务的图床，支持全球 CDN 加速、支持外链、原图保持，而且最大单张支持 10 MB。至于它的稳定性，相信你也不用担心，它已经从 2011 运行至今 10 年的历程，截至到发文前托管了 16151781 张图片，还在犹豫什么，用起来就完事儿了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b26f1bd57b635e0a1102f3e0b4016320.png\" alt=\"\"></p>\n<h2 id=\"多平台分发\"><a href=\"#多平台分发\" class=\"headerlink\" title=\"多平台分发\"></a>多平台分发</h2><h3 id=\"OpenWrite\"><a href=\"#OpenWrite\" class=\"headerlink\" title=\"OpenWrite\"></a>OpenWrite</h3><blockquote>\n<p>  地址：<a href=\"https://openwrite.cn/\">https://openwrite.cn/</a></p>\n</blockquote>\n<p>主要提供群发功能、博客导流公众号等功能，此外还支持导出 Markdown 导微信公众号、多平台免费图床配置等，不过普通用户每月仅支持 10 次免费群发机会，其他功能则需要会员。</p>\n<p>普通用户和会员的功能对比：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特权</th>\n<th style=\"text-align:left\">会员用户</th>\n<th style=\"text-align:left\">普通用户</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">VIP 客服群，1 对 1 解答</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无限渠道数量</td>\n<td style=\"text-align:left\">支持</td>\n<td style=\"text-align:left\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章免费图床</td>\n<td style=\"text-align:left\">支持</td>\n<td style=\"text-align:left\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章扩散次数</td>\n<td style=\"text-align:left\"><strong>无限制</strong></td>\n<td style=\"text-align:left\">10 次/月</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章定时扩散</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章群删</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章自定义图床</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章数据统计分析</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章不同渠道自定义底部信息</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当前支持的渠道：</p>\n<ul>\n<li>思否</li>\n<li>CSDN</li>\n<li>掘金</li>\n<li>简书</li>\n<li>知乎</li>\n<li>开源中国</li>\n<li>Spring4All</li>\n<li>今日头条</li>\n<li>慕课手记</li>\n<li>微博</li>\n<li>百家号</li>\n</ul>\n<p>支持的图床：</p>\n<ul>\n<li><p>默认：OW 的免费七牛云，宽高限制在 800 px * 800 px，超出限制将缩放</p>\n</li>\n<li><p>七牛云</p>\n</li>\n<li>阿里云</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/166a1a14756f06a2d7f5ce454f619b18.png\" alt=\"渠道管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4899edb48d76b22bdad0cf5e17315bc5.png\" alt=\"文章管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e9f134196a0b63cc749fe1925eb7ff15.png\" alt=\"图床配置\"></p>\n<h3 id=\"ArtiPub\"><a href=\"#ArtiPub\" class=\"headerlink\" title=\"ArtiPub\"></a>ArtiPub</h3><blockquote>\n<p>  地址：<a href=\"https://github.com/crawlab-team/artipub\">https://github.com/crawlab-team/artipub</a></p>\n</blockquote>\n<p>ArtiPub (Article Publisher 的简称，意为 “文章发布者”) 是一款开源的一文多发平台，目前支持文章编辑、文章发布、数据统计的功能。此外，ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。</p>\n<p>目前支持如下平台：</p>\n<ul>\n<li>掘金</li>\n<li>SegmentFault</li>\n<li>CSDN</li>\n<li>简书</li>\n<li>知乎</li>\n<li>开源中国</li>\n<li>今日头条</li>\n<li>博客园</li>\n<li>百度百家号</li>\n<li>51CTO</li>\n<li>开发者头条</li>\n<li>微信公众号</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/858f33946ecbb1446983154fc4cb3c6f.png\" alt=\"登陆注册\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a5d533cd3c854c6f1b73b952543d240f.png\" alt=\"平台管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9e310e1b7ef6aa3eed5e75fcf6cef1a1.png\" alt=\"文章管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3a7830643aca031b5809fcd9324d2303.png\" alt=\"文章编辑\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6af374723b950d11ad06f966c4b44e54.png\" alt=\"文章发布\"></p>\n<h3 id=\"BlogHelper\"><a href=\"#BlogHelper\" class=\"headerlink\" title=\"BlogHelper\"></a>BlogHelper</h3><blockquote>\n<p>  地址：<a href=\"https://github.com/onblog/BlogHelper\">https://github.com/onblog/BlogHelper</a></p>\n</blockquote>\n<p>这是一款没有界面只存在于系统托盘的小助手，而且完全免费。</p>\n<p>通过它，我们可以将我们本地写好的文章分发到国内技术主流平台。此外，软件还支持多个图床，无论你是使用免费的图床还是自己搭建的图床，相信该软件总有适合你的一个图床吧。</p>\n<ol>\n<li>支持的平台<ul>\n<li>知乎</li>\n<li>掘金</li>\n<li>简书</li>\n<li>思否</li>\n<li>CSDN</li>\n<li>博客园</li>\n<li>开源中国</li>\n</ul>\n</li>\n<li>支持的图床<ul>\n<li>新浪</li>\n<li>七牛云</li>\n<li>又拍云</li>\n<li>阿里云</li>\n<li>腾讯云</li>\n<li>SM.MS</li>\n<li>GitHub</li>\n<li>ImgUR</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9f662f4455952462aca4894af58457d1.png\" alt=\"图床管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2e945b1b3ef1a3a9eccd3c7be36f7eb.png\" alt=\"平台管理\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>工具虽多，但不要贪杯哦，哈哈哈。以上也算是介绍了 10 多款用于不同功能的软件了，他们可能都不是很完美，但也都有着自己各自的特点，我们可以结合自己的需要来进行选择他们其中的一款或多款软件搭配使用，不过这都取决于你自己的喜好了。</p>\n<p>好了，今天的文章就到此结束了。如果本文对你也有所帮助，那就点个赞吧！</p>\n<p>当然，如果你有更好的工具推荐，也欢迎在评论区留言交流 ~</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前参加了由掘金社区组织的创作者训练营第二期活动，有幸见到了比如月影、工业聚、张晋涛等许多这个行业的大佬，也认识了许多技术写作的博主，可谓是一场大型网友面基会，哈哈哈 🤣. 针对大佬们的演讲和各位博主的提问，发现大家对于多平台分发这一块很感兴趣，也被这个问题困扰了许久，所以今天就来讲讲我这个小菜鸟在平常创作和发布这一块中摸索使用的一些工具总结，希望能对大家有所帮助。下面就来看看文章的主要内容，我主要会从如下几个方面来进行展开：</p>\n<ul>\n<li><strong>编辑器</strong></li>\n<li><p><strong>思维导图</strong></p>\n</li>\n<li><p><strong>图床</strong></p>\n</li>\n<li><strong>多平台分发</strong></li>\n</ul>\n<p>如果你对其中的某一部分比较感兴趣，那就直接跳到对应目录吧，当然你也可以看看全文，看看我的方法和你使用的方法是否相同呢 😉。</p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p>主要针对的是使用 Markdown 语法的编辑器，如果你对 Markdown 语法还不太熟悉，可以先看看我的另一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492604&amp;idx=1&amp;sn=a8ef3fe0dc72ed18e841f00236dc01d5&amp;chksm=e87b978adf0c1e9c0b7120aee8826f15e387c5a1581456c7bb227b201c9ad2810a91ca576b2a#rd\">十分钟入门 Markdown 写作</a>。</p>\n<h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><blockquote>\n<p>  地址：<a href=\"https://www.typora.io/\">https://www.typora.io/</a></p>\n</blockquote>\n<p>我愿称之为最强 Markdown 编辑器没有之一，这是一款支持 macOS、Windows、Linux 三大平台的 Markdown 编辑器，而且完全免费。简单而强大，一旦你熟悉其中的快捷键之后，你会发现比其他编辑器快很多！（个人觉得，当然你也可以有不同的意见哈 😁）不过有一个缺点就是，当前一旦文档过大，Typora 使用起来就会十分卡顿，而相同的文档在其它编辑器则不会出现这种情况。</p>\n<p>此外，Typora 支持多种主题，还能支持我们自定义主题，对于我们颜控的小伙伴来讲，那就是杀招呀！对于大多数其它编辑器支持的导出功能，它怎么能少呢，Typora 支持导出如下格式的文件：</p>\n<ul>\n<li>PDF</li>\n<li>HTML（With/Without Styles）</li>\n<li>Word</li>\n<li>OPenOffice</li>\n<li>RTF</li>\n<li>Epub</li>\n<li>LaTex</li>\n<li>Media Wiki</li>\n<li>reStructureText</li>\n<li>Textile</li>\n<li>OPML</li>\n<li>图像</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/93f5e642ec2df9f4800192fb7b634121.png\" alt=\"\"></p>\n<h3 id=\"MarkText\"><a href=\"#MarkText\" class=\"headerlink\" title=\"MarkText\"></a>MarkText</h3><blockquote>\n<p>  地址：<a href=\"https://marktext.app/\">https://marktext.app/</a></p>\n</blockquote>\n<p>也是一款简单优雅免费的开源 Markdown 编辑器，专注于速度和可用性，而且同样支持 macOS、Windows、Linux 三大平台。支持如下特性：</p>\n<ul>\n<li>实时预览（所见即所得）和简洁明了的界面，使您获得无干扰的写作体验。</li>\n<li>支持 CommonMark 规范和 GitHub Flavored Markdown 规范。</li>\n<li>Markdown扩展，例如数学表达式（KaTeX）、front matter 和 emoji。</li>\n<li>支持段落和内联样式快捷方式，以提高您的写作效率。</li>\n<li>导出 <strong>HTML</strong> 和 <strong>PDF</strong> 文件。</li>\n<li>各种主题：<strong>Cadmium Light</strong>、<strong>Material Dark</strong> 等等。</li>\n<li>各种编辑模式：<strong>源代码模式</strong>、<strong>打字机模式</strong>、<strong>专注模式</strong>。</li>\n<li>直接从剪贴板中粘贴图片。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/43b55f25b35d160e46ac3c74cc046d41.png\" alt=\"\"></p>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><blockquote>\n<p>  地址：<a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a></p>\n</blockquote>\n<p>是的，VS Code 不仅仅可以作为我们的代码编辑器，我们还能把它当成 Markdown 编辑器，搭配 Markdown 增强插件，左边编辑，右边实时预览，爽歪歪！</p>\n<p>推荐插件：</p>\n<ul>\n<li>Markdown All in One</li>\n<li>Markdown Preview GitHub Styling</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/05a79ed98bd13b3a7dca992a89bbc4f6.png\" alt=\"\"></p>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><h3 id=\"Process-On\"><a href=\"#Process-On\" class=\"headerlink\" title=\"Process On\"></a>Process On</h3><blockquote>\n<p>  地址：<a href=\"https://www.processon.com/i/5eec25bf1e08532637344b9c\">https://www.processon.com/i/5eec25bf1e08532637344b9c</a></p>\n</blockquote>\n<p>免费的在线作图工具，支持实时协作，方便团队，支持多种图的制作：</p>\n<ul>\n<li>流程图</li>\n<li>思维导图</li>\n<li>原型图</li>\n<li>UML</li>\n<li>网络拓扑图</li>\n<li>组织结构图</li>\n<li>……</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f7d91517e741db88ea31cb08ffd6906.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dc4fdd7d65efdcef9ca7aff90a068965.png\" alt=\"\"></p>\n<h3 id=\"幕布\"><a href=\"#幕布\" class=\"headerlink\" title=\"幕布\"></a>幕布</h3><blockquote>\n<p>  地址：<a href=\"https://mubu.com/\">https://mubu.com/</a></p>\n</blockquote>\n<p>大纲式笔记工具，根据我们的大纲生成思维导图。免费账号支持 300 条多文档结点数量，支持 4 种结构、4 种风格思维导图样式，还能导出 Word、PDF、图片、HTML 等格式，完全足够我们日常个人使用。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6496690a8cbde7ed3741ad873273c64b.png\" alt=\"\"></p>\n<h3 id=\"GitMind\"><a href=\"#GitMind\" class=\"headerlink\" title=\"GitMind\"></a>GitMind</h3><blockquote>\n<p>  地址：<a href=\"https://gitmind.cn/\">https://gitmind.cn/</a></p>\n</blockquote>\n<p>免费在线思维导图软件，简化逻辑梳理，集思广益，释放创造力在线脑图、思维导图、流程图、工业设计、工程管理，一图涵千面。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2e110d0c638da659f2c41688a3aba490.png\" alt=\"\"></p>\n<p>我们不仅能自己编辑，还能邀请小伙伴进行团队协作。此外，支持多种模板，不仅支持在线编辑，还支持多种导出形式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b8f96e90ed0b0295a2b27e80ea2bb083.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7c481ca35d6ff0e1055c51bfe3068405.png\" alt=\"\"></p>\n<h3 id=\"markmap\"><a href=\"#markmap\" class=\"headerlink\" title=\"markmap\"></a>markmap</h3><blockquote>\n<p>  地址：<a href=\"https://markmap.js.org/\">https://markmap.js.org/</a></p>\n</blockquote>\n<p>上面的工具都是直接图像化工具，和我们的 Markdown 工具无关。而今天这个工具，将两者结合起来，利用 Markdown 来画思维导图。markmap 将 Markdown 语法的文本通过思维导图的方式进行可视化，我们即可以使用在线版，也可以使用它在 VS Code 中的插件版，十分方便，而且支持导出 SVG 和 HTML，可以说是十分方便了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c69fd55e7e1032d866093822ac75db0.png\" alt=\"\"></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><blockquote>\n<p>  地址：<a href=\"http://github.com/\">http://github.com/</a></p>\n</blockquote>\n<p>是的，你没有看错，就是万能的 GitHub，我们不仅仅可以从这里找到开源的项目、软件、教程等，你还能把它当成你自己的免费图床。关于具体的搭建过程，可以参考以下我之前的一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492657&amp;idx=1&amp;sn=4420ebc879c2013ee564b832f6615d10&amp;chksm=e87b9047df0c195109f063d5118bbbd01d72469857965360a7cca5951871a7f1fcb470328016#rd\">如何利用 GitHub 搭建自己的免费图床？</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9df4c097a6f575d570c34e7d68130eeb.png\" alt=\"\"></p>\n<h3 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h3><blockquote>\n<p>  地址：<a href=\"http://gitee.com/\">http://gitee.com/</a></p>\n</blockquote>\n<p>既然 GitHub 可以用来搭建图床，那我们的国内的 Gitee 也必须可以呀，而且相对 GitHub 来讲访问的速度更快，岂不是美哉。具体的搭建过程可以参考我之前的一篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247492731&amp;idx=1&amp;sn=3cef56ad4ce5ec462c6233381af2799c&amp;chksm=e87b900ddf0c191bad9d126b0c7e1cc43e1b481f2ad6224f5ac5d3f4edee25fe6d4281f9edbb#rd\">Gitee + Typora，搭建自己的免费图床！</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/90a698a4707f5d0a0b0c3a81e79df8b3.png\" alt=\"\"></p>\n<h3 id=\"SM-MS\"><a href=\"#SM-MS\" class=\"headerlink\" title=\"SM.MS\"></a>SM.MS</h3><blockquote>\n<p>  地址：<a href=\"https://sm.ms/\">https://sm.ms/</a></p>\n</blockquote>\n<p>提供免费图床，而且每个账户有 5 GB 的免费空间，方便我们自己管理，作为我们日常使用完全足够了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9347fd7fa0b1edb839c22c80f3f9e1f9.png\" alt=\"\"></p>\n<h3 id=\"路过图床\"><a href=\"#路过图床\" class=\"headerlink\" title=\"路过图床\"></a>路过图床</h3><blockquote>\n<p>  地址：<a href=\"https://imgtu.com/\">https://imgtu.com/</a></p>\n</blockquote>\n<p>路过图床，这是一款高速稳定的上传和外链服务的图床，支持全球 CDN 加速、支持外链、原图保持，而且最大单张支持 10 MB。至于它的稳定性，相信你也不用担心，它已经从 2011 运行至今 10 年的历程，截至到发文前托管了 16151781 张图片，还在犹豫什么，用起来就完事儿了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b26f1bd57b635e0a1102f3e0b4016320.png\" alt=\"\"></p>\n<h2 id=\"多平台分发\"><a href=\"#多平台分发\" class=\"headerlink\" title=\"多平台分发\"></a>多平台分发</h2><h3 id=\"OpenWrite\"><a href=\"#OpenWrite\" class=\"headerlink\" title=\"OpenWrite\"></a>OpenWrite</h3><blockquote>\n<p>  地址：<a href=\"https://openwrite.cn/\">https://openwrite.cn/</a></p>\n</blockquote>\n<p>主要提供群发功能、博客导流公众号等功能，此外还支持导出 Markdown 导微信公众号、多平台免费图床配置等，不过普通用户每月仅支持 10 次免费群发机会，其他功能则需要会员。</p>\n<p>普通用户和会员的功能对比：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特权</th>\n<th style=\"text-align:left\">会员用户</th>\n<th style=\"text-align:left\">普通用户</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">VIP 客服群，1 对 1 解答</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无限渠道数量</td>\n<td style=\"text-align:left\">支持</td>\n<td style=\"text-align:left\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章免费图床</td>\n<td style=\"text-align:left\">支持</td>\n<td style=\"text-align:left\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章扩散次数</td>\n<td style=\"text-align:left\"><strong>无限制</strong></td>\n<td style=\"text-align:left\">10 次/月</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章定时扩散</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章群删</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章自定义图床</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章数据统计分析</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章不同渠道自定义底部信息</td>\n<td style=\"text-align:left\"><strong>支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当前支持的渠道：</p>\n<ul>\n<li>思否</li>\n<li>CSDN</li>\n<li>掘金</li>\n<li>简书</li>\n<li>知乎</li>\n<li>开源中国</li>\n<li>Spring4All</li>\n<li>今日头条</li>\n<li>慕课手记</li>\n<li>微博</li>\n<li>百家号</li>\n</ul>\n<p>支持的图床：</p>\n<ul>\n<li><p>默认：OW 的免费七牛云，宽高限制在 800 px * 800 px，超出限制将缩放</p>\n</li>\n<li><p>七牛云</p>\n</li>\n<li>阿里云</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/166a1a14756f06a2d7f5ce454f619b18.png\" alt=\"渠道管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4899edb48d76b22bdad0cf5e17315bc5.png\" alt=\"文章管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e9f134196a0b63cc749fe1925eb7ff15.png\" alt=\"图床配置\"></p>\n<h3 id=\"ArtiPub\"><a href=\"#ArtiPub\" class=\"headerlink\" title=\"ArtiPub\"></a>ArtiPub</h3><blockquote>\n<p>  地址：<a href=\"https://github.com/crawlab-team/artipub\">https://github.com/crawlab-team/artipub</a></p>\n</blockquote>\n<p>ArtiPub (Article Publisher 的简称，意为 “文章发布者”) 是一款开源的一文多发平台，目前支持文章编辑、文章发布、数据统计的功能。此外，ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。</p>\n<p>目前支持如下平台：</p>\n<ul>\n<li>掘金</li>\n<li>SegmentFault</li>\n<li>CSDN</li>\n<li>简书</li>\n<li>知乎</li>\n<li>开源中国</li>\n<li>今日头条</li>\n<li>博客园</li>\n<li>百度百家号</li>\n<li>51CTO</li>\n<li>开发者头条</li>\n<li>微信公众号</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/858f33946ecbb1446983154fc4cb3c6f.png\" alt=\"登陆注册\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a5d533cd3c854c6f1b73b952543d240f.png\" alt=\"平台管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9e310e1b7ef6aa3eed5e75fcf6cef1a1.png\" alt=\"文章管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3a7830643aca031b5809fcd9324d2303.png\" alt=\"文章编辑\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6af374723b950d11ad06f966c4b44e54.png\" alt=\"文章发布\"></p>\n<h3 id=\"BlogHelper\"><a href=\"#BlogHelper\" class=\"headerlink\" title=\"BlogHelper\"></a>BlogHelper</h3><blockquote>\n<p>  地址：<a href=\"https://github.com/onblog/BlogHelper\">https://github.com/onblog/BlogHelper</a></p>\n</blockquote>\n<p>这是一款没有界面只存在于系统托盘的小助手，而且完全免费。</p>\n<p>通过它，我们可以将我们本地写好的文章分发到国内技术主流平台。此外，软件还支持多个图床，无论你是使用免费的图床还是自己搭建的图床，相信该软件总有适合你的一个图床吧。</p>\n<ol>\n<li>支持的平台<ul>\n<li>知乎</li>\n<li>掘金</li>\n<li>简书</li>\n<li>思否</li>\n<li>CSDN</li>\n<li>博客园</li>\n<li>开源中国</li>\n</ul>\n</li>\n<li>支持的图床<ul>\n<li>新浪</li>\n<li>七牛云</li>\n<li>又拍云</li>\n<li>阿里云</li>\n<li>腾讯云</li>\n<li>SM.MS</li>\n<li>GitHub</li>\n<li>ImgUR</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9f662f4455952462aca4894af58457d1.png\" alt=\"图床管理\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a2e945b1b3ef1a3a9eccd3c7be36f7eb.png\" alt=\"平台管理\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>工具虽多，但不要贪杯哦，哈哈哈。以上也算是介绍了 10 多款用于不同功能的软件了，他们可能都不是很完美，但也都有着自己各自的特点，我们可以结合自己的需要来进行选择他们其中的一款或多款软件搭配使用，不过这都取决于你自己的喜好了。</p>\n<p>好了，今天的文章就到此结束了。如果本文对你也有所帮助，那就点个赞吧！</p>\n<p>当然，如果你有更好的工具推荐，也欢迎在评论区留言交流 ~</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】论如何优雅的使用 Windows 10！","mathjax":true,"toc":true,"abbrlink":"8a341b7b","date":"2021-05-04T02:13:05.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n都 1202 年了，Windows 10 都已经发布 5 年多了，我个人也是从 Windows 10 一发布就从 Windows 7 换到了 Windows 10。就个人体验而言，我觉得 Windows 10 比 Windows 7 好用多了，许多方面都进行了改进。当然了，这只是个人感受，如果您有不同的想法，也不用急着和我争辩，毕竟萝卜白菜，各有所爱嘛，那接下来就说说如何优雅的使用 Windows 10。这些只是个人的使用经验，总结成本文章，供大家参考参考。\n\n本文基于 Windows 10 专业版（20H2）进行配置及截图，理论上讲适用于 Windows 10 所有版本，略有出入的地方还请多多包涵，可以尝试搜索网上的解决方案。\n\n![](https://img-blog.csdnimg.cn/img_convert/de70692c44a5d726bb244b47a904a0c4.png)\n\n本文主要从以下几个方面进行讲解；\n\n1. 系统设置\n2. 软件推荐\n3. 日常使用小技巧\n\n## 系统设置\n\n### 资源管理器设置\n\n-   在**查看**选项中，将**文件扩展名**勾选，并打开**选项**设置；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTM4YWI0ODk1NzI1Y2I3ODYucG5n?x-oss-process=image/format,png) \n\n* 在常规选项下，将“**打开文件资源管理器时打开**”后的下拉框设置为此电脑，然后在“**隐私**”将关于快速访问相关选项去掉勾选，最后点击“**确认**”；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTNlN2U1ZTFjZDZjM2EyNDkucG5n?x-oss-process=image/format,png) \n\n### 修改默认存储位置\n\n打开设置，选中**系统**设置下的**存储**子栏目，然后**更改新内容保存的位置**，将**默认的C盘**改为**你想要存储的盘**，我的设置中**以D盘为例**，具体看个人喜好，设置步骤如下；\n\n![系统设置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTgzMThiNjQ0MGE4YTIzOGEucG5n?x-oss-process=image/format,png) \n\n![存储设置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJmMmE0NzFiMGUzZDlmMmIucG5n?x-oss-process=image/format,png) \n\n![更改新内容保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMTgyM2I0YjY5NTU4ZTgucG5n?x-oss-process=image/format,png) \n\n![新内容原保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY1NDYxNTA5YTI2Y2JmODgucG5n?x-oss-process=image/format,png) \n\n![新内容新保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTRiMDA0NDExNDFjYjI1ZmQucG5n?x-oss-process=image/format,png) \n\n###  修改常用文件夹的默认路径\n\n对于大多人而言，桌面内容一般都是保存在 C 盘下面。这符合大部分人的使用习惯，但是对于我就不同了，我可是个小机灵鬼，被系统搞崩重装系统搞怕了，所以我一般会把桌面等内容保存在其他非系统盘位置。那想要修改如下**桌面**、**文档**、**下载**等的默认路径（默认为C盘），应该如何操作呢，以下以**桌面**为例，其他文件夹的操作都一样！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTEyNTIwMWJhYTUyZjA3N2IucG5n?x-oss-process=image/format,png) \n\n1. 选中桌面，鼠标右键，选择属性；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZiZjE1ZDdiMTY0NzIyOWIucG5n?x-oss-process=image/format,png) \n\n2. 选中**位置**，然后修改下边方框中**你的自定义路径**；\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTlhYmViNDBmMWEyYzA4ZWIucG5n?x-oss-process=image/format,png) \n\n3. 修改成你的自定义路径后，点击**确定**即可；\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQxZGRjNzVhZDA5NjNkMGIucG5n?x-oss-process=image/format,png) \n\n## 软件安装篇\n\n首先说明，不是给下边软件打广告呀，只是我自己体验下来，觉得适合自己的，当然你也可以有自己的选择，全凭个人喜好嘛，哈哈。\n\n### 输入法\n\n* **[手心输入法](http://www.xinshuru.com/index.html?p=win)**：360 旗下产品，无广告，告别骚扰。\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdkNjU5ODZkZGVlZWM3N2UucG5n?x-oss-process=image/format,png) \n\n* **[QQ输入法](http://qq.pinyin.cn/)**：鹅厂出品，斗图十分方便呀！\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkZGM1NTA1MzY3ZDY3NGQucG5n?x-oss-process=image/format,png) \n\n### 压缩软件\n\n* **[Bandizip](http://www.bandisoft.com/)**：一家韩国公司出品的解压缩软件，速度与颜值并存，之前的版本都没有广告，现在的新版本中加入了广告，不过也不影响使用。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTBmOGUyNzM4MDA3NzExNzIucG5n?x-oss-process=image/format,png) \n\n* **[7-zip](https://www.7-zip.org/)**：功能强大，不过颜值略低，颜值党就不推荐了，😄；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWE4MTFkNjQ0ODVkN2RkYTQucG5n?x-oss-process=image/format,png)\n\n-   **[360 压缩](https://yasuo.360.cn/)**：360 又来了，不过完全放心，这不像xxx安全中心那么额，咋说呢，就很良心！\n\n![](https://img-blog.csdnimg.cn/img_convert/b6b86d84a028941a0195f1f4818ce122.png)\n\n### 通讯浏览\n\n* **[微信](https://weixin.qq.com/)**  ：这就不用说了，大家都或多或少要用到。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI4NjY1NmM0N2ZmYWFjMTYucG5n?x-oss-process=image/format,png) \n\n* **[Tim](https://tim.qq.com/)**  ：QQ 办公版，告别花里胡哨的东西，专注于办公。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTg4MjRlMmM5YTg5MTA5MTEucG5n?x-oss-process=image/format,png) \n\n* **[Chrome](https://www.google.cn/intl/zh-CN/chrome/)**：谷歌旗下浏览器，也是目前世界上份额最大的。你可能说用不了 Google，但通过一番设置调教之后，它仍会是最强大的浏览器。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmZmJkYzMyZTAxYzM5Y2EucG5n?x-oss-process=image/format,png) \n\n- [新版 Edge](https://www.microsoft.com/en-us/edge)：最终巨硬还是屈服了，换用 Chromium 内核的 Edge 能否与 Chrome 一战呢？我觉得有戏！\n\n![](https://img-blog.csdnimg.cn/img_convert/756d400e6179391ba950d8114ee10145.png)\n\n### 文字编辑\n\n* **[Typora](https://www.typora.io/)**：跨平台 Markdown 编辑器，个人觉得比许多收费的都好用。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTViNzNiYWE4MjZmMjRjNTkucG5n?x-oss-process=image/format,png) \n\n* **[Mark Text](https://marktext.app/)**：开源跨平台 Markdown 编辑器，最大的特色就是支持斗图！！！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdlNWQzZTI4OGY0NTJhOWIucG5n?x-oss-process=image/format,png) \n\n* **[PicGo](https://molunerfinn.com/PicGo/)**：搭配前两者使用的图片上传工具，通过搭建自己的图床，实现对图片的管理。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZmOGExNDFiOTdkMmU4YzQucG5n?x-oss-process=image/format,png) \n\n### 代码编辑器\n\n* **[VS Code](https://code.visualstudio.com/)**：巨硬出品，实现弯道超车，成为目前大多程序员的第一选择。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTMyNDhjN2ExYjdjZGUxMWMucG5n?x-oss-process=image/format,png)\n\n* **[Atom](https://atom.io/)**：Github 出品，不过现在 Github 已经被巨硬收购，所以也能叫巨硬出品了，哈哈。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFiNzdjNDAzMzU4ODNlMDUucG5n?x-oss-process=image/format,png) \n\n* **[Sublime Text](https://www.sublimetext.com/)**：颜值较高的一款编辑器。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM1MWY5ZWFhMzRjMTJhNDkucG5n?x-oss-process=image/format,png) \n\n* **[Notepad++](https://notepad-plus-plus.org/downloads/)**：湾湾公司的一款产品，自己作死，涉足政治立场，现在有点凉。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTExYzlkOWExNWI1OTk5NGIucG5n?x-oss-process=image/format,png) \n\n### 软件卸载\n\n* **[IObit](https://www.iobit.com/en/index.php?s)**：个人比较推荐的一款软件卸载工具，自动去除依赖，还能实时监控软件。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWMyZTc5MjBhZjFiYzBhZmYucG5n?x-oss-process=image/format,png) \n\n### 下载工具\n\n* **[Motrix](https://motrix.app/zh-CN/)**：开源下载工具，颜值与实用共存，去你的某雷。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJkYmIzOTc2ZjZiOTIxNTIucG5n?x-oss-process=image/format,png) \n\n* **[IDM](https://www.internetdownloadmanager.com/)**：多线程下载工具，搭配 Chrome，简直不要太爽！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY2MTI2NzVmYzY1Yzg1YTEucG5n?x-oss-process=image/format,png) \n\n* **[Xdown](https://xdown.org/)**：相当于 IDM 的一个免费版本吧，搭配插件，可以下载百度云分享资源哦！\n    ![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM2YjFkNWQ0Mzk4Y2Y0MmEucG5n?x-oss-process=image/format,png)\n\n## 日常使用小技巧\n\n### 常用系统操作快捷键\n\n| 快捷键                 | 说明                            |\n| ---------------------- | ------------------------------- |\n| **Alt + Tab**          | 应用切换                        |\n| **Win + Tab**          | 桌面切换                        |\n| **CapsLock**           | 切换大小写                      |\n| **Ctrl + Shift**       | 输入法切换                      |\n| **Ctrl + Shift + Esc** | 任务管理器                      |\n| **Win + Space**        | 输入法切换                      |\n| **Win + 数字键**       | 切换任务栏中的对应应用          |\n| **Win + 上/下/左/右**  | 当前窗口最大化/最小化/居左/居右 |\n| **Win + R**            | 打开运行                        |\n| **Win + E**            | 打开资源管理器                  |\n| **Win + D**            | 显示桌面                        |\n| **Win + M**            | 最小化所有窗口                  |\n| **Win + G**            | 游戏录制                        |\n| **Win + A**            | 打开通知                        |\n| **Win + I**            | 打开 Windows 设置               |\n| **Win + X**            | 显示系统选项                    |\n| **Win + V**            | Windows 10 自带剪切板           |\n| **Win + P**            | 投影设置                        |\n| **Win + L**            | 锁屏                            |\n| **Win + Q/S**          | 快速打开 Cortans 搜索框         |\n| **Win + W**            | 白板                            |\n| **Win + .**            | 打开 Emoji 面板                 |\n\n### 文件文档处理快捷键\n\n对我们而言，用电脑平时接触最多的就是文件文档处理工作，牢记如下这些快捷方式，能大大提高你的工作效率，早点下班回家不香么？\n\n| 快捷键               | 说明                 |\n| -------------------- | -------------------- |\n| **Ctrl + C**         | 复制                 |\n| **Ctrl + X**         | 剪切                 |\n| **Ctrl + V**         | 粘贴                 |\n| **Ctrl + A**         | 全选                 |\n| **Ctrl + F**         | 查找                 |\n| **Ctrl + Z**         | 撤销操作             |\n| **Ctrl + Y**         | 还原操作             |\n| **Ctrl + N**         | 新建文件             |\n| **Ctrl + O**         | 打开“打开文件”对话框 |\n| **Ctrl + B**         | 加粗                 |\n| **Ctrl + I**         | 斜体                 |\n| **Ctrl + U**         | 下划线               |\n| **Ctrl + E**         | 当前行居中           |\n| **Ctrl + P**         | 打印                 |\n| **Ctrl + Shift + N** | 新建文件夹           |\n\n### 截图\n\n想必大家都习惯了登上 QQ 或者微信来截图，但如果我们没网的时候咋整？你可能会说，我提前下个截图软件不就好了！嗯哼，这不失为一种解决方案，但 Windows 自带的截图工具已经十分强大，大家完全可以不用借助其他工具辅助；\n\n| 快捷键                | 说明                                         |\n| --------------------- | -------------------------------------------- |\n| **Win + Shift + S**   | 框选截屏，复制到粘贴板                       |\n| **PrintScreen**       | 默认全屏截图，复制到粘贴板，**不会提醒**     |\n| **Win + PrintScreen** | 当前全屏截图保存到 “库 - 图片 - 屏幕截图”    |\n| **Alt + PrintScreen** | 默认将当前窗口截屏复制到粘贴板，**不会提醒** |\n\n## 总结\n以上就是我们日常在使用 Windows 中的一些小技巧了，希望看完之后也对你的日常使用所有帮助，如果你有更多高级好玩的骚操作，欢迎评论交流，咱们评论区见！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】论如何优雅的使用-Windows-10！.md","raw":"---\ntitle: 【效率为王】论如何优雅的使用 Windows 10！\nmathjax: true\ntoc: true\ntags:\n  - 教程\n  - Windows\ncategories:\n  - 效率为王\nabbrlink: 8a341b7b\ndate: 2021-05-04 10:13:05\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n都 1202 年了，Windows 10 都已经发布 5 年多了，我个人也是从 Windows 10 一发布就从 Windows 7 换到了 Windows 10。就个人体验而言，我觉得 Windows 10 比 Windows 7 好用多了，许多方面都进行了改进。当然了，这只是个人感受，如果您有不同的想法，也不用急着和我争辩，毕竟萝卜白菜，各有所爱嘛，那接下来就说说如何优雅的使用 Windows 10。这些只是个人的使用经验，总结成本文章，供大家参考参考。\n\n本文基于 Windows 10 专业版（20H2）进行配置及截图，理论上讲适用于 Windows 10 所有版本，略有出入的地方还请多多包涵，可以尝试搜索网上的解决方案。\n\n![](https://img-blog.csdnimg.cn/img_convert/de70692c44a5d726bb244b47a904a0c4.png)\n\n本文主要从以下几个方面进行讲解；\n\n1. 系统设置\n2. 软件推荐\n3. 日常使用小技巧\n\n## 系统设置\n\n### 资源管理器设置\n\n-   在**查看**选项中，将**文件扩展名**勾选，并打开**选项**设置；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTM4YWI0ODk1NzI1Y2I3ODYucG5n?x-oss-process=image/format,png) \n\n* 在常规选项下，将“**打开文件资源管理器时打开**”后的下拉框设置为此电脑，然后在“**隐私**”将关于快速访问相关选项去掉勾选，最后点击“**确认**”；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTNlN2U1ZTFjZDZjM2EyNDkucG5n?x-oss-process=image/format,png) \n\n### 修改默认存储位置\n\n打开设置，选中**系统**设置下的**存储**子栏目，然后**更改新内容保存的位置**，将**默认的C盘**改为**你想要存储的盘**，我的设置中**以D盘为例**，具体看个人喜好，设置步骤如下；\n\n![系统设置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTgzMThiNjQ0MGE4YTIzOGEucG5n?x-oss-process=image/format,png) \n\n![存储设置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJmMmE0NzFiMGUzZDlmMmIucG5n?x-oss-process=image/format,png) \n\n![更改新内容保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMTgyM2I0YjY5NTU4ZTgucG5n?x-oss-process=image/format,png) \n\n![新内容原保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY1NDYxNTA5YTI2Y2JmODgucG5n?x-oss-process=image/format,png) \n\n![新内容新保存位置](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTRiMDA0NDExNDFjYjI1ZmQucG5n?x-oss-process=image/format,png) \n\n###  修改常用文件夹的默认路径\n\n对于大多人而言，桌面内容一般都是保存在 C 盘下面。这符合大部分人的使用习惯，但是对于我就不同了，我可是个小机灵鬼，被系统搞崩重装系统搞怕了，所以我一般会把桌面等内容保存在其他非系统盘位置。那想要修改如下**桌面**、**文档**、**下载**等的默认路径（默认为C盘），应该如何操作呢，以下以**桌面**为例，其他文件夹的操作都一样！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTEyNTIwMWJhYTUyZjA3N2IucG5n?x-oss-process=image/format,png) \n\n1. 选中桌面，鼠标右键，选择属性；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZiZjE1ZDdiMTY0NzIyOWIucG5n?x-oss-process=image/format,png) \n\n2. 选中**位置**，然后修改下边方框中**你的自定义路径**；\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTlhYmViNDBmMWEyYzA4ZWIucG5n?x-oss-process=image/format,png) \n\n3. 修改成你的自定义路径后，点击**确定**即可；\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQxZGRjNzVhZDA5NjNkMGIucG5n?x-oss-process=image/format,png) \n\n## 软件安装篇\n\n首先说明，不是给下边软件打广告呀，只是我自己体验下来，觉得适合自己的，当然你也可以有自己的选择，全凭个人喜好嘛，哈哈。\n\n### 输入法\n\n* **[手心输入法](http://www.xinshuru.com/index.html?p=win)**：360 旗下产品，无广告，告别骚扰。\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdkNjU5ODZkZGVlZWM3N2UucG5n?x-oss-process=image/format,png) \n\n* **[QQ输入法](http://qq.pinyin.cn/)**：鹅厂出品，斗图十分方便呀！\n\n![image](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkZGM1NTA1MzY3ZDY3NGQucG5n?x-oss-process=image/format,png) \n\n### 压缩软件\n\n* **[Bandizip](http://www.bandisoft.com/)**：一家韩国公司出品的解压缩软件，速度与颜值并存，之前的版本都没有广告，现在的新版本中加入了广告，不过也不影响使用。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTBmOGUyNzM4MDA3NzExNzIucG5n?x-oss-process=image/format,png) \n\n* **[7-zip](https://www.7-zip.org/)**：功能强大，不过颜值略低，颜值党就不推荐了，😄；\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWE4MTFkNjQ0ODVkN2RkYTQucG5n?x-oss-process=image/format,png)\n\n-   **[360 压缩](https://yasuo.360.cn/)**：360 又来了，不过完全放心，这不像xxx安全中心那么额，咋说呢，就很良心！\n\n![](https://img-blog.csdnimg.cn/img_convert/b6b86d84a028941a0195f1f4818ce122.png)\n\n### 通讯浏览\n\n* **[微信](https://weixin.qq.com/)**  ：这就不用说了，大家都或多或少要用到。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI4NjY1NmM0N2ZmYWFjMTYucG5n?x-oss-process=image/format,png) \n\n* **[Tim](https://tim.qq.com/)**  ：QQ 办公版，告别花里胡哨的东西，专注于办公。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTg4MjRlMmM5YTg5MTA5MTEucG5n?x-oss-process=image/format,png) \n\n* **[Chrome](https://www.google.cn/intl/zh-CN/chrome/)**：谷歌旗下浏览器，也是目前世界上份额最大的。你可能说用不了 Google，但通过一番设置调教之后，它仍会是最强大的浏览器。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmZmJkYzMyZTAxYzM5Y2EucG5n?x-oss-process=image/format,png) \n\n- [新版 Edge](https://www.microsoft.com/en-us/edge)：最终巨硬还是屈服了，换用 Chromium 内核的 Edge 能否与 Chrome 一战呢？我觉得有戏！\n\n![](https://img-blog.csdnimg.cn/img_convert/756d400e6179391ba950d8114ee10145.png)\n\n### 文字编辑\n\n* **[Typora](https://www.typora.io/)**：跨平台 Markdown 编辑器，个人觉得比许多收费的都好用。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTViNzNiYWE4MjZmMjRjNTkucG5n?x-oss-process=image/format,png) \n\n* **[Mark Text](https://marktext.app/)**：开源跨平台 Markdown 编辑器，最大的特色就是支持斗图！！！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdlNWQzZTI4OGY0NTJhOWIucG5n?x-oss-process=image/format,png) \n\n* **[PicGo](https://molunerfinn.com/PicGo/)**：搭配前两者使用的图片上传工具，通过搭建自己的图床，实现对图片的管理。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZmOGExNDFiOTdkMmU4YzQucG5n?x-oss-process=image/format,png) \n\n### 代码编辑器\n\n* **[VS Code](https://code.visualstudio.com/)**：巨硬出品，实现弯道超车，成为目前大多程序员的第一选择。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTMyNDhjN2ExYjdjZGUxMWMucG5n?x-oss-process=image/format,png)\n\n* **[Atom](https://atom.io/)**：Github 出品，不过现在 Github 已经被巨硬收购，所以也能叫巨硬出品了，哈哈。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFiNzdjNDAzMzU4ODNlMDUucG5n?x-oss-process=image/format,png) \n\n* **[Sublime Text](https://www.sublimetext.com/)**：颜值较高的一款编辑器。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM1MWY5ZWFhMzRjMTJhNDkucG5n?x-oss-process=image/format,png) \n\n* **[Notepad++](https://notepad-plus-plus.org/downloads/)**：湾湾公司的一款产品，自己作死，涉足政治立场，现在有点凉。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTExYzlkOWExNWI1OTk5NGIucG5n?x-oss-process=image/format,png) \n\n### 软件卸载\n\n* **[IObit](https://www.iobit.com/en/index.php?s)**：个人比较推荐的一款软件卸载工具，自动去除依赖，还能实时监控软件。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWMyZTc5MjBhZjFiYzBhZmYucG5n?x-oss-process=image/format,png) \n\n### 下载工具\n\n* **[Motrix](https://motrix.app/zh-CN/)**：开源下载工具，颜值与实用共存，去你的某雷。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJkYmIzOTc2ZjZiOTIxNTIucG5n?x-oss-process=image/format,png) \n\n* **[IDM](https://www.internetdownloadmanager.com/)**：多线程下载工具，搭配 Chrome，简直不要太爽！\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY2MTI2NzVmYzY1Yzg1YTEucG5n?x-oss-process=image/format,png) \n\n* **[Xdown](https://xdown.org/)**：相当于 IDM 的一个免费版本吧，搭配插件，可以下载百度云分享资源哦！\n    ![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM2YjFkNWQ0Mzk4Y2Y0MmEucG5n?x-oss-process=image/format,png)\n\n## 日常使用小技巧\n\n### 常用系统操作快捷键\n\n| 快捷键                 | 说明                            |\n| ---------------------- | ------------------------------- |\n| **Alt + Tab**          | 应用切换                        |\n| **Win + Tab**          | 桌面切换                        |\n| **CapsLock**           | 切换大小写                      |\n| **Ctrl + Shift**       | 输入法切换                      |\n| **Ctrl + Shift + Esc** | 任务管理器                      |\n| **Win + Space**        | 输入法切换                      |\n| **Win + 数字键**       | 切换任务栏中的对应应用          |\n| **Win + 上/下/左/右**  | 当前窗口最大化/最小化/居左/居右 |\n| **Win + R**            | 打开运行                        |\n| **Win + E**            | 打开资源管理器                  |\n| **Win + D**            | 显示桌面                        |\n| **Win + M**            | 最小化所有窗口                  |\n| **Win + G**            | 游戏录制                        |\n| **Win + A**            | 打开通知                        |\n| **Win + I**            | 打开 Windows 设置               |\n| **Win + X**            | 显示系统选项                    |\n| **Win + V**            | Windows 10 自带剪切板           |\n| **Win + P**            | 投影设置                        |\n| **Win + L**            | 锁屏                            |\n| **Win + Q/S**          | 快速打开 Cortans 搜索框         |\n| **Win + W**            | 白板                            |\n| **Win + .**            | 打开 Emoji 面板                 |\n\n### 文件文档处理快捷键\n\n对我们而言，用电脑平时接触最多的就是文件文档处理工作，牢记如下这些快捷方式，能大大提高你的工作效率，早点下班回家不香么？\n\n| 快捷键               | 说明                 |\n| -------------------- | -------------------- |\n| **Ctrl + C**         | 复制                 |\n| **Ctrl + X**         | 剪切                 |\n| **Ctrl + V**         | 粘贴                 |\n| **Ctrl + A**         | 全选                 |\n| **Ctrl + F**         | 查找                 |\n| **Ctrl + Z**         | 撤销操作             |\n| **Ctrl + Y**         | 还原操作             |\n| **Ctrl + N**         | 新建文件             |\n| **Ctrl + O**         | 打开“打开文件”对话框 |\n| **Ctrl + B**         | 加粗                 |\n| **Ctrl + I**         | 斜体                 |\n| **Ctrl + U**         | 下划线               |\n| **Ctrl + E**         | 当前行居中           |\n| **Ctrl + P**         | 打印                 |\n| **Ctrl + Shift + N** | 新建文件夹           |\n\n### 截图\n\n想必大家都习惯了登上 QQ 或者微信来截图，但如果我们没网的时候咋整？你可能会说，我提前下个截图软件不就好了！嗯哼，这不失为一种解决方案，但 Windows 自带的截图工具已经十分强大，大家完全可以不用借助其他工具辅助；\n\n| 快捷键                | 说明                                         |\n| --------------------- | -------------------------------------------- |\n| **Win + Shift + S**   | 框选截屏，复制到粘贴板                       |\n| **PrintScreen**       | 默认全屏截图，复制到粘贴板，**不会提醒**     |\n| **Win + PrintScreen** | 当前全屏截图保存到 “库 - 图片 - 屏幕截图”    |\n| **Alt + PrintScreen** | 默认将当前窗口截屏复制到粘贴板，**不会提醒** |\n\n## 总结\n以上就是我们日常在使用 Windows 中的一些小技巧了，希望看完之后也对你的日常使用所有帮助，如果你有更多高级好玩的骚操作，欢迎评论交流，咱们评论区见！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】论如何优雅的使用-Windows-10！","published":1,"updated":"2021-05-04T02:22:15.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw090021bw341s6o5u3h","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>都 1202 年了，Windows 10 都已经发布 5 年多了，我个人也是从 Windows 10 一发布就从 Windows 7 换到了 Windows 10。就个人体验而言，我觉得 Windows 10 比 Windows 7 好用多了，许多方面都进行了改进。当然了，这只是个人感受，如果您有不同的想法，也不用急着和我争辩，毕竟萝卜白菜，各有所爱嘛，那接下来就说说如何优雅的使用 Windows 10。这些只是个人的使用经验，总结成本文章，供大家参考参考。</p>\n<p>本文基于 Windows 10 专业版（20H2）进行配置及截图，理论上讲适用于 Windows 10 所有版本，略有出入的地方还请多多包涵，可以尝试搜索网上的解决方案。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/de70692c44a5d726bb244b47a904a0c4.png\" alt=\"\"></p>\n<p>本文主要从以下几个方面进行讲解；</p>\n<ol>\n<li>系统设置</li>\n<li>软件推荐</li>\n<li>日常使用小技巧</li>\n</ol>\n<h2 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h2><h3 id=\"资源管理器设置\"><a href=\"#资源管理器设置\" class=\"headerlink\" title=\"资源管理器设置\"></a>资源管理器设置</h3><ul>\n<li>在<strong>查看</strong>选项中，将<strong>文件扩展名</strong>勾选，并打开<strong>选项</strong>设置；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTM4YWI0ODk1NzI1Y2I3ODYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li>在常规选项下，将“<strong>打开文件资源管理器时打开</strong>”后的下拉框设置为此电脑，然后在“<strong>隐私</strong>”将关于快速访问相关选项去掉勾选，最后点击“<strong>确认</strong>”；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTNlN2U1ZTFjZDZjM2EyNDkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"修改默认存储位置\"><a href=\"#修改默认存储位置\" class=\"headerlink\" title=\"修改默认存储位置\"></a>修改默认存储位置</h3><p>打开设置，选中<strong>系统</strong>设置下的<strong>存储</strong>子栏目，然后<strong>更改新内容保存的位置</strong>，将<strong>默认的C盘</strong>改为<strong>你想要存储的盘</strong>，我的设置中<strong>以D盘为例</strong>，具体看个人喜好，设置步骤如下；</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTgzMThiNjQ0MGE4YTIzOGEucG5n?x-oss-process=image/format,png\" alt=\"系统设置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJmMmE0NzFiMGUzZDlmMmIucG5n?x-oss-process=image/format,png\" alt=\"存储设置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMTgyM2I0YjY5NTU4ZTgucG5n?x-oss-process=image/format,png\" alt=\"更改新内容保存位置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY1NDYxNTA5YTI2Y2JmODgucG5n?x-oss-process=image/format,png\" alt=\"新内容原保存位置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTRiMDA0NDExNDFjYjI1ZmQucG5n?x-oss-process=image/format,png\" alt=\"新内容新保存位置\"> </p>\n<h3 id=\"修改常用文件夹的默认路径\"><a href=\"#修改常用文件夹的默认路径\" class=\"headerlink\" title=\"修改常用文件夹的默认路径\"></a>修改常用文件夹的默认路径</h3><p>对于大多人而言，桌面内容一般都是保存在 C 盘下面。这符合大部分人的使用习惯，但是对于我就不同了，我可是个小机灵鬼，被系统搞崩重装系统搞怕了，所以我一般会把桌面等内容保存在其他非系统盘位置。那想要修改如下<strong>桌面</strong>、<strong>文档</strong>、<strong>下载</strong>等的默认路径（默认为C盘），应该如何操作呢，以下以<strong>桌面</strong>为例，其他文件夹的操作都一样！</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTEyNTIwMWJhYTUyZjA3N2IucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ol>\n<li>选中桌面，鼠标右键，选择属性；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZiZjE1ZDdiMTY0NzIyOWIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ol>\n<li>选中<strong>位置</strong>，然后修改下边方框中<strong>你的自定义路径</strong>；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTlhYmViNDBmMWEyYzA4ZWIucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<ol>\n<li>修改成你的自定义路径后，点击<strong>确定</strong>即可；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQxZGRjNzVhZDA5NjNkMGIucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<h2 id=\"软件安装篇\"><a href=\"#软件安装篇\" class=\"headerlink\" title=\"软件安装篇\"></a>软件安装篇</h2><p>首先说明，不是给下边软件打广告呀，只是我自己体验下来，觉得适合自己的，当然你也可以有自己的选择，全凭个人喜好嘛，哈哈。</p>\n<h3 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h3><ul>\n<li><strong><a href=\"http://www.xinshuru.com/index.html?p=win\">手心输入法</a></strong>：360 旗下产品，无广告，告别骚扰。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdkNjU5ODZkZGVlZWM3N2UucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<ul>\n<li><strong><a href=\"http://qq.pinyin.cn/\">QQ输入法</a></strong>：鹅厂出品，斗图十分方便呀！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkZGM1NTA1MzY3ZDY3NGQucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<h3 id=\"压缩软件\"><a href=\"#压缩软件\" class=\"headerlink\" title=\"压缩软件\"></a>压缩软件</h3><ul>\n<li><strong><a href=\"http://www.bandisoft.com/\">Bandizip</a></strong>：一家韩国公司出品的解压缩软件，速度与颜值并存，之前的版本都没有广告，现在的新版本中加入了广告，不过也不影响使用。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTBmOGUyNzM4MDA3NzExNzIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.7-zip.org/\">7-zip</a></strong>：功能强大，不过颜值略低，颜值党就不推荐了，😄；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWE4MTFkNjQ0ODVkN2RkYTQucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ul>\n<li><strong><a href=\"https://yasuo.360.cn/\">360 压缩</a></strong>：360 又来了，不过完全放心，这不像xxx安全中心那么额，咋说呢，就很良心！</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b6b86d84a028941a0195f1f4818ce122.png\" alt=\"\"></p>\n<h3 id=\"通讯浏览\"><a href=\"#通讯浏览\" class=\"headerlink\" title=\"通讯浏览\"></a>通讯浏览</h3><ul>\n<li><strong><a href=\"https://weixin.qq.com/\">微信</a></strong>  ：这就不用说了，大家都或多或少要用到。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI4NjY1NmM0N2ZmYWFjMTYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://tim.qq.com/\">Tim</a></strong>  ：QQ 办公版，告别花里胡哨的东西，专注于办公。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTg4MjRlMmM5YTg5MTA5MTEucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.google.cn/intl/zh-CN/chrome/\">Chrome</a></strong>：谷歌旗下浏览器，也是目前世界上份额最大的。你可能说用不了 Google，但通过一番设置调教之后，它仍会是最强大的浏览器。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmZmJkYzMyZTAxYzM5Y2EucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><a href=\"https://www.microsoft.com/en-us/edge\">新版 Edge</a>：最终巨硬还是屈服了，换用 Chromium 内核的 Edge 能否与 Chrome 一战呢？我觉得有戏！</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/756d400e6179391ba950d8114ee10145.png\" alt=\"\"></p>\n<h3 id=\"文字编辑\"><a href=\"#文字编辑\" class=\"headerlink\" title=\"文字编辑\"></a>文字编辑</h3><ul>\n<li><strong><a href=\"https://www.typora.io/\">Typora</a></strong>：跨平台 Markdown 编辑器，个人觉得比许多收费的都好用。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTViNzNiYWE4MjZmMjRjNTkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://marktext.app/\">Mark Text</a></strong>：开源跨平台 Markdown 编辑器，最大的特色就是支持斗图！！！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdlNWQzZTI4OGY0NTJhOWIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://molunerfinn.com/PicGo/\">PicGo</a></strong>：搭配前两者使用的图片上传工具，通过搭建自己的图床，实现对图片的管理。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZmOGExNDFiOTdkMmU4YzQucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"代码编辑器\"><a href=\"#代码编辑器\" class=\"headerlink\" title=\"代码编辑器\"></a>代码编辑器</h3><ul>\n<li><strong><a href=\"https://code.visualstudio.com/\">VS Code</a></strong>：巨硬出品，实现弯道超车，成为目前大多程序员的第一选择。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTMyNDhjN2ExYjdjZGUxMWMucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ul>\n<li><strong><a href=\"https://atom.io/\">Atom</a></strong>：Github 出品，不过现在 Github 已经被巨硬收购，所以也能叫巨硬出品了，哈哈。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFiNzdjNDAzMzU4ODNlMDUucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.sublimetext.com/\">Sublime Text</a></strong>：颜值较高的一款编辑器。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM1MWY5ZWFhMzRjMTJhNDkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://notepad-plus-plus.org/downloads/\">Notepad++</a></strong>：湾湾公司的一款产品，自己作死，涉足政治立场，现在有点凉。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTExYzlkOWExNWI1OTk5NGIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"软件卸载\"><a href=\"#软件卸载\" class=\"headerlink\" title=\"软件卸载\"></a>软件卸载</h3><ul>\n<li><strong><a href=\"https://www.iobit.com/en/index.php?s\">IObit</a></strong>：个人比较推荐的一款软件卸载工具，自动去除依赖，还能实时监控软件。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWMyZTc5MjBhZjFiYzBhZmYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h3><ul>\n<li><strong><a href=\"https://motrix.app/zh-CN/\">Motrix</a></strong>：开源下载工具，颜值与实用共存，去你的某雷。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJkYmIzOTc2ZjZiOTIxNTIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.internetdownloadmanager.com/\">IDM</a></strong>：多线程下载工具，搭配 Chrome，简直不要太爽！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY2MTI2NzVmYzY1Yzg1YTEucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://xdown.org/\">Xdown</a></strong>：相当于 IDM 的一个免费版本吧，搭配插件，可以下载百度云分享资源哦！<br>  <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM2YjFkNWQ0Mzk4Y2Y0MmEucG5n?x-oss-process=image/format,png\" alt=\"\"></li>\n</ul>\n<h2 id=\"日常使用小技巧\"><a href=\"#日常使用小技巧\" class=\"headerlink\" title=\"日常使用小技巧\"></a>日常使用小技巧</h2><h3 id=\"常用系统操作快捷键\"><a href=\"#常用系统操作快捷键\" class=\"headerlink\" title=\"常用系统操作快捷键\"></a>常用系统操作快捷键</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Alt + Tab</strong></td>\n<td>应用切换</td>\n</tr>\n<tr>\n<td><strong>Win + Tab</strong></td>\n<td>桌面切换</td>\n</tr>\n<tr>\n<td><strong>CapsLock</strong></td>\n<td>切换大小写</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift</strong></td>\n<td>输入法切换</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift + Esc</strong></td>\n<td>任务管理器</td>\n</tr>\n<tr>\n<td><strong>Win + Space</strong></td>\n<td>输入法切换</td>\n</tr>\n<tr>\n<td><strong>Win + 数字键</strong></td>\n<td>切换任务栏中的对应应用</td>\n</tr>\n<tr>\n<td><strong>Win + 上/下/左/右</strong></td>\n<td>当前窗口最大化/最小化/居左/居右</td>\n</tr>\n<tr>\n<td><strong>Win + R</strong></td>\n<td>打开运行</td>\n</tr>\n<tr>\n<td><strong>Win + E</strong></td>\n<td>打开资源管理器</td>\n</tr>\n<tr>\n<td><strong>Win + D</strong></td>\n<td>显示桌面</td>\n</tr>\n<tr>\n<td><strong>Win + M</strong></td>\n<td>最小化所有窗口</td>\n</tr>\n<tr>\n<td><strong>Win + G</strong></td>\n<td>游戏录制</td>\n</tr>\n<tr>\n<td><strong>Win + A</strong></td>\n<td>打开通知</td>\n</tr>\n<tr>\n<td><strong>Win + I</strong></td>\n<td>打开 Windows 设置</td>\n</tr>\n<tr>\n<td><strong>Win + X</strong></td>\n<td>显示系统选项</td>\n</tr>\n<tr>\n<td><strong>Win + V</strong></td>\n<td>Windows 10 自带剪切板</td>\n</tr>\n<tr>\n<td><strong>Win + P</strong></td>\n<td>投影设置</td>\n</tr>\n<tr>\n<td><strong>Win + L</strong></td>\n<td>锁屏</td>\n</tr>\n<tr>\n<td><strong>Win + Q/S</strong></td>\n<td>快速打开 Cortans 搜索框</td>\n</tr>\n<tr>\n<td><strong>Win + W</strong></td>\n<td>白板</td>\n</tr>\n<tr>\n<td><strong>Win + .</strong></td>\n<td>打开 Emoji 面板</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"文件文档处理快捷键\"><a href=\"#文件文档处理快捷键\" class=\"headerlink\" title=\"文件文档处理快捷键\"></a>文件文档处理快捷键</h3><p>对我们而言，用电脑平时接触最多的就是文件文档处理工作，牢记如下这些快捷方式，能大大提高你的工作效率，早点下班回家不香么？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Ctrl + C</strong></td>\n<td>复制</td>\n</tr>\n<tr>\n<td><strong>Ctrl + X</strong></td>\n<td>剪切</td>\n</tr>\n<tr>\n<td><strong>Ctrl + V</strong></td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td><strong>Ctrl + A</strong></td>\n<td>全选</td>\n</tr>\n<tr>\n<td><strong>Ctrl + F</strong></td>\n<td>查找</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Z</strong></td>\n<td>撤销操作</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Y</strong></td>\n<td>还原操作</td>\n</tr>\n<tr>\n<td><strong>Ctrl + N</strong></td>\n<td>新建文件</td>\n</tr>\n<tr>\n<td><strong>Ctrl + O</strong></td>\n<td>打开“打开文件”对话框</td>\n</tr>\n<tr>\n<td><strong>Ctrl + B</strong></td>\n<td>加粗</td>\n</tr>\n<tr>\n<td><strong>Ctrl + I</strong></td>\n<td>斜体</td>\n</tr>\n<tr>\n<td><strong>Ctrl + U</strong></td>\n<td>下划线</td>\n</tr>\n<tr>\n<td><strong>Ctrl + E</strong></td>\n<td>当前行居中</td>\n</tr>\n<tr>\n<td><strong>Ctrl + P</strong></td>\n<td>打印</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift + N</strong></td>\n<td>新建文件夹</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h3><p>想必大家都习惯了登上 QQ 或者微信来截图，但如果我们没网的时候咋整？你可能会说，我提前下个截图软件不就好了！嗯哼，这不失为一种解决方案，但 Windows 自带的截图工具已经十分强大，大家完全可以不用借助其他工具辅助；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Win + Shift + S</strong></td>\n<td>框选截屏，复制到粘贴板</td>\n</tr>\n<tr>\n<td><strong>PrintScreen</strong></td>\n<td>默认全屏截图，复制到粘贴板，<strong>不会提醒</strong></td>\n</tr>\n<tr>\n<td><strong>Win + PrintScreen</strong></td>\n<td>当前全屏截图保存到 “库 - 图片 - 屏幕截图”</td>\n</tr>\n<tr>\n<td><strong>Alt + PrintScreen</strong></td>\n<td>默认将当前窗口截屏复制到粘贴板，<strong>不会提醒</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是我们日常在使用 Windows 中的一些小技巧了，希望看完之后也对你的日常使用所有帮助，如果你有更多高级好玩的骚操作，欢迎评论交流，咱们评论区见！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>都 1202 年了，Windows 10 都已经发布 5 年多了，我个人也是从 Windows 10 一发布就从 Windows 7 换到了 Windows 10。就个人体验而言，我觉得 Windows 10 比 Windows 7 好用多了，许多方面都进行了改进。当然了，这只是个人感受，如果您有不同的想法，也不用急着和我争辩，毕竟萝卜白菜，各有所爱嘛，那接下来就说说如何优雅的使用 Windows 10。这些只是个人的使用经验，总结成本文章，供大家参考参考。</p>\n<p>本文基于 Windows 10 专业版（20H2）进行配置及截图，理论上讲适用于 Windows 10 所有版本，略有出入的地方还请多多包涵，可以尝试搜索网上的解决方案。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/de70692c44a5d726bb244b47a904a0c4.png\" alt=\"\"></p>\n<p>本文主要从以下几个方面进行讲解；</p>\n<ol>\n<li>系统设置</li>\n<li>软件推荐</li>\n<li>日常使用小技巧</li>\n</ol>\n<h2 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h2><h3 id=\"资源管理器设置\"><a href=\"#资源管理器设置\" class=\"headerlink\" title=\"资源管理器设置\"></a>资源管理器设置</h3><ul>\n<li>在<strong>查看</strong>选项中，将<strong>文件扩展名</strong>勾选，并打开<strong>选项</strong>设置；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTM4YWI0ODk1NzI1Y2I3ODYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li>在常规选项下，将“<strong>打开文件资源管理器时打开</strong>”后的下拉框设置为此电脑，然后在“<strong>隐私</strong>”将关于快速访问相关选项去掉勾选，最后点击“<strong>确认</strong>”；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTNlN2U1ZTFjZDZjM2EyNDkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"修改默认存储位置\"><a href=\"#修改默认存储位置\" class=\"headerlink\" title=\"修改默认存储位置\"></a>修改默认存储位置</h3><p>打开设置，选中<strong>系统</strong>设置下的<strong>存储</strong>子栏目，然后<strong>更改新内容保存的位置</strong>，将<strong>默认的C盘</strong>改为<strong>你想要存储的盘</strong>，我的设置中<strong>以D盘为例</strong>，具体看个人喜好，设置步骤如下；</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTgzMThiNjQ0MGE4YTIzOGEucG5n?x-oss-process=image/format,png\" alt=\"系统设置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJmMmE0NzFiMGUzZDlmMmIucG5n?x-oss-process=image/format,png\" alt=\"存储设置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMTgyM2I0YjY5NTU4ZTgucG5n?x-oss-process=image/format,png\" alt=\"更改新内容保存位置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY1NDYxNTA5YTI2Y2JmODgucG5n?x-oss-process=image/format,png\" alt=\"新内容原保存位置\"> </p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTRiMDA0NDExNDFjYjI1ZmQucG5n?x-oss-process=image/format,png\" alt=\"新内容新保存位置\"> </p>\n<h3 id=\"修改常用文件夹的默认路径\"><a href=\"#修改常用文件夹的默认路径\" class=\"headerlink\" title=\"修改常用文件夹的默认路径\"></a>修改常用文件夹的默认路径</h3><p>对于大多人而言，桌面内容一般都是保存在 C 盘下面。这符合大部分人的使用习惯，但是对于我就不同了，我可是个小机灵鬼，被系统搞崩重装系统搞怕了，所以我一般会把桌面等内容保存在其他非系统盘位置。那想要修改如下<strong>桌面</strong>、<strong>文档</strong>、<strong>下载</strong>等的默认路径（默认为C盘），应该如何操作呢，以下以<strong>桌面</strong>为例，其他文件夹的操作都一样！</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTEyNTIwMWJhYTUyZjA3N2IucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ol>\n<li>选中桌面，鼠标右键，选择属性；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZiZjE1ZDdiMTY0NzIyOWIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ol>\n<li>选中<strong>位置</strong>，然后修改下边方框中<strong>你的自定义路径</strong>；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTlhYmViNDBmMWEyYzA4ZWIucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<ol>\n<li>修改成你的自定义路径后，点击<strong>确定</strong>即可；</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQxZGRjNzVhZDA5NjNkMGIucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<h2 id=\"软件安装篇\"><a href=\"#软件安装篇\" class=\"headerlink\" title=\"软件安装篇\"></a>软件安装篇</h2><p>首先说明，不是给下边软件打广告呀，只是我自己体验下来，觉得适合自己的，当然你也可以有自己的选择，全凭个人喜好嘛，哈哈。</p>\n<h3 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h3><ul>\n<li><strong><a href=\"http://www.xinshuru.com/index.html?p=win\">手心输入法</a></strong>：360 旗下产品，无广告，告别骚扰。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdkNjU5ODZkZGVlZWM3N2UucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<ul>\n<li><strong><a href=\"http://qq.pinyin.cn/\">QQ输入法</a></strong>：鹅厂出品，斗图十分方便呀！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkZGM1NTA1MzY3ZDY3NGQucG5n?x-oss-process=image/format,png\" alt=\"image\"> </p>\n<h3 id=\"压缩软件\"><a href=\"#压缩软件\" class=\"headerlink\" title=\"压缩软件\"></a>压缩软件</h3><ul>\n<li><strong><a href=\"http://www.bandisoft.com/\">Bandizip</a></strong>：一家韩国公司出品的解压缩软件，速度与颜值并存，之前的版本都没有广告，现在的新版本中加入了广告，不过也不影响使用。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTBmOGUyNzM4MDA3NzExNzIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.7-zip.org/\">7-zip</a></strong>：功能强大，不过颜值略低，颜值党就不推荐了，😄；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWE4MTFkNjQ0ODVkN2RkYTQucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ul>\n<li><strong><a href=\"https://yasuo.360.cn/\">360 压缩</a></strong>：360 又来了，不过完全放心，这不像xxx安全中心那么额，咋说呢，就很良心！</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b6b86d84a028941a0195f1f4818ce122.png\" alt=\"\"></p>\n<h3 id=\"通讯浏览\"><a href=\"#通讯浏览\" class=\"headerlink\" title=\"通讯浏览\"></a>通讯浏览</h3><ul>\n<li><strong><a href=\"https://weixin.qq.com/\">微信</a></strong>  ：这就不用说了，大家都或多或少要用到。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI4NjY1NmM0N2ZmYWFjMTYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://tim.qq.com/\">Tim</a></strong>  ：QQ 办公版，告别花里胡哨的东西，专注于办公。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTg4MjRlMmM5YTg5MTA5MTEucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.google.cn/intl/zh-CN/chrome/\">Chrome</a></strong>：谷歌旗下浏览器，也是目前世界上份额最大的。你可能说用不了 Google，但通过一番设置调教之后，它仍会是最强大的浏览器。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmZmJkYzMyZTAxYzM5Y2EucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><a href=\"https://www.microsoft.com/en-us/edge\">新版 Edge</a>：最终巨硬还是屈服了，换用 Chromium 内核的 Edge 能否与 Chrome 一战呢？我觉得有戏！</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/756d400e6179391ba950d8114ee10145.png\" alt=\"\"></p>\n<h3 id=\"文字编辑\"><a href=\"#文字编辑\" class=\"headerlink\" title=\"文字编辑\"></a>文字编辑</h3><ul>\n<li><strong><a href=\"https://www.typora.io/\">Typora</a></strong>：跨平台 Markdown 编辑器，个人觉得比许多收费的都好用。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTViNzNiYWE4MjZmMjRjNTkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://marktext.app/\">Mark Text</a></strong>：开源跨平台 Markdown 编辑器，最大的特色就是支持斗图！！！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTdlNWQzZTI4OGY0NTJhOWIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://molunerfinn.com/PicGo/\">PicGo</a></strong>：搭配前两者使用的图片上传工具，通过搭建自己的图床，实现对图片的管理。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWZmOGExNDFiOTdkMmU4YzQucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"代码编辑器\"><a href=\"#代码编辑器\" class=\"headerlink\" title=\"代码编辑器\"></a>代码编辑器</h3><ul>\n<li><strong><a href=\"https://code.visualstudio.com/\">VS Code</a></strong>：巨硬出品，实现弯道超车，成为目前大多程序员的第一选择。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTMyNDhjN2ExYjdjZGUxMWMucG5n?x-oss-process=image/format,png\" alt=\"\"></p>\n<ul>\n<li><strong><a href=\"https://atom.io/\">Atom</a></strong>：Github 出品，不过现在 Github 已经被巨硬收购，所以也能叫巨硬出品了，哈哈。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFiNzdjNDAzMzU4ODNlMDUucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.sublimetext.com/\">Sublime Text</a></strong>：颜值较高的一款编辑器。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM1MWY5ZWFhMzRjMTJhNDkucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://notepad-plus-plus.org/downloads/\">Notepad++</a></strong>：湾湾公司的一款产品，自己作死，涉足政治立场，现在有点凉。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTExYzlkOWExNWI1OTk5NGIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"软件卸载\"><a href=\"#软件卸载\" class=\"headerlink\" title=\"软件卸载\"></a>软件卸载</h3><ul>\n<li><strong><a href=\"https://www.iobit.com/en/index.php?s\">IObit</a></strong>：个人比较推荐的一款软件卸载工具，自动去除依赖，还能实时监控软件。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWMyZTc5MjBhZjFiYzBhZmYucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<h3 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h3><ul>\n<li><strong><a href=\"https://motrix.app/zh-CN/\">Motrix</a></strong>：开源下载工具，颜值与实用共存，去你的某雷。</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWJkYmIzOTc2ZjZiOTIxNTIucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://www.internetdownloadmanager.com/\">IDM</a></strong>：多线程下载工具，搭配 Chrome，简直不要太爽！</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY2MTI2NzVmYzY1Yzg1YTEucG5n?x-oss-process=image/format,png\" alt=\"\"> </p>\n<ul>\n<li><strong><a href=\"https://xdown.org/\">Xdown</a></strong>：相当于 IDM 的一个免费版本吧，搭配插件，可以下载百度云分享资源哦！<br>  <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWM2YjFkNWQ0Mzk4Y2Y0MmEucG5n?x-oss-process=image/format,png\" alt=\"\"></li>\n</ul>\n<h2 id=\"日常使用小技巧\"><a href=\"#日常使用小技巧\" class=\"headerlink\" title=\"日常使用小技巧\"></a>日常使用小技巧</h2><h3 id=\"常用系统操作快捷键\"><a href=\"#常用系统操作快捷键\" class=\"headerlink\" title=\"常用系统操作快捷键\"></a>常用系统操作快捷键</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Alt + Tab</strong></td>\n<td>应用切换</td>\n</tr>\n<tr>\n<td><strong>Win + Tab</strong></td>\n<td>桌面切换</td>\n</tr>\n<tr>\n<td><strong>CapsLock</strong></td>\n<td>切换大小写</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift</strong></td>\n<td>输入法切换</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift + Esc</strong></td>\n<td>任务管理器</td>\n</tr>\n<tr>\n<td><strong>Win + Space</strong></td>\n<td>输入法切换</td>\n</tr>\n<tr>\n<td><strong>Win + 数字键</strong></td>\n<td>切换任务栏中的对应应用</td>\n</tr>\n<tr>\n<td><strong>Win + 上/下/左/右</strong></td>\n<td>当前窗口最大化/最小化/居左/居右</td>\n</tr>\n<tr>\n<td><strong>Win + R</strong></td>\n<td>打开运行</td>\n</tr>\n<tr>\n<td><strong>Win + E</strong></td>\n<td>打开资源管理器</td>\n</tr>\n<tr>\n<td><strong>Win + D</strong></td>\n<td>显示桌面</td>\n</tr>\n<tr>\n<td><strong>Win + M</strong></td>\n<td>最小化所有窗口</td>\n</tr>\n<tr>\n<td><strong>Win + G</strong></td>\n<td>游戏录制</td>\n</tr>\n<tr>\n<td><strong>Win + A</strong></td>\n<td>打开通知</td>\n</tr>\n<tr>\n<td><strong>Win + I</strong></td>\n<td>打开 Windows 设置</td>\n</tr>\n<tr>\n<td><strong>Win + X</strong></td>\n<td>显示系统选项</td>\n</tr>\n<tr>\n<td><strong>Win + V</strong></td>\n<td>Windows 10 自带剪切板</td>\n</tr>\n<tr>\n<td><strong>Win + P</strong></td>\n<td>投影设置</td>\n</tr>\n<tr>\n<td><strong>Win + L</strong></td>\n<td>锁屏</td>\n</tr>\n<tr>\n<td><strong>Win + Q/S</strong></td>\n<td>快速打开 Cortans 搜索框</td>\n</tr>\n<tr>\n<td><strong>Win + W</strong></td>\n<td>白板</td>\n</tr>\n<tr>\n<td><strong>Win + .</strong></td>\n<td>打开 Emoji 面板</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"文件文档处理快捷键\"><a href=\"#文件文档处理快捷键\" class=\"headerlink\" title=\"文件文档处理快捷键\"></a>文件文档处理快捷键</h3><p>对我们而言，用电脑平时接触最多的就是文件文档处理工作，牢记如下这些快捷方式，能大大提高你的工作效率，早点下班回家不香么？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Ctrl + C</strong></td>\n<td>复制</td>\n</tr>\n<tr>\n<td><strong>Ctrl + X</strong></td>\n<td>剪切</td>\n</tr>\n<tr>\n<td><strong>Ctrl + V</strong></td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td><strong>Ctrl + A</strong></td>\n<td>全选</td>\n</tr>\n<tr>\n<td><strong>Ctrl + F</strong></td>\n<td>查找</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Z</strong></td>\n<td>撤销操作</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Y</strong></td>\n<td>还原操作</td>\n</tr>\n<tr>\n<td><strong>Ctrl + N</strong></td>\n<td>新建文件</td>\n</tr>\n<tr>\n<td><strong>Ctrl + O</strong></td>\n<td>打开“打开文件”对话框</td>\n</tr>\n<tr>\n<td><strong>Ctrl + B</strong></td>\n<td>加粗</td>\n</tr>\n<tr>\n<td><strong>Ctrl + I</strong></td>\n<td>斜体</td>\n</tr>\n<tr>\n<td><strong>Ctrl + U</strong></td>\n<td>下划线</td>\n</tr>\n<tr>\n<td><strong>Ctrl + E</strong></td>\n<td>当前行居中</td>\n</tr>\n<tr>\n<td><strong>Ctrl + P</strong></td>\n<td>打印</td>\n</tr>\n<tr>\n<td><strong>Ctrl + Shift + N</strong></td>\n<td>新建文件夹</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h3><p>想必大家都习惯了登上 QQ 或者微信来截图，但如果我们没网的时候咋整？你可能会说，我提前下个截图软件不就好了！嗯哼，这不失为一种解决方案，但 Windows 自带的截图工具已经十分强大，大家完全可以不用借助其他工具辅助；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Win + Shift + S</strong></td>\n<td>框选截屏，复制到粘贴板</td>\n</tr>\n<tr>\n<td><strong>PrintScreen</strong></td>\n<td>默认全屏截图，复制到粘贴板，<strong>不会提醒</strong></td>\n</tr>\n<tr>\n<td><strong>Win + PrintScreen</strong></td>\n<td>当前全屏截图保存到 “库 - 图片 - 屏幕截图”</td>\n</tr>\n<tr>\n<td><strong>Alt + PrintScreen</strong></td>\n<td>默认将当前窗口截屏复制到粘贴板，<strong>不会提醒</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是我们日常在使用 Windows 中的一些小技巧了，希望看完之后也对你的日常使用所有帮助，如果你有更多高级好玩的骚操作，欢迎评论交流，咱们评论区见！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】超详细 Halo 博客搭建教程","mathjax":true,"toc":true,"abbrlink":"16cb7ba0","date":"2021-05-04T03:04:11.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 0. 前言\n\n### 1.1 说在前面\n\n之前一直有在各大平台发布博客内容，然后个人博客一直使用的是 Hexo + Github Pages 的方式，但随着内容增多，Github Pages 访问的也不稳定，所以想着自己搞个服务器和域名搭个博客，最终选定 [Halo](https://halo.run/) 这个博客框架，搭建属于自己的博客。\n\n此内容从零到一手把手记录如何搭建，记录自己的搭建过程，也给后面的朋友们提供一个指南，少走些冤枉路，尽快上手。\n\n### 1.2 环境配置\n\n自己花了 210 左右在 UCloud 买了三年的服务器，然后在腾讯花了将近 200 买了个域名，服务器版本是 Ubuntu 18.04 64 位，理论上讲下面的配置适合于 Ubuntu 系所有版本，个别有出入的地方还请谅解。所以在正式开始之前，你需要满足以下几个条件：\n\n1.  一台 Ubuntu 系统的服务器（Centos 系统的参考 [官网教程](https://halo.run/archives/install-with-linux.html) 即可）；\n2.  一个域名；\n\n## 1. Java 环境配置\n\n### 1.1 安装\n\n1.  首先去 [官网](https://www.oracle.com/java/technologies/javase-downloads.html) 下载 JDK，选择自己想要的版本即可，一般推荐 JDK 1.8+ 的版本；\n\n![](https://img-blog.csdnimg.cn/img_convert/9edf4e765f7b9c1e7aa34c667f663557.png)\n\n2.  解压下载后的文件；\n\n```bash\ntar -zxvf jdk-11.0.9_linux-x64_bin.tar.gz\n```\n\n3.  配置环境变量，切换到 root 用户，然后编辑 `/etc/profile` 文件，添加如下内容（注意路径切换为你自己放置解压缩包后的位置）；\n\n```\nexport JAVA_HOME=/environment/jdk/jdk-11.0.9\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n### 1.2 验证\n\n安装好之后就是验证是否成功，一般我们用如下命令进行检测；\n\n```bash\n# 查看 jdk 版本\njava -version\n\n# 编译命令\njavac\n\n# 运行命令\njava\n```\n\n## 2. 安装 Halo\n\n### 2.1 下载 Halo 运行包\n\n要下载 Halo 运行包，可以通过两种方式，更推荐第二种，下载起来更快：\n\n1.  Github releases：https://github.com/halo-dev/halo/releases\n2.  Nova 提供的下载站：[https://dl.halo.run](https://dl.halo.run/)\n\n利用如下命令进行下载，以 1.4.2 版本为例，如果要下载其他版本，换版本号即可！\n\n```bash\nwget https://dl.halo.run/release/halo-1.4.2.jar\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/5762059b50b9a217169ca9ebc02b90bd.png)\n\n### 2.2 配置\n\n1.  下载配置文件（下载后的文件存放在 `~/.halo/application.yaml`）；\n\n```bash\ncurl -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml\n```\n\n2.  修改配置，参考 [官方文档](https://halo.run/archives/install-with-linux.html) 修改即可；\n\n```bash\nserver:\n  port: 8090\n\n  # Response data gzip.\n  compression:\n    enabled: false\nspring:\n  datasource:\n    # H2 database configuration.\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:~/.halo/db/halo\n    username: admin\n    password: 123456\n\n    # MySQL database configuration.\n  #    driver-class-name: com.mysql.cj.jdbc.Driver\n  #    url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n  #    username: root\n  #    password: 123456\n\n  # H2 database console configuration.\n  h2:\n    console:\n      settings:\n        web-allow-others: false\n      path: /h2-console\n      enabled: false\n\nhalo:\n  # Your admin client path is https://your-domain/{admin-path}\n  admin-path: admin\n\n  # memory or level\n  cache: memory\n```\n\n### 2.3 运行 Halo\n\n配置好 Java  环境，同时下载好 Halo 运行包之后，我们就可以使用如下命令运行了；\n\n```bash\njava -jar halo-latest.jar\n```\n\n然后在本地浏览器中访问如下地址即可；\n\n>   http://ip:8090\n\n## 3. 进阶配置\n\n### 3.1 开机自启\n\n1.  下载 Halo 官方 `service` 模板，然后对其进行修改（此时需要管理员权限）；\n\n```bash\nsudo curl -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service\n```\n\n2.  修改配置文件\n\n具体可以参考 [官方文档](https://halo.run/archives/install-with-linux.html)；\n\n需要注意的几点：\n\n-   填写你的 JDK 绝对路径；\n-   填写你的 Halo 运行包所在绝对路径；\n-   填写运行 Halo 服务的用户名；\n\n3.  测试\n\n```bash\n# 修改 service 后需要 Systemd\nsudo systemctl daemon-reload\n\n# 使 Halo 开机自启\nsudo systemctl enable halo\n\n# 启动 Halo\nsudo service halo start\n\n# 重启 Halo\nsudo service halo restart\n\n# 停止 Halo\nsudo service halo stop\n\n# 查看 Halo 的运行状态\nsudo service halo status\n```\n\n### 3.2 Halo 更新\n\nHalo 是一个活跃的社区，目前一直在开发迭代中，后续如果发布了新的版本，而我们又想要升级，这时候就可以按照如下步骤来进行操作了；\n\n1.  首先，我们需要对我们原有数据进行备份，防止丢失\n\n```bash\ncp -r ~/.halo ~/.halo.bak\n```\n\n2.  接着备份久的 Halo 安装包，防止新的安装包出现问题后无法回滚；\n\n```bash\nmv halo-latest.jar halo-latest.jar.bak\n```\n\n3.  做好备份工作之后，就是下载最新的 Halo 安装包了，其中 `{{verison}}` 对应最新版本号；\n\n```bash\nwget https://dl.halo.run/release/halo-{{version}}.jar -O halo-latest.jar\n```\n\n4.  测试一下最新版的 Halo 能否运行成功；\n\n```bash\njava -jar halo-latest.jar\n```\n\n5.  测试步骤如果成功了，那我们直接重启 Halo 服务就好了；\n\n```bash\nsudo service halo restart\n```\n\n## 4. 域名访问\n\n通过上面的配置之后，我们只能通过 `ip:port` 的方式进行访问，如果我们想让别人来访问，那么有一个域名就十分有必要了。在正式进行配置域名之前，需要确保如下几件准备工作：\n\n1.  Halo 已经能够正确运行，且运行端口不是 `80` 端口；\n2.  确保域名解析到服务器 IP，而且确保服务器已经备案（国内服务器都需要，国外无需）；\n3.  打开服务器的 `80` 和 `443` 端口；\n\n### 4.1 配置域名解析服务器 IP\n\n因为我的域名是在腾讯买的，所以这里以腾讯为例；\n\n1.  首先打开 [域名解析列表](https://console.cloud.tencent.com/cns)，并点击右侧解析进入解析界面；\n\n![](https://img-blog.csdnimg.cn/img_convert/bed2bee9316c15d75553b80522b8d686.png)\n\n2.  接着添加记录；\n\n![](https://img-blog.csdnimg.cn/img_convert/2726bb06b3ed74295099be252fe59ae7.png)\n\n添加如下两条记录，其他字段保持默认即可；\n\n| 主机记录 | 记录类型 | 记录值        |\n| -------- | -------- | ------------- |\n| `@`      | `A`      | 你的服务器 IP |\n| `www`    | `A`      | 你的服务器 IP |\n\n### 4.2 打开服务器对应端口\n\n1.  登录你的服务器，然后打开主机管理界面；\n2.  接着编辑防火墙，将需要打开的端口打开即可，一般打开如下的协议端口就可以了；\n\n-   ICMP\n-   3389\n-   80\n-   443\n-   21\n-   22\n-   8090\n\n![](https://img-blog.csdnimg.cn/img_convert/39a6d494380610a19da62949d7927967.png)\n\n### 4.4 利用 Nginx 进行反向代理\n\n1.  安装 Nginx\n\n```bash\nsudo apt-get install nginx\n```\n\n2.  设置开机自启动 Nginx\n\n```bash\nsystemctl enable nginx\n```\n\n3.  启动 Nginx\n\n```bash\nsudo service nginx start\n```\n\n4.  配置 Nginx\n\n首先下载 Halo 官方的 Nginx 配置模板；\n\n```bash\ncurl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf\n```\n\n然后对其进行修改；\n\n```bash\nsudo vim /etc/nginx/conf.d/halo.conf\n```\n\n只需要将其中的 `example.com` 修改成自己的域名即可，比如我的域名是 `cunyu1943.site`；\n\n```bash\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_set_header HOST $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        proxy_pass http://127.0.0.1:8090/;\n    }\n}\n```\n\n5.  自动配置 SSL 证书\n\n首先安装 certbot nginx 插件；\n\n```bash\nsudo apt-get install python-certbot-nginx\n```\n\n接着执行配置，过程中会询问为哪个域名添加证书，以及是否重定向，如实选择即可；\n\n```bash\nsudo certbot --nginx \n```\n\n![](https://img-blog.csdnimg.cn/img_convert/f44b8d7753c628576920afee7cb73c56.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ea59523b032883f42611d5e49c52513.png)\n\n最后，设置自动续约即可；\n\n```bash\nsudo certbot renew --dry-run\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/1bbb76ec98a28520bbb4b1b12fded507.png)\n\n6.  完成上述步骤之后，大功告成了，我们就可以通过自己的域名来访问自己的博客了，比如我的博客就是：\n\n>   https://cunyu1943.site\n\n## 5. 总结\n\n好了，经过上面的一系列设置，我们的博客就搭建完成了，是不是好简单的说，那就别犹豫，赶紧动手搞起来吧！\n\n最后再贴以下自己的博客地址，欢迎大家来留言，交换友链呀！\n\n>   https://cunyu1943.site\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】超详细-Halo-博客搭建教程.md","raw":"---\ntitle: 【效率为王】超详细 Halo 博客搭建教程\nmathjax: true\ntoc: true\ntags:\n  - 教程\n  - 博客\ncategories:\n  - 效率为王\nabbrlink: 16cb7ba0\ndate: 2021-05-04 11:04:11\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 0. 前言\n\n### 1.1 说在前面\n\n之前一直有在各大平台发布博客内容，然后个人博客一直使用的是 Hexo + Github Pages 的方式，但随着内容增多，Github Pages 访问的也不稳定，所以想着自己搞个服务器和域名搭个博客，最终选定 [Halo](https://halo.run/) 这个博客框架，搭建属于自己的博客。\n\n此内容从零到一手把手记录如何搭建，记录自己的搭建过程，也给后面的朋友们提供一个指南，少走些冤枉路，尽快上手。\n\n### 1.2 环境配置\n\n自己花了 210 左右在 UCloud 买了三年的服务器，然后在腾讯花了将近 200 买了个域名，服务器版本是 Ubuntu 18.04 64 位，理论上讲下面的配置适合于 Ubuntu 系所有版本，个别有出入的地方还请谅解。所以在正式开始之前，你需要满足以下几个条件：\n\n1.  一台 Ubuntu 系统的服务器（Centos 系统的参考 [官网教程](https://halo.run/archives/install-with-linux.html) 即可）；\n2.  一个域名；\n\n## 1. Java 环境配置\n\n### 1.1 安装\n\n1.  首先去 [官网](https://www.oracle.com/java/technologies/javase-downloads.html) 下载 JDK，选择自己想要的版本即可，一般推荐 JDK 1.8+ 的版本；\n\n![](https://img-blog.csdnimg.cn/img_convert/9edf4e765f7b9c1e7aa34c667f663557.png)\n\n2.  解压下载后的文件；\n\n```bash\ntar -zxvf jdk-11.0.9_linux-x64_bin.tar.gz\n```\n\n3.  配置环境变量，切换到 root 用户，然后编辑 `/etc/profile` 文件，添加如下内容（注意路径切换为你自己放置解压缩包后的位置）；\n\n```\nexport JAVA_HOME=/environment/jdk/jdk-11.0.9\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n### 1.2 验证\n\n安装好之后就是验证是否成功，一般我们用如下命令进行检测；\n\n```bash\n# 查看 jdk 版本\njava -version\n\n# 编译命令\njavac\n\n# 运行命令\njava\n```\n\n## 2. 安装 Halo\n\n### 2.1 下载 Halo 运行包\n\n要下载 Halo 运行包，可以通过两种方式，更推荐第二种，下载起来更快：\n\n1.  Github releases：https://github.com/halo-dev/halo/releases\n2.  Nova 提供的下载站：[https://dl.halo.run](https://dl.halo.run/)\n\n利用如下命令进行下载，以 1.4.2 版本为例，如果要下载其他版本，换版本号即可！\n\n```bash\nwget https://dl.halo.run/release/halo-1.4.2.jar\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/5762059b50b9a217169ca9ebc02b90bd.png)\n\n### 2.2 配置\n\n1.  下载配置文件（下载后的文件存放在 `~/.halo/application.yaml`）；\n\n```bash\ncurl -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml\n```\n\n2.  修改配置，参考 [官方文档](https://halo.run/archives/install-with-linux.html) 修改即可；\n\n```bash\nserver:\n  port: 8090\n\n  # Response data gzip.\n  compression:\n    enabled: false\nspring:\n  datasource:\n    # H2 database configuration.\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:~/.halo/db/halo\n    username: admin\n    password: 123456\n\n    # MySQL database configuration.\n  #    driver-class-name: com.mysql.cj.jdbc.Driver\n  #    url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n  #    username: root\n  #    password: 123456\n\n  # H2 database console configuration.\n  h2:\n    console:\n      settings:\n        web-allow-others: false\n      path: /h2-console\n      enabled: false\n\nhalo:\n  # Your admin client path is https://your-domain/{admin-path}\n  admin-path: admin\n\n  # memory or level\n  cache: memory\n```\n\n### 2.3 运行 Halo\n\n配置好 Java  环境，同时下载好 Halo 运行包之后，我们就可以使用如下命令运行了；\n\n```bash\njava -jar halo-latest.jar\n```\n\n然后在本地浏览器中访问如下地址即可；\n\n>   http://ip:8090\n\n## 3. 进阶配置\n\n### 3.1 开机自启\n\n1.  下载 Halo 官方 `service` 模板，然后对其进行修改（此时需要管理员权限）；\n\n```bash\nsudo curl -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service\n```\n\n2.  修改配置文件\n\n具体可以参考 [官方文档](https://halo.run/archives/install-with-linux.html)；\n\n需要注意的几点：\n\n-   填写你的 JDK 绝对路径；\n-   填写你的 Halo 运行包所在绝对路径；\n-   填写运行 Halo 服务的用户名；\n\n3.  测试\n\n```bash\n# 修改 service 后需要 Systemd\nsudo systemctl daemon-reload\n\n# 使 Halo 开机自启\nsudo systemctl enable halo\n\n# 启动 Halo\nsudo service halo start\n\n# 重启 Halo\nsudo service halo restart\n\n# 停止 Halo\nsudo service halo stop\n\n# 查看 Halo 的运行状态\nsudo service halo status\n```\n\n### 3.2 Halo 更新\n\nHalo 是一个活跃的社区，目前一直在开发迭代中，后续如果发布了新的版本，而我们又想要升级，这时候就可以按照如下步骤来进行操作了；\n\n1.  首先，我们需要对我们原有数据进行备份，防止丢失\n\n```bash\ncp -r ~/.halo ~/.halo.bak\n```\n\n2.  接着备份久的 Halo 安装包，防止新的安装包出现问题后无法回滚；\n\n```bash\nmv halo-latest.jar halo-latest.jar.bak\n```\n\n3.  做好备份工作之后，就是下载最新的 Halo 安装包了，其中 `{{verison}}` 对应最新版本号；\n\n```bash\nwget https://dl.halo.run/release/halo-{{version}}.jar -O halo-latest.jar\n```\n\n4.  测试一下最新版的 Halo 能否运行成功；\n\n```bash\njava -jar halo-latest.jar\n```\n\n5.  测试步骤如果成功了，那我们直接重启 Halo 服务就好了；\n\n```bash\nsudo service halo restart\n```\n\n## 4. 域名访问\n\n通过上面的配置之后，我们只能通过 `ip:port` 的方式进行访问，如果我们想让别人来访问，那么有一个域名就十分有必要了。在正式进行配置域名之前，需要确保如下几件准备工作：\n\n1.  Halo 已经能够正确运行，且运行端口不是 `80` 端口；\n2.  确保域名解析到服务器 IP，而且确保服务器已经备案（国内服务器都需要，国外无需）；\n3.  打开服务器的 `80` 和 `443` 端口；\n\n### 4.1 配置域名解析服务器 IP\n\n因为我的域名是在腾讯买的，所以这里以腾讯为例；\n\n1.  首先打开 [域名解析列表](https://console.cloud.tencent.com/cns)，并点击右侧解析进入解析界面；\n\n![](https://img-blog.csdnimg.cn/img_convert/bed2bee9316c15d75553b80522b8d686.png)\n\n2.  接着添加记录；\n\n![](https://img-blog.csdnimg.cn/img_convert/2726bb06b3ed74295099be252fe59ae7.png)\n\n添加如下两条记录，其他字段保持默认即可；\n\n| 主机记录 | 记录类型 | 记录值        |\n| -------- | -------- | ------------- |\n| `@`      | `A`      | 你的服务器 IP |\n| `www`    | `A`      | 你的服务器 IP |\n\n### 4.2 打开服务器对应端口\n\n1.  登录你的服务器，然后打开主机管理界面；\n2.  接着编辑防火墙，将需要打开的端口打开即可，一般打开如下的协议端口就可以了；\n\n-   ICMP\n-   3389\n-   80\n-   443\n-   21\n-   22\n-   8090\n\n![](https://img-blog.csdnimg.cn/img_convert/39a6d494380610a19da62949d7927967.png)\n\n### 4.4 利用 Nginx 进行反向代理\n\n1.  安装 Nginx\n\n```bash\nsudo apt-get install nginx\n```\n\n2.  设置开机自启动 Nginx\n\n```bash\nsystemctl enable nginx\n```\n\n3.  启动 Nginx\n\n```bash\nsudo service nginx start\n```\n\n4.  配置 Nginx\n\n首先下载 Halo 官方的 Nginx 配置模板；\n\n```bash\ncurl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf\n```\n\n然后对其进行修改；\n\n```bash\nsudo vim /etc/nginx/conf.d/halo.conf\n```\n\n只需要将其中的 `example.com` 修改成自己的域名即可，比如我的域名是 `cunyu1943.site`；\n\n```bash\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_set_header HOST $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        proxy_pass http://127.0.0.1:8090/;\n    }\n}\n```\n\n5.  自动配置 SSL 证书\n\n首先安装 certbot nginx 插件；\n\n```bash\nsudo apt-get install python-certbot-nginx\n```\n\n接着执行配置，过程中会询问为哪个域名添加证书，以及是否重定向，如实选择即可；\n\n```bash\nsudo certbot --nginx \n```\n\n![](https://img-blog.csdnimg.cn/img_convert/f44b8d7753c628576920afee7cb73c56.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/0ea59523b032883f42611d5e49c52513.png)\n\n最后，设置自动续约即可；\n\n```bash\nsudo certbot renew --dry-run\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/1bbb76ec98a28520bbb4b1b12fded507.png)\n\n6.  完成上述步骤之后，大功告成了，我们就可以通过自己的域名来访问自己的博客了，比如我的博客就是：\n\n>   https://cunyu1943.site\n\n## 5. 总结\n\n好了，经过上面的一系列设置，我们的博客就搭建完成了，是不是好简单的说，那就别犹豫，赶紧动手搞起来吧！\n\n最后再贴以下自己的博客地址，欢迎大家来留言，交换友链呀！\n\n>   https://cunyu1943.site\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】超详细-Halo-博客搭建教程","published":1,"updated":"2021-05-04T03:23:09.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw0b0024bw348nmid1ys","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h2><h3 id=\"1-1-说在前面\"><a href=\"#1-1-说在前面\" class=\"headerlink\" title=\"1.1 说在前面\"></a>1.1 说在前面</h3><p>之前一直有在各大平台发布博客内容，然后个人博客一直使用的是 Hexo + Github Pages 的方式，但随着内容增多，Github Pages 访问的也不稳定，所以想着自己搞个服务器和域名搭个博客，最终选定 <a href=\"https://halo.run/\">Halo</a> 这个博客框架，搭建属于自己的博客。</p>\n<p>此内容从零到一手把手记录如何搭建，记录自己的搭建过程，也给后面的朋友们提供一个指南，少走些冤枉路，尽快上手。</p>\n<h3 id=\"1-2-环境配置\"><a href=\"#1-2-环境配置\" class=\"headerlink\" title=\"1.2 环境配置\"></a>1.2 环境配置</h3><p>自己花了 210 左右在 UCloud 买了三年的服务器，然后在腾讯花了将近 200 买了个域名，服务器版本是 Ubuntu 18.04 64 位，理论上讲下面的配置适合于 Ubuntu 系所有版本，个别有出入的地方还请谅解。所以在正式开始之前，你需要满足以下几个条件：</p>\n<ol>\n<li>一台 Ubuntu 系统的服务器（Centos 系统的参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官网教程</a> 即可）；</li>\n<li>一个域名；</li>\n</ol>\n<h2 id=\"1-Java-环境配置\"><a href=\"#1-Java-环境配置\" class=\"headerlink\" title=\"1. Java 环境配置\"></a>1. Java 环境配置</h2><h3 id=\"1-1-安装\"><a href=\"#1-1-安装\" class=\"headerlink\" title=\"1.1 安装\"></a>1.1 安装</h3><ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\">官网</a> 下载 JDK，选择自己想要的版本即可，一般推荐 JDK 1.8+ 的版本；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9edf4e765f7b9c1e7aa34c667f663557.png\" alt=\"\"></p>\n<ol>\n<li>解压下载后的文件；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf jdk-11.0.9_linux-x64_bin.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>配置环境变量，切换到 root 用户，然后编辑 <code>/etc/profile</code> 文件，添加如下内容（注意路径切换为你自己放置解压缩包后的位置）；</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export JAVA_HOME=/environment/jdk/jdk-11.0.9\nexport PATH=$JAVA_HOME/bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-验证\"><a href=\"#1-2-验证\" class=\"headerlink\" title=\"1.2 验证\"></a>1.2 验证</h3><p>安装好之后就是验证是否成功，一般我们用如下命令进行检测；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 jdk 版本</span>\njava -version\n\n<span class=\"token comment\"># 编译命令</span>\njavac\n\n<span class=\"token comment\"># 运行命令</span>\njava<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-安装-Halo\"><a href=\"#2-安装-Halo\" class=\"headerlink\" title=\"2. 安装 Halo\"></a>2. 安装 Halo</h2><h3 id=\"2-1-下载-Halo-运行包\"><a href=\"#2-1-下载-Halo-运行包\" class=\"headerlink\" title=\"2.1 下载 Halo 运行包\"></a>2.1 下载 Halo 运行包</h3><p>要下载 Halo 运行包，可以通过两种方式，更推荐第二种，下载起来更快：</p>\n<ol>\n<li>Github releases：<a href=\"https://github.com/halo-dev/halo/releases\">https://github.com/halo-dev/halo/releases</a></li>\n<li>Nova 提供的下载站：<a href=\"https://dl.halo.run/\">https://dl.halo.run</a></li>\n</ol>\n<p>利用如下命令进行下载，以 1.4.2 版本为例，如果要下载其他版本，换版本号即可！</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.halo.run/release/halo-1.4.2.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5762059b50b9a217169ca9ebc02b90bd.png\" alt=\"\"></p>\n<h3 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h3><ol>\n<li>下载配置文件（下载后的文件存放在 <code>~/.halo/application.yaml</code>）；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>修改配置，参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官方文档</a> 修改即可；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server:\n  port: <span class=\"token number\">8090</span>\n\n  <span class=\"token comment\"># Response data gzip.</span>\n  compression:\n    enabled: <span class=\"token boolean\">false</span>\nspring:\n  datasource:\n    <span class=\"token comment\"># H2 database configuration.</span>\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:~/.halo/db/halo\n    username: admin\n    password: <span class=\"token number\">123456</span>\n\n    <span class=\"token comment\"># MySQL database configuration.</span>\n  <span class=\"token comment\">#    driver-class-name: com.mysql.cj.jdbc.Driver</span>\n  <span class=\"token comment\">#    url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span>\n  <span class=\"token comment\">#    username: root</span>\n  <span class=\"token comment\">#    password: 123456</span>\n\n  <span class=\"token comment\"># H2 database console configuration.</span>\n  h2:\n    console:\n      settings:\n        web-allow-others: <span class=\"token boolean\">false</span>\n      path: /h2-console\n      enabled: <span class=\"token boolean\">false</span>\n\nhalo:\n  <span class=\"token comment\"># Your admin client path is https://your-domain/{admin-path}</span>\n  admin-path: admin\n\n  <span class=\"token comment\"># memory or level</span>\n  cache: memory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3-运行-Halo\"><a href=\"#2-3-运行-Halo\" class=\"headerlink\" title=\"2.3 运行 Halo\"></a>2.3 运行 Halo</h3><p>配置好 Java  环境，同时下载好 Halo 运行包之后，我们就可以使用如下命令运行了；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -jar halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后在本地浏览器中访问如下地址即可；</p>\n<blockquote>\n<p>  <a href=\"http://ip:8090\">http://ip:8090</a></p>\n</blockquote>\n<h2 id=\"3-进阶配置\"><a href=\"#3-进阶配置\" class=\"headerlink\" title=\"3. 进阶配置\"></a>3. 进阶配置</h2><h3 id=\"3-1-开机自启\"><a href=\"#3-1-开机自启\" class=\"headerlink\" title=\"3.1 开机自启\"></a>3.1 开机自启</h3><ol>\n<li>下载 Halo 官方 <code>service</code> 模板，然后对其进行修改（此时需要管理员权限）；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>修改配置文件</li>\n</ol>\n<p>具体可以参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官方文档</a>；</p>\n<p>需要注意的几点：</p>\n<ul>\n<li>填写你的 JDK 绝对路径；</li>\n<li>填写你的 Halo 运行包所在绝对路径；</li>\n<li>填写运行 Halo 服务的用户名；</li>\n</ul>\n<ol>\n<li>测试</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 修改 service 后需要 Systemd</span>\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n\n<span class=\"token comment\"># 使 Halo 开机自启</span>\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> halo\n\n<span class=\"token comment\"># 启动 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo start\n\n<span class=\"token comment\"># 重启 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo restart\n\n<span class=\"token comment\"># 停止 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo stop\n\n<span class=\"token comment\"># 查看 Halo 的运行状态</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-2-Halo-更新\"><a href=\"#3-2-Halo-更新\" class=\"headerlink\" title=\"3.2 Halo 更新\"></a>3.2 Halo 更新</h3><p>Halo 是一个活跃的社区，目前一直在开发迭代中，后续如果发布了新的版本，而我们又想要升级，这时候就可以按照如下步骤来进行操作了；</p>\n<ol>\n<li>首先，我们需要对我们原有数据进行备份，防止丢失</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> -r ~/.halo ~/.halo.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>接着备份久的 Halo 安装包，防止新的安装包出现问题后无法回滚；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> halo-latest.jar halo-latest.jar.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>做好备份工作之后，就是下载最新的 Halo 安装包了，其中 <code>{{verison}}</code> 对应最新版本号；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.halo.run/release/halo-<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>.jar -O halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>测试一下最新版的 Halo 能否运行成功；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -jar halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>测试步骤如果成功了，那我们直接重启 Halo 服务就好了；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-域名访问\"><a href=\"#4-域名访问\" class=\"headerlink\" title=\"4. 域名访问\"></a>4. 域名访问</h2><p>通过上面的配置之后，我们只能通过 <code>ip:port</code> 的方式进行访问，如果我们想让别人来访问，那么有一个域名就十分有必要了。在正式进行配置域名之前，需要确保如下几件准备工作：</p>\n<ol>\n<li>Halo 已经能够正确运行，且运行端口不是 <code>80</code> 端口；</li>\n<li>确保域名解析到服务器 IP，而且确保服务器已经备案（国内服务器都需要，国外无需）；</li>\n<li>打开服务器的 <code>80</code> 和 <code>443</code> 端口；</li>\n</ol>\n<h3 id=\"4-1-配置域名解析服务器-IP\"><a href=\"#4-1-配置域名解析服务器-IP\" class=\"headerlink\" title=\"4.1 配置域名解析服务器 IP\"></a>4.1 配置域名解析服务器 IP</h3><p>因为我的域名是在腾讯买的，所以这里以腾讯为例；</p>\n<ol>\n<li>首先打开 <a href=\"https://console.cloud.tencent.com/cns\">域名解析列表</a>，并点击右侧解析进入解析界面；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bed2bee9316c15d75553b80522b8d686.png\" alt=\"\"></p>\n<ol>\n<li>接着添加记录；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2726bb06b3ed74295099be252fe59ae7.png\" alt=\"\"></p>\n<p>添加如下两条记录，其他字段保持默认即可；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>主机记录</th>\n<th>记录类型</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@</code></td>\n<td><code>A</code></td>\n<td>你的服务器 IP</td>\n</tr>\n<tr>\n<td><code>www</code></td>\n<td><code>A</code></td>\n<td>你的服务器 IP</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-2-打开服务器对应端口\"><a href=\"#4-2-打开服务器对应端口\" class=\"headerlink\" title=\"4.2 打开服务器对应端口\"></a>4.2 打开服务器对应端口</h3><ol>\n<li>登录你的服务器，然后打开主机管理界面；</li>\n<li>接着编辑防火墙，将需要打开的端口打开即可，一般打开如下的协议端口就可以了；</li>\n</ol>\n<ul>\n<li>ICMP</li>\n<li>3389</li>\n<li>80</li>\n<li>443</li>\n<li>21</li>\n<li>22</li>\n<li>8090</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/39a6d494380610a19da62949d7927967.png\" alt=\"\"></p>\n<h3 id=\"4-4-利用-Nginx-进行反向代理\"><a href=\"#4-4-利用-Nginx-进行反向代理\" class=\"headerlink\" title=\"4.4 利用 Nginx 进行反向代理\"></a>4.4 利用 Nginx 进行反向代理</h3><ol>\n<li>安装 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>设置开机自启动 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>启动 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>配置 Nginx</li>\n</ol>\n<p>首先下载 Halo 官方的 Nginx 配置模板；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后对其进行修改；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/nginx/conf.d/halo.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>只需要将其中的 <code>example.com</code> 修改成自己的域名即可，比如我的域名是 <code>cunyu1943.site</code>；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\n    server_name example.com www.example.com<span class=\"token punctuation\">;</span>\n\n    location / <span class=\"token punctuation\">{</span>\n        proxy_set_header HOST <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n        proxy_pass http://127.0.0.1:8090/<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>自动配置 SSL 证书</li>\n</ol>\n<p>首先安装 certbot nginx 插件；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python-certbot-nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接着执行配置，过程中会询问为哪个域名添加证书，以及是否重定向，如实选择即可；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot --nginx <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f44b8d7753c628576920afee7cb73c56.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ea59523b032883f42611d5e49c52513.png\" alt=\"\"></p>\n<p>最后，设置自动续约即可；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot renew --dry-run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1bbb76ec98a28520bbb4b1b12fded507.png\" alt=\"\"></p>\n<ol>\n<li>完成上述步骤之后，大功告成了，我们就可以通过自己的域名来访问自己的博客了，比如我的博客就是：</li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></p>\n</blockquote>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，经过上面的一系列设置，我们的博客就搭建完成了，是不是好简单的说，那就别犹豫，赶紧动手搞起来吧！</p>\n<p>最后再贴以下自己的博客地址，欢迎大家来留言，交换友链呀！</p>\n<blockquote>\n<p>  <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h2><h3 id=\"1-1-说在前面\"><a href=\"#1-1-说在前面\" class=\"headerlink\" title=\"1.1 说在前面\"></a>1.1 说在前面</h3><p>之前一直有在各大平台发布博客内容，然后个人博客一直使用的是 Hexo + Github Pages 的方式，但随着内容增多，Github Pages 访问的也不稳定，所以想着自己搞个服务器和域名搭个博客，最终选定 <a href=\"https://halo.run/\">Halo</a> 这个博客框架，搭建属于自己的博客。</p>\n<p>此内容从零到一手把手记录如何搭建，记录自己的搭建过程，也给后面的朋友们提供一个指南，少走些冤枉路，尽快上手。</p>\n<h3 id=\"1-2-环境配置\"><a href=\"#1-2-环境配置\" class=\"headerlink\" title=\"1.2 环境配置\"></a>1.2 环境配置</h3><p>自己花了 210 左右在 UCloud 买了三年的服务器，然后在腾讯花了将近 200 买了个域名，服务器版本是 Ubuntu 18.04 64 位，理论上讲下面的配置适合于 Ubuntu 系所有版本，个别有出入的地方还请谅解。所以在正式开始之前，你需要满足以下几个条件：</p>\n<ol>\n<li>一台 Ubuntu 系统的服务器（Centos 系统的参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官网教程</a> 即可）；</li>\n<li>一个域名；</li>\n</ol>\n<h2 id=\"1-Java-环境配置\"><a href=\"#1-Java-环境配置\" class=\"headerlink\" title=\"1. Java 环境配置\"></a>1. Java 环境配置</h2><h3 id=\"1-1-安装\"><a href=\"#1-1-安装\" class=\"headerlink\" title=\"1.1 安装\"></a>1.1 安装</h3><ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\">官网</a> 下载 JDK，选择自己想要的版本即可，一般推荐 JDK 1.8+ 的版本；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9edf4e765f7b9c1e7aa34c667f663557.png\" alt=\"\"></p>\n<ol>\n<li>解压下载后的文件；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf jdk-11.0.9_linux-x64_bin.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>配置环境变量，切换到 root 用户，然后编辑 <code>/etc/profile</code> 文件，添加如下内容（注意路径切换为你自己放置解压缩包后的位置）；</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export JAVA_HOME&#x3D;&#x2F;environment&#x2F;jdk&#x2F;jdk-11.0.9\nexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-验证\"><a href=\"#1-2-验证\" class=\"headerlink\" title=\"1.2 验证\"></a>1.2 验证</h3><p>安装好之后就是验证是否成功，一般我们用如下命令进行检测；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 jdk 版本</span>\njava -version\n\n<span class=\"token comment\"># 编译命令</span>\njavac\n\n<span class=\"token comment\"># 运行命令</span>\njava<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-安装-Halo\"><a href=\"#2-安装-Halo\" class=\"headerlink\" title=\"2. 安装 Halo\"></a>2. 安装 Halo</h2><h3 id=\"2-1-下载-Halo-运行包\"><a href=\"#2-1-下载-Halo-运行包\" class=\"headerlink\" title=\"2.1 下载 Halo 运行包\"></a>2.1 下载 Halo 运行包</h3><p>要下载 Halo 运行包，可以通过两种方式，更推荐第二种，下载起来更快：</p>\n<ol>\n<li>Github releases：<a href=\"https://github.com/halo-dev/halo/releases\">https://github.com/halo-dev/halo/releases</a></li>\n<li>Nova 提供的下载站：<a href=\"https://dl.halo.run/\">https://dl.halo.run</a></li>\n</ol>\n<p>利用如下命令进行下载，以 1.4.2 版本为例，如果要下载其他版本，换版本号即可！</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.halo.run/release/halo-1.4.2.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5762059b50b9a217169ca9ebc02b90bd.png\" alt=\"\"></p>\n<h3 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h3><ol>\n<li>下载配置文件（下载后的文件存放在 <code>~/.halo/application.yaml</code>）；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>修改配置，参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官方文档</a> 修改即可；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server:\n  port: <span class=\"token number\">8090</span>\n\n  <span class=\"token comment\"># Response data gzip.</span>\n  compression:\n    enabled: <span class=\"token boolean\">false</span>\nspring:\n  datasource:\n    <span class=\"token comment\"># H2 database configuration.</span>\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:~/.halo/db/halo\n    username: admin\n    password: <span class=\"token number\">123456</span>\n\n    <span class=\"token comment\"># MySQL database configuration.</span>\n  <span class=\"token comment\">#    driver-class-name: com.mysql.cj.jdbc.Driver</span>\n  <span class=\"token comment\">#    url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span>\n  <span class=\"token comment\">#    username: root</span>\n  <span class=\"token comment\">#    password: 123456</span>\n\n  <span class=\"token comment\"># H2 database console configuration.</span>\n  h2:\n    console:\n      settings:\n        web-allow-others: <span class=\"token boolean\">false</span>\n      path: /h2-console\n      enabled: <span class=\"token boolean\">false</span>\n\nhalo:\n  <span class=\"token comment\"># Your admin client path is https://your-domain/&#123;admin-path&#125;</span>\n  admin-path: admin\n\n  <span class=\"token comment\"># memory or level</span>\n  cache: memory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3-运行-Halo\"><a href=\"#2-3-运行-Halo\" class=\"headerlink\" title=\"2.3 运行 Halo\"></a>2.3 运行 Halo</h3><p>配置好 Java  环境，同时下载好 Halo 运行包之后，我们就可以使用如下命令运行了；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -jar halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后在本地浏览器中访问如下地址即可；</p>\n<blockquote>\n<p>  <a href=\"http://ip:8090\">http://ip:8090</a></p>\n</blockquote>\n<h2 id=\"3-进阶配置\"><a href=\"#3-进阶配置\" class=\"headerlink\" title=\"3. 进阶配置\"></a>3. 进阶配置</h2><h3 id=\"3-1-开机自启\"><a href=\"#3-1-开机自启\" class=\"headerlink\" title=\"3.1 开机自启\"></a>3.1 开机自启</h3><ol>\n<li>下载 Halo 官方 <code>service</code> 模板，然后对其进行修改（此时需要管理员权限）；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>修改配置文件</li>\n</ol>\n<p>具体可以参考 <a href=\"https://halo.run/archives/install-with-linux.html\">官方文档</a>；</p>\n<p>需要注意的几点：</p>\n<ul>\n<li>填写你的 JDK 绝对路径；</li>\n<li>填写你的 Halo 运行包所在绝对路径；</li>\n<li>填写运行 Halo 服务的用户名；</li>\n</ul>\n<ol>\n<li>测试</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 修改 service 后需要 Systemd</span>\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n\n<span class=\"token comment\"># 使 Halo 开机自启</span>\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> halo\n\n<span class=\"token comment\"># 启动 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo start\n\n<span class=\"token comment\"># 重启 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo restart\n\n<span class=\"token comment\"># 停止 Halo</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo stop\n\n<span class=\"token comment\"># 查看 Halo 的运行状态</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-2-Halo-更新\"><a href=\"#3-2-Halo-更新\" class=\"headerlink\" title=\"3.2 Halo 更新\"></a>3.2 Halo 更新</h3><p>Halo 是一个活跃的社区，目前一直在开发迭代中，后续如果发布了新的版本，而我们又想要升级，这时候就可以按照如下步骤来进行操作了；</p>\n<ol>\n<li>首先，我们需要对我们原有数据进行备份，防止丢失</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> -r ~/.halo ~/.halo.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>接着备份久的 Halo 安装包，防止新的安装包出现问题后无法回滚；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> halo-latest.jar halo-latest.jar.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>做好备份工作之后，就是下载最新的 Halo 安装包了，其中 <code>&#123;&#123;verison&#125;&#125;</code> 对应最新版本号；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.halo.run/release/halo-<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>version<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>.jar -O halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>测试一下最新版的 Halo 能否运行成功；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -jar halo-latest.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>测试步骤如果成功了，那我们直接重启 Halo 服务就好了；</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> halo restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-域名访问\"><a href=\"#4-域名访问\" class=\"headerlink\" title=\"4. 域名访问\"></a>4. 域名访问</h2><p>通过上面的配置之后，我们只能通过 <code>ip:port</code> 的方式进行访问，如果我们想让别人来访问，那么有一个域名就十分有必要了。在正式进行配置域名之前，需要确保如下几件准备工作：</p>\n<ol>\n<li>Halo 已经能够正确运行，且运行端口不是 <code>80</code> 端口；</li>\n<li>确保域名解析到服务器 IP，而且确保服务器已经备案（国内服务器都需要，国外无需）；</li>\n<li>打开服务器的 <code>80</code> 和 <code>443</code> 端口；</li>\n</ol>\n<h3 id=\"4-1-配置域名解析服务器-IP\"><a href=\"#4-1-配置域名解析服务器-IP\" class=\"headerlink\" title=\"4.1 配置域名解析服务器 IP\"></a>4.1 配置域名解析服务器 IP</h3><p>因为我的域名是在腾讯买的，所以这里以腾讯为例；</p>\n<ol>\n<li>首先打开 <a href=\"https://console.cloud.tencent.com/cns\">域名解析列表</a>，并点击右侧解析进入解析界面；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bed2bee9316c15d75553b80522b8d686.png\" alt=\"\"></p>\n<ol>\n<li>接着添加记录；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2726bb06b3ed74295099be252fe59ae7.png\" alt=\"\"></p>\n<p>添加如下两条记录，其他字段保持默认即可；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>主机记录</th>\n<th>记录类型</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@</code></td>\n<td><code>A</code></td>\n<td>你的服务器 IP</td>\n</tr>\n<tr>\n<td><code>www</code></td>\n<td><code>A</code></td>\n<td>你的服务器 IP</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-2-打开服务器对应端口\"><a href=\"#4-2-打开服务器对应端口\" class=\"headerlink\" title=\"4.2 打开服务器对应端口\"></a>4.2 打开服务器对应端口</h3><ol>\n<li>登录你的服务器，然后打开主机管理界面；</li>\n<li>接着编辑防火墙，将需要打开的端口打开即可，一般打开如下的协议端口就可以了；</li>\n</ol>\n<ul>\n<li>ICMP</li>\n<li>3389</li>\n<li>80</li>\n<li>443</li>\n<li>21</li>\n<li>22</li>\n<li>8090</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/39a6d494380610a19da62949d7927967.png\" alt=\"\"></p>\n<h3 id=\"4-4-利用-Nginx-进行反向代理\"><a href=\"#4-4-利用-Nginx-进行反向代理\" class=\"headerlink\" title=\"4.4 利用 Nginx 进行反向代理\"></a>4.4 利用 Nginx 进行反向代理</h3><ol>\n<li>安装 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>设置开机自启动 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>启动 Nginx</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>配置 Nginx</li>\n</ol>\n<p>首先下载 Halo 官方的 Nginx 配置模板；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后对其进行修改；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/nginx/conf.d/halo.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>只需要将其中的 <code>example.com</code> 修改成自己的域名即可，比如我的域名是 <code>cunyu1943.site</code>；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\n    server_name example.com www.example.com<span class=\"token punctuation\">;</span>\n\n    location / <span class=\"token punctuation\">&#123;</span>\n        proxy_set_header HOST <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n        proxy_pass http://127.0.0.1:8090/<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>自动配置 SSL 证书</li>\n</ol>\n<p>首先安装 certbot nginx 插件；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python-certbot-nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接着执行配置，过程中会询问为哪个域名添加证书，以及是否重定向，如实选择即可；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot --nginx <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f44b8d7753c628576920afee7cb73c56.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ea59523b032883f42611d5e49c52513.png\" alt=\"\"></p>\n<p>最后，设置自动续约即可；</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot renew --dry-run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1bbb76ec98a28520bbb4b1b12fded507.png\" alt=\"\"></p>\n<ol>\n<li>完成上述步骤之后，大功告成了，我们就可以通过自己的域名来访问自己的博客了，比如我的博客就是：</li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></p>\n</blockquote>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，经过上面的一系列设置，我们的博客就搭建完成了，是不是好简单的说，那就别犹豫，赶紧动手搞起来吧！</p>\n<p>最后再贴以下自己的博客地址，欢迎大家来留言，交换友链呀！</p>\n<blockquote>\n<p>  <a href=\"https://cunyu1943.site\">https://cunyu1943.site</a></p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【效率为王】还在花冤枉钱找人做电子签名？看这儿，教你制作纯手写电子签名","mathjax":true,"toc":true,"abbrlink":"df5721f6","date":"2021-05-04T01:51:19.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n>   PS：白色背景版和透明背景版可能在某些平台预览效果一样，但实际上是不同的，大家自己尝试就清楚了。\n\n## 前言\n\n受疫情的影响，网上办公已经成为一种大趋势。而在网上办公时，也存在一些不方便的地方，比如需要签名的地方我们应该怎么办呢？这时候就需要制作我们的电子签名，而今天文章的主要内容就是教大家如何制作自己的电子签名，主要分为：\n\n1.  **PPT 制作电子签名**\n2.  **PS 制作电子签名**\n\n\n\n## PPT 制作电子签名\n\n这是一种十分简单地方法了，只需要我们电脑上装了 Office 中的 PowerPoint 即可，以下就是具体的制作过程。\n\n### 准备工作\n\n-   PowerPoint\n-   一张有你手写签名的照片\n\n### 制作过程\n\n1.  新建 PPT 并导入图片\n\n打开 PowerPoint，新建一个空白文档，然后在 `插入 -> 图片 -> 插入图片来自本设备`；\n\n![](https://img-blog.csdnimg.cn/img_convert/d6d39e83a478354b87d7eeb3749ec90c.png)\n\n2.  图片旋转裁剪\n\n具体步骤是，选中导入的图片，然后在 `图片格式` 下边进行旋转和裁剪，讲你的签名摆正，并裁减到只剩下你的签名；\n\n![旋转正置](https://img-blog.csdnimg.cn/img_convert/a75e1f7a2f6fe352430e4047c01fedd7.png)\n\n![裁剪](https://img-blog.csdnimg.cn/img_convert/c6dd0a7af3094d241a747bb8e02a7e86.png)\n\n3.  对比度设置\n\n选中图片右键，然后选择 **设置图片格式**，然后在 **图片校正** 下将对比度设置为最大 100%。\n\n![](https://img-blog.csdnimg.cn/img_convert/d275288f0d4535ad0485bfd044ae43a8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/44a22e469329a2c03462581512ebffe2.png)\n\n4.  保存签名\n\n此时我们就得到我们的签名，可以看到我们的效果还是蛮好的。\n\n![](https://img-blog.csdnimg.cn/img_convert/fad47686398ba51d821707dea848e0d5.png)\n\n同样的，选中图片右键，然后选择 **另存为图片** 即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/26ccae17342aad7cefaa01f0911680b1.png)\n\n5.  效果优化\n\n到上一步我们的电子签名就已经做好了，但是我们会发现这个时候的签名底色是纯白的，这时候就不太方便了，我们希望它的底色是透明度，方便嵌入到不同的文档，具体操作步骤如下：\n\n选中图片，然后在 **图片格式** 下选中 **颜色** 中的 **设置透明色**，然后再次点击我们的签名，此时我们的签名就是透明的了。接着就是保存了，保存步骤同 4.\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/8edc0ce23795dabec68575155858bbab.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/917c8e6a122ab7418482fabab6bd77dc.png)\n\n### 效果对比\n\n![纯色背景版](https://img-blog.csdnimg.cn/img_convert/d5d858644f8aca78e6208b5e5203c383.png)\n![透明背景版](https://img-blog.csdnimg.cn/img_convert/fd92f95f135601b6bf3e51019a0d38ca.png)\n\n## PS 制作电子签名\n\n### 准备工作\n\n-   Photoshop（也可以利用在线版 PS）\n\n-   一张有你手写签名的照片\n\n### 制作过程\n\n1.  导入图片\n\n![](https://img-blog.csdnimg.cn/img_convert/821c128314f356fa733294a824859113.png)\n\n2.  提取签字区域\n\n依次打开工具栏的 **选择 -> 色彩范围**；\n\n![](https://img-blog.csdnimg.cn/img_convert/8ac730969fec656e5f3f87d6fc2948fc.png)\n\n接着选择左侧工具栏中的 **吸管**，然后点选签字的黑色区域，得到下图的效果；\n\n![](https://img-blog.csdnimg.cn/img_convert/d313ec7fdaa00afd52b66906a7f8ca02.png)\n\n然后利用快捷键 **Ctrl + J** 创建一个新的图层，然后点击 `Background` 前边的小眼睛，把它给隐藏掉，就得到我们的图层 1 的视图；\n\n![](https://img-blog.csdnimg.cn/img_convert/e8a278084341f745c18011a8b027e8e3.png)\n\n3.  保存签名\n\n完成上面的步骤之后，点击 **文件 -> 导出为 **，选择你想要导出的格式即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/106487dea7ff428aa19fbfef8fb92c99.png)\n\n以导出 `png` 为例，我们还可以设置导出的宽度和高度，以及导出的质量，然后点击保存即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/1ec9adeca00283b77e4da6b49359b38f.png)\n\n### 效果预览\n\n![](https://img-blog.csdnimg.cn/img_convert/9619137bd4d1a911fc740360c92946f6.png)\n\n## 总结\n\n好了，以上就是今天文章的主要内容了，主要介绍了两种制作电子签名的方式。如果文中的内容对你也有用，那就点赞关注一波吧。\n\n如果你有更好的制作方法，也可以在评论区中评论，大家一起交流！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【效率为王】还在花冤枉钱找人做电子签名？看这儿，教你制作纯手写电子签名.md","raw":"---\ntitle: 【效率为王】还在花冤枉钱找人做电子签名？看这儿，教你制作纯手写电子签名\nmathjax: true\ntoc: true\ntags:\n  - 教程\ncategories:\n  - 效率为王\nabbrlink: df5721f6\ndate: 2021-05-04 09:51:19\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n>   PS：白色背景版和透明背景版可能在某些平台预览效果一样，但实际上是不同的，大家自己尝试就清楚了。\n\n## 前言\n\n受疫情的影响，网上办公已经成为一种大趋势。而在网上办公时，也存在一些不方便的地方，比如需要签名的地方我们应该怎么办呢？这时候就需要制作我们的电子签名，而今天文章的主要内容就是教大家如何制作自己的电子签名，主要分为：\n\n1.  **PPT 制作电子签名**\n2.  **PS 制作电子签名**\n\n\n\n## PPT 制作电子签名\n\n这是一种十分简单地方法了，只需要我们电脑上装了 Office 中的 PowerPoint 即可，以下就是具体的制作过程。\n\n### 准备工作\n\n-   PowerPoint\n-   一张有你手写签名的照片\n\n### 制作过程\n\n1.  新建 PPT 并导入图片\n\n打开 PowerPoint，新建一个空白文档，然后在 `插入 -> 图片 -> 插入图片来自本设备`；\n\n![](https://img-blog.csdnimg.cn/img_convert/d6d39e83a478354b87d7eeb3749ec90c.png)\n\n2.  图片旋转裁剪\n\n具体步骤是，选中导入的图片，然后在 `图片格式` 下边进行旋转和裁剪，讲你的签名摆正，并裁减到只剩下你的签名；\n\n![旋转正置](https://img-blog.csdnimg.cn/img_convert/a75e1f7a2f6fe352430e4047c01fedd7.png)\n\n![裁剪](https://img-blog.csdnimg.cn/img_convert/c6dd0a7af3094d241a747bb8e02a7e86.png)\n\n3.  对比度设置\n\n选中图片右键，然后选择 **设置图片格式**，然后在 **图片校正** 下将对比度设置为最大 100%。\n\n![](https://img-blog.csdnimg.cn/img_convert/d275288f0d4535ad0485bfd044ae43a8.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/44a22e469329a2c03462581512ebffe2.png)\n\n4.  保存签名\n\n此时我们就得到我们的签名，可以看到我们的效果还是蛮好的。\n\n![](https://img-blog.csdnimg.cn/img_convert/fad47686398ba51d821707dea848e0d5.png)\n\n同样的，选中图片右键，然后选择 **另存为图片** 即可。\n\n![](https://img-blog.csdnimg.cn/img_convert/26ccae17342aad7cefaa01f0911680b1.png)\n\n5.  效果优化\n\n到上一步我们的电子签名就已经做好了，但是我们会发现这个时候的签名底色是纯白的，这时候就不太方便了，我们希望它的底色是透明度，方便嵌入到不同的文档，具体操作步骤如下：\n\n选中图片，然后在 **图片格式** 下选中 **颜色** 中的 **设置透明色**，然后再次点击我们的签名，此时我们的签名就是透明的了。接着就是保存了，保存步骤同 4.\n\n\n\n![](https://img-blog.csdnimg.cn/img_convert/8edc0ce23795dabec68575155858bbab.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/917c8e6a122ab7418482fabab6bd77dc.png)\n\n### 效果对比\n\n![纯色背景版](https://img-blog.csdnimg.cn/img_convert/d5d858644f8aca78e6208b5e5203c383.png)\n![透明背景版](https://img-blog.csdnimg.cn/img_convert/fd92f95f135601b6bf3e51019a0d38ca.png)\n\n## PS 制作电子签名\n\n### 准备工作\n\n-   Photoshop（也可以利用在线版 PS）\n\n-   一张有你手写签名的照片\n\n### 制作过程\n\n1.  导入图片\n\n![](https://img-blog.csdnimg.cn/img_convert/821c128314f356fa733294a824859113.png)\n\n2.  提取签字区域\n\n依次打开工具栏的 **选择 -> 色彩范围**；\n\n![](https://img-blog.csdnimg.cn/img_convert/8ac730969fec656e5f3f87d6fc2948fc.png)\n\n接着选择左侧工具栏中的 **吸管**，然后点选签字的黑色区域，得到下图的效果；\n\n![](https://img-blog.csdnimg.cn/img_convert/d313ec7fdaa00afd52b66906a7f8ca02.png)\n\n然后利用快捷键 **Ctrl + J** 创建一个新的图层，然后点击 `Background` 前边的小眼睛，把它给隐藏掉，就得到我们的图层 1 的视图；\n\n![](https://img-blog.csdnimg.cn/img_convert/e8a278084341f745c18011a8b027e8e3.png)\n\n3.  保存签名\n\n完成上面的步骤之后，点击 **文件 -> 导出为 **，选择你想要导出的格式即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/106487dea7ff428aa19fbfef8fb92c99.png)\n\n以导出 `png` 为例，我们还可以设置导出的宽度和高度，以及导出的质量，然后点击保存即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/1ec9adeca00283b77e4da6b49359b38f.png)\n\n### 效果预览\n\n![](https://img-blog.csdnimg.cn/img_convert/9619137bd4d1a911fc740360c92946f6.png)\n\n## 总结\n\n好了，以上就是今天文章的主要内容了，主要介绍了两种制作电子签名的方式。如果文中的内容对你也有用，那就点赞关注一波吧。\n\n如果你有更好的制作方法，也可以在评论区中评论，大家一起交流！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【效率为王】还在花冤枉钱找人做电子签名？看这儿，教你制作纯手写电子签名","published":1,"updated":"2021-05-04T01:52:52.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw150044bw34am014mh7","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n<p>  PS：白色背景版和透明背景版可能在某些平台预览效果一样，但实际上是不同的，大家自己尝试就清楚了。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>受疫情的影响，网上办公已经成为一种大趋势。而在网上办公时，也存在一些不方便的地方，比如需要签名的地方我们应该怎么办呢？这时候就需要制作我们的电子签名，而今天文章的主要内容就是教大家如何制作自己的电子签名，主要分为：</p>\n<ol>\n<li><strong>PPT 制作电子签名</strong></li>\n<li><strong>PS 制作电子签名</strong></li>\n</ol>\n<h2 id=\"PPT-制作电子签名\"><a href=\"#PPT-制作电子签名\" class=\"headerlink\" title=\"PPT 制作电子签名\"></a>PPT 制作电子签名</h2><p>这是一种十分简单地方法了，只需要我们电脑上装了 Office 中的 PowerPoint 即可，以下就是具体的制作过程。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>PowerPoint</li>\n<li>一张有你手写签名的照片</li>\n</ul>\n<h3 id=\"制作过程\"><a href=\"#制作过程\" class=\"headerlink\" title=\"制作过程\"></a>制作过程</h3><ol>\n<li>新建 PPT 并导入图片</li>\n</ol>\n<p>打开 PowerPoint，新建一个空白文档，然后在 <code>插入 -&gt; 图片 -&gt; 插入图片来自本设备</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6d39e83a478354b87d7eeb3749ec90c.png\" alt=\"\"></p>\n<ol>\n<li>图片旋转裁剪</li>\n</ol>\n<p>具体步骤是，选中导入的图片，然后在 <code>图片格式</code> 下边进行旋转和裁剪，讲你的签名摆正，并裁减到只剩下你的签名；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a75e1f7a2f6fe352430e4047c01fedd7.png\" alt=\"旋转正置\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c6dd0a7af3094d241a747bb8e02a7e86.png\" alt=\"裁剪\"></p>\n<ol>\n<li>对比度设置</li>\n</ol>\n<p>选中图片右键，然后选择 <strong>设置图片格式</strong>，然后在 <strong>图片校正</strong> 下将对比度设置为最大 100%。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d275288f0d4535ad0485bfd044ae43a8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44a22e469329a2c03462581512ebffe2.png\" alt=\"\"></p>\n<ol>\n<li>保存签名</li>\n</ol>\n<p>此时我们就得到我们的签名，可以看到我们的效果还是蛮好的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fad47686398ba51d821707dea848e0d5.png\" alt=\"\"></p>\n<p>同样的，选中图片右键，然后选择 <strong>另存为图片</strong> 即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/26ccae17342aad7cefaa01f0911680b1.png\" alt=\"\"></p>\n<ol>\n<li>效果优化</li>\n</ol>\n<p>到上一步我们的电子签名就已经做好了，但是我们会发现这个时候的签名底色是纯白的，这时候就不太方便了，我们希望它的底色是透明度，方便嵌入到不同的文档，具体操作步骤如下：</p>\n<p>选中图片，然后在 <strong>图片格式</strong> 下选中 <strong>颜色</strong> 中的 <strong>设置透明色</strong>，然后再次点击我们的签名，此时我们的签名就是透明的了。接着就是保存了，保存步骤同 4.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8edc0ce23795dabec68575155858bbab.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/917c8e6a122ab7418482fabab6bd77dc.png\" alt=\"\"></p>\n<h3 id=\"效果对比\"><a href=\"#效果对比\" class=\"headerlink\" title=\"效果对比\"></a>效果对比</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/d5d858644f8aca78e6208b5e5203c383.png\" alt=\"纯色背景版\"><br><img src=\"https://img-blog.csdnimg.cn/img_convert/fd92f95f135601b6bf3e51019a0d38ca.png\" alt=\"透明背景版\"></p>\n<h2 id=\"PS-制作电子签名\"><a href=\"#PS-制作电子签名\" class=\"headerlink\" title=\"PS 制作电子签名\"></a>PS 制作电子签名</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>Photoshop（也可以利用在线版 PS）</p>\n</li>\n<li><p>一张有你手写签名的照片</p>\n</li>\n</ul>\n<h3 id=\"制作过程-1\"><a href=\"#制作过程-1\" class=\"headerlink\" title=\"制作过程\"></a>制作过程</h3><ol>\n<li>导入图片</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/821c128314f356fa733294a824859113.png\" alt=\"\"></p>\n<ol>\n<li>提取签字区域</li>\n</ol>\n<p>依次打开工具栏的 <strong>选择 -&gt; 色彩范围</strong>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8ac730969fec656e5f3f87d6fc2948fc.png\" alt=\"\"></p>\n<p>接着选择左侧工具栏中的 <strong>吸管</strong>，然后点选签字的黑色区域，得到下图的效果；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d313ec7fdaa00afd52b66906a7f8ca02.png\" alt=\"\"></p>\n<p>然后利用快捷键 <strong>Ctrl + J</strong> 创建一个新的图层，然后点击 <code>Background</code> 前边的小眼睛，把它给隐藏掉，就得到我们的图层 1 的视图；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e8a278084341f745c18011a8b027e8e3.png\" alt=\"\"></p>\n<ol>\n<li>保存签名</li>\n</ol>\n<p>完成上面的步骤之后，点击 <strong>文件 -&gt; 导出为 </strong>，选择你想要导出的格式即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/106487dea7ff428aa19fbfef8fb92c99.png\" alt=\"\"></p>\n<p>以导出 <code>png</code> 为例，我们还可以设置导出的宽度和高度，以及导出的质量，然后点击保存即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ec9adeca00283b77e4da6b49359b38f.png\" alt=\"\"></p>\n<h3 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/9619137bd4d1a911fc740360c92946f6.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，以上就是今天文章的主要内容了，主要介绍了两种制作电子签名的方式。如果文中的内容对你也有用，那就点赞关注一波吧。</p>\n<p>如果你有更好的制作方法，也可以在评论区中评论，大家一起交流！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n<p>  PS：白色背景版和透明背景版可能在某些平台预览效果一样，但实际上是不同的，大家自己尝试就清楚了。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>受疫情的影响，网上办公已经成为一种大趋势。而在网上办公时，也存在一些不方便的地方，比如需要签名的地方我们应该怎么办呢？这时候就需要制作我们的电子签名，而今天文章的主要内容就是教大家如何制作自己的电子签名，主要分为：</p>\n<ol>\n<li><strong>PPT 制作电子签名</strong></li>\n<li><strong>PS 制作电子签名</strong></li>\n</ol>\n<h2 id=\"PPT-制作电子签名\"><a href=\"#PPT-制作电子签名\" class=\"headerlink\" title=\"PPT 制作电子签名\"></a>PPT 制作电子签名</h2><p>这是一种十分简单地方法了，只需要我们电脑上装了 Office 中的 PowerPoint 即可，以下就是具体的制作过程。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>PowerPoint</li>\n<li>一张有你手写签名的照片</li>\n</ul>\n<h3 id=\"制作过程\"><a href=\"#制作过程\" class=\"headerlink\" title=\"制作过程\"></a>制作过程</h3><ol>\n<li>新建 PPT 并导入图片</li>\n</ol>\n<p>打开 PowerPoint，新建一个空白文档，然后在 <code>插入 -&gt; 图片 -&gt; 插入图片来自本设备</code>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6d39e83a478354b87d7eeb3749ec90c.png\" alt=\"\"></p>\n<ol>\n<li>图片旋转裁剪</li>\n</ol>\n<p>具体步骤是，选中导入的图片，然后在 <code>图片格式</code> 下边进行旋转和裁剪，讲你的签名摆正，并裁减到只剩下你的签名；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a75e1f7a2f6fe352430e4047c01fedd7.png\" alt=\"旋转正置\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c6dd0a7af3094d241a747bb8e02a7e86.png\" alt=\"裁剪\"></p>\n<ol>\n<li>对比度设置</li>\n</ol>\n<p>选中图片右键，然后选择 <strong>设置图片格式</strong>，然后在 <strong>图片校正</strong> 下将对比度设置为最大 100%。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d275288f0d4535ad0485bfd044ae43a8.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44a22e469329a2c03462581512ebffe2.png\" alt=\"\"></p>\n<ol>\n<li>保存签名</li>\n</ol>\n<p>此时我们就得到我们的签名，可以看到我们的效果还是蛮好的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fad47686398ba51d821707dea848e0d5.png\" alt=\"\"></p>\n<p>同样的，选中图片右键，然后选择 <strong>另存为图片</strong> 即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/26ccae17342aad7cefaa01f0911680b1.png\" alt=\"\"></p>\n<ol>\n<li>效果优化</li>\n</ol>\n<p>到上一步我们的电子签名就已经做好了，但是我们会发现这个时候的签名底色是纯白的，这时候就不太方便了，我们希望它的底色是透明度，方便嵌入到不同的文档，具体操作步骤如下：</p>\n<p>选中图片，然后在 <strong>图片格式</strong> 下选中 <strong>颜色</strong> 中的 <strong>设置透明色</strong>，然后再次点击我们的签名，此时我们的签名就是透明的了。接着就是保存了，保存步骤同 4.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8edc0ce23795dabec68575155858bbab.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/917c8e6a122ab7418482fabab6bd77dc.png\" alt=\"\"></p>\n<h3 id=\"效果对比\"><a href=\"#效果对比\" class=\"headerlink\" title=\"效果对比\"></a>效果对比</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/d5d858644f8aca78e6208b5e5203c383.png\" alt=\"纯色背景版\"><br><img src=\"https://img-blog.csdnimg.cn/img_convert/fd92f95f135601b6bf3e51019a0d38ca.png\" alt=\"透明背景版\"></p>\n<h2 id=\"PS-制作电子签名\"><a href=\"#PS-制作电子签名\" class=\"headerlink\" title=\"PS 制作电子签名\"></a>PS 制作电子签名</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>Photoshop（也可以利用在线版 PS）</p>\n</li>\n<li><p>一张有你手写签名的照片</p>\n</li>\n</ul>\n<h3 id=\"制作过程-1\"><a href=\"#制作过程-1\" class=\"headerlink\" title=\"制作过程\"></a>制作过程</h3><ol>\n<li>导入图片</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/821c128314f356fa733294a824859113.png\" alt=\"\"></p>\n<ol>\n<li>提取签字区域</li>\n</ol>\n<p>依次打开工具栏的 <strong>选择 -&gt; 色彩范围</strong>；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8ac730969fec656e5f3f87d6fc2948fc.png\" alt=\"\"></p>\n<p>接着选择左侧工具栏中的 <strong>吸管</strong>，然后点选签字的黑色区域，得到下图的效果；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d313ec7fdaa00afd52b66906a7f8ca02.png\" alt=\"\"></p>\n<p>然后利用快捷键 <strong>Ctrl + J</strong> 创建一个新的图层，然后点击 <code>Background</code> 前边的小眼睛，把它给隐藏掉，就得到我们的图层 1 的视图；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e8a278084341f745c18011a8b027e8e3.png\" alt=\"\"></p>\n<ol>\n<li>保存签名</li>\n</ol>\n<p>完成上面的步骤之后，点击 <strong>文件 -&gt; 导出为 </strong>，选择你想要导出的格式即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/106487dea7ff428aa19fbfef8fb92c99.png\" alt=\"\"></p>\n<p>以导出 <code>png</code> 为例，我们还可以设置导出的宽度和高度，以及导出的质量，然后点击保存即可；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ec9adeca00283b77e4da6b49359b38f.png\" alt=\"\"></p>\n<h3 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/9619137bd4d1a911fc740360c92946f6.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，以上就是今天文章的主要内容了，主要介绍了两种制作电子签名的方式。如果文中的内容对你也有用，那就点赞关注一波吧。</p>\n<p>如果你有更好的制作方法，也可以在评论区中评论，大家一起交流！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【资源分享】发现 3 个 Github 项目，超赞！","mathjax":true,"toc":true,"abbrlink":"4ee7faf9","date":"2021-05-04T03:20:14.000Z","top":true,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n说起 Github，大家可能都觉得那只是程序员的聚集地。今天就要告诉大家，Github 不仅仅是 Coder 们的专属，它同时也是一个巨大的资源宝库！\n\n由于我也算是个半吊子的程序员了，所以用 Github 也算久的了，然后今天就给大家安利提高效率的三个项目，希望大家通过它们能够解决自己工作生活中的一些小痛点，提升大家的效率。\n\n最后，如果你也用 Github 的话，给个 **Star** 鼓励鼓励作者吧，让作者更有动力一直更新下去！\n\n那么首先在这里贴出项目的地址：\n\n1.  [电子书下载](https://github.com/cunyu1943/amazing-books)\n2.  [好用高效的软件推荐](https://github.com/cunyu1943/amazing-softwares)\n3.  [各种神奇的网站推荐](https://github.com/cunyu1943/amazing-websites)\n\n## 2. 项目介绍\n\n### 2.1 amazing-books\n\n1.  **项目地址**\n\n>   [amazing-books](https://github.com/cunyu1943/amazing-books)\n\n2.  **项目简介**\n\n该项目主要是作者把自己从网上搜集的电子书归档整理所给出的一个项目，主要是更方便大家获取相关资源，同时也节约大家的时间，不用再费力去找。\n\n项目收集的书籍主要有如下类别：\n\n-   C & C++\n-   Java\n-   Linux\n-   Python\n-   办公\n-   程序员必读\n-   大数据与云计算\n-   前端\n-   人工智能\n-   数据结构与算法\n-   数据库\n\n具体各类别下的书目可以通过如下链接在线查看：\n\n>   [书籍思维导图](https://v3.processon.com/view/link/60050ba0e401fd261bc7c03b#map)\n\n3.  **项目截图**\n\n\n\n![](https://img-blog.csdnimg.cn/20210421162017710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n![](https://img-blog.csdnimg.cn/20210421162040489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n\n### 2.2 amazing-softwares\n\n1.  **项目地址**\n\n>   [amazing-softwares](https://github.com/cunyu1943/amazing-softwares)\n\n2.  **项目简介**\n\n项目主要是用于推荐作者在日常工作和生活中，自己亲身体验下来的较为良心，功能性较强的软件。之所以在这里整理出来，是想让大家用上更好的软件，不要再被各种流氓软件所绑架了！\n\n主要分为系统系列和软件系列，各自下面的分类主要是如下：\n\n-   **系统系列**\n    -   系统镜像\n    -   刻录工具\n-   **软件系列**\n    -   终端工具\n    -   编程\n    -   写作笔记工具\n    -   办公\n    -   PDF 查看\n    -   视频/音频\n    -   解压缩\n    -   系统管理\n    -   下载神器\n    -   浏览器插件\n    -   护眼工具\n    -   快速启动\n    -   文件搜索/管理\n    -   远程工具\n    -   小众软件\n    -   ……\n\n3.  **项目截图**\n\n![](https://img-blog.csdnimg.cn/img_convert/4605dc6c7bb18d6db141e443f1191576.png)\n\n\n### 2.3 amazing-websites\n\n1.  **项目地址**\n\n>   [amazing-websites](https://github.com/cunyu1943/amazing-websites)\n\n2.  **项目简介**\n\n本项目主要是作者的浏览器收藏夹实在太满了，哈哈哈。也是做一个备份，万一哪天浏览器收藏夹数据丢失了，还有个恢复的地儿。项目推荐的网站，主要是日常工作中需要解决一些小痛点而找，比如证件照换底色，看个高清电影啥的（自己穷，没钱充 VIP，😂）。\n\n网站类别主要如下：\n\n-   云存储\n-   工具\n-   在线作图\n-   素材下载\n-   PPT 下载\n-   论文检索\n-   在线刷题\n-   文字教程\n-   视频教程\n-   搜索\n-   PDF 书籍搜索\n-   网盘搜索\n-   导航\n-   影视\n-   音乐\n-   壁纸\n-   软件下载\n-   ……\n\n3.  **项目截图**\n\n![](https://img-blog.csdnimg.cn/img_convert/978d99a45b330fe86e8dafa8a70d4071.png)\n\n## 3. 总结\n\n好了，今天的 Github 推荐到此结束了，快去收藏 Star 一波吧。\n\n如果你也有好的书籍，网站和软件推荐，欢迎留言推荐呀，也可以去 Github 提交 Issue（更推荐）！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【资源分享】发现-3-个-Github-项目，超赞！.md","raw":"---\ntitle: 【资源分享】发现 3 个 Github 项目，超赞！\nmathjax: true\ntoc: true\ntags:\n  - Github\n  - 资源\ncategories:\n  - 资源分享\nabbrlink: 4ee7faf9\ndate: 2021-05-04 11:20:14\ntop: true\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n说起 Github，大家可能都觉得那只是程序员的聚集地。今天就要告诉大家，Github 不仅仅是 Coder 们的专属，它同时也是一个巨大的资源宝库！\n\n由于我也算是个半吊子的程序员了，所以用 Github 也算久的了，然后今天就给大家安利提高效率的三个项目，希望大家通过它们能够解决自己工作生活中的一些小痛点，提升大家的效率。\n\n最后，如果你也用 Github 的话，给个 **Star** 鼓励鼓励作者吧，让作者更有动力一直更新下去！\n\n那么首先在这里贴出项目的地址：\n\n1.  [电子书下载](https://github.com/cunyu1943/amazing-books)\n2.  [好用高效的软件推荐](https://github.com/cunyu1943/amazing-softwares)\n3.  [各种神奇的网站推荐](https://github.com/cunyu1943/amazing-websites)\n\n## 2. 项目介绍\n\n### 2.1 amazing-books\n\n1.  **项目地址**\n\n>   [amazing-books](https://github.com/cunyu1943/amazing-books)\n\n2.  **项目简介**\n\n该项目主要是作者把自己从网上搜集的电子书归档整理所给出的一个项目，主要是更方便大家获取相关资源，同时也节约大家的时间，不用再费力去找。\n\n项目收集的书籍主要有如下类别：\n\n-   C & C++\n-   Java\n-   Linux\n-   Python\n-   办公\n-   程序员必读\n-   大数据与云计算\n-   前端\n-   人工智能\n-   数据结构与算法\n-   数据库\n\n具体各类别下的书目可以通过如下链接在线查看：\n\n>   [书籍思维导图](https://v3.processon.com/view/link/60050ba0e401fd261bc7c03b#map)\n\n3.  **项目截图**\n\n\n\n![](https://img-blog.csdnimg.cn/20210421162017710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n![](https://img-blog.csdnimg.cn/20210421162040489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n\n### 2.2 amazing-softwares\n\n1.  **项目地址**\n\n>   [amazing-softwares](https://github.com/cunyu1943/amazing-softwares)\n\n2.  **项目简介**\n\n项目主要是用于推荐作者在日常工作和生活中，自己亲身体验下来的较为良心，功能性较强的软件。之所以在这里整理出来，是想让大家用上更好的软件，不要再被各种流氓软件所绑架了！\n\n主要分为系统系列和软件系列，各自下面的分类主要是如下：\n\n-   **系统系列**\n    -   系统镜像\n    -   刻录工具\n-   **软件系列**\n    -   终端工具\n    -   编程\n    -   写作笔记工具\n    -   办公\n    -   PDF 查看\n    -   视频/音频\n    -   解压缩\n    -   系统管理\n    -   下载神器\n    -   浏览器插件\n    -   护眼工具\n    -   快速启动\n    -   文件搜索/管理\n    -   远程工具\n    -   小众软件\n    -   ……\n\n3.  **项目截图**\n\n![](https://img-blog.csdnimg.cn/img_convert/4605dc6c7bb18d6db141e443f1191576.png)\n\n\n### 2.3 amazing-websites\n\n1.  **项目地址**\n\n>   [amazing-websites](https://github.com/cunyu1943/amazing-websites)\n\n2.  **项目简介**\n\n本项目主要是作者的浏览器收藏夹实在太满了，哈哈哈。也是做一个备份，万一哪天浏览器收藏夹数据丢失了，还有个恢复的地儿。项目推荐的网站，主要是日常工作中需要解决一些小痛点而找，比如证件照换底色，看个高清电影啥的（自己穷，没钱充 VIP，😂）。\n\n网站类别主要如下：\n\n-   云存储\n-   工具\n-   在线作图\n-   素材下载\n-   PPT 下载\n-   论文检索\n-   在线刷题\n-   文字教程\n-   视频教程\n-   搜索\n-   PDF 书籍搜索\n-   网盘搜索\n-   导航\n-   影视\n-   音乐\n-   壁纸\n-   软件下载\n-   ……\n\n3.  **项目截图**\n\n![](https://img-blog.csdnimg.cn/img_convert/978d99a45b330fe86e8dafa8a70d4071.png)\n\n## 3. 总结\n\n好了，今天的 Github 推荐到此结束了，快去收藏 Star 一波吧。\n\n如果你也有好的书籍，网站和软件推荐，欢迎留言推荐呀，也可以去 Github 提交 Issue（更推荐）！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【资源分享】发现-3-个-Github-项目，超赞！","published":1,"updated":"2021-05-04T07:20:03.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw160045bw344vkyhes3","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>说起 Github，大家可能都觉得那只是程序员的聚集地。今天就要告诉大家，Github 不仅仅是 Coder 们的专属，它同时也是一个巨大的资源宝库！</p>\n<p>由于我也算是个半吊子的程序员了，所以用 Github 也算久的了，然后今天就给大家安利提高效率的三个项目，希望大家通过它们能够解决自己工作生活中的一些小痛点，提升大家的效率。</p>\n<p>最后，如果你也用 Github 的话，给个 <strong>Star</strong> 鼓励鼓励作者吧，让作者更有动力一直更新下去！</p>\n<p>那么首先在这里贴出项目的地址：</p>\n<ol>\n<li><a href=\"https://github.com/cunyu1943/amazing-books\">电子书下载</a></li>\n<li><a href=\"https://github.com/cunyu1943/amazing-softwares\">好用高效的软件推荐</a></li>\n<li><a href=\"https://github.com/cunyu1943/amazing-websites\">各种神奇的网站推荐</a></li>\n</ol>\n<h2 id=\"2-项目介绍\"><a href=\"#2-项目介绍\" class=\"headerlink\" title=\"2. 项目介绍\"></a>2. 项目介绍</h2><h3 id=\"2-1-amazing-books\"><a href=\"#2-1-amazing-books\" class=\"headerlink\" title=\"2.1 amazing-books\"></a>2.1 amazing-books</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-books\">amazing-books</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>该项目主要是作者把自己从网上搜集的电子书归档整理所给出的一个项目，主要是更方便大家获取相关资源，同时也节约大家的时间，不用再费力去找。</p>\n<p>项目收集的书籍主要有如下类别：</p>\n<ul>\n<li>C &amp; C++</li>\n<li>Java</li>\n<li>Linux</li>\n<li>Python</li>\n<li>办公</li>\n<li>程序员必读</li>\n<li>大数据与云计算</li>\n<li>前端</li>\n<li>人工智能</li>\n<li>数据结构与算法</li>\n<li>数据库</li>\n</ul>\n<p>具体各类别下的书目可以通过如下链接在线查看：</p>\n<blockquote>\n<p>  <a href=\"https://v3.processon.com/view/link/60050ba0e401fd261bc7c03b#map\">书籍思维导图</a></p>\n</blockquote>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210421162017710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210421162040489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"2-2-amazing-softwares\"><a href=\"#2-2-amazing-softwares\" class=\"headerlink\" title=\"2.2 amazing-softwares\"></a>2.2 amazing-softwares</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-softwares\">amazing-softwares</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>项目主要是用于推荐作者在日常工作和生活中，自己亲身体验下来的较为良心，功能性较强的软件。之所以在这里整理出来，是想让大家用上更好的软件，不要再被各种流氓软件所绑架了！</p>\n<p>主要分为系统系列和软件系列，各自下面的分类主要是如下：</p>\n<ul>\n<li><strong>系统系列</strong><ul>\n<li>系统镜像</li>\n<li>刻录工具</li>\n</ul>\n</li>\n<li><strong>软件系列</strong><ul>\n<li>终端工具</li>\n<li>编程</li>\n<li>写作笔记工具</li>\n<li>办公</li>\n<li>PDF 查看</li>\n<li>视频/音频</li>\n<li>解压缩</li>\n<li>系统管理</li>\n<li>下载神器</li>\n<li>浏览器插件</li>\n<li>护眼工具</li>\n<li>快速启动</li>\n<li>文件搜索/管理</li>\n<li>远程工具</li>\n<li>小众软件</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4605dc6c7bb18d6db141e443f1191576.png\" alt=\"\"></p>\n<h3 id=\"2-3-amazing-websites\"><a href=\"#2-3-amazing-websites\" class=\"headerlink\" title=\"2.3 amazing-websites\"></a>2.3 amazing-websites</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-websites\">amazing-websites</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>本项目主要是作者的浏览器收藏夹实在太满了，哈哈哈。也是做一个备份，万一哪天浏览器收藏夹数据丢失了，还有个恢复的地儿。项目推荐的网站，主要是日常工作中需要解决一些小痛点而找，比如证件照换底色，看个高清电影啥的（自己穷，没钱充 VIP，😂）。</p>\n<p>网站类别主要如下：</p>\n<ul>\n<li>云存储</li>\n<li>工具</li>\n<li>在线作图</li>\n<li>素材下载</li>\n<li>PPT 下载</li>\n<li>论文检索</li>\n<li>在线刷题</li>\n<li>文字教程</li>\n<li>视频教程</li>\n<li>搜索</li>\n<li>PDF 书籍搜索</li>\n<li>网盘搜索</li>\n<li>导航</li>\n<li>影视</li>\n<li>音乐</li>\n<li>壁纸</li>\n<li>软件下载</li>\n<li>……</li>\n</ul>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/978d99a45b330fe86e8dafa8a70d4071.png\" alt=\"\"></p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>好了，今天的 Github 推荐到此结束了，快去收藏 Star 一波吧。</p>\n<p>如果你也有好的书籍，网站和软件推荐，欢迎留言推荐呀，也可以去 Github 提交 Issue（更推荐）！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>说起 Github，大家可能都觉得那只是程序员的聚集地。今天就要告诉大家，Github 不仅仅是 Coder 们的专属，它同时也是一个巨大的资源宝库！</p>\n<p>由于我也算是个半吊子的程序员了，所以用 Github 也算久的了，然后今天就给大家安利提高效率的三个项目，希望大家通过它们能够解决自己工作生活中的一些小痛点，提升大家的效率。</p>\n<p>最后，如果你也用 Github 的话，给个 <strong>Star</strong> 鼓励鼓励作者吧，让作者更有动力一直更新下去！</p>\n<p>那么首先在这里贴出项目的地址：</p>\n<ol>\n<li><a href=\"https://github.com/cunyu1943/amazing-books\">电子书下载</a></li>\n<li><a href=\"https://github.com/cunyu1943/amazing-softwares\">好用高效的软件推荐</a></li>\n<li><a href=\"https://github.com/cunyu1943/amazing-websites\">各种神奇的网站推荐</a></li>\n</ol>\n<h2 id=\"2-项目介绍\"><a href=\"#2-项目介绍\" class=\"headerlink\" title=\"2. 项目介绍\"></a>2. 项目介绍</h2><h3 id=\"2-1-amazing-books\"><a href=\"#2-1-amazing-books\" class=\"headerlink\" title=\"2.1 amazing-books\"></a>2.1 amazing-books</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-books\">amazing-books</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>该项目主要是作者把自己从网上搜集的电子书归档整理所给出的一个项目，主要是更方便大家获取相关资源，同时也节约大家的时间，不用再费力去找。</p>\n<p>项目收集的书籍主要有如下类别：</p>\n<ul>\n<li>C &amp; C++</li>\n<li>Java</li>\n<li>Linux</li>\n<li>Python</li>\n<li>办公</li>\n<li>程序员必读</li>\n<li>大数据与云计算</li>\n<li>前端</li>\n<li>人工智能</li>\n<li>数据结构与算法</li>\n<li>数据库</li>\n</ul>\n<p>具体各类别下的书目可以通过如下链接在线查看：</p>\n<blockquote>\n<p>  <a href=\"https://v3.processon.com/view/link/60050ba0e401fd261bc7c03b#map\">书籍思维导图</a></p>\n</blockquote>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210421162017710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210421162040489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"2-2-amazing-softwares\"><a href=\"#2-2-amazing-softwares\" class=\"headerlink\" title=\"2.2 amazing-softwares\"></a>2.2 amazing-softwares</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-softwares\">amazing-softwares</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>项目主要是用于推荐作者在日常工作和生活中，自己亲身体验下来的较为良心，功能性较强的软件。之所以在这里整理出来，是想让大家用上更好的软件，不要再被各种流氓软件所绑架了！</p>\n<p>主要分为系统系列和软件系列，各自下面的分类主要是如下：</p>\n<ul>\n<li><strong>系统系列</strong><ul>\n<li>系统镜像</li>\n<li>刻录工具</li>\n</ul>\n</li>\n<li><strong>软件系列</strong><ul>\n<li>终端工具</li>\n<li>编程</li>\n<li>写作笔记工具</li>\n<li>办公</li>\n<li>PDF 查看</li>\n<li>视频/音频</li>\n<li>解压缩</li>\n<li>系统管理</li>\n<li>下载神器</li>\n<li>浏览器插件</li>\n<li>护眼工具</li>\n<li>快速启动</li>\n<li>文件搜索/管理</li>\n<li>远程工具</li>\n<li>小众软件</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4605dc6c7bb18d6db141e443f1191576.png\" alt=\"\"></p>\n<h3 id=\"2-3-amazing-websites\"><a href=\"#2-3-amazing-websites\" class=\"headerlink\" title=\"2.3 amazing-websites\"></a>2.3 amazing-websites</h3><ol>\n<li><strong>项目地址</strong></li>\n</ol>\n<blockquote>\n<p>  <a href=\"https://github.com/cunyu1943/amazing-websites\">amazing-websites</a></p>\n</blockquote>\n<ol>\n<li><strong>项目简介</strong></li>\n</ol>\n<p>本项目主要是作者的浏览器收藏夹实在太满了，哈哈哈。也是做一个备份，万一哪天浏览器收藏夹数据丢失了，还有个恢复的地儿。项目推荐的网站，主要是日常工作中需要解决一些小痛点而找，比如证件照换底色，看个高清电影啥的（自己穷，没钱充 VIP，😂）。</p>\n<p>网站类别主要如下：</p>\n<ul>\n<li>云存储</li>\n<li>工具</li>\n<li>在线作图</li>\n<li>素材下载</li>\n<li>PPT 下载</li>\n<li>论文检索</li>\n<li>在线刷题</li>\n<li>文字教程</li>\n<li>视频教程</li>\n<li>搜索</li>\n<li>PDF 书籍搜索</li>\n<li>网盘搜索</li>\n<li>导航</li>\n<li>影视</li>\n<li>音乐</li>\n<li>壁纸</li>\n<li>软件下载</li>\n<li>……</li>\n</ul>\n<ol>\n<li><strong>项目截图</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/978d99a45b330fe86e8dafa8a70d4071.png\" alt=\"\"></p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>好了，今天的 Github 推荐到此结束了，快去收藏 Star 一波吧。</p>\n<p>如果你也有好的书籍，网站和软件推荐，欢迎留言推荐呀，也可以去 Github 提交 Issue（更推荐）！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【资源分享】学妹想学编程，我这个学长真是操碎了心","mathjax":true,"toc":true,"abbrlink":"a173fb1f","date":"2021-05-04T03:19:06.000Z","top":true,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n> ✨✨✨\n> 资源链接见文末！！\n\n## 前言\n\n许多刚开始学习编程的小伙伴都想找到合适的学习资源，然后学习一段时间后又想着找个项目啥的练练手。但是许多小伙伴都存在着以下两个问题：\n\n1.  刚开始入门时，不知道去哪儿找编程资源，只能四处求人，或者去花钱买教程；\n2.  学习一段时间后，想找个练手的项目，但实在是太多了，也不知道哪个值得学习；\n\n针对这两个问题，其实我也很理解。因为我也是自学编程过来的，虽说现在也不厉害😂，但至少摸到了一些门路。然后也算是回馈大家，给刚入门的小伙伴们一点帮助吧，就建了个收集免费编程资源 GitHub 项目，那就来看看里边都有啥吧！\n\n\n\n## 项目介绍\n\n项目中的大部分资源都是来自 GitHub，也感谢各位前辈们的分享，我只是个没有感情的收集机器 🤣，持续更新中，大家如果有想要推荐的资源，欢迎留言或者去 GitHub 提交 issue 哦！\n\n![](https://img-blog.csdnimg.cn/20210407143142999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n### 资源种类\n\n项目中所收集的编程资源主要分为如下几个大类：\n\n-   面试八股文\n-   Java\n-   Python\n-   C\n-   C++\n-   Go\n-   前端\n-   数据结构/算法\n-   Linux\n-   Git\n-   人工智能\n\n然后在具体的语言大类中，又拆分出了 **教程** 和 **项目** 两个子类。教程中主要包括学习该语言的一些教程或者知识点总结，而项目则主要针对学习改语言之后进行实战环节，两部分搭配使用起来更香哦。下面就来给出各个部分中的部分资源，拭目以待吧！\n\n### 面试八股文\n\n面试八股文，主要是针对找工作的朋友们。现在互联网找工作，无论是校招还是社招，都越来越难了。而八股文基本上是每个公司面试招人时必问的，如果想要找到更好的工作，怎么能少得了呢。\n\n- [CS-Notes](https://github.com/CyC2018/CS-Notes)\n- [Waking-Up](https://github.com/wolverinn/Waking-Up/)\n- [fullstack-tutorial](https://github.com/frank-lam/fullstack-tutorial)\n![](https://img-blog.csdnimg.cn/20210407143706848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Java\n#### 教程\n\n- [How2J](https://how2j.cn/)\n- [Java 教程 | 菜鸟教程](https://www.runoob.com/java/java-tutorial.html)\n- [廖雪峰 Java 教程](https://www.liaoxuefeng.com/wiki/1252599548343744)\n\n#### 项目\n- [mall](https://github.com/macrozheng/mall)\n- [halo](https://github.com/halo-dev/halo)\n- [jeecg-boot](https://github.com/zhangdaiscott/jeecg-boot)\n\n![](https://img-blog.csdnimg.cn/20210407144229939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n![](https://img-blog.csdnimg.cn/20210407144444705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n\n\n\n### Python\n\n#### 教程\n- [python123](https://python123.io/)\n- [Python 100 天](https://github.com/jackfrued/Python-100-Days)\n- [价值 2w 多的 Python 教程全集](https://www.bilibili.com/video/BV1wD4y1o7AS)\n\n#### 项目\n- [amazing-qr](https://github.com/hwxhw/amazing-qr)\n- [twitter-scraper](https://github.com/bisguzar/twitter-scraper)\n![](https://img-blog.csdnimg.cn/20210407144639547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### C 语言\n#### 教程\n- [C 语言入门](http://www.imooc.com/learn/249)\n- [笨办法学 C](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n- [C Programming Tutorial](https://fresh2refresh.com/c-programming/)\n\n#### 项目\n- [2048 小游戏](https://www.lanqiao.cn/courses/155)\n- [简单计算器](https://www.lanqiao.cn/courses/75)\n- [C 写的各种小游戏](https://github.com/Rapiz1/DungeonRush)\n![](https://img-blog.csdnimg.cn/20210407145030224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### C++\n\n#### 教程\n-   [C++ 那些事](https://github.com/Light-City/CPlusPlusThings)\n-   [C++ Template 学习指南](https://github.com/wuye9036/CppTemplateTutorial)\n-   [Modern C++ Tutorial](https://github.com/changkun/modern-cpp-tutorial)\n\n#### 项目\n- [计算器](https://github.com/microsoft/calculator)\n- [中国象棋](https://github.com/xmuli/chinessChess)\n- [数独](https://github.com/mayerui/sudoku)\n![](https://img-blog.csdnimg.cn/20210407145503121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### Go\n\n#### 教程\n-   [Go 入门指南](https://github.com/unknwon/the-way-to-go_ZH_CN)\n-   [Go 从入门到实战](https://github.com/xinliangnote/Go)\n\n\n#### 项目\n-   [用 Go 写 JVM](https://github.com/zxh0/jvm.go)\n-   [自己动手写 Java 虚拟机](https://github.com/zxh0/jvmgo-book)\n![](https://img-blog.csdnimg.cn/20210407145826829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 前端\n- [前端入门到进阶](https://github.com/qianguyihao/Web)\n- [前端资源汇总仓库](https://github.com/FrontEndGitHub/FrontEndGitHub)\n- [个 JavaScript 工程师都应懂的33个概念](https://github.com/stephentian/33-js-concepts)\n![](https://img-blog.csdnimg.cn/20210407150316757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 数据额结构/算法\n-   [LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)\n-   [hello-algorithm](https://github.com/geekxh/hello-algorithm)\n-   [fucking-algorithm](https://github.com/labuladong/fucking-algorithm)\n\n![](https://img-blog.csdnimg.cn/2021040715050669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Linux\n-   [鸟哥的私房菜](http://linux.vbird.org/)\n-   [Java 程序员眼中的 Linux](https://github.com/judasn/Linux-Tutorial)\n-   [Linux 命令大全](https://github.com/jaywcjlove/linux-command)\n![](https://img-blog.csdnimg.cn/2021040715065752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 人工智能\n-   [吴恩达老师的深度学习课程笔记及资源](https://github.com/fengdu78/deeplearning_ai_books)\n-   [算法工程师(人工智能CV方向)面试问题及相关资料](https://github.com/lcylmhlcy/Awesome-algorithm-interview)\n-   [ML-NLP](https://github.com/NLP-LOVE/ML-NLP)\n\n![](https://img-blog.csdnimg.cn/20210407150834551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Git\n-   [猴子都能懂的 Git 入门](https://backlog.com/git-tutorial/cn/)\n-   [第一次参与开源](https://github.com/firstcontributions/first-contributions)\n-   [Git 的奇技淫巧](https://github.com/521xueweihan/git-tips)\n![](https://img-blog.csdnimg.cn/20210407151055954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n## 总结\n\n受限于篇幅，我只是给出了部分资源。总体来说，项目目前收集的一些资源还是不错的，不仅有针对小白的入门级教程，还有各种实战项目。此外，还有各种知识点总结，对于校招和社招都有所帮助。总体也算是一个适合收藏的项目了，毕竟那么多的免费编程资源，先收藏起来，到时候扔给别人也有用呀！\n\n整理不易，有帮助的话大家一定要 喜欢 + 收藏 哦 ❤️！支持作者的同时，也方便自己下次更方便地找到叭！\n\n![](https://img-blog.csdnimg.cn/img_convert/79c4d652584fe651c6fc97bf106e29e7.png)\n最后附上仓库链接，供大家自取：\n\n> [🎉 免费编程资源库](https://github.com/cunyu1943/amazing-programming-resources)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【资源分享】学妹想学编程，我这个学长真是操碎了心.md","raw":"---\ntitle: 【资源分享】学妹想学编程，我这个学长真是操碎了心\nmathjax: true\ntoc: true\ntags:\n  - Github\n  - 资源\ncategories:\n  - 资源分享\nabbrlink: a173fb1f\ndate: 2021-05-04 11:19:06\ntop: true\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n> ✨✨✨\n> 资源链接见文末！！\n\n## 前言\n\n许多刚开始学习编程的小伙伴都想找到合适的学习资源，然后学习一段时间后又想着找个项目啥的练练手。但是许多小伙伴都存在着以下两个问题：\n\n1.  刚开始入门时，不知道去哪儿找编程资源，只能四处求人，或者去花钱买教程；\n2.  学习一段时间后，想找个练手的项目，但实在是太多了，也不知道哪个值得学习；\n\n针对这两个问题，其实我也很理解。因为我也是自学编程过来的，虽说现在也不厉害😂，但至少摸到了一些门路。然后也算是回馈大家，给刚入门的小伙伴们一点帮助吧，就建了个收集免费编程资源 GitHub 项目，那就来看看里边都有啥吧！\n\n\n\n## 项目介绍\n\n项目中的大部分资源都是来自 GitHub，也感谢各位前辈们的分享，我只是个没有感情的收集机器 🤣，持续更新中，大家如果有想要推荐的资源，欢迎留言或者去 GitHub 提交 issue 哦！\n\n![](https://img-blog.csdnimg.cn/20210407143142999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n### 资源种类\n\n项目中所收集的编程资源主要分为如下几个大类：\n\n-   面试八股文\n-   Java\n-   Python\n-   C\n-   C++\n-   Go\n-   前端\n-   数据结构/算法\n-   Linux\n-   Git\n-   人工智能\n\n然后在具体的语言大类中，又拆分出了 **教程** 和 **项目** 两个子类。教程中主要包括学习该语言的一些教程或者知识点总结，而项目则主要针对学习改语言之后进行实战环节，两部分搭配使用起来更香哦。下面就来给出各个部分中的部分资源，拭目以待吧！\n\n### 面试八股文\n\n面试八股文，主要是针对找工作的朋友们。现在互联网找工作，无论是校招还是社招，都越来越难了。而八股文基本上是每个公司面试招人时必问的，如果想要找到更好的工作，怎么能少得了呢。\n\n- [CS-Notes](https://github.com/CyC2018/CS-Notes)\n- [Waking-Up](https://github.com/wolverinn/Waking-Up/)\n- [fullstack-tutorial](https://github.com/frank-lam/fullstack-tutorial)\n![](https://img-blog.csdnimg.cn/20210407143706848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Java\n#### 教程\n\n- [How2J](https://how2j.cn/)\n- [Java 教程 | 菜鸟教程](https://www.runoob.com/java/java-tutorial.html)\n- [廖雪峰 Java 教程](https://www.liaoxuefeng.com/wiki/1252599548343744)\n\n#### 项目\n- [mall](https://github.com/macrozheng/mall)\n- [halo](https://github.com/halo-dev/halo)\n- [jeecg-boot](https://github.com/zhangdaiscott/jeecg-boot)\n\n![](https://img-blog.csdnimg.cn/20210407144229939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n![](https://img-blog.csdnimg.cn/20210407144444705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n\n\n\n\n### Python\n\n#### 教程\n- [python123](https://python123.io/)\n- [Python 100 天](https://github.com/jackfrued/Python-100-Days)\n- [价值 2w 多的 Python 教程全集](https://www.bilibili.com/video/BV1wD4y1o7AS)\n\n#### 项目\n- [amazing-qr](https://github.com/hwxhw/amazing-qr)\n- [twitter-scraper](https://github.com/bisguzar/twitter-scraper)\n![](https://img-blog.csdnimg.cn/20210407144639547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### C 语言\n#### 教程\n- [C 语言入门](http://www.imooc.com/learn/249)\n- [笨办法学 C](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n- [C Programming Tutorial](https://fresh2refresh.com/c-programming/)\n\n#### 项目\n- [2048 小游戏](https://www.lanqiao.cn/courses/155)\n- [简单计算器](https://www.lanqiao.cn/courses/75)\n- [C 写的各种小游戏](https://github.com/Rapiz1/DungeonRush)\n![](https://img-blog.csdnimg.cn/20210407145030224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### C++\n\n#### 教程\n-   [C++ 那些事](https://github.com/Light-City/CPlusPlusThings)\n-   [C++ Template 学习指南](https://github.com/wuye9036/CppTemplateTutorial)\n-   [Modern C++ Tutorial](https://github.com/changkun/modern-cpp-tutorial)\n\n#### 项目\n- [计算器](https://github.com/microsoft/calculator)\n- [中国象棋](https://github.com/xmuli/chinessChess)\n- [数独](https://github.com/mayerui/sudoku)\n![](https://img-blog.csdnimg.cn/20210407145503121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n### Go\n\n#### 教程\n-   [Go 入门指南](https://github.com/unknwon/the-way-to-go_ZH_CN)\n-   [Go 从入门到实战](https://github.com/xinliangnote/Go)\n\n\n#### 项目\n-   [用 Go 写 JVM](https://github.com/zxh0/jvm.go)\n-   [自己动手写 Java 虚拟机](https://github.com/zxh0/jvmgo-book)\n![](https://img-blog.csdnimg.cn/20210407145826829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 前端\n- [前端入门到进阶](https://github.com/qianguyihao/Web)\n- [前端资源汇总仓库](https://github.com/FrontEndGitHub/FrontEndGitHub)\n- [个 JavaScript 工程师都应懂的33个概念](https://github.com/stephentian/33-js-concepts)\n![](https://img-blog.csdnimg.cn/20210407150316757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 数据额结构/算法\n-   [LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)\n-   [hello-algorithm](https://github.com/geekxh/hello-algorithm)\n-   [fucking-algorithm](https://github.com/labuladong/fucking-algorithm)\n\n![](https://img-blog.csdnimg.cn/2021040715050669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Linux\n-   [鸟哥的私房菜](http://linux.vbird.org/)\n-   [Java 程序员眼中的 Linux](https://github.com/judasn/Linux-Tutorial)\n-   [Linux 命令大全](https://github.com/jaywcjlove/linux-command)\n![](https://img-blog.csdnimg.cn/2021040715065752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### 人工智能\n-   [吴恩达老师的深度学习课程笔记及资源](https://github.com/fengdu78/deeplearning_ai_books)\n-   [算法工程师(人工智能CV方向)面试问题及相关资料](https://github.com/lcylmhlcy/Awesome-algorithm-interview)\n-   [ML-NLP](https://github.com/NLP-LOVE/ML-NLP)\n\n![](https://img-blog.csdnimg.cn/20210407150834551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n### Git\n-   [猴子都能懂的 Git 入门](https://backlog.com/git-tutorial/cn/)\n-   [第一次参与开源](https://github.com/firstcontributions/first-contributions)\n-   [Git 的奇技淫巧](https://github.com/521xueweihan/git-tips)\n![](https://img-blog.csdnimg.cn/20210407151055954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70)\n\n## 总结\n\n受限于篇幅，我只是给出了部分资源。总体来说，项目目前收集的一些资源还是不错的，不仅有针对小白的入门级教程，还有各种实战项目。此外，还有各种知识点总结，对于校招和社招都有所帮助。总体也算是一个适合收藏的项目了，毕竟那么多的免费编程资源，先收藏起来，到时候扔给别人也有用呀！\n\n整理不易，有帮助的话大家一定要 喜欢 + 收藏 哦 ❤️！支持作者的同时，也方便自己下次更方便地找到叭！\n\n![](https://img-blog.csdnimg.cn/img_convert/79c4d652584fe651c6fc97bf106e29e7.png)\n最后附上仓库链接，供大家自取：\n\n> [🎉 免费编程资源库](https://github.com/cunyu1943/amazing-programming-resources)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【资源分享】学妹想学编程，我这个学长真是操碎了心","published":1,"updated":"2021-05-04T07:33:19.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw170047bw346zvu1fxf","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n<p>✨✨✨<br>资源链接见文末！！</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>许多刚开始学习编程的小伙伴都想找到合适的学习资源，然后学习一段时间后又想着找个项目啥的练练手。但是许多小伙伴都存在着以下两个问题：</p>\n<ol>\n<li>刚开始入门时，不知道去哪儿找编程资源，只能四处求人，或者去花钱买教程；</li>\n<li>学习一段时间后，想找个练手的项目，但实在是太多了，也不知道哪个值得学习；</li>\n</ol>\n<p>针对这两个问题，其实我也很理解。因为我也是自学编程过来的，虽说现在也不厉害😂，但至少摸到了一些门路。然后也算是回馈大家，给刚入门的小伙伴们一点帮助吧，就建了个收集免费编程资源 GitHub 项目，那就来看看里边都有啥吧！</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>项目中的大部分资源都是来自 GitHub，也感谢各位前辈们的分享，我只是个没有感情的收集机器 🤣，持续更新中，大家如果有想要推荐的资源，欢迎留言或者去 GitHub 提交 issue 哦！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407143142999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"资源种类\"><a href=\"#资源种类\" class=\"headerlink\" title=\"资源种类\"></a>资源种类</h3><p>项目中所收集的编程资源主要分为如下几个大类：</p>\n<ul>\n<li>面试八股文</li>\n<li>Java</li>\n<li>Python</li>\n<li>C</li>\n<li>C++</li>\n<li>Go</li>\n<li>前端</li>\n<li>数据结构/算法</li>\n<li>Linux</li>\n<li>Git</li>\n<li>人工智能</li>\n</ul>\n<p>然后在具体的语言大类中，又拆分出了 <strong>教程</strong> 和 <strong>项目</strong> 两个子类。教程中主要包括学习该语言的一些教程或者知识点总结，而项目则主要针对学习改语言之后进行实战环节，两部分搭配使用起来更香哦。下面就来给出各个部分中的部分资源，拭目以待吧！</p>\n<h3 id=\"面试八股文\"><a href=\"#面试八股文\" class=\"headerlink\" title=\"面试八股文\"></a>面试八股文</h3><p>面试八股文，主要是针对找工作的朋友们。现在互联网找工作，无论是校招还是社招，都越来越难了。而八股文基本上是每个公司面试招人时必问的，如果想要找到更好的工作，怎么能少得了呢。</p>\n<ul>\n<li><a href=\"https://github.com/CyC2018/CS-Notes\">CS-Notes</a></li>\n<li><a href=\"https://github.com/wolverinn/Waking-Up/\">Waking-Up</a></li>\n<li><p><a href=\"https://github.com/frank-lam/fullstack-tutorial\">fullstack-tutorial</a><br><img src=\"https://img-blog.csdnimg.cn/20210407143706848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><h4 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h4></li>\n<li><p><a href=\"https://how2j.cn/\">How2J</a></p>\n</li>\n<li><a href=\"https://www.runoob.com/java/java-tutorial.html\">Java 教程 | 菜鸟教程</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744\">廖雪峰 Java 教程</a></li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/macrozheng/mall\">mall</a></li>\n<li><a href=\"https://github.com/halo-dev/halo\">halo</a></li>\n<li><a href=\"https://github.com/zhangdaiscott/jeecg-boot\">jeecg-boot</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407144229939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><br><img src=\"https://img-blog.csdnimg.cn/20210407144444705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><h4 id=\"教程-1\"><a href=\"#教程-1\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://python123.io/\">python123</a></li>\n<li><a href=\"https://github.com/jackfrued/Python-100-Days\">Python 100 天</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1wD4y1o7AS\">价值 2w 多的 Python 教程全集</a></li>\n</ul>\n<h4 id=\"项目-1\"><a href=\"#项目-1\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/hwxhw/amazing-qr\">amazing-qr</a></li>\n<li><a href=\"https://github.com/bisguzar/twitter-scraper\">twitter-scraper</a><br><img src=\"https://img-blog.csdnimg.cn/20210407144639547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h3><h4 id=\"教程-2\"><a href=\"#教程-2\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"http://www.imooc.com/learn/249\">C 语言入门</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">笨办法学 C</a></li>\n<li><a href=\"https://fresh2refresh.com/c-programming/\">C Programming Tutorial</a></li>\n</ul>\n<h4 id=\"项目-2\"><a href=\"#项目-2\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://www.lanqiao.cn/courses/155\">2048 小游戏</a></li>\n<li><a href=\"https://www.lanqiao.cn/courses/75\">简单计算器</a></li>\n<li><a href=\"https://github.com/Rapiz1/DungeonRush\">C 写的各种小游戏</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145030224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><h4 id=\"教程-3\"><a href=\"#教程-3\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://github.com/Light-City/CPlusPlusThings\">C++ 那些事</a></li>\n<li><a href=\"https://github.com/wuye9036/CppTemplateTutorial\">C++ Template 学习指南</a></li>\n<li><a href=\"https://github.com/changkun/modern-cpp-tutorial\">Modern C++ Tutorial</a></li>\n</ul>\n<h4 id=\"项目-3\"><a href=\"#项目-3\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/microsoft/calculator\">计算器</a></li>\n<li><a href=\"https://github.com/xmuli/chinessChess\">中国象棋</a></li>\n<li><a href=\"https://github.com/mayerui/sudoku\">数独</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145503121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h3><h4 id=\"教程-4\"><a href=\"#教程-4\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://github.com/unknwon/the-way-to-go_ZH_CN\">Go 入门指南</a></li>\n<li><a href=\"https://github.com/xinliangnote/Go\">Go 从入门到实战</a></li>\n</ul>\n<h4 id=\"项目-4\"><a href=\"#项目-4\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/zxh0/jvm.go\">用 Go 写 JVM</a></li>\n<li><a href=\"https://github.com/zxh0/jvmgo-book\">自己动手写 Java 虚拟机</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145826829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3></li>\n<li><a href=\"https://github.com/qianguyihao/Web\">前端入门到进阶</a></li>\n<li><a href=\"https://github.com/FrontEndGitHub/FrontEndGitHub\">前端资源汇总仓库</a></li>\n<li><a href=\"https://github.com/stephentian/33-js-concepts\">个 JavaScript 工程师都应懂的33个概念</a><br><img src=\"https://img-blog.csdnimg.cn/20210407150316757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"数据额结构-算法\"><a href=\"#数据额结构-算法\" class=\"headerlink\" title=\"数据额结构/算法\"></a>数据额结构/算法</h3></li>\n<li><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\">LeetCodeAnimation</a></li>\n<li><a href=\"https://github.com/geekxh/hello-algorithm\">hello-algorithm</a></li>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\">fucking-algorithm</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2021040715050669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li><a href=\"http://linux.vbird.org/\">鸟哥的私房菜</a></li>\n<li><a href=\"https://github.com/judasn/Linux-Tutorial\">Java 程序员眼中的 Linux</a></li>\n<li><a href=\"https://github.com/jaywcjlove/linux-command\">Linux 命令大全</a><br><img src=\"https://img-blog.csdnimg.cn/2021040715065752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3></li>\n<li><a href=\"https://github.com/fengdu78/deeplearning_ai_books\">吴恩达老师的深度学习课程笔记及资源</a></li>\n<li><a href=\"https://github.com/lcylmhlcy/Awesome-algorithm-interview\">算法工程师(人工智能CV方向)面试问题及相关资料</a></li>\n<li><a href=\"https://github.com/NLP-LOVE/ML-NLP\">ML-NLP</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407150834551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><ul>\n<li><a href=\"https://backlog.com/git-tutorial/cn/\">猴子都能懂的 Git 入门</a></li>\n<li><a href=\"https://github.com/firstcontributions/first-contributions\">第一次参与开源</a></li>\n<li><a href=\"https://github.com/521xueweihan/git-tips\">Git 的奇技淫巧</a><br><img src=\"https://img-blog.csdnimg.cn/20210407151055954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>受限于篇幅，我只是给出了部分资源。总体来说，项目目前收集的一些资源还是不错的，不仅有针对小白的入门级教程，还有各种实战项目。此外，还有各种知识点总结，对于校招和社招都有所帮助。总体也算是一个适合收藏的项目了，毕竟那么多的免费编程资源，先收藏起来，到时候扔给别人也有用呀！</p>\n<p>整理不易，有帮助的话大家一定要 喜欢 + 收藏 哦 ❤️！支持作者的同时，也方便自己下次更方便地找到叭！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/79c4d652584fe651c6fc97bf106e29e7.png\" alt=\"\"><br>最后附上仓库链接，供大家自取：</p>\n<blockquote>\n<p><a href=\"https://github.com/cunyu1943/amazing-programming-resources\">🎉 免费编程资源库</a></p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n<p>✨✨✨<br>资源链接见文末！！</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>许多刚开始学习编程的小伙伴都想找到合适的学习资源，然后学习一段时间后又想着找个项目啥的练练手。但是许多小伙伴都存在着以下两个问题：</p>\n<ol>\n<li>刚开始入门时，不知道去哪儿找编程资源，只能四处求人，或者去花钱买教程；</li>\n<li>学习一段时间后，想找个练手的项目，但实在是太多了，也不知道哪个值得学习；</li>\n</ol>\n<p>针对这两个问题，其实我也很理解。因为我也是自学编程过来的，虽说现在也不厉害😂，但至少摸到了一些门路。然后也算是回馈大家，给刚入门的小伙伴们一点帮助吧，就建了个收集免费编程资源 GitHub 项目，那就来看看里边都有啥吧！</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>项目中的大部分资源都是来自 GitHub，也感谢各位前辈们的分享，我只是个没有感情的收集机器 🤣，持续更新中，大家如果有想要推荐的资源，欢迎留言或者去 GitHub 提交 issue 哦！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407143142999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"资源种类\"><a href=\"#资源种类\" class=\"headerlink\" title=\"资源种类\"></a>资源种类</h3><p>项目中所收集的编程资源主要分为如下几个大类：</p>\n<ul>\n<li>面试八股文</li>\n<li>Java</li>\n<li>Python</li>\n<li>C</li>\n<li>C++</li>\n<li>Go</li>\n<li>前端</li>\n<li>数据结构/算法</li>\n<li>Linux</li>\n<li>Git</li>\n<li>人工智能</li>\n</ul>\n<p>然后在具体的语言大类中，又拆分出了 <strong>教程</strong> 和 <strong>项目</strong> 两个子类。教程中主要包括学习该语言的一些教程或者知识点总结，而项目则主要针对学习改语言之后进行实战环节，两部分搭配使用起来更香哦。下面就来给出各个部分中的部分资源，拭目以待吧！</p>\n<h3 id=\"面试八股文\"><a href=\"#面试八股文\" class=\"headerlink\" title=\"面试八股文\"></a>面试八股文</h3><p>面试八股文，主要是针对找工作的朋友们。现在互联网找工作，无论是校招还是社招，都越来越难了。而八股文基本上是每个公司面试招人时必问的，如果想要找到更好的工作，怎么能少得了呢。</p>\n<ul>\n<li><a href=\"https://github.com/CyC2018/CS-Notes\">CS-Notes</a></li>\n<li><a href=\"https://github.com/wolverinn/Waking-Up/\">Waking-Up</a></li>\n<li><p><a href=\"https://github.com/frank-lam/fullstack-tutorial\">fullstack-tutorial</a><br><img src=\"https://img-blog.csdnimg.cn/20210407143706848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><h4 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h4></li>\n<li><p><a href=\"https://how2j.cn/\">How2J</a></p>\n</li>\n<li><a href=\"https://www.runoob.com/java/java-tutorial.html\">Java 教程 | 菜鸟教程</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744\">廖雪峰 Java 教程</a></li>\n</ul>\n<h4 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/macrozheng/mall\">mall</a></li>\n<li><a href=\"https://github.com/halo-dev/halo\">halo</a></li>\n<li><a href=\"https://github.com/zhangdaiscott/jeecg-boot\">jeecg-boot</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407144229939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><br><img src=\"https://img-blog.csdnimg.cn/20210407144444705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><h4 id=\"教程-1\"><a href=\"#教程-1\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://python123.io/\">python123</a></li>\n<li><a href=\"https://github.com/jackfrued/Python-100-Days\">Python 100 天</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1wD4y1o7AS\">价值 2w 多的 Python 教程全集</a></li>\n</ul>\n<h4 id=\"项目-1\"><a href=\"#项目-1\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/hwxhw/amazing-qr\">amazing-qr</a></li>\n<li><a href=\"https://github.com/bisguzar/twitter-scraper\">twitter-scraper</a><br><img src=\"https://img-blog.csdnimg.cn/20210407144639547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h3><h4 id=\"教程-2\"><a href=\"#教程-2\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"http://www.imooc.com/learn/249\">C 语言入门</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">笨办法学 C</a></li>\n<li><a href=\"https://fresh2refresh.com/c-programming/\">C Programming Tutorial</a></li>\n</ul>\n<h4 id=\"项目-2\"><a href=\"#项目-2\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://www.lanqiao.cn/courses/155\">2048 小游戏</a></li>\n<li><a href=\"https://www.lanqiao.cn/courses/75\">简单计算器</a></li>\n<li><a href=\"https://github.com/Rapiz1/DungeonRush\">C 写的各种小游戏</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145030224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><h4 id=\"教程-3\"><a href=\"#教程-3\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://github.com/Light-City/CPlusPlusThings\">C++ 那些事</a></li>\n<li><a href=\"https://github.com/wuye9036/CppTemplateTutorial\">C++ Template 学习指南</a></li>\n<li><a href=\"https://github.com/changkun/modern-cpp-tutorial\">Modern C++ Tutorial</a></li>\n</ul>\n<h4 id=\"项目-3\"><a href=\"#项目-3\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/microsoft/calculator\">计算器</a></li>\n<li><a href=\"https://github.com/xmuli/chinessChess\">中国象棋</a></li>\n<li><a href=\"https://github.com/mayerui/sudoku\">数独</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145503121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h3 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h3><h4 id=\"教程-4\"><a href=\"#教程-4\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><a href=\"https://github.com/unknwon/the-way-to-go_ZH_CN\">Go 入门指南</a></li>\n<li><a href=\"https://github.com/xinliangnote/Go\">Go 从入门到实战</a></li>\n</ul>\n<h4 id=\"项目-4\"><a href=\"#项目-4\" class=\"headerlink\" title=\"项目\"></a>项目</h4><ul>\n<li><a href=\"https://github.com/zxh0/jvm.go\">用 Go 写 JVM</a></li>\n<li><a href=\"https://github.com/zxh0/jvmgo-book\">自己动手写 Java 虚拟机</a><br><img src=\"https://img-blog.csdnimg.cn/20210407145826829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3></li>\n<li><a href=\"https://github.com/qianguyihao/Web\">前端入门到进阶</a></li>\n<li><a href=\"https://github.com/FrontEndGitHub/FrontEndGitHub\">前端资源汇总仓库</a></li>\n<li><a href=\"https://github.com/stephentian/33-js-concepts\">个 JavaScript 工程师都应懂的33个概念</a><br><img src=\"https://img-blog.csdnimg.cn/20210407150316757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"数据额结构-算法\"><a href=\"#数据额结构-算法\" class=\"headerlink\" title=\"数据额结构/算法\"></a>数据额结构/算法</h3></li>\n<li><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\">LeetCodeAnimation</a></li>\n<li><a href=\"https://github.com/geekxh/hello-algorithm\">hello-algorithm</a></li>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\">fucking-algorithm</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2021040715050669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li><a href=\"http://linux.vbird.org/\">鸟哥的私房菜</a></li>\n<li><a href=\"https://github.com/judasn/Linux-Tutorial\">Java 程序员眼中的 Linux</a></li>\n<li><a href=\"https://github.com/jaywcjlove/linux-command\">Linux 命令大全</a><br><img src=\"https://img-blog.csdnimg.cn/2021040715065752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"><h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3></li>\n<li><a href=\"https://github.com/fengdu78/deeplearning_ai_books\">吴恩达老师的深度学习课程笔记及资源</a></li>\n<li><a href=\"https://github.com/lcylmhlcy/Awesome-algorithm-interview\">算法工程师(人工智能CV方向)面试问题及相关资料</a></li>\n<li><a href=\"https://github.com/NLP-LOVE/ML-NLP\">ML-NLP</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407150834551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><ul>\n<li><a href=\"https://backlog.com/git-tutorial/cn/\">猴子都能懂的 Git 入门</a></li>\n<li><a href=\"https://github.com/firstcontributions/first-contributions\">第一次参与开源</a></li>\n<li><a href=\"https://github.com/521xueweihan/git-tips\">Git 的奇技淫巧</a><br><img src=\"https://img-blog.csdnimg.cn/20210407151055954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>受限于篇幅，我只是给出了部分资源。总体来说，项目目前收集的一些资源还是不错的，不仅有针对小白的入门级教程，还有各种实战项目。此外，还有各种知识点总结，对于校招和社招都有所帮助。总体也算是一个适合收藏的项目了，毕竟那么多的免费编程资源，先收藏起来，到时候扔给别人也有用呀！</p>\n<p>整理不易，有帮助的话大家一定要 喜欢 + 收藏 哦 ❤️！支持作者的同时，也方便自己下次更方便地找到叭！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/79c4d652584fe651c6fc97bf106e29e7.png\" alt=\"\"><br>最后附上仓库链接，供大家自取：</p>\n<blockquote>\n<p><a href=\"https://github.com/cunyu1943/amazing-programming-resources\">🎉 免费编程资源库</a></p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【资源分享】阿里云盘 PC 内测来了：颜值超高！","mathjax":true,"toc":true,"abbrlink":"d500dab8","date":"2021-05-04T03:21:41.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n前段时间阿里云盘已经开始公测，我们可以通过网页版和手机移动客户端进行使用，但是一直还没出 PC 客户端。而阿里也承诺了，PC 端一定会有，但是目前还在计划中。\n\n现在适用于 Windows 和 macOS 的阿里云盘客户端已经开始内测，但仅仅是面向少量用户。不过内测安装包已经泄露，而且所有阿里云盘的账户也都可以登陆使用。\n\n下面我们就来看看 PC 端长啥样吧，如果你也想体验一把，赶紧去文末查看安装包获取方式吧。\n\n## 客户端截图\n\n1.  **登录页**\n\n![](https://i.loli.net/2021/04/13/xpiRKua29SVX4Of.png)\n\n首先是客户端打开的图片，这里我们可以看到支持三种登陆方式，还是蛮方便的：\n\n-   短信登陆\n-   账号登陆\n-   扫码登陆\n\n至于具体通过哪一种方式登陆，那就看你自己的喜好来了。\n\n2.  **主界面**\n\n![](https://i.loli.net/2021/04/13/1IFk2CYVmKPJ3LD.png)\n\n然后是主界面，可以看到目前功能还是十分简单的，只有文件、收藏夹、回收站以及传输列表，整体和移动端功能还是没啥区别的。\n\n3.  **设置页面**\n\n![](https://i.loli.net/2021/04/13/UCd7tksOzlEvpyI.png)\n\n然后是设置页面，可以看到，这里增加了对于外观的选择，我们既可以选择浅色模式，也可以选择深色模式，还能够让它跟着我们系统的模式而自动改变。\n\n其次是是否开机自启动和休眠相关的设置，这个就要根据我们个人需要来进行选择了。以我个人来讲，我一般是不会让开机自启动的，不过有传输任务的时候，那可能还是会选择不休眠，嘿嘿 😁.\n\n最后我们还能选择文件下载的位置，设置成我们需要将文件下载到的目录，还是蛮人性化的。\n\n4.  **文件管理**\n\n![](https://i.loli.net/2021/04/13/YyQ1dT6Vi2EMkWj.png)\n\n目前来看，PC 端对于文件支持 **下载、分享、收藏、移动以及移到回收站** 主要 5 大功能。不过在我们点击分享的时候，会提示 **分享功能升级中，敬请期待**，所以说目前来看是还不能分享文件的。不过既然已经有了这个按钮，后续实现还会远么 😛。\n\n5.  **文件排序**\n\n目前针对文件排序，主要有以下 3 种：\n\n-   创建时间\n-   修改时间\n-   文件大小\n\n而且针对不同的排序方式，还可以自定义升序还是降序排列。这一点对于我们查找筛选文件还是十分方便的。\n\n6.  **文件视图**\n\n![](https://i.loli.net/2021/04/13/VqpWob94dAM15gD.png)\n\n对于文件视图，目前支持 **图标模式** 和 **列表模式** 两种方式，还是十分方便我们查看文件的。\n\n## 总结及获取方式\n\n好了，以上就是阿里云盘客户端的简要介绍了。总结而言，目前的 PC 端功能还是是否简陋的，不过并不影响给我们带来的体验。而且我也相信阿里在后续正式推出阿里云盘 PC 客户端的时候，相关功能也一定会更加完善的。\n\n最后就是最最关心的如何获取安装包的方式了，想要获取安装包体验的朋友，注意了！\n\n>   🎉🎉🎉\n>\n>   关注公众号：**村雨遥**，回复 **阿里云盘**，即可获取 Windows 和 macOS 内测安装包，不要错过！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【资源分享】阿里云盘-PC-内测来了：颜值超高！.md","raw":"---\ntitle: 【资源分享】阿里云盘 PC 内测来了：颜值超高！\nmathjax: true\ntoc: true\ntags:\n  - 资源\ncategories:\n  - 资源分享\nabbrlink: d500dab8\ndate: 2021-05-04 11:21:41\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n前段时间阿里云盘已经开始公测，我们可以通过网页版和手机移动客户端进行使用，但是一直还没出 PC 客户端。而阿里也承诺了，PC 端一定会有，但是目前还在计划中。\n\n现在适用于 Windows 和 macOS 的阿里云盘客户端已经开始内测，但仅仅是面向少量用户。不过内测安装包已经泄露，而且所有阿里云盘的账户也都可以登陆使用。\n\n下面我们就来看看 PC 端长啥样吧，如果你也想体验一把，赶紧去文末查看安装包获取方式吧。\n\n## 客户端截图\n\n1.  **登录页**\n\n![](https://i.loli.net/2021/04/13/xpiRKua29SVX4Of.png)\n\n首先是客户端打开的图片，这里我们可以看到支持三种登陆方式，还是蛮方便的：\n\n-   短信登陆\n-   账号登陆\n-   扫码登陆\n\n至于具体通过哪一种方式登陆，那就看你自己的喜好来了。\n\n2.  **主界面**\n\n![](https://i.loli.net/2021/04/13/1IFk2CYVmKPJ3LD.png)\n\n然后是主界面，可以看到目前功能还是十分简单的，只有文件、收藏夹、回收站以及传输列表，整体和移动端功能还是没啥区别的。\n\n3.  **设置页面**\n\n![](https://i.loli.net/2021/04/13/UCd7tksOzlEvpyI.png)\n\n然后是设置页面，可以看到，这里增加了对于外观的选择，我们既可以选择浅色模式，也可以选择深色模式，还能够让它跟着我们系统的模式而自动改变。\n\n其次是是否开机自启动和休眠相关的设置，这个就要根据我们个人需要来进行选择了。以我个人来讲，我一般是不会让开机自启动的，不过有传输任务的时候，那可能还是会选择不休眠，嘿嘿 😁.\n\n最后我们还能选择文件下载的位置，设置成我们需要将文件下载到的目录，还是蛮人性化的。\n\n4.  **文件管理**\n\n![](https://i.loli.net/2021/04/13/YyQ1dT6Vi2EMkWj.png)\n\n目前来看，PC 端对于文件支持 **下载、分享、收藏、移动以及移到回收站** 主要 5 大功能。不过在我们点击分享的时候，会提示 **分享功能升级中，敬请期待**，所以说目前来看是还不能分享文件的。不过既然已经有了这个按钮，后续实现还会远么 😛。\n\n5.  **文件排序**\n\n目前针对文件排序，主要有以下 3 种：\n\n-   创建时间\n-   修改时间\n-   文件大小\n\n而且针对不同的排序方式，还可以自定义升序还是降序排列。这一点对于我们查找筛选文件还是十分方便的。\n\n6.  **文件视图**\n\n![](https://i.loli.net/2021/04/13/VqpWob94dAM15gD.png)\n\n对于文件视图，目前支持 **图标模式** 和 **列表模式** 两种方式，还是十分方便我们查看文件的。\n\n## 总结及获取方式\n\n好了，以上就是阿里云盘客户端的简要介绍了。总结而言，目前的 PC 端功能还是是否简陋的，不过并不影响给我们带来的体验。而且我也相信阿里在后续正式推出阿里云盘 PC 客户端的时候，相关功能也一定会更加完善的。\n\n最后就是最最关心的如何获取安装包的方式了，想要获取安装包体验的朋友，注意了！\n\n>   🎉🎉🎉\n>\n>   关注公众号：**村雨遥**，回复 **阿里云盘**，即可获取 Windows 和 macOS 内测安装包，不要错过！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【资源分享】阿里云盘-PC-内测来了：颜值超高！","published":1,"updated":"2021-05-04T03:23:09.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw19004abw34az1h4bqf","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间阿里云盘已经开始公测，我们可以通过网页版和手机移动客户端进行使用，但是一直还没出 PC 客户端。而阿里也承诺了，PC 端一定会有，但是目前还在计划中。</p>\n<p>现在适用于 Windows 和 macOS 的阿里云盘客户端已经开始内测，但仅仅是面向少量用户。不过内测安装包已经泄露，而且所有阿里云盘的账户也都可以登陆使用。</p>\n<p>下面我们就来看看 PC 端长啥样吧，如果你也想体验一把，赶紧去文末查看安装包获取方式吧。</p>\n<h2 id=\"客户端截图\"><a href=\"#客户端截图\" class=\"headerlink\" title=\"客户端截图\"></a>客户端截图</h2><ol>\n<li><strong>登录页</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/xpiRKua29SVX4Of.png\" alt=\"\"></p>\n<p>首先是客户端打开的图片，这里我们可以看到支持三种登陆方式，还是蛮方便的：</p>\n<ul>\n<li>短信登陆</li>\n<li>账号登陆</li>\n<li>扫码登陆</li>\n</ul>\n<p>至于具体通过哪一种方式登陆，那就看你自己的喜好来了。</p>\n<ol>\n<li><strong>主界面</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/1IFk2CYVmKPJ3LD.png\" alt=\"\"></p>\n<p>然后是主界面，可以看到目前功能还是十分简单的，只有文件、收藏夹、回收站以及传输列表，整体和移动端功能还是没啥区别的。</p>\n<ol>\n<li><strong>设置页面</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/UCd7tksOzlEvpyI.png\" alt=\"\"></p>\n<p>然后是设置页面，可以看到，这里增加了对于外观的选择，我们既可以选择浅色模式，也可以选择深色模式，还能够让它跟着我们系统的模式而自动改变。</p>\n<p>其次是是否开机自启动和休眠相关的设置，这个就要根据我们个人需要来进行选择了。以我个人来讲，我一般是不会让开机自启动的，不过有传输任务的时候，那可能还是会选择不休眠，嘿嘿 😁.</p>\n<p>最后我们还能选择文件下载的位置，设置成我们需要将文件下载到的目录，还是蛮人性化的。</p>\n<ol>\n<li><strong>文件管理</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/YyQ1dT6Vi2EMkWj.png\" alt=\"\"></p>\n<p>目前来看，PC 端对于文件支持 <strong>下载、分享、收藏、移动以及移到回收站</strong> 主要 5 大功能。不过在我们点击分享的时候，会提示 <strong>分享功能升级中，敬请期待</strong>，所以说目前来看是还不能分享文件的。不过既然已经有了这个按钮，后续实现还会远么 😛。</p>\n<ol>\n<li><strong>文件排序</strong></li>\n</ol>\n<p>目前针对文件排序，主要有以下 3 种：</p>\n<ul>\n<li>创建时间</li>\n<li>修改时间</li>\n<li>文件大小</li>\n</ul>\n<p>而且针对不同的排序方式，还可以自定义升序还是降序排列。这一点对于我们查找筛选文件还是十分方便的。</p>\n<ol>\n<li><strong>文件视图</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/VqpWob94dAM15gD.png\" alt=\"\"></p>\n<p>对于文件视图，目前支持 <strong>图标模式</strong> 和 <strong>列表模式</strong> 两种方式，还是十分方便我们查看文件的。</p>\n<h2 id=\"总结及获取方式\"><a href=\"#总结及获取方式\" class=\"headerlink\" title=\"总结及获取方式\"></a>总结及获取方式</h2><p>好了，以上就是阿里云盘客户端的简要介绍了。总结而言，目前的 PC 端功能还是是否简陋的，不过并不影响给我们带来的体验。而且我也相信阿里在后续正式推出阿里云盘 PC 客户端的时候，相关功能也一定会更加完善的。</p>\n<p>最后就是最最关心的如何获取安装包的方式了，想要获取安装包体验的朋友，注意了！</p>\n<blockquote>\n<p>  🎉🎉🎉</p>\n<p>  关注公众号：<strong>村雨遥</strong>，回复 <strong>阿里云盘</strong>，即可获取 Windows 和 macOS 内测安装包，不要错过！</p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间阿里云盘已经开始公测，我们可以通过网页版和手机移动客户端进行使用，但是一直还没出 PC 客户端。而阿里也承诺了，PC 端一定会有，但是目前还在计划中。</p>\n<p>现在适用于 Windows 和 macOS 的阿里云盘客户端已经开始内测，但仅仅是面向少量用户。不过内测安装包已经泄露，而且所有阿里云盘的账户也都可以登陆使用。</p>\n<p>下面我们就来看看 PC 端长啥样吧，如果你也想体验一把，赶紧去文末查看安装包获取方式吧。</p>\n<h2 id=\"客户端截图\"><a href=\"#客户端截图\" class=\"headerlink\" title=\"客户端截图\"></a>客户端截图</h2><ol>\n<li><strong>登录页</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/xpiRKua29SVX4Of.png\" alt=\"\"></p>\n<p>首先是客户端打开的图片，这里我们可以看到支持三种登陆方式，还是蛮方便的：</p>\n<ul>\n<li>短信登陆</li>\n<li>账号登陆</li>\n<li>扫码登陆</li>\n</ul>\n<p>至于具体通过哪一种方式登陆，那就看你自己的喜好来了。</p>\n<ol>\n<li><strong>主界面</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/1IFk2CYVmKPJ3LD.png\" alt=\"\"></p>\n<p>然后是主界面，可以看到目前功能还是十分简单的，只有文件、收藏夹、回收站以及传输列表，整体和移动端功能还是没啥区别的。</p>\n<ol>\n<li><strong>设置页面</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/UCd7tksOzlEvpyI.png\" alt=\"\"></p>\n<p>然后是设置页面，可以看到，这里增加了对于外观的选择，我们既可以选择浅色模式，也可以选择深色模式，还能够让它跟着我们系统的模式而自动改变。</p>\n<p>其次是是否开机自启动和休眠相关的设置，这个就要根据我们个人需要来进行选择了。以我个人来讲，我一般是不会让开机自启动的，不过有传输任务的时候，那可能还是会选择不休眠，嘿嘿 😁.</p>\n<p>最后我们还能选择文件下载的位置，设置成我们需要将文件下载到的目录，还是蛮人性化的。</p>\n<ol>\n<li><strong>文件管理</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/YyQ1dT6Vi2EMkWj.png\" alt=\"\"></p>\n<p>目前来看，PC 端对于文件支持 <strong>下载、分享、收藏、移动以及移到回收站</strong> 主要 5 大功能。不过在我们点击分享的时候，会提示 <strong>分享功能升级中，敬请期待</strong>，所以说目前来看是还不能分享文件的。不过既然已经有了这个按钮，后续实现还会远么 😛。</p>\n<ol>\n<li><strong>文件排序</strong></li>\n</ol>\n<p>目前针对文件排序，主要有以下 3 种：</p>\n<ul>\n<li>创建时间</li>\n<li>修改时间</li>\n<li>文件大小</li>\n</ul>\n<p>而且针对不同的排序方式，还可以自定义升序还是降序排列。这一点对于我们查找筛选文件还是十分方便的。</p>\n<ol>\n<li><strong>文件视图</strong></li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/04/13/VqpWob94dAM15gD.png\" alt=\"\"></p>\n<p>对于文件视图，目前支持 <strong>图标模式</strong> 和 <strong>列表模式</strong> 两种方式，还是十分方便我们查看文件的。</p>\n<h2 id=\"总结及获取方式\"><a href=\"#总结及获取方式\" class=\"headerlink\" title=\"总结及获取方式\"></a>总结及获取方式</h2><p>好了，以上就是阿里云盘客户端的简要介绍了。总结而言，目前的 PC 端功能还是是否简陋的，不过并不影响给我们带来的体验。而且我也相信阿里在后续正式推出阿里云盘 PC 客户端的时候，相关功能也一定会更加完善的。</p>\n<p>最后就是最最关心的如何获取安装包的方式了，想要获取安装包体验的朋友，注意了！</p>\n<blockquote>\n<p>  🎉🎉🎉</p>\n<p>  关注公众号：<strong>村雨遥</strong>，回复 <strong>阿里云盘</strong>，即可获取 Windows 和 macOS 内测安装包，不要错过！</p>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】No 3. 变量与数据类型","mathjax":true,"toc":true,"abbrlink":"f8bfd521","date":"2021-05-03T07:19:02.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n>   1.  [No 1. 搭建 Java 开发环境](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=100008776&idx=1&sn=8a43777446d2553b0874d72d61557b0c&chksm=687b973e5f0c1e287e89a6626a967da2ae46537514f84bcdeaee861c9e19a9faff90aee0dc4b#rd)\n>   2.  [No 2. 玩转 IDEA](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=100009236&idx=1&sn=24594ae1ec062705e1c25ac7978bcfa2&chksm=687b91625f0c1874e56cdd277d11b9e1ae29d4530cbf23460d101d3c7e754b8c36858d0cde04#rd)\n\n在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎\n\n本文内容预告如下：\n\n1.  **变量**\n2.  **数据类型**\n3.  **变量作用域**\n4.  **常量**\n\n## 变量\n\n###  什么是变量？\n\n所谓变量，就是用来命名一个数据的标识符，在 Java 中，变量又可以分为两种：\n\n-   **基本类型的变量**\n-   **引用类型的变量**\n\n```java\n// 基本类型的变量\nint id = 1;\n// 引用类型的变量\nString name = \"村雨遥\";\n```\n\n其中 `int` 是基本数据类型，表示这是一个整型数；而 `String` 则是引用类型，表示这是一个引用类型；\n\n`id` 和 `name` 则是标识符，也就是我们所说的 **变量**；\n\n`=` 则是赋值操作符，而 `1` 则是基本类型的值，`村雨遥` 则是引用类型的值；\n\n### 变量的特点\n\n变量的最重要的一个特点就是可以重新赋值；\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n\t\t// 定义int类型变量id，并赋予初始值1\n        int id = 1; \n\t\t// 打印该变量的值，观察是否为1\n        System.out.println(id); \n \t\t// 重新赋值为2\n        id = 2; \n        // 打印该变量的值，观察是否为2\n        System.out.println(id); \n    }\n}\n```\n\n### 变量命名规则\n\n变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：\n\n1.  **强制**：变量命名只能使用 **字母（大小写均可）、数字、$、_**；\n2.  **强制**：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 `int、for、long…`）；\n3.  **强制**：变量第一个字符不能使用数字，只能用字母、`$`、`_`；\n4.  更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：https://github.com/cunyu1943/amazing-books\n\n### 常见关键字\n\n这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：\n\n-   **访问控制类**\n-   **类、方法及变量修饰符类**\n-   **程序控制类**\n-   **错误处理**\n-   **包相关**\n-   **基本类型**\n-   **变量引用**\n-   **保留字**\n\n![Java 关键字](https://img-blog.csdnimg.cn/img_convert/95420ab26dddc308e360be3eff4c824c.png)\n\n## 数据类型\n\n### 基本数据类型\n\nJava 中，共有 8 中基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 中基本数据类型分别是：\n\n-   **整型（4 种）**\n-   **浮点型（2 种）**\n-   **字符型（1 种）**\n-   **布尔型（1 种）**\n\n| 数据类型  | bit  | 字节   | 封装类      | 数据范围                             | 默认值  |\n| --------- | ---- | ------ | ----------- | ------------------------------------ | ------- |\n| `byte`    | 8    | 1      | `Byte`      | $-2^7$ ~ $2^7-1$                     | `0`     |\n| `short`   | 16   | 2      | `Short`     | $-2^{15}$ ~ $2^{15}-1$               | `0`     |\n| `char`    | 16   | 2      | `Character` | `\\u0000` ~ `\\uffff`（$0$ ~ $65535$） | `u0000` |\n| `int`     | 32   | 4      | `Integer`   | $-2^{31}$ ~ $2^{31}-1$               | `0`     |\n| `long`    | 64   | 8      | `Long`      | $-2^{63}$ ~ $2^{63}-1$               | `0L`    |\n| `float`   | 32   | 4      | `Float`     | $3.4e^{-45}$ ~ $1.4e^{38}$           | `0.0f`  |\n| `double`  | 64   | 8      | `Double`    | $4.9e^{-324}$ ~ $1.8e^{308}$         | `0.0D`  |\n| `boolean` | 1    | 不确定 | `Boolean`   | `true` 或 `false`                    | `false` |\n\n**注意：** \n\n1.  `boolean` 一般用 1 `bit` 来存储，但是具体大小并未规定，JVM 在编译期将 `boolean` 类型转换为 `int`，此时 1 代表 `true`，`0` 代表 `false`。此外，JVM 还指出 `boolean` 数组，但底层是通过 `byte` 数组来实现;\n2.  使用 `long` 类型时，需要在后边加上 `L`，否则将其作为整型解析，可能会导致越界；\n3.  浮点数如果没有明确指定 `float` 还是 `double`，统一按 `double` 处理；\n4.  `char` 是用 **单引号 `''`** 将内容括起来，**只能存放一个字符**，相当于一个整型值（ASCII 值），能够参加表达式运算；而 `String` 是用 **双引号 `\"\"`** 将内容括起来，代表的是一个地址值；\n5.  Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 `char` 来表示；\n\n那么如何个一个基本类型变量赋值呢？\n\n在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 **字面值**；\n\n```java\nfloat score = 89.0f;\nint age = 26;\n```\n\n###  引用数据类型\n\n####  常见引用数据类型\n\n| 数据类型 | 默认值 |\n| -------- | ------ |\n| 数组     | `null` |\n| 类       | `null` |\n| 接口     | `null` |\n\n而对于引用数据类型，我们经常是需要 `new` 关键字来进行赋值，但是引用类型中的 **接口是不能被实例化的，我们需要对其进行实现**；\n\n```java\n// 初始化一个对象\nPet dog = new Pet();\n// 初始化一个数组\nint[] arr = new int[10];\n```\n\n#### String\n\n对于引用数据类型中的 `String`，我们需要特别关注。\n\n`String` 不同于 `char`，它属于引用类型，而 `char` 属于基本数据类型。用双引号 `\"\"` 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。\n\n而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 `\"`，那么这个时候就需要借助于转义字符 `\\`，最常见的转义字符主要有：\n\n| 转义字符 | 含义         |\n| -------- | ------------ |\n| `\\\"`     | 字符 `\"`     |\n| `\\'`     | 字符 `'`     |\n| `\\\\`     | 字符 `\\`     |\n| `\\n`     | 换行符       |\n| `\\t`     | 制表符 `Tab` |\n| `\\r`     | 回车符       |\n\n>   那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？\n\nJava 编译器中，对于字符串和其他数据类型之间，可以使用 `+` 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；\n\n>   `String` 既然是不可变，那有什么优点呢？\n\n1.  **用于缓存 `hash` 值**\n\n由于 `String` 的 `hash` 值被频繁使用，它的不可变性使得 `hash` 值也不可变，此时只需要进行一次计算；\n\n2.  **字符串常量池（String Pool）的需要**\n\n如果一个 `String` 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 `String` 对象；\n\n3.  **安全性**\n\n我们经常用 `String` 作为我们方法的参数，其不变性能够保证参数不可变；\n\n4.  **线程安全**\n\n`String` 的不可变性让它天生 **具备线程安全**，能够在多个线程中方便使用而不用考虑线程安全问题。\n\n>   `String、StringBuilder、StringBuffer` 对比，该如何选择？\n\n|                 | 可变性 | 线程安全                               | 适用场景                                                     |\n| --------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `String`        | 不可变 | 安全                                   | 操作少量的数据                                               |\n| `StringBuffer`  | 可变   | 安全，内部使用 `synchronized` 进行同步 | 多线程操作字符串缓冲区下操作大量数据                         |\n| `StringBuilder` | 可变   | 不安全                                 | 单线程操作字符串缓冲区下操作大量数据，性能高于 `StringBuffer` |\n\n>   通过 `new String(“xxx”)` 创建字符串的两种情况？\n\n使用 `new` 的方式创建字符串对象，会有两种不同的情况：\n\n1.  **String Pool 中不存在 “xxx”**\n\n此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 `new` 会在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/1ac0bbab17f93e8cef821505ddffe3c3.png)\n\n2.  **String Pool 中存在 “xxx”**\n\n此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/3902f8cedc15ef9baed9372a894dec3f.png)\n\n### 数据类型转换\n\n对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；\n\n>   **从小到大自动转，从大到小强制转**。\n\n即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；\n\n但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 **强制转换** 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；\n\n```java\nint a = 110;\nlong b = 113;\n// 低精度转高精度，由于 long 的范围比 int 大，所以可以自动转\nb = a;\n// 高精度住哪低精度，由于 long 的范围比 int 大，所以需要强制转\na = (int)b;\n```\n\n#### 隐式转换（自动类型转换）\n\n当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：\n\n>   1.  两种数据类型彼此兼容；\n>   2.  目标数据类型的取值范围大于源数据类型；\n\n一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：\n\n>   -   **数值类型**：`byte -> short -> int -> long -> float -> double`\n>   -   **字符类型转整型**：`char -> int`\n\n#### 显式转换（强制类型转换）\n\n那既然满足上述两个条件时会发生隐式转换，那不满足同时我们又想进行数据类型转换时，我们该怎么办呢？\n\n这个时候就需要我们的 **显式转换** 登场了，其语法格式如下：\n\n```java\n(type) variableName;\n```\n\n我们举个 🌰 来说下：\n\n```java\nint num = 3;\ndouble ans = 5.0;\n// 要将 double 类型的值赋值给 int，则需要强制转换\nnum = (int)ans;\n```\n\n**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。\n\n#### 常见数据类型转换方法\n\n1.  **字符串与其他类型之间的转换**\n\n-   **其他类型 -> 字符串**\n\n>   1.  调用类的串转换方法：`X.toString()`；\n>   2.  自动转换：`\"\" + X`；\n>   3.  利用 `String` 的方法：`String.valueOf(X)`；\n\n```java\n// 方法 1\nString str1 = Integer.toString(int num);\nString str2 = Long.toString(long num);\nString str3 = Float.toString(flaot num);\nString str4 = Double.toString(double num);\n// 方法 2\nString str = \"\" + num ; // num 是 int、long、float、double 类型\n\n// 方法 3\nString str1 = String.valueOf(int num);\nString str2 = String.valueOf(long num);\nString str3 = String.valueOf(float num);\nString str4 = String.valueOf(double num);\n```\n\n\n\n-   **字符串 - > 其他类型**\n\n1.  调用 `parseXXX` 方法，比如 `parseLong、parseFloat、parseDouble...`；\n2.  先调用 `valueOf()`，方法，然后再调用 `xxxValue()` 方法；\n\n```java\n// 方法 1\nint num1 = Integer.parseInt(String str);\nLong num2 = Long.parseLong(String str);\nFloat num3 = Float.parseFloat(String str);\nDouble num4 = Double.parseDouble(String str);\n\n// 方法 2\nint num1 = Integer.valueOf(String str).intValue();\nLong num2 = Long.valueOf(String str).longValue();\nFloat num1 = Float.valueOf(String str).floatValue();\nDouble num1 = Double.valueOf(String str).doubleValue();\n```\n\n2.  **int、float、double** 之间的转换\n\n-   `float -> double`\n\n```java\nfloat num = 1.0f;\nFloat num1 = new Float(num);\ndouble num2 = num1.doubleValue();\n```\n\n-   `double -> float`\n\n```java\ndouble num = 100.0;\nfloat num1 = (float)num;\n```\n\n-   `double -> int`\n\n```java\ndouble num = 100.0;\nDouble num1 = new Double(num);\nint num2 = num1.intValue();\n```\n\n-   `int -> double`\n\n```java\nint num = 200;\ndouble num1 = num;\n```\n\n## 变量作用域\n\n我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？\n\n这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：\n\n-   **成员变量**：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；\n-   **局部变量**：定义在方法或方法体中的变量，作用域是其所在的代码块；\n\n### 成员变量\n\n成员变量又可以分为 **全局变量（又叫实例变量）** 和 **静态变量（也叫类变量）**，两者的区别如下：\n\n| 名称     | 修饰符   | 访问方式      | 生命周期                                   |\n| -------- | -------- | ------------- | ------------------------------------------ |\n| 全局变量 | 无       | 对象名.变量名 | 一旦对象被引用，则实例变量就存在           |\n| 静态变量 | `static` | 类名.变量名   | 同类共生死，只有当类被 GC 回收时才会被销毁 |\n\n```java\npublic class Person {\n    // 成员变量，全局变量\n    String name; \n    // 成员变量，全局变量\n    int age; \n\n    // 成员变量，静态变量\n    public static final String wechatPublic = \"公众号：村雨遥\"; \n    // 成员变量，静态变量\n    public static final String website = \"http://cunyu1943.site\"; \n}\n```\n\n### 局部变量\n\n成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：\n\n-   形参\n\n```java\npublic class Main {\n    // 方法中的参数\n    public static void func(int num) {\n        System.out.println(\"num = \" + num);\n    }\n\n    public static void main(String[] args) {\n        func(3);\n    }\n}\n```\n\n-   方法内定义\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int num = 10;\n        if (num > 5) {\n            // 声明一个 int 类型的局部变量\n            int tmp = 5; \n            System.out.println(\"tmp = \" + tmp);\n            System.out.println(\"num = \" + num);\n        }\n        System.out.println(\"num = \" + num);\n    }\n}\n```\n\n-   代码块定义\n\n```java\npublic class Main {\n    public static void func() {\n        try {\n            System.out.println(\"Hello!Exception!\");\n        } catch (Exception e) { // 异常处理块，参数为 Exception 类型\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        func();\n    }\n}\n```\n\n## 常量\n\n### 简介\n\n既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。\n\n常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 `final` 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！\n\n### 分类\n\nJava 中使用 `final` 关键字来声明常量，其语法格式如下：\n\n```java\nfinal 数据类型 常量名 = 常量初始值;\n```\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        // 声明一个常量并赋值\n        final int num = 1024;\n        \n        // 再次赋值，将导致编译错误\n        num = 1943;\n        \n        // 声明一个常量但不赋值\n        final int id;\n        // 因为声明时未赋值，所以可以进程初次赋值\n        id = 1;\n        // 常量已经赋值过了，再次赋值将导致编译错误\n        id = 2;\n    }\n}\n```\n\n常量可以分为如下 3 种类型：\n\n-   **静态常量**：`final` 之前用 `public staic` 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。\n-   **成员常量**：类似于成员变量，但是最大的不同在于它不能被修改。\n-   **局部常量**：作用类似于局部变量，不同之处也在于不能修改。\n\n```java\npublic class Main{\n    // 静态变量\n    public static final dobule PI = 3.14;\n    \n    // 成员常量\n    final int num = 1024;\n    \n    public static void main(String[] args){\n        // 局部变量\n        final long count = 1000;\n    }\n}\n```\n\nPS：`final` 修饰变量后，该变量则变为常量。而 `final` 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。\n\n\n## 总结\n\n码字不易，如果觉得对您有所帮助，可以点赞关注一波哦！🙏\n\n博主水平有限，对于文中可能出现的错误，还请各位批评指正，来评论区一起聊天吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-3-变量与数据类型.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 3. 变量与数据类型\nmathjax: true\ntoc: true\nabbrlink: f8bfd521\ndate: 2021-05-03 15:19:02\ntop:\ntags:\n    - Java\ncategories:\n  - Java 修炼之路\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n>   1.  [No 1. 搭建 Java 开发环境](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=100008776&idx=1&sn=8a43777446d2553b0874d72d61557b0c&chksm=687b973e5f0c1e287e89a6626a967da2ae46537514f84bcdeaee861c9e19a9faff90aee0dc4b#rd)\n>   2.  [No 2. 玩转 IDEA](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=100009236&idx=1&sn=24594ae1ec062705e1c25ac7978bcfa2&chksm=687b91625f0c1874e56cdd277d11b9e1ae29d4530cbf23460d101d3c7e754b8c36858d0cde04#rd)\n\n在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎\n\n本文内容预告如下：\n\n1.  **变量**\n2.  **数据类型**\n3.  **变量作用域**\n4.  **常量**\n\n## 变量\n\n###  什么是变量？\n\n所谓变量，就是用来命名一个数据的标识符，在 Java 中，变量又可以分为两种：\n\n-   **基本类型的变量**\n-   **引用类型的变量**\n\n```java\n// 基本类型的变量\nint id = 1;\n// 引用类型的变量\nString name = \"村雨遥\";\n```\n\n其中 `int` 是基本数据类型，表示这是一个整型数；而 `String` 则是引用类型，表示这是一个引用类型；\n\n`id` 和 `name` 则是标识符，也就是我们所说的 **变量**；\n\n`=` 则是赋值操作符，而 `1` 则是基本类型的值，`村雨遥` 则是引用类型的值；\n\n### 变量的特点\n\n变量的最重要的一个特点就是可以重新赋值；\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n\t\t// 定义int类型变量id，并赋予初始值1\n        int id = 1; \n\t\t// 打印该变量的值，观察是否为1\n        System.out.println(id); \n \t\t// 重新赋值为2\n        id = 2; \n        // 打印该变量的值，观察是否为2\n        System.out.println(id); \n    }\n}\n```\n\n### 变量命名规则\n\n变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：\n\n1.  **强制**：变量命名只能使用 **字母（大小写均可）、数字、$、_**；\n2.  **强制**：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 `int、for、long…`）；\n3.  **强制**：变量第一个字符不能使用数字，只能用字母、`$`、`_`；\n4.  更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：https://github.com/cunyu1943/amazing-books\n\n### 常见关键字\n\n这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：\n\n-   **访问控制类**\n-   **类、方法及变量修饰符类**\n-   **程序控制类**\n-   **错误处理**\n-   **包相关**\n-   **基本类型**\n-   **变量引用**\n-   **保留字**\n\n![Java 关键字](https://img-blog.csdnimg.cn/img_convert/95420ab26dddc308e360be3eff4c824c.png)\n\n## 数据类型\n\n### 基本数据类型\n\nJava 中，共有 8 中基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 中基本数据类型分别是：\n\n-   **整型（4 种）**\n-   **浮点型（2 种）**\n-   **字符型（1 种）**\n-   **布尔型（1 种）**\n\n| 数据类型  | bit  | 字节   | 封装类      | 数据范围                             | 默认值  |\n| --------- | ---- | ------ | ----------- | ------------------------------------ | ------- |\n| `byte`    | 8    | 1      | `Byte`      | $-2^7$ ~ $2^7-1$                     | `0`     |\n| `short`   | 16   | 2      | `Short`     | $-2^{15}$ ~ $2^{15}-1$               | `0`     |\n| `char`    | 16   | 2      | `Character` | `\\u0000` ~ `\\uffff`（$0$ ~ $65535$） | `u0000` |\n| `int`     | 32   | 4      | `Integer`   | $-2^{31}$ ~ $2^{31}-1$               | `0`     |\n| `long`    | 64   | 8      | `Long`      | $-2^{63}$ ~ $2^{63}-1$               | `0L`    |\n| `float`   | 32   | 4      | `Float`     | $3.4e^{-45}$ ~ $1.4e^{38}$           | `0.0f`  |\n| `double`  | 64   | 8      | `Double`    | $4.9e^{-324}$ ~ $1.8e^{308}$         | `0.0D`  |\n| `boolean` | 1    | 不确定 | `Boolean`   | `true` 或 `false`                    | `false` |\n\n**注意：** \n\n1.  `boolean` 一般用 1 `bit` 来存储，但是具体大小并未规定，JVM 在编译期将 `boolean` 类型转换为 `int`，此时 1 代表 `true`，`0` 代表 `false`。此外，JVM 还指出 `boolean` 数组，但底层是通过 `byte` 数组来实现;\n2.  使用 `long` 类型时，需要在后边加上 `L`，否则将其作为整型解析，可能会导致越界；\n3.  浮点数如果没有明确指定 `float` 还是 `double`，统一按 `double` 处理；\n4.  `char` 是用 **单引号 `''`** 将内容括起来，**只能存放一个字符**，相当于一个整型值（ASCII 值），能够参加表达式运算；而 `String` 是用 **双引号 `\"\"`** 将内容括起来，代表的是一个地址值；\n5.  Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 `char` 来表示；\n\n那么如何个一个基本类型变量赋值呢？\n\n在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 **字面值**；\n\n```java\nfloat score = 89.0f;\nint age = 26;\n```\n\n###  引用数据类型\n\n####  常见引用数据类型\n\n| 数据类型 | 默认值 |\n| -------- | ------ |\n| 数组     | `null` |\n| 类       | `null` |\n| 接口     | `null` |\n\n而对于引用数据类型，我们经常是需要 `new` 关键字来进行赋值，但是引用类型中的 **接口是不能被实例化的，我们需要对其进行实现**；\n\n```java\n// 初始化一个对象\nPet dog = new Pet();\n// 初始化一个数组\nint[] arr = new int[10];\n```\n\n#### String\n\n对于引用数据类型中的 `String`，我们需要特别关注。\n\n`String` 不同于 `char`，它属于引用类型，而 `char` 属于基本数据类型。用双引号 `\"\"` 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。\n\n而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 `\"`，那么这个时候就需要借助于转义字符 `\\`，最常见的转义字符主要有：\n\n| 转义字符 | 含义         |\n| -------- | ------------ |\n| `\\\"`     | 字符 `\"`     |\n| `\\'`     | 字符 `'`     |\n| `\\\\`     | 字符 `\\`     |\n| `\\n`     | 换行符       |\n| `\\t`     | 制表符 `Tab` |\n| `\\r`     | 回车符       |\n\n>   那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？\n\nJava 编译器中，对于字符串和其他数据类型之间，可以使用 `+` 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；\n\n>   `String` 既然是不可变，那有什么优点呢？\n\n1.  **用于缓存 `hash` 值**\n\n由于 `String` 的 `hash` 值被频繁使用，它的不可变性使得 `hash` 值也不可变，此时只需要进行一次计算；\n\n2.  **字符串常量池（String Pool）的需要**\n\n如果一个 `String` 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 `String` 对象；\n\n3.  **安全性**\n\n我们经常用 `String` 作为我们方法的参数，其不变性能够保证参数不可变；\n\n4.  **线程安全**\n\n`String` 的不可变性让它天生 **具备线程安全**，能够在多个线程中方便使用而不用考虑线程安全问题。\n\n>   `String、StringBuilder、StringBuffer` 对比，该如何选择？\n\n|                 | 可变性 | 线程安全                               | 适用场景                                                     |\n| --------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `String`        | 不可变 | 安全                                   | 操作少量的数据                                               |\n| `StringBuffer`  | 可变   | 安全，内部使用 `synchronized` 进行同步 | 多线程操作字符串缓冲区下操作大量数据                         |\n| `StringBuilder` | 可变   | 不安全                                 | 单线程操作字符串缓冲区下操作大量数据，性能高于 `StringBuffer` |\n\n>   通过 `new String(“xxx”)` 创建字符串的两种情况？\n\n使用 `new` 的方式创建字符串对象，会有两种不同的情况：\n\n1.  **String Pool 中不存在 “xxx”**\n\n此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 `new` 会在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/1ac0bbab17f93e8cef821505ddffe3c3.png)\n\n2.  **String Pool 中存在 “xxx”**\n\n此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/3902f8cedc15ef9baed9372a894dec3f.png)\n\n### 数据类型转换\n\n对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；\n\n>   **从小到大自动转，从大到小强制转**。\n\n即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；\n\n但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 **强制转换** 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；\n\n```java\nint a = 110;\nlong b = 113;\n// 低精度转高精度，由于 long 的范围比 int 大，所以可以自动转\nb = a;\n// 高精度住哪低精度，由于 long 的范围比 int 大，所以需要强制转\na = (int)b;\n```\n\n#### 隐式转换（自动类型转换）\n\n当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：\n\n>   1.  两种数据类型彼此兼容；\n>   2.  目标数据类型的取值范围大于源数据类型；\n\n一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：\n\n>   -   **数值类型**：`byte -> short -> int -> long -> float -> double`\n>   -   **字符类型转整型**：`char -> int`\n\n#### 显式转换（强制类型转换）\n\n那既然满足上述两个条件时会发生隐式转换，那不满足同时我们又想进行数据类型转换时，我们该怎么办呢？\n\n这个时候就需要我们的 **显式转换** 登场了，其语法格式如下：\n\n```java\n(type) variableName;\n```\n\n我们举个 🌰 来说下：\n\n```java\nint num = 3;\ndouble ans = 5.0;\n// 要将 double 类型的值赋值给 int，则需要强制转换\nnum = (int)ans;\n```\n\n**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。\n\n#### 常见数据类型转换方法\n\n1.  **字符串与其他类型之间的转换**\n\n-   **其他类型 -> 字符串**\n\n>   1.  调用类的串转换方法：`X.toString()`；\n>   2.  自动转换：`\"\" + X`；\n>   3.  利用 `String` 的方法：`String.valueOf(X)`；\n\n```java\n// 方法 1\nString str1 = Integer.toString(int num);\nString str2 = Long.toString(long num);\nString str3 = Float.toString(flaot num);\nString str4 = Double.toString(double num);\n// 方法 2\nString str = \"\" + num ; // num 是 int、long、float、double 类型\n\n// 方法 3\nString str1 = String.valueOf(int num);\nString str2 = String.valueOf(long num);\nString str3 = String.valueOf(float num);\nString str4 = String.valueOf(double num);\n```\n\n\n\n-   **字符串 - > 其他类型**\n\n1.  调用 `parseXXX` 方法，比如 `parseLong、parseFloat、parseDouble...`；\n2.  先调用 `valueOf()`，方法，然后再调用 `xxxValue()` 方法；\n\n```java\n// 方法 1\nint num1 = Integer.parseInt(String str);\nLong num2 = Long.parseLong(String str);\nFloat num3 = Float.parseFloat(String str);\nDouble num4 = Double.parseDouble(String str);\n\n// 方法 2\nint num1 = Integer.valueOf(String str).intValue();\nLong num2 = Long.valueOf(String str).longValue();\nFloat num1 = Float.valueOf(String str).floatValue();\nDouble num1 = Double.valueOf(String str).doubleValue();\n```\n\n2.  **int、float、double** 之间的转换\n\n-   `float -> double`\n\n```java\nfloat num = 1.0f;\nFloat num1 = new Float(num);\ndouble num2 = num1.doubleValue();\n```\n\n-   `double -> float`\n\n```java\ndouble num = 100.0;\nfloat num1 = (float)num;\n```\n\n-   `double -> int`\n\n```java\ndouble num = 100.0;\nDouble num1 = new Double(num);\nint num2 = num1.intValue();\n```\n\n-   `int -> double`\n\n```java\nint num = 200;\ndouble num1 = num;\n```\n\n## 变量作用域\n\n我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？\n\n这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：\n\n-   **成员变量**：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；\n-   **局部变量**：定义在方法或方法体中的变量，作用域是其所在的代码块；\n\n### 成员变量\n\n成员变量又可以分为 **全局变量（又叫实例变量）** 和 **静态变量（也叫类变量）**，两者的区别如下：\n\n| 名称     | 修饰符   | 访问方式      | 生命周期                                   |\n| -------- | -------- | ------------- | ------------------------------------------ |\n| 全局变量 | 无       | 对象名.变量名 | 一旦对象被引用，则实例变量就存在           |\n| 静态变量 | `static` | 类名.变量名   | 同类共生死，只有当类被 GC 回收时才会被销毁 |\n\n```java\npublic class Person {\n    // 成员变量，全局变量\n    String name; \n    // 成员变量，全局变量\n    int age; \n\n    // 成员变量，静态变量\n    public static final String wechatPublic = \"公众号：村雨遥\"; \n    // 成员变量，静态变量\n    public static final String website = \"http://cunyu1943.site\"; \n}\n```\n\n### 局部变量\n\n成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：\n\n-   形参\n\n```java\npublic class Main {\n    // 方法中的参数\n    public static void func(int num) {\n        System.out.println(\"num = \" + num);\n    }\n\n    public static void main(String[] args) {\n        func(3);\n    }\n}\n```\n\n-   方法内定义\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int num = 10;\n        if (num > 5) {\n            // 声明一个 int 类型的局部变量\n            int tmp = 5; \n            System.out.println(\"tmp = \" + tmp);\n            System.out.println(\"num = \" + num);\n        }\n        System.out.println(\"num = \" + num);\n    }\n}\n```\n\n-   代码块定义\n\n```java\npublic class Main {\n    public static void func() {\n        try {\n            System.out.println(\"Hello!Exception!\");\n        } catch (Exception e) { // 异常处理块，参数为 Exception 类型\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        func();\n    }\n}\n```\n\n## 常量\n\n### 简介\n\n既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。\n\n常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 `final` 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！\n\n### 分类\n\nJava 中使用 `final` 关键字来声明常量，其语法格式如下：\n\n```java\nfinal 数据类型 常量名 = 常量初始值;\n```\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        // 声明一个常量并赋值\n        final int num = 1024;\n        \n        // 再次赋值，将导致编译错误\n        num = 1943;\n        \n        // 声明一个常量但不赋值\n        final int id;\n        // 因为声明时未赋值，所以可以进程初次赋值\n        id = 1;\n        // 常量已经赋值过了，再次赋值将导致编译错误\n        id = 2;\n    }\n}\n```\n\n常量可以分为如下 3 种类型：\n\n-   **静态常量**：`final` 之前用 `public staic` 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。\n-   **成员常量**：类似于成员变量，但是最大的不同在于它不能被修改。\n-   **局部常量**：作用类似于局部变量，不同之处也在于不能修改。\n\n```java\npublic class Main{\n    // 静态变量\n    public static final dobule PI = 3.14;\n    \n    // 成员常量\n    final int num = 1024;\n    \n    public static void main(String[] args){\n        // 局部变量\n        final long count = 1000;\n    }\n}\n```\n\nPS：`final` 修饰变量后，该变量则变为常量。而 `final` 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。\n\n\n## 总结\n\n码字不易，如果觉得对您有所帮助，可以点赞关注一波哦！🙏\n\n博主水平有限，对于文中可能出现的错误，还请各位批评指正，来评论区一起聊天吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-3-变量与数据类型","published":1,"updated":"2021-05-04T01:41:15.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1b004cbw34270icxf6","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<ol>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=100008776&amp;idx=1&amp;sn=8a43777446d2553b0874d72d61557b0c&amp;chksm=687b973e5f0c1e287e89a6626a967da2ae46537514f84bcdeaee861c9e19a9faff90aee0dc4b#rd\">No 1. 搭建 Java 开发环境</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=100009236&amp;idx=1&amp;sn=24594ae1ec062705e1c25ac7978bcfa2&amp;chksm=687b91625f0c1874e56cdd277d11b9e1ae29d4530cbf23460d101d3c7e754b8c36858d0cde04#rd\">No 2. 玩转 IDEA</a></li>\n</ol>\n</blockquote>\n<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>\n<p>本文内容预告如下：</p>\n<ol>\n<li><strong>变量</strong></li>\n<li><strong>数据类型</strong></li>\n<li><strong>变量作用域</strong></li>\n<li><strong>常量</strong></li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a>什么是变量？</h3><p>所谓变量，就是用来命名一个数据的标识符，在 Java 中，变量又可以分为两种：</p>\n<ul>\n<li><strong>基本类型的变量</strong></li>\n<li><strong>引用类型的变量</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 基本类型的变量</span>\n<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 引用类型的变量</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>\n<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>\n<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>\n<h3 id=\"变量的特点\"><a href=\"#变量的特点\" class=\"headerlink\" title=\"变量的特点\"></a>变量的特点</h3><p>变量的最重要的一个特点就是可以重新赋值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 定义int类型变量id，并赋予初始值1</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token comment\">// 打印该变量的值，观察是否为1</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \t\t<span class=\"token comment\">// 重新赋值为2</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 打印该变量的值，观察是否为2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"变量命名规则\"><a href=\"#变量命名规则\" class=\"headerlink\" title=\"变量命名规则\"></a>变量命名规则</h3><p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>\n<ol>\n<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>\n<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>\n<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>\n<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href=\"https://github.com/cunyu1943/amazing-books\">https://github.com/cunyu1943/amazing-books</a></li>\n</ol>\n<h3 id=\"常见关键字\"><a href=\"#常见关键字\" class=\"headerlink\" title=\"常见关键字\"></a>常见关键字</h3><p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>\n<ul>\n<li><strong>访问控制类</strong></li>\n<li><strong>类、方法及变量修饰符类</strong></li>\n<li><strong>程序控制类</strong></li>\n<li><strong>错误处理</strong></li>\n<li><strong>包相关</strong></li>\n<li><strong>基本类型</strong></li>\n<li><strong>变量引用</strong></li>\n<li><strong>保留字</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/95420ab26dddc308e360be3eff4c824c.png\" alt=\"Java 关键字\"></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>Java 中，共有 8 中基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 中基本数据类型分别是：</p>\n<ul>\n<li><strong>整型（4 种）</strong></li>\n<li><strong>浮点型（2 种）</strong></li>\n<li><strong>字符型（1 种）</strong></li>\n<li><strong>布尔型（1 种）</strong></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td>$-2^{15}$ ~ $2^{15}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code>（$0$ ~ $65535$）</td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td>$-2^{31}$ ~ $2^{31}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td>$-2^{63}$ ~ $2^{63}-1$</td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td>$3.4e^{-45}$ ~ $1.4e^{38}$</td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td>$4.9e^{-324}$ ~ $1.8e^{308}$</td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code> 或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意：</strong> </p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>\n<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>\"\"</code></strong> 将内容括起来，代表的是一个地址值；</li>\n<li>Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示；</li>\n</ol>\n<p>那么如何个一个基本类型变量赋值呢？</p>\n<p>在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> score <span class=\"token operator\">=</span> <span class=\"token number\">89.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><h4 id=\"常见引用数据类型\"><a href=\"#常见引用数据类型\" class=\"headerlink\" title=\"常见引用数据类型\"></a>常见引用数据类型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 初始化一个对象</span>\n<span class=\"token class-name\">Pet</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化一个数组</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>\n<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>\"\"</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>\n<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>\"</code>，那么这个时候就需要借助于转义字符 <code>\\</code>，最常见的转义字符主要有：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\\"</code></td>\n<td>字符 <code>\"</code></td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>字符 <code>'</code></td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>字符 <code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符 <code>Tab</code></td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>\n</blockquote>\n<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>\n<blockquote>\n<p>  <code>String</code> 既然是不可变，那有什么优点呢？</p>\n</blockquote>\n<ol>\n<li><strong>用于缓存 <code>hash</code> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol>\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol>\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<blockquote>\n<p>  <code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>\n</blockquote>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>\n</blockquote>\n<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ac0bbab17f93e8cef821505ddffe3c3.png\" alt=\"\"></p>\n<ol>\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3902f8cedc15ef9baed9372a894dec3f.png\" alt=\"\"></p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>\n<blockquote>\n<p>  <strong>从小到大自动转，从大到小强制转</strong>。</p>\n</blockquote>\n<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>\n<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> b <span class=\"token operator\">=</span> <span class=\"token number\">113</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 低精度转高精度，由于 long 的范围比 int 大，所以可以自动转</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 高精度住哪低精度，由于 long 的范围比 int 大，所以需要强制转</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"隐式转换（自动类型转换）\"><a href=\"#隐式转换（自动类型转换）\" class=\"headerlink\" title=\"隐式转换（自动类型转换）\"></a>隐式转换（自动类型转换）</h4><p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>\n<blockquote>\n<ol>\n<li>两种数据类型彼此兼容；</li>\n<li>目标数据类型的取值范围大于源数据类型；</li>\n</ol>\n</blockquote>\n<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>\n<blockquote>\n<ul>\n<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>\n<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>\n</ul>\n</blockquote>\n<h4 id=\"显式转换（强制类型转换）\"><a href=\"#显式转换（强制类型转换）\" class=\"headerlink\" title=\"显式转换（强制类型转换）\"></a>显式转换（强制类型转换）</h4><p>那既然满足上述两个条件时会发生隐式转换，那不满足同时我们又想进行数据类型转换时，我们该怎么办呢？</p>\n<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> variableName<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们举个 🌰 来说下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 要将 double 类型的值赋值给 int，则需要强制转换</span>\nnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ans<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：</strong>强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>\n<h4 id=\"常见数据类型转换方法\"><a href=\"#常见数据类型转换方法\" class=\"headerlink\" title=\"常见数据类型转换方法\"></a>常见数据类型转换方法</h4><ol>\n<li><strong>字符串与其他类型之间的转换</strong></li>\n</ol>\n<ul>\n<li><strong>其他类型 -&gt; 字符串</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>调用类的串转换方法：<code>X.toString()</code>；</li>\n<li>自动转换：<code>\"\" + X</code>；</li>\n<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方法 1</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>flaot num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 方法 2</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">;</span> <span class=\"token comment\">// num 是 int、long、float、double 类型</span>\n\n<span class=\"token comment\">// 方法 3</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>字符串 - &gt; 其他类型</strong></li>\n</ul>\n<ol>\n<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>\n<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方法 1</span>\n<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 方法 2</span>\n<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">floatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>int、float、double</strong> 之间的转换</li>\n</ol>\n<ul>\n<li><code>float -&gt; double</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>double -&gt; float</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><code>double -&gt; int</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>int -&gt; double</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> num1 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>\n<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>\n<ul>\n<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>\n<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>\n</ul>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>修饰符</th>\n<th>访问方式</th>\n<th>生命周期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全局变量</td>\n<td>无</td>\n<td>对象名.变量名</td>\n<td>一旦对象被引用，则实例变量就存在</td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td><code>static</code></td>\n<td>类名.变量名</td>\n<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 成员变量，全局变量</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 成员变量，全局变量</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 成员变量，静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> wechatPublic <span class=\"token operator\">=</span> <span class=\"token string\">\"公众号：村雨遥\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 成员变量，静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> website <span class=\"token operator\">=</span> <span class=\"token string\">\"http://cunyu1943.site\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>\n<ul>\n<li>形参</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 方法中的参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>方法内定义</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 声明一个 int 类型的局部变量</span>\n            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp = \"</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>代码块定义</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!Exception!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 异常处理块，参数为 Exception 类型</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>\n<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> 数据类型 常量名 <span class=\"token operator\">=</span> 常量初始值<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 声明一个常量并赋值</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 再次赋值，将导致编译错误</span>\n        num <span class=\"token operator\">=</span> <span class=\"token number\">1943</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 声明一个常量但不赋值</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 因为声明时未赋值，所以可以进程初次赋值</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 常量已经赋值过了，再次赋值将导致编译错误</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>常量可以分为如下 3 种类型：</p>\n<ul>\n<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>\n<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>\n<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> dobule PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 成员常量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 局部变量</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>码字不易，如果觉得对您有所帮助，可以点赞关注一波哦！🙏</p>\n<p>博主水平有限，对于文中可能出现的错误，还请各位批评指正，来评论区一起聊天吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<ol>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=100008776&amp;idx=1&amp;sn=8a43777446d2553b0874d72d61557b0c&amp;chksm=687b973e5f0c1e287e89a6626a967da2ae46537514f84bcdeaee861c9e19a9faff90aee0dc4b#rd\">No 1. 搭建 Java 开发环境</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=100009236&amp;idx=1&amp;sn=24594ae1ec062705e1c25ac7978bcfa2&amp;chksm=687b91625f0c1874e56cdd277d11b9e1ae29d4530cbf23460d101d3c7e754b8c36858d0cde04#rd\">No 2. 玩转 IDEA</a></li>\n</ol>\n</blockquote>\n<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>\n<p>本文内容预告如下：</p>\n<ol>\n<li><strong>变量</strong></li>\n<li><strong>数据类型</strong></li>\n<li><strong>变量作用域</strong></li>\n<li><strong>常量</strong></li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a>什么是变量？</h3><p>所谓变量，就是用来命名一个数据的标识符，在 Java 中，变量又可以分为两种：</p>\n<ul>\n<li><strong>基本类型的变量</strong></li>\n<li><strong>引用类型的变量</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 基本类型的变量</span>\n<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 引用类型的变量</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>\n<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>\n<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>\n<h3 id=\"变量的特点\"><a href=\"#变量的特点\" class=\"headerlink\" title=\"变量的特点\"></a>变量的特点</h3><p>变量的最重要的一个特点就是可以重新赋值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 定义int类型变量id，并赋予初始值1</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token comment\">// 打印该变量的值，观察是否为1</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \t\t<span class=\"token comment\">// 重新赋值为2</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 打印该变量的值，观察是否为2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"变量命名规则\"><a href=\"#变量命名规则\" class=\"headerlink\" title=\"变量命名规则\"></a>变量命名规则</h3><p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>\n<ol>\n<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>\n<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>\n<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>\n<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href=\"https://github.com/cunyu1943/amazing-books\">https://github.com/cunyu1943/amazing-books</a></li>\n</ol>\n<h3 id=\"常见关键字\"><a href=\"#常见关键字\" class=\"headerlink\" title=\"常见关键字\"></a>常见关键字</h3><p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>\n<ul>\n<li><strong>访问控制类</strong></li>\n<li><strong>类、方法及变量修饰符类</strong></li>\n<li><strong>程序控制类</strong></li>\n<li><strong>错误处理</strong></li>\n<li><strong>包相关</strong></li>\n<li><strong>基本类型</strong></li>\n<li><strong>变量引用</strong></li>\n<li><strong>保留字</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/95420ab26dddc308e360be3eff4c824c.png\" alt=\"Java 关键字\"></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>Java 中，共有 8 中基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 中基本数据类型分别是：</p>\n<ul>\n<li><strong>整型（4 种）</strong></li>\n<li><strong>浮点型（2 种）</strong></li>\n<li><strong>字符型（1 种）</strong></li>\n<li><strong>布尔型（1 种）</strong></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td>$-2^{15}$ ~ $2^{15}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code>（$0$ ~ $65535$）</td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td>$-2^{31}$ ~ $2^{31}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td>$-2^{63}$ ~ $2^{63}-1$</td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td>$3.4e^{-45}$ ~ $1.4e^{38}$</td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td>$4.9e^{-324}$ ~ $1.8e^{308}$</td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code> 或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意：</strong> </p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>\n<li><code>char</code> 是用 <strong>单引号 <code>&#39;&#39;</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>&quot;&quot;</code></strong> 将内容括起来，代表的是一个地址值；</li>\n<li>Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示；</li>\n</ol>\n<p>那么如何个一个基本类型变量赋值呢？</p>\n<p>在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> score <span class=\"token operator\">=</span> <span class=\"token number\">89.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><h4 id=\"常见引用数据类型\"><a href=\"#常见引用数据类型\" class=\"headerlink\" title=\"常见引用数据类型\"></a>常见引用数据类型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 初始化一个对象</span>\n<span class=\"token class-name\">Pet</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化一个数组</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>\n<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>&quot;&quot;</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>\n<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>&quot;</code>，那么这个时候就需要借助于转义字符 <code>\\</code>，最常见的转义字符主要有：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>字符 <code>&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>字符 <code>&#39;</code></td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>字符 <code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符 <code>Tab</code></td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>\n</blockquote>\n<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>\n<blockquote>\n<p>  <code>String</code> 既然是不可变，那有什么优点呢？</p>\n</blockquote>\n<ol>\n<li><strong>用于缓存 <code>hash</code> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol>\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol>\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<blockquote>\n<p>  <code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>\n</blockquote>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>\n</blockquote>\n<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ac0bbab17f93e8cef821505ddffe3c3.png\" alt=\"\"></p>\n<ol>\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3902f8cedc15ef9baed9372a894dec3f.png\" alt=\"\"></p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>\n<blockquote>\n<p>  <strong>从小到大自动转，从大到小强制转</strong>。</p>\n</blockquote>\n<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>\n<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> b <span class=\"token operator\">=</span> <span class=\"token number\">113</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 低精度转高精度，由于 long 的范围比 int 大，所以可以自动转</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 高精度住哪低精度，由于 long 的范围比 int 大，所以需要强制转</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"隐式转换（自动类型转换）\"><a href=\"#隐式转换（自动类型转换）\" class=\"headerlink\" title=\"隐式转换（自动类型转换）\"></a>隐式转换（自动类型转换）</h4><p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>\n<blockquote>\n<ol>\n<li>两种数据类型彼此兼容；</li>\n<li>目标数据类型的取值范围大于源数据类型；</li>\n</ol>\n</blockquote>\n<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>\n<blockquote>\n<ul>\n<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>\n<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>\n</ul>\n</blockquote>\n<h4 id=\"显式转换（强制类型转换）\"><a href=\"#显式转换（强制类型转换）\" class=\"headerlink\" title=\"显式转换（强制类型转换）\"></a>显式转换（强制类型转换）</h4><p>那既然满足上述两个条件时会发生隐式转换，那不满足同时我们又想进行数据类型转换时，我们该怎么办呢？</p>\n<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> variableName<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们举个 🌰 来说下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 要将 double 类型的值赋值给 int，则需要强制转换</span>\nnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ans<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：</strong>强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>\n<h4 id=\"常见数据类型转换方法\"><a href=\"#常见数据类型转换方法\" class=\"headerlink\" title=\"常见数据类型转换方法\"></a>常见数据类型转换方法</h4><ol>\n<li><strong>字符串与其他类型之间的转换</strong></li>\n</ol>\n<ul>\n<li><strong>其他类型 -&gt; 字符串</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>调用类的串转换方法：<code>X.toString()</code>；</li>\n<li>自动转换：<code>&quot;&quot; + X</code>；</li>\n<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方法 1</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>flaot num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 方法 2</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">;</span> <span class=\"token comment\">// num 是 int、long、float、double 类型</span>\n\n<span class=\"token comment\">// 方法 3</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>字符串 - &gt; 其他类型</strong></li>\n</ul>\n<ol>\n<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>\n<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方法 1</span>\n<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 方法 2</span>\n<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Long</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">floatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>int、float、double</strong> 之间的转换</li>\n</ol>\n<ul>\n<li><code>float -&gt; double</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Float</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>double -&gt; float</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><code>double -&gt; int</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Double</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>int -&gt; double</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> num1 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>\n<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>\n<ul>\n<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>\n<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>\n</ul>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>修饰符</th>\n<th>访问方式</th>\n<th>生命周期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全局变量</td>\n<td>无</td>\n<td>对象名.变量名</td>\n<td>一旦对象被引用，则实例变量就存在</td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td><code>static</code></td>\n<td>类名.变量名</td>\n<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 成员变量，全局变量</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 成员变量，全局变量</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 成员变量，静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> wechatPublic <span class=\"token operator\">=</span> <span class=\"token string\">\"公众号：村雨遥\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 成员变量，静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> website <span class=\"token operator\">=</span> <span class=\"token string\">\"http://cunyu1943.site\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>\n<ul>\n<li>形参</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 方法中的参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>方法内定义</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 声明一个 int 类型的局部变量</span>\n            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp = \"</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>代码块定义</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!Exception!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 异常处理块，参数为 Exception 类型</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>\n<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> 数据类型 常量名 <span class=\"token operator\">=</span> 常量初始值<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 声明一个常量并赋值</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 再次赋值，将导致编译错误</span>\n        num <span class=\"token operator\">=</span> <span class=\"token number\">1943</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 声明一个常量但不赋值</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 因为声明时未赋值，所以可以进程初次赋值</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 常量已经赋值过了，再次赋值将导致编译错误</span>\n        id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>常量可以分为如下 3 种类型：</p>\n<ul>\n<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>\n<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>\n<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 静态变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> dobule PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 成员常量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 局部变量</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>码字不易，如果觉得对您有所帮助，可以点赞关注一波哦！🙏</p>\n<p>博主水平有限，对于文中可能出现的错误，还请各位批评指正，来评论区一起聊天吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】No 5. 控制流程","mathjax":true,"toc":true,"abbrlink":"5efee643","date":"2021-05-03T07:19:23.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n我们在 [上一篇文章](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247493159&idx=1&sn=b40579fed26d3ae4e31a27ddfe3f6a2d&chksm=e87b9251df0c1b47da575e732fae12591673809e39097a9f04b5f0038cc564d328d1d9c08059&cur_album_id=1624161604734877700&scene=189#rd) 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：\n\n-   **输入输出**\n-   **条件判断**\n-   **控制循环**\n\n## 输入输出\n\n### 输入\n\n要实现从控制台输入并读取到我们的程序中时，我们先来看一个实例：\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:53\n * @description : 输入\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"输入整型\");\n        int num = scanner.nextInt();\n        System.out.println(\"输入的整型：\" + num);\n\n        System.out.println(\"输入字符型\");\n        String name = scanner.next();\n        System.out.println(\"输入的字符型：\" + name);\n\n        System.out.println(\"输入浮点型\");\n        float floatNum = scanner.nextFloat();\n        System.out.println(\"输入的字符型：\" + floatNum);\n        double doubleNum = scanner.nextDouble();\n        System.out.println(\"输入的字符型：\" + doubleNum);\n\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bc3778b282d9a2ef5933368369b3e741.png)\n\n要实现从控制台输入，我们需要借助 `Scanner` 类，它属于标准输入流，其步骤总结如下：\n\n1.  首先，需要导入 `Scanner` 类。即 `import java.util.Scanner`，其中 `import` 表示导入某个类，并且只能放在程序的开头；\n2.  然后创建 `Scanner` 对象。这里需要注意，创建时需要传入 `System.in`，表示标准输入流，与之对应的 `System.out` 则代表标准输出流；\n3.  最后就是读取用户输入即可。这里读取时，调用不同的方法 `Scanner` 会自动转换数据类型，不用我们去进行手动转换；\n\n从控制台获取不同类型的输入，其常用方法如下：\n\n| 返回值    | 方法名        | 描述                                          |\n| --------- | ------------- | --------------------------------------------- |\n| `boolean` | `hasNext()`   | 如果还有输入，则返回 `true`，否则返回 `false` |\n| `String`  | `next()`      | 返回输入的字符串，以空格为分隔符              |\n| `String`  | `nextLine()`  | 返回输入的字符串，以换行为分隔符              |\n| `int`     | `nextInt()`   | 输入整型数                                    |\n| `long `   | `nextLong()`  | 输入长整型数                                  |\n| `float`   | `nextFloat()` | 输入单精度数                                  |\n| `double`  | `nextDouble`  | 输入双精度数                                  |\n\n### 输出\n\n其实从一开始的 `hello world` 到目前的代码中，我们已经接触过输出了，也就是我们的 `System.out.println()`。\n\n其中 `println` 表示输出并换行，如果我们不想换行，则使用 `print` 就可以了。\n\n通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。\n\n要使用格式化输出，需要使用 `System.out.printf()` 或者 `System.out.format()` 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：\n\n| 占位符 | 描述                             |\n| ------ | -------------------------------- |\n| `%d`   | 格式化输出整数                   |\n| `%f`   | 格式化输出浮点数                 |\n| `%s`   | 格式化输出字符串                 |\n| `%x`   | 格式化输出十六进制整数           |\n| `%e`   | 格式化输出科学计数法表示的浮点数 |\n\n此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。\n\n| 转义字符 | 描述           |\n| -------- | -------------- |\n| `\\n`     | 换行           |\n| `\\t`     | 水平制表符     |\n| `\\\\`     | 表示一个反斜杠 |\n| `\\'`     | 表示一个单引号 |\n| `\\\"`     | 表示一个双引号 |\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 14:48\n * @description : 输出\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        double num2 = 34.9;\n        float num3 = 3.34f;\n        String name = \"村雨遥\";\n\n        //        换行及不换行输出\n        System.out.println(\"公众号：\" + name);\n        System.out.print(\"公众号：\" + name);\n        System.out.println(num1);\n\n        //        格式化输出\n        System.out.println(\"格式化输出：\");\n        System.out.printf(\"num1 = %d\\n\", num1);\n        System.out.format(\"num2 = %f\\t num3 = %f\\n\", num2, num3);\n        System.out.printf(\"name = %s\\n\", name);\n        System.out.format(\"name = %s\\n\", name);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/6c63ba7435b3abbdf69efb96ffaea484.png)\n\n## 条件判断\n\n### if\n\n1.  **单次判断**\n\n当我们只进行一次判断时，可以使用一个 `if` 语句包含一个条件表达式，其语法格式如下；\n\n```java\nif(条件表达式){\n    执行语句;\n}\n```\n\n其执行逻辑如下图所示，如果条件表达式的值为 `true`，则执行 `if` 语句块中的执行语句，否则就执行 `if` 语句块后边的代码；\n\n![](https://img-blog.csdnimg.cn/img_convert/e05f7094590b6f3fe2250b3f60ea4bd4.png)\n\n2.  **多次判断**\n\n要进行多次判断时，可以使用 `if…else` 的形式，其语法格式如下；\n\n```java\nif(条件表达式 1){\n    执行语句 1;\n} else if(条件表达式 2){\n\t执行语句 2;\n} else if(…){\n    …\n}…\n```\n\n其执行逻辑如下图所示，如果条件表达式 1 为 `true`，则执行执行语句 1，否则接着判断条件表达式 2，若为 `true`，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。\n\n![](https://img-blog.csdnimg.cn/img_convert/60fcdbfa3916e040433ae39df9c3fc39.png)\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:45\n * @description : 条件判断\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入分数：\");\n        double score = scanner.nextDouble();\n\n        if (score < 0 || score > 100) {\n            System.out.println(\"输入的分数不在0-100之间，不符合要求\");\n        } else if (score >= 90) {\n            System.out.println(\"A\");\n\n        } else if (score >= 80) {\n            System.out.println(\"B\");\n\n        } else if (score >= 60) {\n            System.out.println(\"C\");\n        } else {\n            System.out.println(\"D\");\n\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/09a52394e44f575f770390e72d785579.png)\n\n### switch\n\n当我们需要使用 `if` 进行判断时，难免显得有些繁琐。此时，我们就可以使用 `switch` 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。\n\n`switch` 分支的语法格式如下：\n\n```java\nswitch(表达式){\n    case value1:\n        执行语句1;\n        break;\n    case value2:\n        执行语句2;\n        break;\n    ……\n    default:\n        执行语句;\n        break;\n}\t\n```\n\n通过判断表达式的值，然后执行对应值下的执行语句，而 `default` 下的执行语句表示如果 `switch` 表达式未匹配到对应的值时所执行的语句；\n\n一个 `switch` 的实例如下：\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:49\n * @description : switch\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"请输入该学生成绩：\");\n        int grade = input.nextInt();//定义grade且获取键盘输入的整数\n        if (grade < 0 || grade > 100) {//输入的整数范围应为0-100\n            System.out.println(\"输入的成绩有误\");\n            return;\n        }\n        switch (grade / 10) {\n            case 10:\n            case 9:\n                System.out.println(\"该学生成绩优秀\");\n                break;\n            case 8:\n                System.out.println(\"该学生成绩良好\");\n                break;\n            case 7:\n                System.out.println(\"该学生成绩中等\");\n                break;\n            case 6:\n                System.out.println(\"该学生成绩基本合格\");\n                break;\n            default:\n                System.out.println(\"该学生成绩不合格\");\n                break;\n        }\n    }\n}\n```\n\n而在使用 `switch` 分支语法时，需要遵循一定的规则：\n\n1.  `switch` 中的变量类型可以是：`byte`、`short`、`int`、`char`、`String` （自 JDK 1.7 开始）；\n2.  `switch` 语句根据表达式的结果跳转到对应的 `case` 结果，然后执行其后跟着的语句，知道遇到 `break` 才结束执行；\n3.  默认情况下，一般都会跟着一个 `default` 的分支，用于未匹配到对应情况时的执行情况；\n\n## 控制循环\n\n### while\n\n假设我们现在有一个题目，需要你计算 `1 + 2 + 3 + …… + 50` 的结果，你会怎么办呢？\n\n这么写么：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 1 + 2;\n        sum += 3;\n        sum += 4;\n        ……\n        sum += 50;\n        System.out.println(\"1 + 2 + 3 + …… + 50 = \" + sum);\n    }\n}\n```\n\n这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 1;\n        while (num <= 50) {\n            sum += num;\n            num++;\n        }\n        System.out.println(\"1 + 2 + 3 + …… + 50 = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ed281251818035d2b64e367eb55e0204.png)\n\n从上面的实例，利用 `while` 循环，我们就能轻易达成循环的效果。其语法格式如下：\n\n```java\nwhile(表达式){\n    执行语句;\n}\n```\n\n只要表达式为 `true`，就会不断循环执行其中的执行语句，直到表达式为 `false`，此时便跳出循环，不再执行其中的执行语句。\n\n除开上面的形式之外，还有另一种 `while` 形式：\n\n```java\ndo{\n    执行语句;\n}while(表达式);\n```\n\n两者的最大区别在于：`do……while` 无论 `表达式` 是否为 `true`，都至少会执行一次。\n\n\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 10;\n        while (num <= 9) {\n            sum += num;\n            num++;\n        }\n        System.out.println(\"sum = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bd0369b67972abbf359d39c3a8b506c8.png)\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 10;\n        do {\n            sum += num;\n            num++;\n        } while (num < 10);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/51f69b792eebf84157a23beb08e941ef.png)\n\n观察以上两个实例，在 `while` 程序中，我们定义 `num = 10`，然后假设 `num <= 9` 时就进入循环体，而 $10 > 9$，所以不进入循环体，直接打印 `sum` 的值为 `0`。而在 `do…while` 程序中，我们同样定义 `num = 10`，然后假设 `num < 10` 时继续循环，很明显不满足该情况，理应跳出循环，打印出 `sum` 的值为 `10`，说明此时还是进行了一次循环。\n\n因此，当我们需要在 `while` 和 `do……while` 之间做出选择时，如果我们最少需要进行一次循环，则选择 `do……while`，其他情况下选用两者都可以。\n\n### for\n\n-   **普通 for 循环**\n\n除开 `while` 和 `do……while` 之外，我们还有 `for` 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 `1 + 2 + …… + 50` 为例，可以写成如下的形式：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:20\n * @description : for 循环\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int num = 1; num <= 50; num++) {\n            sum += num;\n        }\n\n        System.out.println(\"1 + 2 + …… + 50 = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/29832cd00253016912eb38b6a1fcc2f9.png)\n\n`for` 循环的语法形式如下：\n\n```java\nfor(初始条件;终止条件;更新语句){\n    循环语句;\n}\n```\n\n`for` 循环的执行步骤如下：\n\n1.  首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空；\n2.  接着判断终止条件，如果为 `true`，则进入循环体执行循环语句；如果为 `false`，则终止循环，执行循环体后面的语句；\n3.  一次循环完成后，执行更新语句来更新循环控制变量；\n4.  最后再次判断终止条件，循环以上三个步骤；\n\n`for` 和 `while` 最大的区别就在于 `for` 循环一般都是事先知道需要循环的次数的，而 `while` 循环则不需要。\n\n-   **增强 for 循环** \n\n自 Java 5 后，引入了一种增强型 `for` 循环，主要用于数字遍历，其语法格式如下：\n\n```java\nfor(声明语句:表达式){\n\t// 循环语句\n}\n```\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:39\n * @description : 增强 for 循环\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 4, 5, 6, 9, 10};\n        for (int number : numbers) {\n            System.out.print(number + \"\\t\");\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2a37daf78227af1f7aa8787dd581cc3f.png)\n\n其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。\n\n### continue & break\n\n### break\n\n主要用在循环语句或者 `switch` 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。\n\n`break` 在 `switch` 语句中的用法已经见识过了，我们就来看看它在循环中的应用。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break & continue\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i < 10; i++) {\n            System.out.println(\"i = \" + i);\n            if (i == 5) {\n                break;\n            }\n        }\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/206ee43e16e73609fcb23d616f96c66c.png)\n\n观察结果可知，当 `i == 5` 时，我们执行了 `break` 语句，此时就直接跳出了 `for` 循环，而不再进行下一次的循环。\n\n### continue\n\n`continue` 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。\n\n在 `for` 循环中，执行 `continue` 语句后，直接跳转到更新语句，而不再执行 `continue` 后的语句。而在 `while` 或 `do……while` 循环中，执行 `continue` 语句后，直接跳转到表达式的判断。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break & continue\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i < 10; i++) {\n            if (i == 5) {\n                continue;\n            }\n            System.out.println(\"i = \" + i);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/369eed4071738b235ee90ca45e09dbd0.png)\n\n观察上述结果可知，当 `i == 5` 时，我们执行了 `continue` 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.\n\n## 总结\n\n今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！\n\n其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区给我指出来！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】No-5-控制流程.md","raw":"---\ntitle: 【Java 从入坑到放弃】No 5. 控制流程\nmathjax: true\ntoc: true\nabbrlink: 5efee643\ndate: 2021-05-03 15:19:23\ntop:\ntags:\n    - Java\ncategories:\n  - Java 修炼之路\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n我们在 [上一篇文章](https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&mid=2247493159&idx=1&sn=b40579fed26d3ae4e31a27ddfe3f6a2d&chksm=e87b9251df0c1b47da575e732fae12591673809e39097a9f04b5f0038cc564d328d1d9c08059&cur_album_id=1624161604734877700&scene=189#rd) 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：\n\n-   **输入输出**\n-   **条件判断**\n-   **控制循环**\n\n## 输入输出\n\n### 输入\n\n要实现从控制台输入并读取到我们的程序中时，我们先来看一个实例：\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:53\n * @description : 输入\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"输入整型\");\n        int num = scanner.nextInt();\n        System.out.println(\"输入的整型：\" + num);\n\n        System.out.println(\"输入字符型\");\n        String name = scanner.next();\n        System.out.println(\"输入的字符型：\" + name);\n\n        System.out.println(\"输入浮点型\");\n        float floatNum = scanner.nextFloat();\n        System.out.println(\"输入的字符型：\" + floatNum);\n        double doubleNum = scanner.nextDouble();\n        System.out.println(\"输入的字符型：\" + doubleNum);\n\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bc3778b282d9a2ef5933368369b3e741.png)\n\n要实现从控制台输入，我们需要借助 `Scanner` 类，它属于标准输入流，其步骤总结如下：\n\n1.  首先，需要导入 `Scanner` 类。即 `import java.util.Scanner`，其中 `import` 表示导入某个类，并且只能放在程序的开头；\n2.  然后创建 `Scanner` 对象。这里需要注意，创建时需要传入 `System.in`，表示标准输入流，与之对应的 `System.out` 则代表标准输出流；\n3.  最后就是读取用户输入即可。这里读取时，调用不同的方法 `Scanner` 会自动转换数据类型，不用我们去进行手动转换；\n\n从控制台获取不同类型的输入，其常用方法如下：\n\n| 返回值    | 方法名        | 描述                                          |\n| --------- | ------------- | --------------------------------------------- |\n| `boolean` | `hasNext()`   | 如果还有输入，则返回 `true`，否则返回 `false` |\n| `String`  | `next()`      | 返回输入的字符串，以空格为分隔符              |\n| `String`  | `nextLine()`  | 返回输入的字符串，以换行为分隔符              |\n| `int`     | `nextInt()`   | 输入整型数                                    |\n| `long `   | `nextLong()`  | 输入长整型数                                  |\n| `float`   | `nextFloat()` | 输入单精度数                                  |\n| `double`  | `nextDouble`  | 输入双精度数                                  |\n\n### 输出\n\n其实从一开始的 `hello world` 到目前的代码中，我们已经接触过输出了，也就是我们的 `System.out.println()`。\n\n其中 `println` 表示输出并换行，如果我们不想换行，则使用 `print` 就可以了。\n\n通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。\n\n要使用格式化输出，需要使用 `System.out.printf()` 或者 `System.out.format()` 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：\n\n| 占位符 | 描述                             |\n| ------ | -------------------------------- |\n| `%d`   | 格式化输出整数                   |\n| `%f`   | 格式化输出浮点数                 |\n| `%s`   | 格式化输出字符串                 |\n| `%x`   | 格式化输出十六进制整数           |\n| `%e`   | 格式化输出科学计数法表示的浮点数 |\n\n此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。\n\n| 转义字符 | 描述           |\n| -------- | -------------- |\n| `\\n`     | 换行           |\n| `\\t`     | 水平制表符     |\n| `\\\\`     | 表示一个反斜杠 |\n| `\\'`     | 表示一个单引号 |\n| `\\\"`     | 表示一个双引号 |\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 14:48\n * @description : 输出\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int num1 = 10;\n        double num2 = 34.9;\n        float num3 = 3.34f;\n        String name = \"村雨遥\";\n\n        //        换行及不换行输出\n        System.out.println(\"公众号：\" + name);\n        System.out.print(\"公众号：\" + name);\n        System.out.println(num1);\n\n        //        格式化输出\n        System.out.println(\"格式化输出：\");\n        System.out.printf(\"num1 = %d\\n\", num1);\n        System.out.format(\"num2 = %f\\t num3 = %f\\n\", num2, num3);\n        System.out.printf(\"name = %s\\n\", name);\n        System.out.format(\"name = %s\\n\", name);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/6c63ba7435b3abbdf69efb96ffaea484.png)\n\n## 条件判断\n\n### if\n\n1.  **单次判断**\n\n当我们只进行一次判断时，可以使用一个 `if` 语句包含一个条件表达式，其语法格式如下；\n\n```java\nif(条件表达式){\n    执行语句;\n}\n```\n\n其执行逻辑如下图所示，如果条件表达式的值为 `true`，则执行 `if` 语句块中的执行语句，否则就执行 `if` 语句块后边的代码；\n\n![](https://img-blog.csdnimg.cn/img_convert/e05f7094590b6f3fe2250b3f60ea4bd4.png)\n\n2.  **多次判断**\n\n要进行多次判断时，可以使用 `if…else` 的形式，其语法格式如下；\n\n```java\nif(条件表达式 1){\n    执行语句 1;\n} else if(条件表达式 2){\n\t执行语句 2;\n} else if(…){\n    …\n}…\n```\n\n其执行逻辑如下图所示，如果条件表达式 1 为 `true`，则执行执行语句 1，否则接着判断条件表达式 2，若为 `true`，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。\n\n![](https://img-blog.csdnimg.cn/img_convert/60fcdbfa3916e040433ae39df9c3fc39.png)\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:45\n * @description : 条件判断\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入分数：\");\n        double score = scanner.nextDouble();\n\n        if (score < 0 || score > 100) {\n            System.out.println(\"输入的分数不在0-100之间，不符合要求\");\n        } else if (score >= 90) {\n            System.out.println(\"A\");\n\n        } else if (score >= 80) {\n            System.out.println(\"B\");\n\n        } else if (score >= 60) {\n            System.out.println(\"C\");\n        } else {\n            System.out.println(\"D\");\n\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/09a52394e44f575f770390e72d785579.png)\n\n### switch\n\n当我们需要使用 `if` 进行判断时，难免显得有些繁琐。此时，我们就可以使用 `switch` 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。\n\n`switch` 分支的语法格式如下：\n\n```java\nswitch(表达式){\n    case value1:\n        执行语句1;\n        break;\n    case value2:\n        执行语句2;\n        break;\n    ……\n    default:\n        执行语句;\n        break;\n}\t\n```\n\n通过判断表达式的值，然后执行对应值下的执行语句，而 `default` 下的执行语句表示如果 `switch` 表达式未匹配到对应的值时所执行的语句；\n\n一个 `switch` 的实例如下：\n\n```java\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:49\n * @description : switch\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"请输入该学生成绩：\");\n        int grade = input.nextInt();//定义grade且获取键盘输入的整数\n        if (grade < 0 || grade > 100) {//输入的整数范围应为0-100\n            System.out.println(\"输入的成绩有误\");\n            return;\n        }\n        switch (grade / 10) {\n            case 10:\n            case 9:\n                System.out.println(\"该学生成绩优秀\");\n                break;\n            case 8:\n                System.out.println(\"该学生成绩良好\");\n                break;\n            case 7:\n                System.out.println(\"该学生成绩中等\");\n                break;\n            case 6:\n                System.out.println(\"该学生成绩基本合格\");\n                break;\n            default:\n                System.out.println(\"该学生成绩不合格\");\n                break;\n        }\n    }\n}\n```\n\n而在使用 `switch` 分支语法时，需要遵循一定的规则：\n\n1.  `switch` 中的变量类型可以是：`byte`、`short`、`int`、`char`、`String` （自 JDK 1.7 开始）；\n2.  `switch` 语句根据表达式的结果跳转到对应的 `case` 结果，然后执行其后跟着的语句，知道遇到 `break` 才结束执行；\n3.  默认情况下，一般都会跟着一个 `default` 的分支，用于未匹配到对应情况时的执行情况；\n\n## 控制循环\n\n### while\n\n假设我们现在有一个题目，需要你计算 `1 + 2 + 3 + …… + 50` 的结果，你会怎么办呢？\n\n这么写么：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 1 + 2;\n        sum += 3;\n        sum += 4;\n        ……\n        sum += 50;\n        System.out.println(\"1 + 2 + 3 + …… + 50 = \" + sum);\n    }\n}\n```\n\n这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 1;\n        while (num <= 50) {\n            sum += num;\n            num++;\n        }\n        System.out.println(\"1 + 2 + 3 + …… + 50 = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ed281251818035d2b64e367eb55e0204.png)\n\n从上面的实例，利用 `while` 循环，我们就能轻易达成循环的效果。其语法格式如下：\n\n```java\nwhile(表达式){\n    执行语句;\n}\n```\n\n只要表达式为 `true`，就会不断循环执行其中的执行语句，直到表达式为 `false`，此时便跳出循环，不再执行其中的执行语句。\n\n除开上面的形式之外，还有另一种 `while` 形式：\n\n```java\ndo{\n    执行语句;\n}while(表达式);\n```\n\n两者的最大区别在于：`do……while` 无论 `表达式` 是否为 `true`，都至少会执行一次。\n\n\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 10;\n        while (num <= 9) {\n            sum += num;\n            num++;\n        }\n        System.out.println(\"sum = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bd0369b67972abbf359d39c3a8b506c8.png)\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        int num = 10;\n        do {\n            sum += num;\n            num++;\n        } while (num < 10);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/51f69b792eebf84157a23beb08e941ef.png)\n\n观察以上两个实例，在 `while` 程序中，我们定义 `num = 10`，然后假设 `num <= 9` 时就进入循环体，而 $10 > 9$，所以不进入循环体，直接打印 `sum` 的值为 `0`。而在 `do…while` 程序中，我们同样定义 `num = 10`，然后假设 `num < 10` 时继续循环，很明显不满足该情况，理应跳出循环，打印出 `sum` 的值为 `10`，说明此时还是进行了一次循环。\n\n因此，当我们需要在 `while` 和 `do……while` 之间做出选择时，如果我们最少需要进行一次循环，则选择 `do……while`，其他情况下选用两者都可以。\n\n### for\n\n-   **普通 for 循环**\n\n除开 `while` 和 `do……while` 之外，我们还有 `for` 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 `1 + 2 + …… + 50` 为例，可以写成如下的形式：\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:20\n * @description : for 循环\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int num = 1; num <= 50; num++) {\n            sum += num;\n        }\n\n        System.out.println(\"1 + 2 + …… + 50 = \" + sum);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/29832cd00253016912eb38b6a1fcc2f9.png)\n\n`for` 循环的语法形式如下：\n\n```java\nfor(初始条件;终止条件;更新语句){\n    循环语句;\n}\n```\n\n`for` 循环的执行步骤如下：\n\n1.  首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空；\n2.  接着判断终止条件，如果为 `true`，则进入循环体执行循环语句；如果为 `false`，则终止循环，执行循环体后面的语句；\n3.  一次循环完成后，执行更新语句来更新循环控制变量；\n4.  最后再次判断终止条件，循环以上三个步骤；\n\n`for` 和 `while` 最大的区别就在于 `for` 循环一般都是事先知道需要循环的次数的，而 `while` 循环则不需要。\n\n-   **增强 for 循环** \n\n自 Java 5 后，引入了一种增强型 `for` 循环，主要用于数字遍历，其语法格式如下：\n\n```java\nfor(声明语句:表达式){\n\t// 循环语句\n}\n```\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:39\n * @description : 增强 for 循环\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 4, 5, 6, 9, 10};\n        for (int number : numbers) {\n            System.out.print(number + \"\\t\");\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/2a37daf78227af1f7aa8787dd581cc3f.png)\n\n其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。\n\n### continue & break\n\n### break\n\n主要用在循环语句或者 `switch` 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。\n\n`break` 在 `switch` 语句中的用法已经见识过了，我们就来看看它在循环中的应用。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break & continue\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i < 10; i++) {\n            System.out.println(\"i = \" + i);\n            if (i == 5) {\n                break;\n            }\n        }\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/206ee43e16e73609fcb23d616f96c66c.png)\n\n观察结果可知，当 `i == 5` 时，我们执行了 `break` 语句，此时就直接跳出了 `for` 循环，而不再进行下一次的循环。\n\n### continue\n\n`continue` 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。\n\n在 `for` 循环中，执行 `continue` 语句后，直接跳转到更新语句，而不再执行 `continue` 后的语句。而在 `while` 或 `do……while` 循环中，执行 `continue` 语句后，直接跳转到表达式的判断。\n\n```java\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break & continue\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i < 10; i++) {\n            if (i == 5) {\n                continue;\n            }\n            System.out.println(\"i = \" + i);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/369eed4071738b235ee90ca45e09dbd0.png)\n\n观察上述结果可知，当 `i == 5` 时，我们执行了 `continue` 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.\n\n## 总结\n\n今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！\n\n其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区给我指出来！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】No-5-控制流程","published":1,"updated":"2021-05-03T07:23:15.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1d004dbw3484072vu8","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247493159&amp;idx=1&amp;sn=b40579fed26d3ae4e31a27ddfe3f6a2d&amp;chksm=e87b9251df0c1b47da575e732fae12591673809e39097a9f04b5f0038cc564d328d1d9c08059&amp;cur_album_id=1624161604734877700&amp;scene=189#rd\">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>\n<ul>\n<li><strong>输入输出</strong></li>\n<li><strong>条件判断</strong></li>\n<li><strong>控制循环</strong></li>\n</ul>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><p>要实现从控制台输入并读取到我们的程序中时，我们先来看一个实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:53\n * @description : 输入\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入整型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的整型：\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入浮点型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> floatNum <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> floatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> doubleNum <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> doubleNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bc3778b282d9a2ef5933368369b3e741.png\" alt=\"\"></p>\n<p>要实现从控制台输入，我们需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>\n<ol>\n<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头；</li>\n<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流；</li>\n<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换；</li>\n</ol>\n<p>从控制台获取不同类型的输入，其常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>hasNext()</code></td>\n<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>next()</code></td>\n<td>返回输入的字符串，以空格为分隔符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>nextLine()</code></td>\n<td>返回输入的字符串，以换行为分隔符</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>nextInt()</code></td>\n<td>输入整型数</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>nextLong()</code></td>\n<td>输入长整型数</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>nextFloat()</code></td>\n<td>输入单精度数</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>nextDouble</code></td>\n<td>输入双精度数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>\n<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>\n<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>\n<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%d</code></td>\n<td>格式化输出整数</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td>格式化输出浮点数</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td>格式化输出字符串</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>格式化输出十六进制整数</td>\n</tr>\n<tr>\n<td><code>%e</code></td>\n<td>格式化输出科学计数法表示的浮点数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>表示一个反斜杠</td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>表示一个单引号</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>表示一个双引号</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 14:48\n * @description : 输出\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">34.9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">3.34f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        换行及不换行输出</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        格式化输出</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"格式化输出：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = %d\\n\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 = %f\\t num3 = %f\\n\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6c63ba7435b3abbdf69efb96ffaea484.png\" alt=\"\"></p>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><ol>\n<li><strong>单次判断</strong></li>\n</ol>\n<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e05f7094590b6f3fe2250b3f60ea4bd4.png\" alt=\"\"></p>\n<ol>\n<li><strong>多次判断</strong></li>\n</ol>\n<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    执行语句 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t执行语句 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>…<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    …\n<span class=\"token punctuation\">}</span>…<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/60fcdbfa3916e040433ae39df9c3fc39.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:45\n * @description : 条件判断\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入分数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> score <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> score <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的分数不在0-100之间，不符合要求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/09a52394e44f575f770390e72d785579.png\" alt=\"\"></p>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>\n<p><code>switch</code> 分支的语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n        执行语句<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n        执行语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    ……\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        执行语句<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>\n<p>一个 <code>switch</code> 的实例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:49\n * @description : switch\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入该学生成绩：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> grade <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义grade且获取键盘输入的整数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grade <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> grade <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//输入的整数范围应为0-100</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的成绩有误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩基本合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩不合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>\n<ol>\n<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>\n<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，知道遇到 <code>break</code> 才结束执行；</li>\n<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>\n</ol>\n<h2 id=\"控制循环\"><a href=\"#控制循环\" class=\"headerlink\" title=\"控制循环\"></a>控制循环</h2><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>\n<p>这么写么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        ……\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + 3 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + 3 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ed281251818035d2b64e367eb55e0204.png\" alt=\"\"></p>\n<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>\n<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd0369b67972abbf359d39c3a8b506c8.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/51f69b792eebf84157a23beb08e941ef.png\" alt=\"\"></p>\n<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 $10 &gt; 9$，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>\n<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>\n<h3 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h3><ul>\n<li><strong>普通 for 循环</strong></li>\n</ul>\n<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:20\n * @description : for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/29832cd00253016912eb38b6a1fcc2f9.png\" alt=\"\"></p>\n<p><code>for</code> 循环的语法形式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始条件<span class=\"token punctuation\">;</span>终止条件<span class=\"token punctuation\">;</span>更新语句<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    循环语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>for</code> 循环的执行步骤如下：</p>\n<ol>\n<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空；</li>\n<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句；</li>\n<li>一次循环完成后，执行更新语句来更新循环控制变量；</li>\n<li>最后再次判断终止条件，循环以上三个步骤；</li>\n</ol>\n<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>\n<ul>\n<li><strong>增强 for 循环</strong> </li>\n</ul>\n<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句<span class=\"token operator\">:</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 循环语句</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:39\n * @description : 增强 for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2a37daf78227af1f7aa8787dd581cc3f.png\" alt=\"\"></p>\n<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>\n<h3 id=\"continue-amp-break\"><a href=\"#continue-amp-break\" class=\"headerlink\" title=\"continue &amp; break\"></a>continue &amp; break</h3><h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>\n<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break &amp; continue\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/206ee43e16e73609fcb23d616f96c66c.png\" alt=\"\"></p>\n<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>\n<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break &amp; continue\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/369eed4071738b235ee90ca45e09dbd0.png\" alt=\"\"></p>\n<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>\n<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区给我指出来！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNTg2MjkzNw==&amp;mid=2247493159&amp;idx=1&amp;sn=b40579fed26d3ae4e31a27ddfe3f6a2d&amp;chksm=e87b9251df0c1b47da575e732fae12591673809e39097a9f04b5f0038cc564d328d1d9c08059&amp;cur_album_id=1624161604734877700&amp;scene=189#rd\">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>\n<ul>\n<li><strong>输入输出</strong></li>\n<li><strong>条件判断</strong></li>\n<li><strong>控制循环</strong></li>\n</ul>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><p>要实现从控制台输入并读取到我们的程序中时，我们先来看一个实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 13:53\n * @description : 输入\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入整型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的整型：\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入字符型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入浮点型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> floatNum <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> floatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> doubleNum <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的字符型：\"</span> <span class=\"token operator\">+</span> doubleNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bc3778b282d9a2ef5933368369b3e741.png\" alt=\"\"></p>\n<p>要实现从控制台输入，我们需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>\n<ol>\n<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头；</li>\n<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流；</li>\n<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换；</li>\n</ol>\n<p>从控制台获取不同类型的输入，其常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>hasNext()</code></td>\n<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>next()</code></td>\n<td>返回输入的字符串，以空格为分隔符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>nextLine()</code></td>\n<td>返回输入的字符串，以换行为分隔符</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>nextInt()</code></td>\n<td>输入整型数</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>nextLong()</code></td>\n<td>输入长整型数</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>nextFloat()</code></td>\n<td>输入单精度数</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>nextDouble</code></td>\n<td>输入双精度数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>\n<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>\n<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>\n<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%d</code></td>\n<td>格式化输出整数</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td>格式化输出浮点数</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td>格式化输出字符串</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>格式化输出十六进制整数</td>\n</tr>\n<tr>\n<td><code>%e</code></td>\n<td>格式化输出科学计数法表示的浮点数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>表示一个反斜杠</td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>表示一个单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>表示一个双引号</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 14:48\n * @description : 输出\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">34.9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">3.34f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        换行及不换行输出</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        格式化输出</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"格式化输出：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = %d\\n\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 = %f\\t num3 = %f\\n\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6c63ba7435b3abbdf69efb96ffaea484.png\" alt=\"\"></p>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><ol>\n<li><strong>单次判断</strong></li>\n</ol>\n<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e05f7094590b6f3fe2250b3f60ea4bd4.png\" alt=\"\"></p>\n<ol>\n<li><strong>多次判断</strong></li>\n</ol>\n<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    执行语句 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t执行语句 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>…<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    …\n<span class=\"token punctuation\">&#125;</span>…<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/60fcdbfa3916e040433ae39df9c3fc39.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:45\n * @description : 条件判断\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入分数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> score <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> score <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的分数不在0-100之间，不符合要求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/09a52394e44f575f770390e72d785579.png\" alt=\"\"></p>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>\n<p><code>switch</code> 分支的语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n        执行语句<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n        执行语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    ……\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        执行语句<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>\n<p>一个 <code>switch</code> 的实例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/15 15:49\n * @description : switch\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入该学生成绩：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> grade <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义grade且获取键盘输入的整数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grade <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> grade <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//输入的整数范围应为0-100</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的成绩有误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩基本合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该学生成绩不合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>\n<ol>\n<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>\n<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，知道遇到 <code>break</code> 才结束执行；</li>\n<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>\n</ol>\n<h2 id=\"控制循环\"><a href=\"#控制循环\" class=\"headerlink\" title=\"控制循环\"></a>控制循环</h2><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>\n<p>这么写么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        ……\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + 3 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + 3 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ed281251818035d2b64e367eb55e0204.png\" alt=\"\"></p>\n<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>\n<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n    执行语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bd0369b67972abbf359d39c3a8b506c8.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 9:35\n * @description : while\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/51f69b792eebf84157a23beb08e941ef.png\" alt=\"\"></p>\n<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 $10 &gt; 9$，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>\n<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>\n<h3 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h3><ul>\n<li><strong>普通 for 循环</strong></li>\n</ul>\n<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:20\n * @description : for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 + 2 + …… + 50 = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/29832cd00253016912eb38b6a1fcc2f9.png\" alt=\"\"></p>\n<p><code>for</code> 循环的语法形式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始条件<span class=\"token punctuation\">;</span>终止条件<span class=\"token punctuation\">;</span>更新语句<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    循环语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>for</code> 循环的执行步骤如下：</p>\n<ol>\n<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空；</li>\n<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句；</li>\n<li>一次循环完成后，执行更新语句来更新循环控制变量；</li>\n<li>最后再次判断终止条件，循环以上三个步骤；</li>\n</ol>\n<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>\n<ul>\n<li><strong>增强 for 循环</strong> </li>\n</ul>\n<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句<span class=\"token operator\">:</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 循环语句</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:39\n * @description : 增强 for 循环\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2a37daf78227af1f7aa8787dd581cc3f.png\" alt=\"\"></p>\n<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>\n<h3 id=\"continue-amp-break\"><a href=\"#continue-amp-break\" class=\"headerlink\" title=\"continue &amp; break\"></a>continue &amp; break</h3><h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>\n<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break &amp; continue\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/206ee43e16e73609fcb23d616f96c66c.png\" alt=\"\"></p>\n<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>\n<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/16 10:51\n * @description : break &amp; continue\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/369eed4071738b235ee90ca45e09dbd0.png\" alt=\"\"></p>\n<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>\n<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区给我指出来！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】反射机制详解：入门、使用、实例","mathjax":true,"toc":true,"abbrlink":"3e20d784","date":"2021-05-04T03:15:02.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 反射概述\n\n### 什么是反射\n\n将类的各个组成部分封装为其他对象的过程就叫做 **反射**，其中 **组成部分** 指的是我们类的 **成员变量（Field）**、**构造方法（Constructor）**、**成员方法（Method）**。\n\n### 使用反射的优缺点\n\n- **优点**\n\n    1. 在程序运行过程中可以操作类对象，增加了程序的灵活性；\n    2. 解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；\n    3. 对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。\n\n- **缺点**\n\n    1. **性能问题**：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。\n    2. **安全问题**：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。\n    3. **程序健壮性**：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。\n\n## Class 对象的获取及使用\n\n### 获取 Class 对象的方式\n\n1. `Class.forName(\"全类名\")`\n\n源代码阶段，它能将字节码文件加载进内存中，然后返回 `Class` 对象，多用于配置文件中，将类名定义在配置文件中，通过读取配置文件来加载类。\n\n2. `类名.class`\n\n类对象阶段，通过类名的 `class` 属性来获取，多用于参数的传递。\n\n3. `对象.getClass()`\n\n运行时阶段，`getClass()` 定义在 `Object` 类中，表明所有类都能使用该方法，多用于对象的获取字节码的方式。\n\n\n我们首先定义一个 `Person` 类，用于后续反射功能的测试；\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Person\n * @date : 2021/4/7 22:37\n * @description : Person 类\n */\n\npublic class Person {\n    private int age;\n    private String name;\n    public long id;\n    public long grade;\n    protected float score;\n    protected int rank;\n\n\n    public Person(int age, String name, long id, long grade, float score, int rank) {\n        this.age = age;\n        this.name = name;\n        this.id = id;\n        this.grade = grade;\n        this.score = score;\n        this.rank = rank;\n    }\n\n    public Person() {\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n    \n    public long getGrade() {\n        return grade;\n    }\n\n    public void setGrade(long grade) {\n        this.grade = grade;\n    }\n\n    public float getScore() {\n        return score;\n    }\n\n    public void setScore(float score) {\n        this.score = score;\n    }\n\n    public int getRank() {\n        return rank;\n    }\n\n    public void setRank(int rank) {\n        this.rank = rank;\n    }\n\n    @Override\n    public String toString() {\n        final StringBuffer sb = new StringBuffer(\"Person{\");\n        sb.append(\"age=\").append(age);\n        sb.append(\", name='\").append(name).append('\\'');\n        sb.append(\", id=\").append(id);\n        sb.append(\", grade=\").append(grade);\n        sb.append(\", score=\").append(score);\n        sb.append(\", rank=\").append(rank);\n        sb.append('}');\n        return sb.toString();\n    }\n}\n```\n\n定义好 `Person` 类之后，我们尝试用 3 种不同的方式来获取 `Class` 对象，并比较它们是否相同。\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo1\n * @date : 2021/4/7 23:29\n * @description : Class 对象的获取\n */\n\npublic class Demo1 {\n    public static void main(String[] args) throws ClassNotFoundException {\n//        第一种方式，Class.forName(\"全类名\")\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n        System.out.println(class1);\n\n//        第二种方式，类名.class\n        Class class2 = Person.class;\n        System.out.println(class2);\n\n//        第三种方式，对象.getName()\n        Person person = new Person();\n        Class class3 = person.getClass();\n        System.out.println(class3);\n\n//        比较三个对象是否相同\n        System.out.println(class1 == class2);\n        System.out.println(class1 == class3);\n    }\n}\n```\n\n\n![对比结果](https://img-blog.csdnimg.cn/img_convert/5f0542d56abe1ea0b6f8d0af1849fc40.png)\n\n上述代码中，会发现最后输出的比较结果返回的是两个 `true`，说明通过上述三种方式获取的 `Class` 对象都是同一个，**同一个字节码文件（`*.class`）在一次运行过程中只会被加载一次**。\n\n### Class 对象的使用\n\n#### 获取成员变量\n\n- `Field[] getFields()`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field[] fields = class1.getFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/352fc6f7c2f3e20a0e3bc9ccefff9a7b.png)\n\n回顾下我们的 `Person` 类，可以发现 `id`、`grade` 成员变量都是被 `public` 所修饰的，说明该方法是用于获取类中所有被 `public` 所修饰的成员变量（**包括父类**）。\n\n- `Field getField(String name)`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field field1 = class1.getField(\"id\");\n        System.out.println(field1);\n        Field field2 = class1.getField(\"age\");\n        System.out.println(field2);\n        Field field3 = class1.getField(\"rank\");\n        System.out.println(field3);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7f6048b6d9b36bfee37bafc59332c1e6.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/27c23c0b20a37968c87e7285a0ce28b7.png)\n\n从上面的结果分析可知，该方法只能用于获取类中指定名称的 `public` 所修饰的成员变量，对于 `protected`、`private` 所修饰的成员变量，该方法是无法获取的（**包括父类**）。而获取或设置成员变量值时，可以通过 `get/set` 方法来操作，具体操作方法如下。\n\n```java\n// 假设我们获取到的 Field 为上面的 id，获取和设置 id 的值就可以通过如下操作来进行\n// 1. 获取\nField idField = personClass.getField(\"id\");\nPerson person = new Person();\nObject idValue = idField.get(person);\nSystem.out.println(\"id：\" + idValue);\n// 2. 设置\nidField.set(person, \"1312120\");\nSystem.out.println(\"person：\" + person);\n```\n\n- `Field[] getDeclaredFields()`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field[] fields = class1.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bb794db5bb33b26420543a4ddd9ab9d5.png)\n\n观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（**不包括父类**）。\n\n- `Field getDeclaredField(String name)`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field field1 = class1.getDeclaredField(\"id\");\n        System.out.println(field1);\n        Field field3 = class1.getDeclaredField(\"rank\");\n        System.out.println(field3);\n        Field field2 = class1.getDeclaredField(\"age\");\n        System.out.println(field2);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/370161d55c540b9f07ea3197e7f8c135.png)\n\n观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（**不包括父类**）。但是在利用 `set`、`get` 方法来获取和设置 `private`、`protected` 修饰的成员变量时，需要利用 `setAccessible()` 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。\n\n#### 获取构造方法\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo3\n * @date : 2021/4/8 13:28\n * @description : 构造对象获取\n */\n\npublic class Demo3 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n        Class personClass = Class.forName(\"com.cunyu.Person\");\n\n//        1. 获取所有构造方法\n        System.out.println(\"所有构造方法\");\n        Constructor[] constructors = personClass.getConstructors();\n        for (Constructor constructor : constructors) {\n            System.out.println(constructor);\n        }\n\n//        2. 获取指定构造方法\n\n//        空参构造方法\n        System.out.println(\"空参构造方法\");\n        Constructor constructor1 = personClass.getConstructor();\n        System.out.println(constructor1);\n//        带参构造方法\n        System.out.println(\"带参构造方法\");\n        Constructor constructor2 = personClass.getConstructor(int.class, String.class, long.class, long.class, float.class, int.class);\n        System.out.println(constructor2);\n\n//        获取构造方法后，可以利用它来创建对象\n        System.out.println(\"空参创建对象\");\n//        第一种方法\n        Object person = constructor1.newInstance();\n        System.out.println(person);\n//        第二种方法\n        Object person1 = personClass.newInstance();\n        System.out.println(person1);\n        \n        System.out.println(\"带参创建对象\");\n        Object object = constructor2.newInstance(20, \"村雨遥\", 1312020, 3, 99.0F, 2);\n        System.out.println(object);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/78d9193e2b0658b72b67d57099504fc0.png)\n\n- `Constructor<?>[] getConstructors()`\n\n    类似于通过 `Class` 实例来获取成员变量，该方法用于获取所有 `public` 所修饰的构造方法（**包括父类**）；\n\n- `Constructor<T> getConstructor(类<?>... parameterTypes)`\n\n该方法用于获取某一指定参数类型后的 `public` 所修饰的构造方法（**包括父类**）；\n\n- `Constructor<?>[] getDeclaredConstructors()`\n\n该方法用于获取所有 `public` 所修饰的构造方法（**不包括父类**）；\n\n- `Constructor<T> getDeclaredConstructor(类<?>... parameterTypes)`\n\n该方法用于获取某一指定参数类型后的 `public` 所修饰的构造方法（**不包括父类**）；\n\n\n\n而获取到构造方法之后，我们就可以利用 `newInstance()` 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 `Class.newInstance()` 来构造实例。\n\n#### 获取成员方法\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo4\n * @date : 2021/4/8 13:51\n * @description : 成员方法获取\n */\n\npublic class Demo4 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Class personClass = Class.forName(\"com.cunyu.Person\");\n\n//        获取所有 public 成员方法\n        System.out.println(\"获取所有成员方法\");\n        Method[] methods = personClass.getMethods();\n        for (Method method : methods) {\n            System.out.println(method);\n        }\n\n//        获取指定名称的方法\n        System.out.println(\"获取指定名称的方法\");\n        Method getAgeMethod = personClass.getMethod(\"getAge\");\n        System.out.println(getAgeMethod);\n\n//        执行方法\n        Person person = new Person(20, \"村雨遥\", 1312020, 3, 99.0F, 2);\n        int age = (int) getAgeMethod.invoke(person);\n        System.out.println(age);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ba2eba98f04cdeb5294a454c3b1d37f2.png)\n\n- `Method[] getMethods()`\n\n用于获取当前类的所有 `public` 所修饰的成员方法（**包括父类**）。\n\n- `Method getMethod(String name, 类<?>... parameterTypes)`\n\n用于获取当前类的某一个指定名称 `public` 所修饰的成员方法（**包括父类**）。\n\n- `Method[] getDeclaredMethods()` \n\n用于获取当前类的所有 `public` 所修饰的成员方法（**不包括父类**）。\n\n- `Method getDeclaredMethods(String name, 类<?>... parameterTypes)`\n\n用于获取当前类的某一个指定名称 `public` 所修饰的成员方法（**不包括父类**）。\n\n而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 `invoke()` 方法来执行该方法。\n\n#### 获取类名\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo5\n * @date : 2021/4/8 14:06\n * @description : 获取类名\n */\n\npublic class Demo5 {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Person person = new Person();\n        Class personClass = person.getClass();\n\n        String className = personClass.getName();\n        System.out.println(className);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/c05c54055aa7e79267fd1d67b8e73634.png)\n\n- `String getName()`\n\n从上述程序的结果可知，当我们获取到 `Class` 对象之后，如果不知道类的全名，就可以使用 `getName()` 来获取该类的全名。\n\n## 反射实例\n\n假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。\n\n此时，我们可以通过 **配置文件 + 反射**  的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。\n\n假设我们有两个类，一个 `Student`，一个 `Teacher`，两者的定义如下；\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Teacher\n * @date : 2021/4/8 15:15\n * @description : 教师类\n */\n\npublic class Teacher {\n    private String name;\n    private int age;\n\n    public void teach() {\n        System.out.println(\"教书育人……\");\n    }\n}\n```\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/8 15:16\n * @description : 学生类\n */\n\npublic class Student {\n    private String name;\n    private float score;\n\n    public void study() {\n        System.out.println(\"好好学习，天天向上……\");\n    }\n}\n```\n\n要实现我们的需求，通常需要如下步骤：\n\n1.  将要创建对象的全类名和要执行的方法都配置在配置文件中；\n\n定义的配置文件 `prop.properties` ，其中主要内容包括 `className` 和 `methodName` 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 `Student` 的类和名为 `study`  的方法。\n\n```properties\nclassName=com.cunyu.Student\nmethodName=study\n```\n\n2.  然后在主方法中加载读取配置文件；\n\n```java\n//        创建配置文件对象\nProperties properties = new Properties();\n//        加载配置文件\nClassLoader classLoader = ReflectTest.class.getClassLoader();\nInputStream inputStream = classLoader.getResourceAsStream(\"prop.properties\");\nproperties.load(inputStream);\n\n//        获取配置文件中定义的数据\nString className = properties.getProperty(\"className\");\nString methodName = properties.getProperty(\"methodName\");\n```\n\n3.  利用反射技术将类加载到内存中；\n\n```java\n//        加载进内存\nClass name = Class.forName(className);\n```\n\n4.  接着利用 `newInstance()` 方法创建对象；\n\n```java\n//        创建实例\nObject object = name.newInstance();\n```\n\n5.  最后则是利用 `invoke()` 方法来执行方法；\n\n```java\n//        获取并执行方法\nMethod method = name.getMethod(methodName);\nmethod.invoke(object);\n```\n\n将整个流程汇总起来就是：\n\n```java\npackage com.cunyu;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : ReflectTest\n * @date : 2021/4/8 15:27\n * @description : 测试\n */\n\npublic class ReflectTest {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {\n//        创建配置文件对象\n        Properties properties = new Properties();\n//        加载配置文件\n        ClassLoader classLoader = ReflectTest.class.getClassLoader();\n        InputStream inputStream = classLoader.getResourceAsStream(\"prop.properties\");\n        properties.load(inputStream);\n\n//        获取配置文件中定义的数据\n        String className = properties.getProperty(\"className\");\n        String methodName = properties.getProperty(\"methodName\");\n\n//        加载进内存\n        Class name = Class.forName(className);\n\n//        创建实例\n        Object object = name.newInstance();\n\n//        获取并执行方法\n        Method method = name.getMethod(methodName);\n        method.invoke(object);\n    }\n}\n```\n\n此时，我们只需要改动配置文件 `prop.properties` 中的配置即可输出不同结果；\n\n![](https://img-blog.csdnimg.cn/img_convert/2ea306bc1d85075dea38f22f852a741b.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/584f448161eebde25d8da0e9324210a5.png)\n\n## 总结\n\n好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！\n\n最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】反射机制详解：入门、使用、实例.md","raw":"---\ntitle: 【Java 从入坑到放弃】反射机制详解：入门、使用、实例\nmathjax: true\ntoc: true\ntags:\n  - Java\n  - 反射\ncategories:\n  - Java 修炼之路\nabbrlink: 3e20d784\ndate: 2021-05-04 11:15:02\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 反射概述\n\n### 什么是反射\n\n将类的各个组成部分封装为其他对象的过程就叫做 **反射**，其中 **组成部分** 指的是我们类的 **成员变量（Field）**、**构造方法（Constructor）**、**成员方法（Method）**。\n\n### 使用反射的优缺点\n\n- **优点**\n\n    1. 在程序运行过程中可以操作类对象，增加了程序的灵活性；\n    2. 解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；\n    3. 对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。\n\n- **缺点**\n\n    1. **性能问题**：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。\n    2. **安全问题**：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。\n    3. **程序健壮性**：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。\n\n## Class 对象的获取及使用\n\n### 获取 Class 对象的方式\n\n1. `Class.forName(\"全类名\")`\n\n源代码阶段，它能将字节码文件加载进内存中，然后返回 `Class` 对象，多用于配置文件中，将类名定义在配置文件中，通过读取配置文件来加载类。\n\n2. `类名.class`\n\n类对象阶段，通过类名的 `class` 属性来获取，多用于参数的传递。\n\n3. `对象.getClass()`\n\n运行时阶段，`getClass()` 定义在 `Object` 类中，表明所有类都能使用该方法，多用于对象的获取字节码的方式。\n\n\n我们首先定义一个 `Person` 类，用于后续反射功能的测试；\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Person\n * @date : 2021/4/7 22:37\n * @description : Person 类\n */\n\npublic class Person {\n    private int age;\n    private String name;\n    public long id;\n    public long grade;\n    protected float score;\n    protected int rank;\n\n\n    public Person(int age, String name, long id, long grade, float score, int rank) {\n        this.age = age;\n        this.name = name;\n        this.id = id;\n        this.grade = grade;\n        this.score = score;\n        this.rank = rank;\n    }\n\n    public Person() {\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n    \n    public long getGrade() {\n        return grade;\n    }\n\n    public void setGrade(long grade) {\n        this.grade = grade;\n    }\n\n    public float getScore() {\n        return score;\n    }\n\n    public void setScore(float score) {\n        this.score = score;\n    }\n\n    public int getRank() {\n        return rank;\n    }\n\n    public void setRank(int rank) {\n        this.rank = rank;\n    }\n\n    @Override\n    public String toString() {\n        final StringBuffer sb = new StringBuffer(\"Person{\");\n        sb.append(\"age=\").append(age);\n        sb.append(\", name='\").append(name).append('\\'');\n        sb.append(\", id=\").append(id);\n        sb.append(\", grade=\").append(grade);\n        sb.append(\", score=\").append(score);\n        sb.append(\", rank=\").append(rank);\n        sb.append('}');\n        return sb.toString();\n    }\n}\n```\n\n定义好 `Person` 类之后，我们尝试用 3 种不同的方式来获取 `Class` 对象，并比较它们是否相同。\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo1\n * @date : 2021/4/7 23:29\n * @description : Class 对象的获取\n */\n\npublic class Demo1 {\n    public static void main(String[] args) throws ClassNotFoundException {\n//        第一种方式，Class.forName(\"全类名\")\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n        System.out.println(class1);\n\n//        第二种方式，类名.class\n        Class class2 = Person.class;\n        System.out.println(class2);\n\n//        第三种方式，对象.getName()\n        Person person = new Person();\n        Class class3 = person.getClass();\n        System.out.println(class3);\n\n//        比较三个对象是否相同\n        System.out.println(class1 == class2);\n        System.out.println(class1 == class3);\n    }\n}\n```\n\n\n![对比结果](https://img-blog.csdnimg.cn/img_convert/5f0542d56abe1ea0b6f8d0af1849fc40.png)\n\n上述代码中，会发现最后输出的比较结果返回的是两个 `true`，说明通过上述三种方式获取的 `Class` 对象都是同一个，**同一个字节码文件（`*.class`）在一次运行过程中只会被加载一次**。\n\n### Class 对象的使用\n\n#### 获取成员变量\n\n- `Field[] getFields()`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field[] fields = class1.getFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/352fc6f7c2f3e20a0e3bc9ccefff9a7b.png)\n\n回顾下我们的 `Person` 类，可以发现 `id`、`grade` 成员变量都是被 `public` 所修饰的，说明该方法是用于获取类中所有被 `public` 所修饰的成员变量（**包括父类**）。\n\n- `Field getField(String name)`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field field1 = class1.getField(\"id\");\n        System.out.println(field1);\n        Field field2 = class1.getField(\"age\");\n        System.out.println(field2);\n        Field field3 = class1.getField(\"rank\");\n        System.out.println(field3);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7f6048b6d9b36bfee37bafc59332c1e6.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/27c23c0b20a37968c87e7285a0ce28b7.png)\n\n从上面的结果分析可知，该方法只能用于获取类中指定名称的 `public` 所修饰的成员变量，对于 `protected`、`private` 所修饰的成员变量，该方法是无法获取的（**包括父类**）。而获取或设置成员变量值时，可以通过 `get/set` 方法来操作，具体操作方法如下。\n\n```java\n// 假设我们获取到的 Field 为上面的 id，获取和设置 id 的值就可以通过如下操作来进行\n// 1. 获取\nField idField = personClass.getField(\"id\");\nPerson person = new Person();\nObject idValue = idField.get(person);\nSystem.out.println(\"id：\" + idValue);\n// 2. 设置\nidField.set(person, \"1312120\");\nSystem.out.println(\"person：\" + person);\n```\n\n- `Field[] getDeclaredFields()`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field[] fields = class1.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/bb794db5bb33b26420543a4ddd9ab9d5.png)\n\n观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（**不包括父类**）。\n\n- `Field getDeclaredField(String name)`\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */\n\npublic class Demo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        Class class1 = Class.forName(\"com.cunyu.Person\");\n\n        Field field1 = class1.getDeclaredField(\"id\");\n        System.out.println(field1);\n        Field field3 = class1.getDeclaredField(\"rank\");\n        System.out.println(field3);\n        Field field2 = class1.getDeclaredField(\"age\");\n        System.out.println(field2);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/370161d55c540b9f07ea3197e7f8c135.png)\n\n观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（**不包括父类**）。但是在利用 `set`、`get` 方法来获取和设置 `private`、`protected` 修饰的成员变量时，需要利用 `setAccessible()` 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。\n\n#### 获取构造方法\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo3\n * @date : 2021/4/8 13:28\n * @description : 构造对象获取\n */\n\npublic class Demo3 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n        Class personClass = Class.forName(\"com.cunyu.Person\");\n\n//        1. 获取所有构造方法\n        System.out.println(\"所有构造方法\");\n        Constructor[] constructors = personClass.getConstructors();\n        for (Constructor constructor : constructors) {\n            System.out.println(constructor);\n        }\n\n//        2. 获取指定构造方法\n\n//        空参构造方法\n        System.out.println(\"空参构造方法\");\n        Constructor constructor1 = personClass.getConstructor();\n        System.out.println(constructor1);\n//        带参构造方法\n        System.out.println(\"带参构造方法\");\n        Constructor constructor2 = personClass.getConstructor(int.class, String.class, long.class, long.class, float.class, int.class);\n        System.out.println(constructor2);\n\n//        获取构造方法后，可以利用它来创建对象\n        System.out.println(\"空参创建对象\");\n//        第一种方法\n        Object person = constructor1.newInstance();\n        System.out.println(person);\n//        第二种方法\n        Object person1 = personClass.newInstance();\n        System.out.println(person1);\n        \n        System.out.println(\"带参创建对象\");\n        Object object = constructor2.newInstance(20, \"村雨遥\", 1312020, 3, 99.0F, 2);\n        System.out.println(object);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/78d9193e2b0658b72b67d57099504fc0.png)\n\n- `Constructor<?>[] getConstructors()`\n\n    类似于通过 `Class` 实例来获取成员变量，该方法用于获取所有 `public` 所修饰的构造方法（**包括父类**）；\n\n- `Constructor<T> getConstructor(类<?>... parameterTypes)`\n\n该方法用于获取某一指定参数类型后的 `public` 所修饰的构造方法（**包括父类**）；\n\n- `Constructor<?>[] getDeclaredConstructors()`\n\n该方法用于获取所有 `public` 所修饰的构造方法（**不包括父类**）；\n\n- `Constructor<T> getDeclaredConstructor(类<?>... parameterTypes)`\n\n该方法用于获取某一指定参数类型后的 `public` 所修饰的构造方法（**不包括父类**）；\n\n\n\n而获取到构造方法之后，我们就可以利用 `newInstance()` 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 `Class.newInstance()` 来构造实例。\n\n#### 获取成员方法\n\n```java\npackage com.cunyu;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo4\n * @date : 2021/4/8 13:51\n * @description : 成员方法获取\n */\n\npublic class Demo4 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Class personClass = Class.forName(\"com.cunyu.Person\");\n\n//        获取所有 public 成员方法\n        System.out.println(\"获取所有成员方法\");\n        Method[] methods = personClass.getMethods();\n        for (Method method : methods) {\n            System.out.println(method);\n        }\n\n//        获取指定名称的方法\n        System.out.println(\"获取指定名称的方法\");\n        Method getAgeMethod = personClass.getMethod(\"getAge\");\n        System.out.println(getAgeMethod);\n\n//        执行方法\n        Person person = new Person(20, \"村雨遥\", 1312020, 3, 99.0F, 2);\n        int age = (int) getAgeMethod.invoke(person);\n        System.out.println(age);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ba2eba98f04cdeb5294a454c3b1d37f2.png)\n\n- `Method[] getMethods()`\n\n用于获取当前类的所有 `public` 所修饰的成员方法（**包括父类**）。\n\n- `Method getMethod(String name, 类<?>... parameterTypes)`\n\n用于获取当前类的某一个指定名称 `public` 所修饰的成员方法（**包括父类**）。\n\n- `Method[] getDeclaredMethods()` \n\n用于获取当前类的所有 `public` 所修饰的成员方法（**不包括父类**）。\n\n- `Method getDeclaredMethods(String name, 类<?>... parameterTypes)`\n\n用于获取当前类的某一个指定名称 `public` 所修饰的成员方法（**不包括父类**）。\n\n而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 `invoke()` 方法来执行该方法。\n\n#### 获取类名\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo5\n * @date : 2021/4/8 14:06\n * @description : 获取类名\n */\n\npublic class Demo5 {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Person person = new Person();\n        Class personClass = person.getClass();\n\n        String className = personClass.getName();\n        System.out.println(className);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/c05c54055aa7e79267fd1d67b8e73634.png)\n\n- `String getName()`\n\n从上述程序的结果可知，当我们获取到 `Class` 对象之后，如果不知道类的全名，就可以使用 `getName()` 来获取该类的全名。\n\n## 反射实例\n\n假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。\n\n此时，我们可以通过 **配置文件 + 反射**  的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。\n\n假设我们有两个类，一个 `Student`，一个 `Teacher`，两者的定义如下；\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Teacher\n * @date : 2021/4/8 15:15\n * @description : 教师类\n */\n\npublic class Teacher {\n    private String name;\n    private int age;\n\n    public void teach() {\n        System.out.println(\"教书育人……\");\n    }\n}\n```\n\n```java\npackage com.cunyu;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/8 15:16\n * @description : 学生类\n */\n\npublic class Student {\n    private String name;\n    private float score;\n\n    public void study() {\n        System.out.println(\"好好学习，天天向上……\");\n    }\n}\n```\n\n要实现我们的需求，通常需要如下步骤：\n\n1.  将要创建对象的全类名和要执行的方法都配置在配置文件中；\n\n定义的配置文件 `prop.properties` ，其中主要内容包括 `className` 和 `methodName` 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 `Student` 的类和名为 `study`  的方法。\n\n```properties\nclassName=com.cunyu.Student\nmethodName=study\n```\n\n2.  然后在主方法中加载读取配置文件；\n\n```java\n//        创建配置文件对象\nProperties properties = new Properties();\n//        加载配置文件\nClassLoader classLoader = ReflectTest.class.getClassLoader();\nInputStream inputStream = classLoader.getResourceAsStream(\"prop.properties\");\nproperties.load(inputStream);\n\n//        获取配置文件中定义的数据\nString className = properties.getProperty(\"className\");\nString methodName = properties.getProperty(\"methodName\");\n```\n\n3.  利用反射技术将类加载到内存中；\n\n```java\n//        加载进内存\nClass name = Class.forName(className);\n```\n\n4.  接着利用 `newInstance()` 方法创建对象；\n\n```java\n//        创建实例\nObject object = name.newInstance();\n```\n\n5.  最后则是利用 `invoke()` 方法来执行方法；\n\n```java\n//        获取并执行方法\nMethod method = name.getMethod(methodName);\nmethod.invoke(object);\n```\n\n将整个流程汇总起来就是：\n\n```java\npackage com.cunyu;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : ReflectTest\n * @date : 2021/4/8 15:27\n * @description : 测试\n */\n\npublic class ReflectTest {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {\n//        创建配置文件对象\n        Properties properties = new Properties();\n//        加载配置文件\n        ClassLoader classLoader = ReflectTest.class.getClassLoader();\n        InputStream inputStream = classLoader.getResourceAsStream(\"prop.properties\");\n        properties.load(inputStream);\n\n//        获取配置文件中定义的数据\n        String className = properties.getProperty(\"className\");\n        String methodName = properties.getProperty(\"methodName\");\n\n//        加载进内存\n        Class name = Class.forName(className);\n\n//        创建实例\n        Object object = name.newInstance();\n\n//        获取并执行方法\n        Method method = name.getMethod(methodName);\n        method.invoke(object);\n    }\n}\n```\n\n此时，我们只需要改动配置文件 `prop.properties` 中的配置即可输出不同结果；\n\n![](https://img-blog.csdnimg.cn/img_convert/2ea306bc1d85075dea38f22f852a741b.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/584f448161eebde25d8da0e9324210a5.png)\n\n## 总结\n\n好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！\n\n最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】反射机制详解：入门、使用、实例","published":1,"updated":"2021-05-04T03:23:09.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1f004hbw3446e86662","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"反射概述\"><a href=\"#反射概述\" class=\"headerlink\" title=\"反射概述\"></a>反射概述</h2><h3 id=\"什么是反射\"><a href=\"#什么是反射\" class=\"headerlink\" title=\"什么是反射\"></a>什么是反射</h3><p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>\n<h3 id=\"使用反射的优缺点\"><a href=\"#使用反射的优缺点\" class=\"headerlink\" title=\"使用反射的优缺点\"></a>使用反射的优缺点</h3><ul>\n<li><p><strong>优点</strong></p>\n<ol>\n<li>在程序运行过程中可以操作类对象，增加了程序的灵活性；</li>\n<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>\n<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>\n</ol>\n</li>\n<li><p><strong>缺点</strong></p>\n<ol>\n<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>\n<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>\n<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Class-对象的获取及使用\"><a href=\"#Class-对象的获取及使用\" class=\"headerlink\" title=\"Class 对象的获取及使用\"></a>Class 对象的获取及使用</h2><h3 id=\"获取-Class-对象的方式\"><a href=\"#获取-Class-对象的方式\" class=\"headerlink\" title=\"获取 Class 对象的方式\"></a>获取 Class 对象的方式</h3><ol>\n<li><code>Class.forName(\"全类名\")</code></li>\n</ol>\n<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于配置文件中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>\n<ol>\n<li><code>类名.class</code></li>\n</ol>\n<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于参数的传递。</p>\n<ol>\n<li><code>对象.getClass()</code></li>\n</ol>\n<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于对象的获取字节码的方式。</p>\n<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Person\n * @date : 2021/4/7 22:37\n * @description : Person 类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRank</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", name='\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", id=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", grade=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", score=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", rank=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo1\n * @date : 2021/4/7 23:29\n * @description : Class 对象的获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        第一种方式，Class.forName(\"全类名\")</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        第二种方式，类名.class</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        第三种方式，对象.getName()</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        比较三个对象是否相同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f0542d56abe1ea0b6f8d0af1849fc40.png\" alt=\"对比结果\"></p>\n<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>\n<h3 id=\"Class-对象的使用\"><a href=\"#Class-对象的使用\" class=\"headerlink\" title=\"Class 对象的使用\"></a>Class 对象的使用</h3><h4 id=\"获取成员变量\"><a href=\"#获取成员变量\" class=\"headerlink\" title=\"获取成员变量\"></a>获取成员变量</h4><ul>\n<li><code>Field[] getFields()</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/352fc6f7c2f3e20a0e3bc9ccefff9a7b.png\" alt=\"\"></p>\n<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Field getField(String name)</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span> field1 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field2 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field3 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7f6048b6d9b36bfee37bafc59332c1e6.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/27c23c0b20a37968c87e7285a0ce28b7.png\" alt=\"\"></p>\n<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 假设我们获取到的 Field 为上面的 id，获取和设置 id 的值就可以通过如下操作来进行</span>\n<span class=\"token comment\">// 1. 获取</span>\n<span class=\"token class-name\">Field</span> idField <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> idValue <span class=\"token operator\">=</span> idField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> idValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2. 设置</span>\nidField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1312120\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>Field[] getDeclaredFields()</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bb794db5bb33b26420543a4ddd9ab9d5.png\" alt=\"\"></p>\n<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Field getDeclaredField(String name)</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span> field1 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field3 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field2 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/370161d55c540b9f07ea3197e7f8c135.png\" alt=\"\"></p>\n<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>\n<h4 id=\"获取构造方法\"><a href=\"#获取构造方法\" class=\"headerlink\" title=\"获取构造方法\"></a>获取构造方法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo3\n * @date : 2021/4/8 13:28\n * @description : 构造对象获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        1. 获取所有构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//        2. 获取指定构造方法</span>\n\n<span class=\"token comment\">//        空参构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空参构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> constructor1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        带参构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带参构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> constructor2 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取构造方法后，可以利用它来创建对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空参创建对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第一种方法</span>\n        <span class=\"token class-name\">Object</span> person <span class=\"token operator\">=</span> constructor1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第二种方法</span>\n        <span class=\"token class-name\">Object</span> person1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带参创建对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> constructor2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1312020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/78d9193e2b0658b72b67d57099504fc0.png\" alt=\"\"></p>\n<ul>\n<li><p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>\n<p>  类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n</li>\n<li><p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>\n</li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>\n</ul>\n<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>\n<h4 id=\"获取成员方法\"><a href=\"#获取成员方法\" class=\"headerlink\" title=\"获取成员方法\"></a>获取成员方法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo4\n * @date : 2021/4/8 13:51\n * @description : 成员方法获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取所有 public 成员方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取所有成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//        获取指定名称的方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取指定名称的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> getAgeMethod <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>getAgeMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        执行方法</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1312020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> getAgeMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ba2eba98f04cdeb5294a454c3b1d37f2.png\" alt=\"\"></p>\n<ul>\n<li><code>Method[] getMethods()</code></li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method[] getDeclaredMethods()</code> </li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Method getDeclaredMethods(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>\n<h4 id=\"获取类名\"><a href=\"#获取类名\" class=\"headerlink\" title=\"获取类名\"></a>获取类名</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo5\n * @date : 2021/4/8 14:06\n * @description : 获取类名\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c05c54055aa7e79267fd1d67b8e73634.png\" alt=\"\"></p>\n<ul>\n<li><code>String getName()</code></li>\n</ul>\n<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>\n<h2 id=\"反射实例\"><a href=\"#反射实例\" class=\"headerlink\" title=\"反射实例\"></a>反射实例</h2><p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>\n<p>此时，我们可以通过 <strong>配置文件 + 反射</strong>  的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>\n<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Teacher\n * @date : 2021/4/8 15:15\n * @description : 教师类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"教书育人……\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/8 15:16\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好好学习，天天向上……\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>要实现我们的需求，通常需要如下步骤：</p>\n<ol>\n<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>\n</ol>\n<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code>  的方法。</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">className</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.cunyu.Student</span>\n<span class=\"token attr-name\">methodName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">study</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>然后在主方法中加载读取配置文件；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        创建配置文件对象</span>\n<span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n<span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件中定义的数据</span>\n<span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>利用反射技术将类加载到内存中；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        加载进内存</span>\n<span class=\"token class-name\">Class</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        创建实例</span>\n<span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        获取并执行方法</span>\n<span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>将整个流程汇总起来就是：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : ReflectTest\n * @date : 2021/4/8 15:27\n * @description : 测试\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        创建配置文件对象</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件中定义的数据</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        加载进内存</span>\n        <span class=\"token class-name\">Class</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        创建实例</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取并执行方法</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ea306bc1d85075dea38f22f852a741b.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/584f448161eebde25d8da0e9324210a5.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>\n<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"反射概述\"><a href=\"#反射概述\" class=\"headerlink\" title=\"反射概述\"></a>反射概述</h2><h3 id=\"什么是反射\"><a href=\"#什么是反射\" class=\"headerlink\" title=\"什么是反射\"></a>什么是反射</h3><p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>\n<h3 id=\"使用反射的优缺点\"><a href=\"#使用反射的优缺点\" class=\"headerlink\" title=\"使用反射的优缺点\"></a>使用反射的优缺点</h3><ul>\n<li><p><strong>优点</strong></p>\n<ol>\n<li>在程序运行过程中可以操作类对象，增加了程序的灵活性；</li>\n<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>\n<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>\n</ol>\n</li>\n<li><p><strong>缺点</strong></p>\n<ol>\n<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>\n<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>\n<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Class-对象的获取及使用\"><a href=\"#Class-对象的获取及使用\" class=\"headerlink\" title=\"Class 对象的获取及使用\"></a>Class 对象的获取及使用</h2><h3 id=\"获取-Class-对象的方式\"><a href=\"#获取-Class-对象的方式\" class=\"headerlink\" title=\"获取 Class 对象的方式\"></a>获取 Class 对象的方式</h3><ol>\n<li><code>Class.forName(&quot;全类名&quot;)</code></li>\n</ol>\n<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于配置文件中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>\n<ol>\n<li><code>类名.class</code></li>\n</ol>\n<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于参数的传递。</p>\n<ol>\n<li><code>对象.getClass()</code></li>\n</ol>\n<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于对象的获取字节码的方式。</p>\n<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Person\n * @date : 2021/4/7 22:37\n * @description : Person 类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRank</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", name='\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", id=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", grade=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", score=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", rank=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo1\n * @date : 2021/4/7 23:29\n * @description : Class 对象的获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        第一种方式，Class.forName(\"全类名\")</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        第二种方式，类名.class</span>\n        <span class=\"token class-name\">Class</span> class2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        第三种方式，对象.getName()</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        比较三个对象是否相同</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1 <span class=\"token operator\">==</span> class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5f0542d56abe1ea0b6f8d0af1849fc40.png\" alt=\"对比结果\"></p>\n<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>\n<h3 id=\"Class-对象的使用\"><a href=\"#Class-对象的使用\" class=\"headerlink\" title=\"Class 对象的使用\"></a>Class 对象的使用</h3><h4 id=\"获取成员变量\"><a href=\"#获取成员变量\" class=\"headerlink\" title=\"获取成员变量\"></a>获取成员变量</h4><ul>\n<li><code>Field[] getFields()</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/352fc6f7c2f3e20a0e3bc9ccefff9a7b.png\" alt=\"\"></p>\n<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Field getField(String name)</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span> field1 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field2 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field3 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7f6048b6d9b36bfee37bafc59332c1e6.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/27c23c0b20a37968c87e7285a0ce28b7.png\" alt=\"\"></p>\n<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 假设我们获取到的 Field 为上面的 id，获取和设置 id 的值就可以通过如下操作来进行</span>\n<span class=\"token comment\">// 1. 获取</span>\n<span class=\"token class-name\">Field</span> idField <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> idValue <span class=\"token operator\">=</span> idField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> idValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2. 设置</span>\nidField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1312120\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>Field[] getDeclaredFields()</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bb794db5bb33b26420543a4ddd9ab9d5.png\" alt=\"\"></p>\n<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Field getDeclaredField(String name)</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo2\n * @date : 2021/4/7 23:39\n * @description : Class 对象的使用\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Field</span> field1 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field3 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> field2 <span class=\"token operator\">=</span> class1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/370161d55c540b9f07ea3197e7f8c135.png\" alt=\"\"></p>\n<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>\n<h4 id=\"获取构造方法\"><a href=\"#获取构造方法\" class=\"headerlink\" title=\"获取构造方法\"></a>获取构造方法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo3\n * @date : 2021/4/8 13:28\n * @description : 构造对象获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        1. 获取所有构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//        2. 获取指定构造方法</span>\n\n<span class=\"token comment\">//        空参构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空参构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> constructor1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        带参构造方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带参构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> constructor2 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取构造方法后，可以利用它来创建对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空参创建对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第一种方法</span>\n        <span class=\"token class-name\">Object</span> person <span class=\"token operator\">=</span> constructor1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第二种方法</span>\n        <span class=\"token class-name\">Object</span> person1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带参创建对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> constructor2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1312020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/78d9193e2b0658b72b67d57099504fc0.png\" alt=\"\"></p>\n<ul>\n<li><p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>\n<p>  类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n</li>\n<li><p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>\n</li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>\n</ul>\n<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>\n<h4 id=\"获取成员方法\"><a href=\"#获取成员方法\" class=\"headerlink\" title=\"获取成员方法\"></a>获取成员方法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo4\n * @date : 2021/4/8 13:51\n * @description : 成员方法获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.cunyu.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取所有 public 成员方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取所有成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//        获取指定名称的方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取指定名称的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> getAgeMethod <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>getAgeMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        执行方法</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1312020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> getAgeMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ba2eba98f04cdeb5294a454c3b1d37f2.png\" alt=\"\"></p>\n<ul>\n<li><code>Method[] getMethods()</code></li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method[] getDeclaredMethods()</code> </li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Method getDeclaredMethods(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>\n<h4 id=\"获取类名\"><a href=\"#获取类名\" class=\"headerlink\" title=\"获取类名\"></a>获取类名</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Demo5\n * @date : 2021/4/8 14:06\n * @description : 获取类名\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c05c54055aa7e79267fd1d67b8e73634.png\" alt=\"\"></p>\n<ul>\n<li><code>String getName()</code></li>\n</ul>\n<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>\n<h2 id=\"反射实例\"><a href=\"#反射实例\" class=\"headerlink\" title=\"反射实例\"></a>反射实例</h2><p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>\n<p>此时，我们可以通过 <strong>配置文件 + 反射</strong>  的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>\n<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Teacher\n * @date : 2021/4/8 15:15\n * @description : 教师类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"教书育人……\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/8 15:16\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好好学习，天天向上……\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>要实现我们的需求，通常需要如下步骤：</p>\n<ol>\n<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>\n</ol>\n<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code>  的方法。</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">className</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.cunyu.Student</span>\n<span class=\"token attr-name\">methodName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">study</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>然后在主方法中加载读取配置文件；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        创建配置文件对象</span>\n<span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n<span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件中定义的数据</span>\n<span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>利用反射技术将类加载到内存中；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        加载进内存</span>\n<span class=\"token class-name\">Class</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        创建实例</span>\n<span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//        获取并执行方法</span>\n<span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>将整个流程汇总起来就是：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : ReflectTest\n * @date : 2021/4/8 15:27\n * @description : 测试\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        创建配置文件对象</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件中定义的数据</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        加载进内存</span>\n        <span class=\"token class-name\">Class</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        创建实例</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取并执行方法</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ea306bc1d85075dea38f22f852a741b.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/584f448161eebde25d8da0e9324210a5.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>\n<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】死磕 IO 流","mathjax":true,"toc":true,"abbrlink":"e313e5db","date":"2021-05-04T03:14:08.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。\n\n本文主要内容安排如下：\n\n-   **文件对象**\n-   **流简介**\n-   **字节流**\n-   **字符流**\n\n## 文件对象\n\n### 文件路径\n\nJava 标准库 `java.io` 提供了 `File` 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 `File` 封装成对象的。构造 `File` 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：\n\n| 方法                                | 描述                                               |\n| ----------------------------------- | -------------------------------------------------- |\n| `File(String pathName)`             | 通过将给定路径名字符串转换为抽象路径名来创建新实例 |\n| `File(String parent, String child)` | 从父路径名字符串和子路径名字符串创建新实例         |\n| `File(File parent, String child)`   | 从父抽象路径名和子路径名字符串创建新实例           |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : FileObject\n * @date : 2021/4/20 9:20\n * @description : 创建 File 对象的三个构造方法\n */\n\npublic class FileObject {\n    public static void main(String[] args) {\n\n        File file1 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\");\n        System.out.println(file1);\n\n        File file2 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\", \"1.txt\");\n        System.out.println(file2);\n\n        File file3 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\");\n        File file4 = new File(file3, \"1.txt\");\n        System.out.println(file4);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/8d00d3c76f0205191b0baf5f41111002.png)\n\n对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。\n\n-   **相对路径**：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 `.` 和 `..`，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 `/home/cunyu1943/data`，则 `.` 仍然表示该目录，而 `..` 则表示 `/home/cunyu1943` 目录。\n-   **绝对路径**：又可以分为 **本地绝对路径** 和 **网络绝对路径**。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 `D:\\\\Softwares\\\\Typora\\\\Typora.exe`，而在类 `Unix` 系统中则为 `/home/cunyu1943/IO.md`，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 `/`，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 `https://cunyu1943.site/index.html`。\n\n```java\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : FilePath\n * @date : 2021/4/20 9:55\n * @description : 文件路径\n */\n\npublic class FilePath {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"../data/1.txt\");\n        System.out.println(file.getPath());\n        System.out.println(file.getAbsolutePath());\n        System.out.println(file.getCanonicalPath());\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/14b55b0c214f6543c9264aca39be5e59.png)\n\n### 文件和目录操作\n\n#### 创建与删除\n\n既然拿到了 `File` 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 `File` 类常用的创建和删除方法。\n\n| 返回值    | 方法              | 描述                                                         |\n| --------- | ----------------- | ------------------------------------------------------------ |\n| `boolean` | `createNewFile()` | 当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败 |\n| `boolean` | `mkdir()`         | 创建由此抽象路径名命名的目录                                 |\n| `boolean` | `mkdirs()`        | 创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录 |\n| `boolean` | `delete()`        | 删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空 |\n\n```java\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : CreateAndDelete\n * @date : 2021/4/20 10:40\n * @description : 创建&删除\n */\n\npublic class CreateAndDelete {\n    public static void main(String[] args) throws IOException {\n        File file1 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        if (file1.createNewFile()) {\n            System.out.println(\"创建文件成功\");\n        } else {\n            System.out.println(\"创建文件失败\");\n        }\n\n        if (file1.delete()) {\n            System.out.println(\"删除文件成功\");\n        } else {\n            System.out.println(\"删除文件失败\");\n        }\n\n        File file2 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/demo\");\n        if (file2.mkdir()) {\n            System.out.println(\"创建文件夹成功\");\n        } else {\n            System.out.println(\"创建文件夹失败\");\n        }\n\n        File file3 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/JavaSE/demo\");\n        if (file3.mkdirs()) {\n            System.out.println(\"创建多级目录成功\");\n        } else {\n            System.out.println(\"创建多级目录失败\");\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ead663818d1e5ab026569c4813dc14c6.png)\n\n**注意**：\n\n-   创建文件时，调用的是 `createNewFile()` 方法，而创建目录时调用的是 `mkdir()` 或者 `mkdirs()` 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。\n\n-   删除目录时，若目录中有内容（目录、文件），则 **不能直接删除**，而是应该先删除目录中的内容，然后才能删除目录；\n\n\n\n#### 相关属性\n\n获取到 `File` 对象后，我们可以对其相关属性进行判断，常用方法如下：\n\n| 返回值    | 方法           | 描述                                 |\n| --------- | -------------- | ------------------------------------ |\n| `long`    | `length()`     | 该抽象路径名表示的文件的所占字节大小 |\n| `boolean` | `canRead()`    | 该抽象路径名表示的文件是否可读       |\n| `boolean` | `canWrite()`   | 该抽象路径名表示的文件是否可写       |\n| `boolean` | `canExecute()` | 该抽象路径名表示的文件是否可执行     |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:04\n * @description : 相关属性\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/new.txt\");\n\n        if (file.canExecute()) {\n            System.out.println(\"该对象可执行\");\n        } else {\n            System.out.println(\"该对象不可执行\");\n        }\n        if (file.canRead()) {\n            System.out.println(\"该对象可读\");\n        } else {\n            System.out.println(\"该对象不可读\");\n        }\n        if (file.canWrite()) {\n            System.out.println(\"该对象可写\");\n        } else {\n            System.out.println(\"该对象不可写\");\n        }\n\n        System.out.println(\"文件大小：\" + file.length() + \" Byte\");\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/77142d614e1be43a596fe36393391fa2.png)\n\n#### 判断和获取\n\n获取到 `File` 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：\n\n| 返回值     | 方法                | 描述                                                   |\n| ---------- | ------------------- | ------------------------------------------------------ |\n| `boolean`  | `isFile()`          | 测试此抽象路径名表示的文件是否为普通文件               |\n| `boolean`  | `isDirectory()`     | 测试此抽象路径名表示的文件是否为目录                   |\n| `boolean`  | `exists()`          | 测试此抽象路径名表示的文件或目录是否存在               |\n| `String`   | `getPath()`         | 将抽象路径转换为路径字符串                             |\n| `String`   | `getAbsolutePath()` | 返回此抽象路径名的绝对路径名字符串                     |\n| `String`   | `getName()`         | 返回由此抽象路径名表示的文件或目录的名称               |\n| `String[]` | `list()`            | 返回字符串数组，表示该抽象路径名表示目录下的文件和目录 |\n| `File[]`   | `listFiles()`       | 返回抽象路径名数组，表示该抽象路径名表示目录下的文件   |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:15\n * @description : 判断和获取\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\");\n        System.out.println(file.isDirectory());\n        System.out.println(file.isFile());\n        System.out.println(file.exists());\n        System.out.println(\"-------------------------\");\n        System.out.println(file.getPath());\n        System.out.println(file.getAbsolutePath());\n        System.out.println(file.getName());\n        System.out.println(\"-------------------------\");\n        System.out.println(\"目录下的文件和目录列表：（文件或目录名）\");\n        for (String path : file.list()) {\n            System.out.println(path);\n        }\n        System.out.println(\"-------------------------\");\n        System.out.println(\"目录下的文件和目录列表：（完整绝对路径）\");\n        for (File path : file.listFiles()) {\n            System.out.println(path);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/f700643b45d2c342b1bfbcc8013e6f04.png)\n\n### 练习\n\n假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Test\n * @date : 2021/4/20 11:40\n * @description : 遍历 C 盘 Windows 目录下的文件，并打印文件名和大小\n */\n\npublic class Test {\n    public static void main(String[] args) {\n        File file = new File(\"C:/windows\");\n        for (File item : file.listFiles()) {\n            if (item.isFile()) {\n                System.out.println(\"文件名：\" + item.getName() + \"\\t文件大小占：\" + item.length() + \" 字节\");\n            }\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/1748c876c040f679a85599b1cb690996.png)\n\n## 流\n\n### 什么是流\n\n所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：**输入流**、**输出流**。而根据处理的数据单位不同，可分为：**字节流**、**字符流**。两者的关系可以描述为下表：\n\n|            | 字节流         | 字符流   |\n| ---------- | -------------- | -------- |\n| **输入流** | `InputStream`  | `Reader` |\n| **输出流** | `OutputStream` | `Writer` |\n\n而对于字节流和字符流的选用原则，我们建议遵循如下规则：**如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流**。\n\n下图描述了字节流和字符流的类层次图，注意：**无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的**。\n\n![IO 流.png](https://img-blog.csdnimg.cn/img_convert/3d6801788ba190b32b12c2fbce6128c4.png)\n\n### InputStream\n\n![InputStream.png](https://img-blog.csdnimg.cn/img_convert/89f7aa014a7a9eca0cb72a9a4a518af3.png)\n\n注意，`InputStream` 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 `FileInputStream` 来举例，所谓 `FileInputStream`，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：\n\n| 返回值 | 方法              | 描述                                         |\n| ------ | ----------------- | -------------------------------------------- |\n| `int`  | `available()`     | 返回该输入流中可以读取的字节数的估计值       |\n| `void` | `close()`         | 关闭输入流并释放相关资源                     |\n| `int`  | `read(bytep[] b)` | 从输入流读取一些字节数，并将其存储到缓冲区 b |\n\n下面是一个从文件中读取数据到内存中的实例，文件内容如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/3bfb8168f79fa1df2ff05016a44f3977.png)\n\n```java\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestInputStream\n * @date : 2021/4/20 15:29\n * @description : InputStream 实例\n */\n\npublic class TestInputStream {\n\n    public static void main(String[] args) {\n\n        String result = null;\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\");\n        try (InputStream inputStream = new FileInputStream(file)) {\n\n//            读取输入流中可以被读的 bytes 估计值\n            int size = inputStream.available();\n//            根据 bytes 数创建数组\n            byte[] array = new byte[size];\n//            数据读取到数组\n            inputStream.read(array);\n//            数组转化为字符串\n            result = new String(array);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n//        打印字符串\n        System.out.println(result);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/079bde92fdeb5a244abe14c11550b3a9.png)\n\n### OutputStream\n\n![OutputStream.png](https://img-blog.csdnimg.cn/img_convert/c099dc3f0e3887966b11ae9598fb6cf0.png)\n\n`OutputStream` 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 `FileOutputStream` 来举例，所谓 `FileOutputStream`，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：\n\n| 返回值 | 方法              | 描述                                               |\n| ------ | ----------------- | -------------------------------------------------- |\n| `void` | `write(byte[] b)` | 将 `b.length` 个字节从指定字节数组写入此文件输出流 |\n| `void` | `close()`         | 关闭文件输出流并释放相关资源                       |\n\n```java\nimport java.io.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestOutputStream\n * @date : 2021/4/20 15:58\n * @description : OutputStream 实例\n */\n\npublic class TestOutputStream {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        String content = \"这是一个 OutputStream 实例！\";\n        try (OutputStream outputStream = new FileOutputStream(file)) {\n//            字符串转换为 byte 数组\n            byte[] array = content.getBytes();\n\n//            写入数据\n            outputStream.write(array);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"写入成功\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/cf65c7eda0591d6e773596eb59a54cb2.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/c23f98c28c2c9ea6359926338b6ac127.png)\n\n需要注意的点：\n\n-   字节流写入数据时如何实现换行？\n\n写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 `\\r\\n`，macOS 下为 `\\r`，而 Linux 下为 `\\m`。\n\n-   字节流写入数据时如何实现追加？\n\n调用 `public FileOutputStream(String name, boolean append)` 这个构造方法即可，当 `append` 为 `true` 时，表示追加，默认情况下是 `false`，表示不追加。\n\n### 字符串中的编解码问题\n\n#### 编码\n\n-   `byte[] getBytes()`：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；\n-   `byte[] getBytes(String charsetName)`：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；\n\n#### 解码\n\n-   `String(byte[] bytes)`：使用平台默认字符集解码指定的字节数来构造新的字符串；\n-   `String(byte[] bytes, String charsetName)`：通过指定的字符集解码指定的字节数组来构造新的字符串；\n\n```java\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : EncodeAndDecode\n * @date : 2021/4/21 9:37\n * @description : 编码和解码\n */\n\npublic class EncodeAndDecode {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n//        编码\n        String str = \"村雨遥\";\n        byte[] bytes1 = str.getBytes();\n        byte[] bytes2 = str.getBytes(\"UTF-8\");\n        byte[] bytes3 = str.getBytes(\"GBK\");\n\n        System.out.println(Arrays.toString(bytes1));\n        System.out.println(Arrays.toString(bytes2));\n        System.out.println(Arrays.toString(bytes3));\n\n//        解码\n        String res1 = new String(bytes1);\n        String res2 = new String(bytes1, \"UTF-8\");\n        String res3 = new String(bytes1, \"GBK\");\n\n        System.out.println(res1);\n        System.out.println(res2);\n        System.out.println(res3);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/aa51244d9e2c9ac431675b8edbedcbf6.png)\n\n### Writer\n\n![Writer.png](https://img-blog.csdnimg.cn/img_convert/262d05641e092d5fba6c6a0f226c7084.png)\n\n当我们要写入基于字符的数据到数据源中时，需要使用写入器 `Writer`. 以其中的 `FileWriter` 具体展开，其常用方法如下：\n\n| 返回值 | 方法        | 描述                         |\n| ------ | ----------- | ---------------------------- |\n| `void` | `close()`   | 先刷新再关闭流，不能再写数据 |\n| `void` | `flush()`   | 刷新流，可以继续写数据       |\n| `void` | `newLine()` | 写入行分隔符                 |\n| `void` | `write()`   | 写入字符或字符串             |\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestWriter\n * @date : 2021/4/20 18:35\n * @description : Writer 实例\n */\n\npublic class TestWriter {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file))) {\n            bufferedWriter.write(\"公众号：村雨遥\");\n            bufferedWriter.newLine();\n            bufferedWriter.write(\"Blog：https://cunyu1943.site\");\n            bufferedWriter.newLine();\n            bufferedWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"写入成功\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/8a1c0ed741fa76bed7adc8af032cfccc.png)\n\n### Reader\n\n![Reader.png](https://img-blog.csdnimg.cn/img_convert/866febfe2af649d41ef0fa956e09141a.png)\n\n当我们要从数据源读取基于字符的数据时，需要使用读取器 `Reader`. 我们以 `FileReader` 实践，其常用的方法有：\n\n| 返回值    | 方法         | 描述                     |\n| --------- | ------------ | ------------------------ |\n| `void`    | `close()`    | 关闭流并释放相关资源     |\n| `int`     | `read()`     | 读取一个字符             |\n| `String`  | `readLine()` | 读一行文字               |\n| `boolean` | `ready()`    | 获取该流是否准备好被读取 |\n\n我们以从文件中读取内容为例：\n\n```java\nimport java.io.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestReader\n * @date : 2021/4/20 18:40\n * @description : Reader 实例\n */\n\npublic class TestReader {\n    public static void main(String[] args) {\n        String content = null;\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        System.out.println(\"内容如下：\");\n        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {\n            while ((content = bufferedReader.readLine()) != null) {\n                System.out.println(content);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7755ba832f71ac4227afac703a4aeee6.png)\n\n## 总结\n\n好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！\n\n对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】死磕-IO-流.md","raw":"---\ntitle: 【Java 从入坑到放弃】死磕 IO 流\nmathjax: true\ntoc: true\ntags:\n  - Java\n  - IO\ncategories:\n  - Java 修炼之路\nabbrlink: e313e5db\ndate: 2021-05-04 11:14:08\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。\n\n本文主要内容安排如下：\n\n-   **文件对象**\n-   **流简介**\n-   **字节流**\n-   **字符流**\n\n## 文件对象\n\n### 文件路径\n\nJava 标准库 `java.io` 提供了 `File` 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 `File` 封装成对象的。构造 `File` 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：\n\n| 方法                                | 描述                                               |\n| ----------------------------------- | -------------------------------------------------- |\n| `File(String pathName)`             | 通过将给定路径名字符串转换为抽象路径名来创建新实例 |\n| `File(String parent, String child)` | 从父路径名字符串和子路径名字符串创建新实例         |\n| `File(File parent, String child)`   | 从父抽象路径名和子路径名字符串创建新实例           |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : FileObject\n * @date : 2021/4/20 9:20\n * @description : 创建 File 对象的三个构造方法\n */\n\npublic class FileObject {\n    public static void main(String[] args) {\n\n        File file1 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\");\n        System.out.println(file1);\n\n        File file2 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\", \"1.txt\");\n        System.out.println(file2);\n\n        File file3 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\");\n        File file4 = new File(file3, \"1.txt\");\n        System.out.println(file4);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/8d00d3c76f0205191b0baf5f41111002.png)\n\n对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。\n\n-   **相对路径**：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 `.` 和 `..`，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 `/home/cunyu1943/data`，则 `.` 仍然表示该目录，而 `..` 则表示 `/home/cunyu1943` 目录。\n-   **绝对路径**：又可以分为 **本地绝对路径** 和 **网络绝对路径**。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 `D:\\\\Softwares\\\\Typora\\\\Typora.exe`，而在类 `Unix` 系统中则为 `/home/cunyu1943/IO.md`，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 `/`，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 `https://cunyu1943.site/index.html`。\n\n```java\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : FilePath\n * @date : 2021/4/20 9:55\n * @description : 文件路径\n */\n\npublic class FilePath {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"../data/1.txt\");\n        System.out.println(file.getPath());\n        System.out.println(file.getAbsolutePath());\n        System.out.println(file.getCanonicalPath());\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/14b55b0c214f6543c9264aca39be5e59.png)\n\n### 文件和目录操作\n\n#### 创建与删除\n\n既然拿到了 `File` 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 `File` 类常用的创建和删除方法。\n\n| 返回值    | 方法              | 描述                                                         |\n| --------- | ----------------- | ------------------------------------------------------------ |\n| `boolean` | `createNewFile()` | 当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败 |\n| `boolean` | `mkdir()`         | 创建由此抽象路径名命名的目录                                 |\n| `boolean` | `mkdirs()`        | 创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录 |\n| `boolean` | `delete()`        | 删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空 |\n\n```java\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : CreateAndDelete\n * @date : 2021/4/20 10:40\n * @description : 创建&删除\n */\n\npublic class CreateAndDelete {\n    public static void main(String[] args) throws IOException {\n        File file1 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        if (file1.createNewFile()) {\n            System.out.println(\"创建文件成功\");\n        } else {\n            System.out.println(\"创建文件失败\");\n        }\n\n        if (file1.delete()) {\n            System.out.println(\"删除文件成功\");\n        } else {\n            System.out.println(\"删除文件失败\");\n        }\n\n        File file2 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/demo\");\n        if (file2.mkdir()) {\n            System.out.println(\"创建文件夹成功\");\n        } else {\n            System.out.println(\"创建文件夹失败\");\n        }\n\n        File file3 = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/JavaSE/demo\");\n        if (file3.mkdirs()) {\n            System.out.println(\"创建多级目录成功\");\n        } else {\n            System.out.println(\"创建多级目录失败\");\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/ead663818d1e5ab026569c4813dc14c6.png)\n\n**注意**：\n\n-   创建文件时，调用的是 `createNewFile()` 方法，而创建目录时调用的是 `mkdir()` 或者 `mkdirs()` 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。\n\n-   删除目录时，若目录中有内容（目录、文件），则 **不能直接删除**，而是应该先删除目录中的内容，然后才能删除目录；\n\n\n\n#### 相关属性\n\n获取到 `File` 对象后，我们可以对其相关属性进行判断，常用方法如下：\n\n| 返回值    | 方法           | 描述                                 |\n| --------- | -------------- | ------------------------------------ |\n| `long`    | `length()`     | 该抽象路径名表示的文件的所占字节大小 |\n| `boolean` | `canRead()`    | 该抽象路径名表示的文件是否可读       |\n| `boolean` | `canWrite()`   | 该抽象路径名表示的文件是否可写       |\n| `boolean` | `canExecute()` | 该抽象路径名表示的文件是否可执行     |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:04\n * @description : 相关属性\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/new.txt\");\n\n        if (file.canExecute()) {\n            System.out.println(\"该对象可执行\");\n        } else {\n            System.out.println(\"该对象不可执行\");\n        }\n        if (file.canRead()) {\n            System.out.println(\"该对象可读\");\n        } else {\n            System.out.println(\"该对象不可读\");\n        }\n        if (file.canWrite()) {\n            System.out.println(\"该对象可写\");\n        } else {\n            System.out.println(\"该对象不可写\");\n        }\n\n        System.out.println(\"文件大小：\" + file.length() + \" Byte\");\n    }\n}\n\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/77142d614e1be43a596fe36393391fa2.png)\n\n#### 判断和获取\n\n获取到 `File` 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：\n\n| 返回值     | 方法                | 描述                                                   |\n| ---------- | ------------------- | ------------------------------------------------------ |\n| `boolean`  | `isFile()`          | 测试此抽象路径名表示的文件是否为普通文件               |\n| `boolean`  | `isDirectory()`     | 测试此抽象路径名表示的文件是否为目录                   |\n| `boolean`  | `exists()`          | 测试此抽象路径名表示的文件或目录是否存在               |\n| `String`   | `getPath()`         | 将抽象路径转换为路径字符串                             |\n| `String`   | `getAbsolutePath()` | 返回此抽象路径名的绝对路径名字符串                     |\n| `String`   | `getName()`         | 返回由此抽象路径名表示的文件或目录的名称               |\n| `String[]` | `list()`            | 返回字符串数组，表示该抽象路径名表示目录下的文件和目录 |\n| `File[]`   | `listFiles()`       | 返回抽象路径名数组，表示该抽象路径名表示目录下的文件   |\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:15\n * @description : 判断和获取\n */\n\npublic class Main {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\");\n        System.out.println(file.isDirectory());\n        System.out.println(file.isFile());\n        System.out.println(file.exists());\n        System.out.println(\"-------------------------\");\n        System.out.println(file.getPath());\n        System.out.println(file.getAbsolutePath());\n        System.out.println(file.getName());\n        System.out.println(\"-------------------------\");\n        System.out.println(\"目录下的文件和目录列表：（文件或目录名）\");\n        for (String path : file.list()) {\n            System.out.println(path);\n        }\n        System.out.println(\"-------------------------\");\n        System.out.println(\"目录下的文件和目录列表：（完整绝对路径）\");\n        for (File path : file.listFiles()) {\n            System.out.println(path);\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/f700643b45d2c342b1bfbcc8013e6f04.png)\n\n### 练习\n\n假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：\n\n```java\nimport java.io.File;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Test\n * @date : 2021/4/20 11:40\n * @description : 遍历 C 盘 Windows 目录下的文件，并打印文件名和大小\n */\n\npublic class Test {\n    public static void main(String[] args) {\n        File file = new File(\"C:/windows\");\n        for (File item : file.listFiles()) {\n            if (item.isFile()) {\n                System.out.println(\"文件名：\" + item.getName() + \"\\t文件大小占：\" + item.length() + \" 字节\");\n            }\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/1748c876c040f679a85599b1cb690996.png)\n\n## 流\n\n### 什么是流\n\n所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：**输入流**、**输出流**。而根据处理的数据单位不同，可分为：**字节流**、**字符流**。两者的关系可以描述为下表：\n\n|            | 字节流         | 字符流   |\n| ---------- | -------------- | -------- |\n| **输入流** | `InputStream`  | `Reader` |\n| **输出流** | `OutputStream` | `Writer` |\n\n而对于字节流和字符流的选用原则，我们建议遵循如下规则：**如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流**。\n\n下图描述了字节流和字符流的类层次图，注意：**无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的**。\n\n![IO 流.png](https://img-blog.csdnimg.cn/img_convert/3d6801788ba190b32b12c2fbce6128c4.png)\n\n### InputStream\n\n![InputStream.png](https://img-blog.csdnimg.cn/img_convert/89f7aa014a7a9eca0cb72a9a4a518af3.png)\n\n注意，`InputStream` 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 `FileInputStream` 来举例，所谓 `FileInputStream`，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：\n\n| 返回值 | 方法              | 描述                                         |\n| ------ | ----------------- | -------------------------------------------- |\n| `int`  | `available()`     | 返回该输入流中可以读取的字节数的估计值       |\n| `void` | `close()`         | 关闭输入流并释放相关资源                     |\n| `int`  | `read(bytep[] b)` | 从输入流读取一些字节数，并将其存储到缓冲区 b |\n\n下面是一个从文件中读取数据到内存中的实例，文件内容如下：\n\n![](https://img-blog.csdnimg.cn/img_convert/3bfb8168f79fa1df2ff05016a44f3977.png)\n\n```java\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestInputStream\n * @date : 2021/4/20 15:29\n * @description : InputStream 实例\n */\n\npublic class TestInputStream {\n\n    public static void main(String[] args) {\n\n        String result = null;\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\");\n        try (InputStream inputStream = new FileInputStream(file)) {\n\n//            读取输入流中可以被读的 bytes 估计值\n            int size = inputStream.available();\n//            根据 bytes 数创建数组\n            byte[] array = new byte[size];\n//            数据读取到数组\n            inputStream.read(array);\n//            数组转化为字符串\n            result = new String(array);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n//        打印字符串\n        System.out.println(result);\n\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/079bde92fdeb5a244abe14c11550b3a9.png)\n\n### OutputStream\n\n![OutputStream.png](https://img-blog.csdnimg.cn/img_convert/c099dc3f0e3887966b11ae9598fb6cf0.png)\n\n`OutputStream` 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 `FileOutputStream` 来举例，所谓 `FileOutputStream`，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：\n\n| 返回值 | 方法              | 描述                                               |\n| ------ | ----------------- | -------------------------------------------------- |\n| `void` | `write(byte[] b)` | 将 `b.length` 个字节从指定字节数组写入此文件输出流 |\n| `void` | `close()`         | 关闭文件输出流并释放相关资源                       |\n\n```java\nimport java.io.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestOutputStream\n * @date : 2021/4/20 15:58\n * @description : OutputStream 实例\n */\n\npublic class TestOutputStream {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        String content = \"这是一个 OutputStream 实例！\";\n        try (OutputStream outputStream = new FileOutputStream(file)) {\n//            字符串转换为 byte 数组\n            byte[] array = content.getBytes();\n\n//            写入数据\n            outputStream.write(array);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"写入成功\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/cf65c7eda0591d6e773596eb59a54cb2.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/c23f98c28c2c9ea6359926338b6ac127.png)\n\n需要注意的点：\n\n-   字节流写入数据时如何实现换行？\n\n写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 `\\r\\n`，macOS 下为 `\\r`，而 Linux 下为 `\\m`。\n\n-   字节流写入数据时如何实现追加？\n\n调用 `public FileOutputStream(String name, boolean append)` 这个构造方法即可，当 `append` 为 `true` 时，表示追加，默认情况下是 `false`，表示不追加。\n\n### 字符串中的编解码问题\n\n#### 编码\n\n-   `byte[] getBytes()`：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；\n-   `byte[] getBytes(String charsetName)`：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；\n\n#### 解码\n\n-   `String(byte[] bytes)`：使用平台默认字符集解码指定的字节数来构造新的字符串；\n-   `String(byte[] bytes, String charsetName)`：通过指定的字符集解码指定的字节数组来构造新的字符串；\n\n```java\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : EncodeAndDecode\n * @date : 2021/4/21 9:37\n * @description : 编码和解码\n */\n\npublic class EncodeAndDecode {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n//        编码\n        String str = \"村雨遥\";\n        byte[] bytes1 = str.getBytes();\n        byte[] bytes2 = str.getBytes(\"UTF-8\");\n        byte[] bytes3 = str.getBytes(\"GBK\");\n\n        System.out.println(Arrays.toString(bytes1));\n        System.out.println(Arrays.toString(bytes2));\n        System.out.println(Arrays.toString(bytes3));\n\n//        解码\n        String res1 = new String(bytes1);\n        String res2 = new String(bytes1, \"UTF-8\");\n        String res3 = new String(bytes1, \"GBK\");\n\n        System.out.println(res1);\n        System.out.println(res2);\n        System.out.println(res3);\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/aa51244d9e2c9ac431675b8edbedcbf6.png)\n\n### Writer\n\n![Writer.png](https://img-blog.csdnimg.cn/img_convert/262d05641e092d5fba6c6a0f226c7084.png)\n\n当我们要写入基于字符的数据到数据源中时，需要使用写入器 `Writer`. 以其中的 `FileWriter` 具体展开，其常用方法如下：\n\n| 返回值 | 方法        | 描述                         |\n| ------ | ----------- | ---------------------------- |\n| `void` | `close()`   | 先刷新再关闭流，不能再写数据 |\n| `void` | `flush()`   | 刷新流，可以继续写数据       |\n| `void` | `newLine()` | 写入行分隔符                 |\n| `void` | `write()`   | 写入字符或字符串             |\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestWriter\n * @date : 2021/4/20 18:35\n * @description : Writer 实例\n */\n\npublic class TestWriter {\n    public static void main(String[] args) {\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file))) {\n            bufferedWriter.write(\"公众号：村雨遥\");\n            bufferedWriter.newLine();\n            bufferedWriter.write(\"Blog：https://cunyu1943.site\");\n            bufferedWriter.newLine();\n            bufferedWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"写入成功\");\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/8a1c0ed741fa76bed7adc8af032cfccc.png)\n\n### Reader\n\n![Reader.png](https://img-blog.csdnimg.cn/img_convert/866febfe2af649d41ef0fa956e09141a.png)\n\n当我们要从数据源读取基于字符的数据时，需要使用读取器 `Reader`. 我们以 `FileReader` 实践，其常用的方法有：\n\n| 返回值    | 方法         | 描述                     |\n| --------- | ------------ | ------------------------ |\n| `void`    | `close()`    | 关闭流并释放相关资源     |\n| `int`     | `read()`     | 读取一个字符             |\n| `String`  | `readLine()` | 读一行文字               |\n| `boolean` | `ready()`    | 获取该流是否准备好被读取 |\n\n我们以从文件中读取内容为例：\n\n```java\nimport java.io.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestReader\n * @date : 2021/4/20 18:40\n * @description : Reader 实例\n */\n\npublic class TestReader {\n    public static void main(String[] args) {\n        String content = null;\n        File file = new File(\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\");\n        System.out.println(\"内容如下：\");\n        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {\n            while ((content = bufferedReader.readLine()) != null) {\n                System.out.println(content);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/7755ba832f71ac4227afac703a4aeee6.png)\n\n## 总结\n\n好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！\n\n对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】死磕-IO-流","published":1,"updated":"2021-05-04T03:23:09.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1i004jbw34fcki41z0","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>\n<p>本文主要内容安排如下：</p>\n<ul>\n<li><strong>文件对象</strong></li>\n<li><strong>流简介</strong></li>\n<li><strong>字节流</strong></li>\n<li><strong>字符流</strong></li>\n</ul>\n<h2 id=\"文件对象\"><a href=\"#文件对象\" class=\"headerlink\" title=\"文件对象\"></a>文件对象</h2><h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>File(String pathName)</code></td>\n<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>\n</tr>\n<tr>\n<td><code>File(String parent, String child)</code></td>\n<td>从父路径名字符串和子路径名字符串创建新实例</td>\n</tr>\n<tr>\n<td><code>File(File parent, String child)</code></td>\n<td>从父抽象路径名和子路径名字符串创建新实例</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : FileObject\n * @date : 2021/4/20 9:20\n * @description : 创建 File 对象的三个构造方法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8d00d3c76f0205191b0baf5f41111002.png\" alt=\"\"></p>\n<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>\n<ul>\n<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>\n<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\\\Softwares\\\\Typora\\\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : FilePath\n * @date : 2021/4/20 9:55\n * @description : 文件路径\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilePath</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/14b55b0c214f6543c9264aca39be5e59.png\" alt=\"\"></p>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><h4 id=\"创建与删除\"><a href=\"#创建与删除\" class=\"headerlink\" title=\"创建与删除\"></a>创建与删除</h4><p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>createNewFile()</code></td>\n<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdir()</code></td>\n<td>创建由此抽象路径名命名的目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdirs()</code></td>\n<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>delete()</code></td>\n<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : CreateAndDelete\n * @date : 2021/4/20 10:40\n * @description : 创建&amp;删除\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateAndDelete</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除文件成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件夹成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件夹失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/JavaSE/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建多级目录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建多级目录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ead663818d1e5ab026569c4813dc14c6.png\" alt=\"\"></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li><p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>\n</li>\n<li><p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>\n</li>\n</ul>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>long</code></td>\n<td><code>length()</code></td>\n<td>该抽象路径名表示的文件的所占字节大小</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canRead()</code></td>\n<td>该抽象路径名表示的文件是否可读</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canWrite()</code></td>\n<td>该抽象路径名表示的文件是否可写</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canExecute()</code></td>\n<td>该抽象路径名表示的文件是否可执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:04\n * @description : 相关属性\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/new.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可读\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可读\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件大小：\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Byte\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/77142d614e1be43a596fe36393391fa2.png\" alt=\"\"></p>\n<h4 id=\"判断和获取\"><a href=\"#判断和获取\" class=\"headerlink\" title=\"判断和获取\"></a>判断和获取</h4><p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isFile()</code></td>\n<td>测试此抽象路径名表示的文件是否为普通文件</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isDirectory()</code></td>\n<td>测试此抽象路径名表示的文件是否为目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>exists()</code></td>\n<td>测试此抽象路径名表示的文件或目录是否存在</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getPath()</code></td>\n<td>将抽象路径转换为路径字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getAbsolutePath()</code></td>\n<td>返回此抽象路径名的绝对路径名字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getName()</code></td>\n<td>返回由此抽象路径名表示的文件或目录的名称</td>\n</tr>\n<tr>\n<td><code>String[]</code></td>\n<td><code>list()</code></td>\n<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>\n</tr>\n<tr>\n<td><code>File[]</code></td>\n<td><code>listFiles()</code></td>\n<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:15\n * @description : 判断和获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录下的文件和目录列表：（文件或目录名）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录下的文件和目录列表：（完整绝对路径）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> path <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f700643b45d2c342b1bfbcc8013e6f04.png\" alt=\"\"></p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Test\n * @date : 2021/4/20 11:40\n * @description : 遍历 C 盘 Windows 目录下的文件，并打印文件名和大小\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> item <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名：\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t文件大小占：\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 字节\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1748c876c040f679a85599b1cb690996.png\" alt=\"\"></p>\n<h2 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h2><h3 id=\"什么是流\"><a href=\"#什么是流\" class=\"headerlink\" title=\"什么是流\"></a>什么是流</h3><p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>字节流</th>\n<th>字符流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>输入流</strong></td>\n<td><code>InputStream</code></td>\n<td><code>Reader</code></td>\n</tr>\n<tr>\n<td><strong>输出流</strong></td>\n<td><code>OutputStream</code></td>\n<td><code>Writer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>\n<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3d6801788ba190b32b12c2fbce6128c4.png\" alt=\"IO 流.png\"></p>\n<h3 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/89f7aa014a7a9eca0cb72a9a4a518af3.png\" alt=\"InputStream.png\"></p>\n<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int</code></td>\n<td><code>available()</code></td>\n<td>返回该输入流中可以读取的字节数的估计值</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭输入流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read(bytep[] b)</code></td>\n<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3bfb8168f79fa1df2ff05016a44f3977.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestInputStream\n * @date : 2021/4/20 15:29\n * @description : InputStream 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInputStream</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//            读取输入流中可以被读的 bytes 估计值</span>\n            <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            根据 bytes 数创建数组</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            数据读取到数组</span>\n            inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            数组转化为字符串</span>\n            result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//        打印字符串</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/079bde92fdeb5a244abe14c11550b3a9.png\" alt=\"\"></p>\n<h3 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c099dc3f0e3887966b11ae9598fb6cf0.png\" alt=\"OutputStream.png\"></p>\n<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>write(byte[] b)</code></td>\n<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭文件输出流并释放相关资源</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestOutputStream\n * @date : 2021/4/20 15:58\n * @description : OutputStream 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestOutputStream</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"这是一个 OutputStream 实例！\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//            字符串转换为 byte 数组</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            写入数据</span>\n            outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cf65c7eda0591d6e773596eb59a54cb2.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c23f98c28c2c9ea6359926338b6ac127.png\" alt=\"\"></p>\n<p>需要注意的点：</p>\n<ul>\n<li>字节流写入数据时如何实现换行？</li>\n</ul>\n<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\\r\\n</code>，macOS 下为 <code>\\r</code>，而 Linux 下为 <code>\\m</code>。</p>\n<ul>\n<li>字节流写入数据时如何实现追加？</li>\n</ul>\n<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>\n<h3 id=\"字符串中的编解码问题\"><a href=\"#字符串中的编解码问题\" class=\"headerlink\" title=\"字符串中的编解码问题\"></a>字符串中的编解码问题</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>\n<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>\n</ul>\n<h4 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h4><ul>\n<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>\n<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : EncodeAndDecode\n * @date : 2021/4/21 9:37\n * @description : 编码和解码\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EncodeAndDecode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        编码</span>\n        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        解码</span>\n        <span class=\"token class-name\">String</span> res1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> res2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> res3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/aa51244d9e2c9ac431675b8edbedcbf6.png\" alt=\"\"></p>\n<h3 id=\"Writer\"><a href=\"#Writer\" class=\"headerlink\" title=\"Writer\"></a>Writer</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/262d05641e092d5fba6c6a0f226c7084.png\" alt=\"Writer.png\"></p>\n<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>先刷新再关闭流，不能再写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>flush()</code></td>\n<td>刷新流，可以继续写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>newLine()</code></td>\n<td>写入行分隔符</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>write()</code></td>\n<td>写入字符或字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestWriter\n * @date : 2021/4/20 18:35\n * @description : Writer 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestWriter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blog：https://cunyu1943.site\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8a1c0ed741fa76bed7adc8af032cfccc.png\" alt=\"\"></p>\n<h3 id=\"Reader\"><a href=\"#Reader\" class=\"headerlink\" title=\"Reader\"></a>Reader</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/866febfe2af649d41ef0fa956e09141a.png\" alt=\"Reader.png\"></p>\n<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read()</code></td>\n<td>读取一个字符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>readLine()</code></td>\n<td>读一行文字</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>ready()</code></td>\n<td>获取该流是否准备好被读取</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们以从文件中读取内容为例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestReader\n * @date : 2021/4/20 18:40\n * @description : Reader 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestReader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内容如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7755ba832f71ac4227afac703a4aeee6.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>\n<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>\n<p>本文主要内容安排如下：</p>\n<ul>\n<li><strong>文件对象</strong></li>\n<li><strong>流简介</strong></li>\n<li><strong>字节流</strong></li>\n<li><strong>字符流</strong></li>\n</ul>\n<h2 id=\"文件对象\"><a href=\"#文件对象\" class=\"headerlink\" title=\"文件对象\"></a>文件对象</h2><h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>File(String pathName)</code></td>\n<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>\n</tr>\n<tr>\n<td><code>File(String parent, String child)</code></td>\n<td>从父路径名字符串和子路径名字符串创建新实例</td>\n</tr>\n<tr>\n<td><code>File(File parent, String child)</code></td>\n<td>从父抽象路径名和子路径名字符串创建新实例</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : FileObject\n * @date : 2021/4/20 9:20\n * @description : 创建 File 对象的三个构造方法\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8d00d3c76f0205191b0baf5f41111002.png\" alt=\"\"></p>\n<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>\n<ul>\n<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>\n<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\\\Softwares\\\\Typora\\\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : FilePath\n * @date : 2021/4/20 9:55\n * @description : 文件路径\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilePath</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/14b55b0c214f6543c9264aca39be5e59.png\" alt=\"\"></p>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><h4 id=\"创建与删除\"><a href=\"#创建与删除\" class=\"headerlink\" title=\"创建与删除\"></a>创建与删除</h4><p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>createNewFile()</code></td>\n<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdir()</code></td>\n<td>创建由此抽象路径名命名的目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdirs()</code></td>\n<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>delete()</code></td>\n<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : CreateAndDelete\n * @date : 2021/4/20 10:40\n * @description : 创建&amp;删除\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateAndDelete</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除文件成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件夹成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建文件夹失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/JavaSE/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建多级目录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建多级目录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ead663818d1e5ab026569c4813dc14c6.png\" alt=\"\"></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li><p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>\n</li>\n<li><p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>\n</li>\n</ul>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>long</code></td>\n<td><code>length()</code></td>\n<td>该抽象路径名表示的文件的所占字节大小</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canRead()</code></td>\n<td>该抽象路径名表示的文件是否可读</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canWrite()</code></td>\n<td>该抽象路径名表示的文件是否可写</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canExecute()</code></td>\n<td>该抽象路径名表示的文件是否可执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:04\n * @description : 相关属性\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/new.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可读\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可读\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象可写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该对象不可写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件大小：\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Byte\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/77142d614e1be43a596fe36393391fa2.png\" alt=\"\"></p>\n<h4 id=\"判断和获取\"><a href=\"#判断和获取\" class=\"headerlink\" title=\"判断和获取\"></a>判断和获取</h4><p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isFile()</code></td>\n<td>测试此抽象路径名表示的文件是否为普通文件</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isDirectory()</code></td>\n<td>测试此抽象路径名表示的文件是否为目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>exists()</code></td>\n<td>测试此抽象路径名表示的文件或目录是否存在</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getPath()</code></td>\n<td>将抽象路径转换为路径字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getAbsolutePath()</code></td>\n<td>返回此抽象路径名的绝对路径名字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getName()</code></td>\n<td>返回由此抽象路径名表示的文件或目录的名称</td>\n</tr>\n<tr>\n<td><code>String[]</code></td>\n<td><code>list()</code></td>\n<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>\n</tr>\n<tr>\n<td><code>File[]</code></td>\n<td><code>listFiles()</code></td>\n<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Main\n * @date : 2021/4/20 11:15\n * @description : 判断和获取\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录下的文件和目录列表：（文件或目录名）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录下的文件和目录列表：（完整绝对路径）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> path <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f700643b45d2c342b1bfbcc8013e6f04.png\" alt=\"\"></p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Test\n * @date : 2021/4/20 11:40\n * @description : 遍历 C 盘 Windows 目录下的文件，并打印文件名和大小\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> item <span class=\"token operator\">:</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名：\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t文件大小占：\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 字节\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1748c876c040f679a85599b1cb690996.png\" alt=\"\"></p>\n<h2 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h2><h3 id=\"什么是流\"><a href=\"#什么是流\" class=\"headerlink\" title=\"什么是流\"></a>什么是流</h3><p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>字节流</th>\n<th>字符流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>输入流</strong></td>\n<td><code>InputStream</code></td>\n<td><code>Reader</code></td>\n</tr>\n<tr>\n<td><strong>输出流</strong></td>\n<td><code>OutputStream</code></td>\n<td><code>Writer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>\n<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3d6801788ba190b32b12c2fbce6128c4.png\" alt=\"IO 流.png\"></p>\n<h3 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/89f7aa014a7a9eca0cb72a9a4a518af3.png\" alt=\"InputStream.png\"></p>\n<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int</code></td>\n<td><code>available()</code></td>\n<td>返回该输入流中可以读取的字节数的估计值</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭输入流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read(bytep[] b)</code></td>\n<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3bfb8168f79fa1df2ff05016a44f3977.png\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestInputStream\n * @date : 2021/4/20 15:29\n * @description : InputStream 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInputStream</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">//            读取输入流中可以被读的 bytes 估计值</span>\n            <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            根据 bytes 数创建数组</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            数据读取到数组</span>\n            inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            数组转化为字符串</span>\n            result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//        打印字符串</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/079bde92fdeb5a244abe14c11550b3a9.png\" alt=\"\"></p>\n<h3 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c099dc3f0e3887966b11ae9598fb6cf0.png\" alt=\"OutputStream.png\"></p>\n<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>write(byte[] b)</code></td>\n<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭文件输出流并释放相关资源</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestOutputStream\n * @date : 2021/4/20 15:58\n * @description : OutputStream 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestOutputStream</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"这是一个 OutputStream 实例！\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//            字符串转换为 byte 数组</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            写入数据</span>\n            outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cf65c7eda0591d6e773596eb59a54cb2.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c23f98c28c2c9ea6359926338b6ac127.png\" alt=\"\"></p>\n<p>需要注意的点：</p>\n<ul>\n<li>字节流写入数据时如何实现换行？</li>\n</ul>\n<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\\r\\n</code>，macOS 下为 <code>\\r</code>，而 Linux 下为 <code>\\m</code>。</p>\n<ul>\n<li>字节流写入数据时如何实现追加？</li>\n</ul>\n<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>\n<h3 id=\"字符串中的编解码问题\"><a href=\"#字符串中的编解码问题\" class=\"headerlink\" title=\"字符串中的编解码问题\"></a>字符串中的编解码问题</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>\n<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>\n</ul>\n<h4 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h4><ul>\n<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>\n<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : EncodeAndDecode\n * @date : 2021/4/21 9:37\n * @description : 编码和解码\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EncodeAndDecode</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        编码</span>\n        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes3 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        解码</span>\n        <span class=\"token class-name\">String</span> res1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> res2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> res3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/aa51244d9e2c9ac431675b8edbedcbf6.png\" alt=\"\"></p>\n<h3 id=\"Writer\"><a href=\"#Writer\" class=\"headerlink\" title=\"Writer\"></a>Writer</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/262d05641e092d5fba6c6a0f226c7084.png\" alt=\"Writer.png\"></p>\n<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>先刷新再关闭流，不能再写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>flush()</code></td>\n<td>刷新流，可以继续写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>newLine()</code></td>\n<td>写入行分隔符</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>write()</code></td>\n<td>写入字符或字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestWriter\n * @date : 2021/4/20 18:35\n * @description : Writer 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestWriter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公众号：村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blog：https://cunyu1943.site\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8a1c0ed741fa76bed7adc8af032cfccc.png\" alt=\"\"></p>\n<h3 id=\"Reader\"><a href=\"#Reader\" class=\"headerlink\" title=\"Reader\"></a>Reader</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/866febfe2af649d41ef0fa956e09141a.png\" alt=\"Reader.png\"></p>\n<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read()</code></td>\n<td>读取一个字符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>readLine()</code></td>\n<td>读一行文字</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>ready()</code></td>\n<td>获取该流是否准备好被读取</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们以从文件中读取内容为例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : TestReader\n * @date : 2021/4/20 18:40\n * @description : Reader 实例\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestReader</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/PersonalFiles/github/githubCodes/IDEA/TheWay2Java/IOStream/data/2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内容如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7755ba832f71ac4227afac703a4aeee6.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>\n<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【Python 入门指北】No 3. Python 语言元素","mathjax":true,"toc":true,"abbrlink":"b7fc92d5","date":"2021-05-04T01:47:11.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。\n\n今天主要内容就介绍 Python 中的如下知识点：\n\n1.  **变量**\n2.  **数据类型**\n3.  **运算符**\n\n## 2. 变量\n\n### 2.1 什么是变量\n\n所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 **能够存储计算结果或者能够表示值的抽象概念**。\n\n我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。\n\n### 2.2 变量命名规则\n\nPython 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。\n\nPython 中，标识符 **必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写**。总结起来就是如下几点：\n\n1.  **变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头**，比如我们可以把一个变量命名为 `cunyu_1943、_cunyu1943` 但是不能命名为 `1943_cunyu`；\n\n2.  **变量名中间不能包含空格，但是可以用下划线来进行分割**，比如可以命名为 `student_name`，但不能命名为 `student name`；\n3.  **变量名应该尽量简短切具有描述性**，比如我们变量名为 `name`，那别人一看就知道这是表示名字的，但如果我们命名为 `n`，那可能就得花更多的时间来搞清楚它到底是啥意思；\n4.  **不要把 Python 中的关键字和内置函数名用做变量名**，Python 中常见的关键字和内置函数如下表；\n\n| 关键字     | 描述                                         |\n| :--------- | :------------------------------------------- |\n| `and`      | 逻辑运算符                                   |\n| `as`       | 创建别名                                     |\n| `assert`   | 用于调试                                     |\n| `break`    | 跳出循环                                     |\n| `class`    | 定义类                                       |\n| `continue` | 继续循环的下一个迭代                         |\n| `def`      | 定义函数                                     |\n| `del`      | 删除对象                                     |\n| `elif`     | 在条件语句中使用，等同于 else if             |\n| `else`     | 用于条件语句                                 |\n| `except`   | 处理异常，发生异常时如何执行                 |\n| `False`    | 布尔值，比较运算的结果                       |\n| `finally`  | 处理异常，无论是否存在异常，都将执行一段代码 |\n| `for`      | 创建 for 循环                                |\n| `from`     | 导入模块的特定部分                           |\n| `global`   | 声明全局变量                                 |\n| `if`       | 写一个条件语句                               |\n| `import`   | 导入模块                                     |\n| `in`       | 检查列表、元组等集合中是否存在某个值         |\n| `is`       | 测试两个变量是否相等                         |\n| `lambda`   | 创建匿名函数                                 |\n| `None`     | 表示 `null` 值                               |\n| `nonlocal` | 声明非局部变量                               |\n| `not`      | 逻辑运算符                                   |\n| `or`       | 逻辑运算符                                   |\n| `pass`     | `null` 语句，一条什么都不做的语句            |\n| `raise`    | 产生异常                                     |\n| `return`   | 退出函数并返回值                             |\n| `True`     | 布尔值，比较运算的结果                       |\n| `try`      | 编写 `try...except` 语句                     |\n| `while`    | 创建 `while` 循环                            |\n| `with`     | 用于简化异常处理                             |\n| `yield`    | 结束函数，返回生成器                         |\n\n|                 |               | 内置函数       |                |                  |\n| :-------------- | :------------ | :------------- | :------------- | ---------------- |\n| `abs()`         | `delattr()`   | `hash()`       | `memoryview()` | `set()`          |\n| `all()`         | `dict()`      | `help()`       | `min()`        | `setattr()`      |\n| `any()`         | `dir()`       | `hex()`        | `next()`       | `slice()`        |\n| `ascii()`       | `divmod()`    | `id()`         | `object()`     | `sorted()`       |\n| `bin()`         | `enumerate()` | `input()`      | `oct()`        | `staticmethod()` |\n| `bool()`        | `eval()`      | `int()`        | `open()`       | `str()`          |\n| `breakpoint()`  | `exec()`      | `isinstance()` | `ord()`        | `sum()`          |\n| `bytearray()`   | `filter()`    | `issubclass()` | `pow()`        | `super()`        |\n| `bytes()`       | `float()`     | `iter()`       | `print()`      | `tuple()`        |\n| `callable()`    | `format()`    | `len()`        | `property()`   | `type()`         |\n| `chr()`         | `frozenset()` | `list()`       | `range()`      | `vars()`         |\n| `classmethod()` | `getattr()`   | `locals()`     | `repr()`       | `zip()`          |\n| `compile()`     | `globals()`   | `map()`        | `reversed()`   | `__import__()`   |\n| `complex()`     | `hasattr()`   | `max()`        | `round()`      |                  |\n\n\u0014\u0014\n\n## 3. 数据类型\n\n要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：\n\n### 3.1 数字\n\n数字数据类型用于存储数值，他们是 **不可改变** 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。\n\n当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 `del` 语句；\n\n```python\n# 创建对象\nnumber = 1\n# 删除引用\ndel number\n```\n\nPython 支持如下不同的数字类型；\n\n-   `int`：整型（⚠️ Python 2.x 中有 `int` 和 `long` 之分，但是 Python 3.x 中只有 `int`），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；\n-   `float`：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（`456.78`），还支持科学记数法（`4.5678e2`）；\n-   `complex`：复数类型，由实部和虚部组成，形如 `a + bj` 的形式，和数学中的复数表示一样，只是把 `i` 变成了 `j`；\n\n### 3.2 字符串\n\n以单引号或双引号括起来的任意文本，例如 `“cunyu1943”` 和 `‘cunyu1943’`，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）\n\n```python\n'''\n公众号：村雨遥\nblog：cunyu1943.site\n'''\n\n“”“\n公众号：村雨遥\nblog：cunyu1943.site\n”“”\n```\n\nPython 中字符串有 2 种取值顺序：\n\n1.  **从左向右索引**，索引值从 `0` 开始，最大索引值是字符串长度减 `1`；\n2.  **从右向左索引**，索引值从 `-1` 开始，最大索引值是字符串开头；\n\n如果我们要从字符串汇总获取一小段子字符串，则可以使用 `[头下标:尾下标]` 来进行截取。注意 **左闭右开** 原则，即通过  `[头下标:尾下标]` 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；\n\n加入我们的字符串 `s = 'abcdef’`，则通过不同方式索引的结果如下图：\n\n![图片源自菜鸟教程](https://img-blog.csdnimg.cn/img_convert/a81823c17d94496142e6c265ad94b4e1.png)\n\n### 3.3 列表\n\n`list` 是一种 **有序** 的集合，能随时向其中添加和删除元素，用 `[]` 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 `[头下标:尾下标]` 的方式来进行截取相应子列表，索引方式同字符串，示例如下：\n\n![源自菜鸟教程](https://img-blog.csdnimg.cn/img_convert/b74bdbedc3906fdef50d0362d258c52b.png)\n\n`list` 中常用方法如下：\n\n| 方法                                           | 说明                                                         |\n| ---------------------------------------------- | ------------------------------------------------------------ |\n| `len(list)`                                    | 列表元素个数                                                 |\n| `list(seq)`                                    | 将元组转换为列表                                             |\n| `list.pop()`                                   | 删除 `list` 末尾的元素                                       |\n| `list.pop(index)`                              | 删除 `list` 中索引位置为 `index` 的元素                      |\n| `list.append(obj)`                             | 在列表末尾添加新的对象                                       |\n| `list.count(obj)`                              | 统计某个元素在列表中出现的次数                               |\n| `list.insert(index, obj)`                      | 将对象插入列表指定位置                                       |\n| `list.remove(obj)`                             | 移除列表中某个值的第一个匹配项                               |\n| `list.reverse()`                               | 反转列表中元素                                               |\n| `list.index(obj)`                              | 从列表中找出某个值第一个匹配项的索引位置                     |\n| `list.sort(cmp=None, key=None, reverse=False)` | 对原列表进行排序，**reverse = True** 降序， **reverse = False** 升序（默认） |\n\n如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 `+` 来连接不同的数组；\n\n```python\n>>> list1 = [1, 2, 3]\n>>> list2 = [4, 5, 6]\n>>> print(list2 + list2)\n[1, 2, 3, 4, 5, 6]\n```\n\n而如果我们想要某个列表重复，则可以使用 `*` ；\n\n```python\n>>> list1 = [1, 3, 4]\n>>> print(list1 * 2)\n[1, 3, 4, 1, 3, 4]\n```\n\n### 3.4 元组\n\n`tuple` 也是一种类似于 `list` 的 **有序** 列表，用 `()` 标识，内部元素用逗号隔开。它俩的一个最大区别在于： `tuple` 一旦初始化之后，就不能再修改了，相当于只读列表，所以 `tuple` 不像 `list` 一样有类似 `append()、insert()` 等方法；\n\n常用方法如下：\n\n| 方法         | 说明                 |\n| ------------ | -------------------- |\n| `len(tuple)` | 计算元组元素个数     |\n| `tuple(seq)` | 将列表转换为元组     |\n| `max(tuple)` | 返回元组中元素最大值 |\n| `min(tuple)` | 返回元组中元素最小值 |\n\n如果我们要定义一个空的元组，可以用如下的方式：\n\n```python\ntuple = ()\n```\n\n而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：\n\n```python\nt = (1,)\n```\n\n### 3.5 字典\n\n列表是有序的对象集合，而字典则是无序的对象集合，字典用 `{}`标识，元素间用逗号分隔，每个元素由 `key:value` 的形式组成。\n\n两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。\n\n字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：\n\n1.  不允许同一个键出现两次；\n2.  键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；\n\n字典也有许多方法供我们使用，主要方法总结如下：\n\n| 方法               | 说明                                                |\n| ------------------ | --------------------------------------------------- |\n| `len(dict)`        | 计算字典元素个数，即键的总数                        |\n| `str(dict)`        | 输出字典可打印的字符串表示                          |\n| `type(variable)`   | 返回输入的变量类型，如果变量是字典就返回字典类型    |\n| `dict.clear()`     | 删除字典内所有元素                                  |\n| `dict.copy()`      | 返回一个字典的浅复制                                |\n| `dict.haskey(key)` | 如果键在字典 `dict` 里返回 `True`，否则返回 `False` |\n| `dict.get(key)`    | 返回指定键的值                                      |\n| `dict.keys()`      | 以列表返回一个字典所有的键                          |\n| `dict.values()`    | 以列表返回字典中的所有值                            |\n| `dict.items()`     | 以列表返回可遍历的(键, 值) 元组数组                 |\n| `pop(key)`         | 删除字典给定键 `key` 所对应的值，返回值为被删除的值 |\n| `popitem()`        | 返回并删除字典中的最后一对键和值                    |\n\n\n\n### 3.6 布尔值\n\n布尔值只有`True`、`False`两种值，要么是`True`，要么是`False`。在Python中，可以直接用`True`、`False` 直接表示布尔值，也可以通过布尔运算计算出来。\n\n```python\n>>> False\nFalse\n>>> 3 > 2\nTrue\n```\n\n## 4. 运算符\n\nPython 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；\n\n| 运算符                     | 描述                                                   |\n| :------------------------- | :----------------------------------------------------- |\n| `**`                       | 指数 (最高优先级)                                      |\n| `~ + -`                    | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //`                 | 乘，除，取模和取整除                                   |\n| `+ -`                      | 加法减法                                               |\n| `>> <<`                    | 右移，左移运算符                                       |\n| `&`                        | 位 '`AND`'                                             |\n| `^ |`                      | 位运算符                                               |\n| `<= < > >=`                | 比较运算符                                             |\n| `<> == !=`                 | 等于运算符                                             |\n| `= %= /= //= -= += *= **=` | 赋值运算符                                             |\n| `is is not`                | 身份运算符                                             |\n| `in not in`                | 成员运算符                                             |\n| `not and or`               | 逻辑运算符                                             |\n\n### 4.1 算术运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述                                            | 实例                                                      |\n| :----- | :---------------------------------------------- | :-------------------------------------------------------- |\n| `+`    | 加 - 两个对象相加                               | `a + b` 输出结果 30                                       |\n| `-`    | 减 - 得到负数或是一个数减去另一个数             | `a - b` 输出结果 -10                                      |\n| `*`    | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | `a * b` 输出结果 200                                      |\n| `/`    | 除 - `x` 除以 `y`                               | `b / a` 输出结果 2                                        |\n| `%`    | 取模 - 返回除法的余数                           | `b % a` 输出结果 0                                        |\n| `**`   | 幂 - 返回 `x` 的 `y` 次幂                       | `a**b ` 为 10 的 20 次方， 输出结果 100000000000000000000 |\n| `//`   | 取整除 - 返回商的整数部分（**向下取整**）       | `>>> 9//2 4 >>> -9//2 -5`                                 |\n\n### 4.2 比较运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述                                                         | 实例                                      |\n| :----- | :----------------------------------------------------------- | :---------------------------------------- |\n| `==`   | 等于 - 比较对象是否相等                                      | `(a == b)` 返回  `False`                  |\n| `!=`   | 不等于 - 比较两个对象是否不相等                              | `(a != b) ` 返回  `True`                  |\n| `<>`   | 不等于 - 比较两个对象是否不相等。**python3 已废弃。**        | `(a <> b) `返回 `True`。这个运算符类似 != |\n| `>`    | 大于 - 返回 `x` 是否大于 `y`                                 | `(a > b)`  返回 `False`                   |\n| `<`    | 小于 - 返回 `x` 是否小于 `y`。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 `True` 和 `False` 等价 | `(a < b) `返回 `True`                     |\n| `>=`   | 大于等于 - 返回 `x` 是否大于等于 `y`                         | `(a >= b)` 返回 `False`                   |\n| `<=`   | 小于等于 - 返回 `x` 是否小于等于 `y`                         | `(a <= b)` 返回 `True`                    |\n\n### 4.3 赋值运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述             | 实例                                        |\n| :----- | :--------------- | :------------------------------------------ |\n| `=`    | 简单的赋值运算符 | `c = a + b` 将 `a + b` 的运算结果赋值为 `c` |\n| `+=`   | 加法赋值运算符   | `c += a` 等效于 `c = c + a`                 |\n| `-=`   | 减法赋值运算符   | `c -= a` 等效于 `c = c - a`                 |\n| `*=`   | 乘法赋值运算符   | `c *= a` 等效于 `c = c * a`                 |\n| `/=`   | 除法赋值运算符   | `c /= a` 等效于` c = c / a`                 |\n| `%=`   | 取模赋值运算符   | `c %= a` 等效于 `c = c % a`                 |\n| `**=`  | 幂赋值运算符     | `c \\**= a` 等效于 `c = c ** a`              |\n| `//=`  | 取整除赋值运算符 | `c //= a` 等效于 `c = c // a`               |\n\n### 4.4 逻辑运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 逻辑表达式 | 描述                                                         | 实例                        |\n| :----- | :--------- | :----------------------------------------------------------- | :-------------------------- |\n| `and`  | `x and y`  | 布尔\"与\" - 如果 `x` 为 `False`，`x and y` 返回 `False`，否则它返回 `y` 的计算值 | `(a and b)` 返回 20         |\n| `or`   | `x or y`   | 布尔\"或\" - 如果 `x` 是非 0，它返回 `x` 的值，否则它返回 `y` 的计算值 | `(a or b)` 返回 10          |\n| `not`  | `not x`    | 布尔\"非\" - 如果 `x` 为 `True`，返回 `False` 。如果 `x` 为 `False`，它返回 `True` | `not(a and b)` 返回 `False` |\n\n\n\n### 4.5 位运算符\n\n假设变量 `a = 60, b = 13`：\n\n按位运算符石将数字转换为二进制之后来进行计算的，则 `a = 00111100、b = 00001101`\n\n| 运算符 | 描述                                                         | 实例                                                         |\n| :----- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `&`    | 按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100               |\n| `|`    | 按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1 | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101               |\n| `^`    | 按位异或运算符：当两对应的二进位相异时，结果为 1             | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001               |\n| `~`    | 按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。**~x** 类似于 **-x-1** | `(~a ) `输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 |\n| `<<`   | 左移动运算符：运算数的各二进位全部左移若干位，由 **<<** 右边的数字指定了移动的位数，高位丢弃，低位补 0。 | `a << 2` 输出结果 240 ，二进制解释： 1111 0000               |\n| `>>`   | 右移动运算符：把 \">>” 左边的运算数的各二进位全部右移若干位，**>>** 右边的数字指定了移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111                |\n\n### 4.6 成员运算符\n\n| 运算符   | 描述                                                        | 实例                                                      |\n| :------- | :---------------------------------------------------------- | :-------------------------------------------------------- |\n| `in`     | 如果在指定的序列中找到值返回 `True`，否则返回 `False`。     | `x` 在 `y` 序列中 , 如果 `x` 在 `y` 序列中返回 `True`     |\n| `not in` | 如果在指定的序列中没有找到值返回 `True`，否则返回 `False`。 | `x` 不在 `y` 序列中 , 如果 `x` 不在 `y` 序列中返回 `True` |\n\n### 4.7 身份运算符\n\n身份运算符用于比较两个对象的存储单元：\n\n| 运算符   | 描述                                          | 实例                                                         |\n| :------- | :-------------------------------------------- | :----------------------------------------------------------- |\n| `is`     | `is` 是判断两个标识符是不是引用自一个对象     | `x is y`, 类似 `id(x) == id(y)` , 如果引用的是同一个对象则返回 `True`，否则返回 `False` |\n| `is not` | `is not` 是判断两个标识符是不是引用自不同对象 | `x is not y` ， 类似 `id(a) != id(b)`。如果引用的不是同一个对象则返回结果 `True`，否则返回 `False` |\n\n## 5. 总结\n\n好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。\n\n如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 **加群**，我人工拉你入群哦。\n\n![](https://img-blog.csdnimg.cn/img_convert/ff1f319675f421e98cbf2c93da3bf08b.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Python-入门指北】No-3-Python-语言元素.md","raw":"---\ntitle: 【Python 入门指北】No 3. Python 语言元素\nmathjax: true\ntoc: true\ntags:\n  - Python\ncategories:\n  - Python 养成记\nabbrlink: b7fc92d5\ndate: 2021-05-04 09:47:11\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 前言\n\n之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。\n\n今天主要内容就介绍 Python 中的如下知识点：\n\n1.  **变量**\n2.  **数据类型**\n3.  **运算符**\n\n## 2. 变量\n\n### 2.1 什么是变量\n\n所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 **能够存储计算结果或者能够表示值的抽象概念**。\n\n我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。\n\n### 2.2 变量命名规则\n\nPython 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。\n\nPython 中，标识符 **必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写**。总结起来就是如下几点：\n\n1.  **变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头**，比如我们可以把一个变量命名为 `cunyu_1943、_cunyu1943` 但是不能命名为 `1943_cunyu`；\n\n2.  **变量名中间不能包含空格，但是可以用下划线来进行分割**，比如可以命名为 `student_name`，但不能命名为 `student name`；\n3.  **变量名应该尽量简短切具有描述性**，比如我们变量名为 `name`，那别人一看就知道这是表示名字的，但如果我们命名为 `n`，那可能就得花更多的时间来搞清楚它到底是啥意思；\n4.  **不要把 Python 中的关键字和内置函数名用做变量名**，Python 中常见的关键字和内置函数如下表；\n\n| 关键字     | 描述                                         |\n| :--------- | :------------------------------------------- |\n| `and`      | 逻辑运算符                                   |\n| `as`       | 创建别名                                     |\n| `assert`   | 用于调试                                     |\n| `break`    | 跳出循环                                     |\n| `class`    | 定义类                                       |\n| `continue` | 继续循环的下一个迭代                         |\n| `def`      | 定义函数                                     |\n| `del`      | 删除对象                                     |\n| `elif`     | 在条件语句中使用，等同于 else if             |\n| `else`     | 用于条件语句                                 |\n| `except`   | 处理异常，发生异常时如何执行                 |\n| `False`    | 布尔值，比较运算的结果                       |\n| `finally`  | 处理异常，无论是否存在异常，都将执行一段代码 |\n| `for`      | 创建 for 循环                                |\n| `from`     | 导入模块的特定部分                           |\n| `global`   | 声明全局变量                                 |\n| `if`       | 写一个条件语句                               |\n| `import`   | 导入模块                                     |\n| `in`       | 检查列表、元组等集合中是否存在某个值         |\n| `is`       | 测试两个变量是否相等                         |\n| `lambda`   | 创建匿名函数                                 |\n| `None`     | 表示 `null` 值                               |\n| `nonlocal` | 声明非局部变量                               |\n| `not`      | 逻辑运算符                                   |\n| `or`       | 逻辑运算符                                   |\n| `pass`     | `null` 语句，一条什么都不做的语句            |\n| `raise`    | 产生异常                                     |\n| `return`   | 退出函数并返回值                             |\n| `True`     | 布尔值，比较运算的结果                       |\n| `try`      | 编写 `try...except` 语句                     |\n| `while`    | 创建 `while` 循环                            |\n| `with`     | 用于简化异常处理                             |\n| `yield`    | 结束函数，返回生成器                         |\n\n|                 |               | 内置函数       |                |                  |\n| :-------------- | :------------ | :------------- | :------------- | ---------------- |\n| `abs()`         | `delattr()`   | `hash()`       | `memoryview()` | `set()`          |\n| `all()`         | `dict()`      | `help()`       | `min()`        | `setattr()`      |\n| `any()`         | `dir()`       | `hex()`        | `next()`       | `slice()`        |\n| `ascii()`       | `divmod()`    | `id()`         | `object()`     | `sorted()`       |\n| `bin()`         | `enumerate()` | `input()`      | `oct()`        | `staticmethod()` |\n| `bool()`        | `eval()`      | `int()`        | `open()`       | `str()`          |\n| `breakpoint()`  | `exec()`      | `isinstance()` | `ord()`        | `sum()`          |\n| `bytearray()`   | `filter()`    | `issubclass()` | `pow()`        | `super()`        |\n| `bytes()`       | `float()`     | `iter()`       | `print()`      | `tuple()`        |\n| `callable()`    | `format()`    | `len()`        | `property()`   | `type()`         |\n| `chr()`         | `frozenset()` | `list()`       | `range()`      | `vars()`         |\n| `classmethod()` | `getattr()`   | `locals()`     | `repr()`       | `zip()`          |\n| `compile()`     | `globals()`   | `map()`        | `reversed()`   | `__import__()`   |\n| `complex()`     | `hasattr()`   | `max()`        | `round()`      |                  |\n\n\u0014\u0014\n\n## 3. 数据类型\n\n要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：\n\n### 3.1 数字\n\n数字数据类型用于存储数值，他们是 **不可改变** 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。\n\n当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 `del` 语句；\n\n```python\n# 创建对象\nnumber = 1\n# 删除引用\ndel number\n```\n\nPython 支持如下不同的数字类型；\n\n-   `int`：整型（⚠️ Python 2.x 中有 `int` 和 `long` 之分，但是 Python 3.x 中只有 `int`），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；\n-   `float`：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（`456.78`），还支持科学记数法（`4.5678e2`）；\n-   `complex`：复数类型，由实部和虚部组成，形如 `a + bj` 的形式，和数学中的复数表示一样，只是把 `i` 变成了 `j`；\n\n### 3.2 字符串\n\n以单引号或双引号括起来的任意文本，例如 `“cunyu1943”` 和 `‘cunyu1943’`，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）\n\n```python\n'''\n公众号：村雨遥\nblog：cunyu1943.site\n'''\n\n“”“\n公众号：村雨遥\nblog：cunyu1943.site\n”“”\n```\n\nPython 中字符串有 2 种取值顺序：\n\n1.  **从左向右索引**，索引值从 `0` 开始，最大索引值是字符串长度减 `1`；\n2.  **从右向左索引**，索引值从 `-1` 开始，最大索引值是字符串开头；\n\n如果我们要从字符串汇总获取一小段子字符串，则可以使用 `[头下标:尾下标]` 来进行截取。注意 **左闭右开** 原则，即通过  `[头下标:尾下标]` 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；\n\n加入我们的字符串 `s = 'abcdef’`，则通过不同方式索引的结果如下图：\n\n![图片源自菜鸟教程](https://img-blog.csdnimg.cn/img_convert/a81823c17d94496142e6c265ad94b4e1.png)\n\n### 3.3 列表\n\n`list` 是一种 **有序** 的集合，能随时向其中添加和删除元素，用 `[]` 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 `[头下标:尾下标]` 的方式来进行截取相应子列表，索引方式同字符串，示例如下：\n\n![源自菜鸟教程](https://img-blog.csdnimg.cn/img_convert/b74bdbedc3906fdef50d0362d258c52b.png)\n\n`list` 中常用方法如下：\n\n| 方法                                           | 说明                                                         |\n| ---------------------------------------------- | ------------------------------------------------------------ |\n| `len(list)`                                    | 列表元素个数                                                 |\n| `list(seq)`                                    | 将元组转换为列表                                             |\n| `list.pop()`                                   | 删除 `list` 末尾的元素                                       |\n| `list.pop(index)`                              | 删除 `list` 中索引位置为 `index` 的元素                      |\n| `list.append(obj)`                             | 在列表末尾添加新的对象                                       |\n| `list.count(obj)`                              | 统计某个元素在列表中出现的次数                               |\n| `list.insert(index, obj)`                      | 将对象插入列表指定位置                                       |\n| `list.remove(obj)`                             | 移除列表中某个值的第一个匹配项                               |\n| `list.reverse()`                               | 反转列表中元素                                               |\n| `list.index(obj)`                              | 从列表中找出某个值第一个匹配项的索引位置                     |\n| `list.sort(cmp=None, key=None, reverse=False)` | 对原列表进行排序，**reverse = True** 降序， **reverse = False** 升序（默认） |\n\n如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 `+` 来连接不同的数组；\n\n```python\n>>> list1 = [1, 2, 3]\n>>> list2 = [4, 5, 6]\n>>> print(list2 + list2)\n[1, 2, 3, 4, 5, 6]\n```\n\n而如果我们想要某个列表重复，则可以使用 `*` ；\n\n```python\n>>> list1 = [1, 3, 4]\n>>> print(list1 * 2)\n[1, 3, 4, 1, 3, 4]\n```\n\n### 3.4 元组\n\n`tuple` 也是一种类似于 `list` 的 **有序** 列表，用 `()` 标识，内部元素用逗号隔开。它俩的一个最大区别在于： `tuple` 一旦初始化之后，就不能再修改了，相当于只读列表，所以 `tuple` 不像 `list` 一样有类似 `append()、insert()` 等方法；\n\n常用方法如下：\n\n| 方法         | 说明                 |\n| ------------ | -------------------- |\n| `len(tuple)` | 计算元组元素个数     |\n| `tuple(seq)` | 将列表转换为元组     |\n| `max(tuple)` | 返回元组中元素最大值 |\n| `min(tuple)` | 返回元组中元素最小值 |\n\n如果我们要定义一个空的元组，可以用如下的方式：\n\n```python\ntuple = ()\n```\n\n而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：\n\n```python\nt = (1,)\n```\n\n### 3.5 字典\n\n列表是有序的对象集合，而字典则是无序的对象集合，字典用 `{}`标识，元素间用逗号分隔，每个元素由 `key:value` 的形式组成。\n\n两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。\n\n字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：\n\n1.  不允许同一个键出现两次；\n2.  键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；\n\n字典也有许多方法供我们使用，主要方法总结如下：\n\n| 方法               | 说明                                                |\n| ------------------ | --------------------------------------------------- |\n| `len(dict)`        | 计算字典元素个数，即键的总数                        |\n| `str(dict)`        | 输出字典可打印的字符串表示                          |\n| `type(variable)`   | 返回输入的变量类型，如果变量是字典就返回字典类型    |\n| `dict.clear()`     | 删除字典内所有元素                                  |\n| `dict.copy()`      | 返回一个字典的浅复制                                |\n| `dict.haskey(key)` | 如果键在字典 `dict` 里返回 `True`，否则返回 `False` |\n| `dict.get(key)`    | 返回指定键的值                                      |\n| `dict.keys()`      | 以列表返回一个字典所有的键                          |\n| `dict.values()`    | 以列表返回字典中的所有值                            |\n| `dict.items()`     | 以列表返回可遍历的(键, 值) 元组数组                 |\n| `pop(key)`         | 删除字典给定键 `key` 所对应的值，返回值为被删除的值 |\n| `popitem()`        | 返回并删除字典中的最后一对键和值                    |\n\n\n\n### 3.6 布尔值\n\n布尔值只有`True`、`False`两种值，要么是`True`，要么是`False`。在Python中，可以直接用`True`、`False` 直接表示布尔值，也可以通过布尔运算计算出来。\n\n```python\n>>> False\nFalse\n>>> 3 > 2\nTrue\n```\n\n## 4. 运算符\n\nPython 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；\n\n| 运算符                     | 描述                                                   |\n| :------------------------- | :----------------------------------------------------- |\n| `**`                       | 指数 (最高优先级)                                      |\n| `~ + -`                    | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //`                 | 乘，除，取模和取整除                                   |\n| `+ -`                      | 加法减法                                               |\n| `>> <<`                    | 右移，左移运算符                                       |\n| `&`                        | 位 '`AND`'                                             |\n| `^ |`                      | 位运算符                                               |\n| `<= < > >=`                | 比较运算符                                             |\n| `<> == !=`                 | 等于运算符                                             |\n| `= %= /= //= -= += *= **=` | 赋值运算符                                             |\n| `is is not`                | 身份运算符                                             |\n| `in not in`                | 成员运算符                                             |\n| `not and or`               | 逻辑运算符                                             |\n\n### 4.1 算术运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述                                            | 实例                                                      |\n| :----- | :---------------------------------------------- | :-------------------------------------------------------- |\n| `+`    | 加 - 两个对象相加                               | `a + b` 输出结果 30                                       |\n| `-`    | 减 - 得到负数或是一个数减去另一个数             | `a - b` 输出结果 -10                                      |\n| `*`    | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | `a * b` 输出结果 200                                      |\n| `/`    | 除 - `x` 除以 `y`                               | `b / a` 输出结果 2                                        |\n| `%`    | 取模 - 返回除法的余数                           | `b % a` 输出结果 0                                        |\n| `**`   | 幂 - 返回 `x` 的 `y` 次幂                       | `a**b ` 为 10 的 20 次方， 输出结果 100000000000000000000 |\n| `//`   | 取整除 - 返回商的整数部分（**向下取整**）       | `>>> 9//2 4 >>> -9//2 -5`                                 |\n\n### 4.2 比较运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述                                                         | 实例                                      |\n| :----- | :----------------------------------------------------------- | :---------------------------------------- |\n| `==`   | 等于 - 比较对象是否相等                                      | `(a == b)` 返回  `False`                  |\n| `!=`   | 不等于 - 比较两个对象是否不相等                              | `(a != b) ` 返回  `True`                  |\n| `<>`   | 不等于 - 比较两个对象是否不相等。**python3 已废弃。**        | `(a <> b) `返回 `True`。这个运算符类似 != |\n| `>`    | 大于 - 返回 `x` 是否大于 `y`                                 | `(a > b)`  返回 `False`                   |\n| `<`    | 小于 - 返回 `x` 是否小于 `y`。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 `True` 和 `False` 等价 | `(a < b) `返回 `True`                     |\n| `>=`   | 大于等于 - 返回 `x` 是否大于等于 `y`                         | `(a >= b)` 返回 `False`                   |\n| `<=`   | 小于等于 - 返回 `x` 是否小于等于 `y`                         | `(a <= b)` 返回 `True`                    |\n\n### 4.3 赋值运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 描述             | 实例                                        |\n| :----- | :--------------- | :------------------------------------------ |\n| `=`    | 简单的赋值运算符 | `c = a + b` 将 `a + b` 的运算结果赋值为 `c` |\n| `+=`   | 加法赋值运算符   | `c += a` 等效于 `c = c + a`                 |\n| `-=`   | 减法赋值运算符   | `c -= a` 等效于 `c = c - a`                 |\n| `*=`   | 乘法赋值运算符   | `c *= a` 等效于 `c = c * a`                 |\n| `/=`   | 除法赋值运算符   | `c /= a` 等效于` c = c / a`                 |\n| `%=`   | 取模赋值运算符   | `c %= a` 等效于 `c = c % a`                 |\n| `**=`  | 幂赋值运算符     | `c \\**= a` 等效于 `c = c ** a`              |\n| `//=`  | 取整除赋值运算符 | `c //= a` 等效于 `c = c // a`               |\n\n### 4.4 逻辑运算符\n\n假设变量 `a = 10, b = 20`：\n\n| 运算符 | 逻辑表达式 | 描述                                                         | 实例                        |\n| :----- | :--------- | :----------------------------------------------------------- | :-------------------------- |\n| `and`  | `x and y`  | 布尔\"与\" - 如果 `x` 为 `False`，`x and y` 返回 `False`，否则它返回 `y` 的计算值 | `(a and b)` 返回 20         |\n| `or`   | `x or y`   | 布尔\"或\" - 如果 `x` 是非 0，它返回 `x` 的值，否则它返回 `y` 的计算值 | `(a or b)` 返回 10          |\n| `not`  | `not x`    | 布尔\"非\" - 如果 `x` 为 `True`，返回 `False` 。如果 `x` 为 `False`，它返回 `True` | `not(a and b)` 返回 `False` |\n\n\n\n### 4.5 位运算符\n\n假设变量 `a = 60, b = 13`：\n\n按位运算符石将数字转换为二进制之后来进行计算的，则 `a = 00111100、b = 00001101`\n\n| 运算符 | 描述                                                         | 实例                                                         |\n| :----- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `&`    | 按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100               |\n| `|`    | 按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1 | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101               |\n| `^`    | 按位异或运算符：当两对应的二进位相异时，结果为 1             | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001               |\n| `~`    | 按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。**~x** 类似于 **-x-1** | `(~a ) `输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。 |\n| `<<`   | 左移动运算符：运算数的各二进位全部左移若干位，由 **<<** 右边的数字指定了移动的位数，高位丢弃，低位补 0。 | `a << 2` 输出结果 240 ，二进制解释： 1111 0000               |\n| `>>`   | 右移动运算符：把 \">>” 左边的运算数的各二进位全部右移若干位，**>>** 右边的数字指定了移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111                |\n\n### 4.6 成员运算符\n\n| 运算符   | 描述                                                        | 实例                                                      |\n| :------- | :---------------------------------------------------------- | :-------------------------------------------------------- |\n| `in`     | 如果在指定的序列中找到值返回 `True`，否则返回 `False`。     | `x` 在 `y` 序列中 , 如果 `x` 在 `y` 序列中返回 `True`     |\n| `not in` | 如果在指定的序列中没有找到值返回 `True`，否则返回 `False`。 | `x` 不在 `y` 序列中 , 如果 `x` 不在 `y` 序列中返回 `True` |\n\n### 4.7 身份运算符\n\n身份运算符用于比较两个对象的存储单元：\n\n| 运算符   | 描述                                          | 实例                                                         |\n| :------- | :-------------------------------------------- | :----------------------------------------------------------- |\n| `is`     | `is` 是判断两个标识符是不是引用自一个对象     | `x is y`, 类似 `id(x) == id(y)` , 如果引用的是同一个对象则返回 `True`，否则返回 `False` |\n| `is not` | `is not` 是判断两个标识符是不是引用自不同对象 | `x is not y` ， 类似 `id(a) != id(b)`。如果引用的不是同一个对象则返回结果 `True`，否则返回 `False` |\n\n## 5. 总结\n\n好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。\n\n如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 **加群**，我人工拉你入群哦。\n\n![](https://img-blog.csdnimg.cn/img_convert/ff1f319675f421e98cbf2c93da3bf08b.png)\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Python-入门指北】No-3-Python-语言元素","published":1,"updated":"2021-05-04T01:52:52.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1l004obw3463noentl","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。</p>\n<p>今天主要内容就介绍 Python 中的如下知识点：</p>\n<ol>\n<li><strong>变量</strong></li>\n<li><strong>数据类型</strong></li>\n<li><strong>运算符</strong></li>\n</ol>\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><h3 id=\"2-1-什么是变量\"><a href=\"#2-1-什么是变量\" class=\"headerlink\" title=\"2.1 什么是变量\"></a>2.1 什么是变量</h3><p>所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 <strong>能够存储计算结果或者能够表示值的抽象概念</strong>。</p>\n<p>我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。</p>\n<h3 id=\"2-2-变量命名规则\"><a href=\"#2-2-变量命名规则\" class=\"headerlink\" title=\"2.2 变量命名规则\"></a>2.2 变量命名规则</h3><p>Python 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。</p>\n<p>Python 中，标识符 <strong>必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写</strong>。总结起来就是如下几点：</p>\n<ol>\n<li><p><strong>变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头</strong>，比如我们可以把一个变量命名为 <code>cunyu_1943、_cunyu1943</code> 但是不能命名为 <code>1943_cunyu</code>；</p>\n</li>\n<li><p><strong>变量名中间不能包含空格，但是可以用下划线来进行分割</strong>，比如可以命名为 <code>student_name</code>，但不能命名为 <code>student name</code>；</p>\n</li>\n<li><strong>变量名应该尽量简短切具有描述性</strong>，比如我们变量名为 <code>name</code>，那别人一看就知道这是表示名字的，但如果我们命名为 <code>n</code>，那可能就得花更多的时间来搞清楚它到底是啥意思；</li>\n<li><strong>不要把 Python 中的关键字和内置函数名用做变量名</strong>，Python 中常见的关键字和内置函数如下表；</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>and</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>as</code></td>\n<td style=\"text-align:left\">创建别名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>assert</code></td>\n<td style=\"text-align:left\">用于调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>break</code></td>\n<td style=\"text-align:left\">跳出循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>class</code></td>\n<td style=\"text-align:left\">定义类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>continue</code></td>\n<td style=\"text-align:left\">继续循环的下一个迭代</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>def</code></td>\n<td style=\"text-align:left\">定义函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>del</code></td>\n<td style=\"text-align:left\">删除对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>elif</code></td>\n<td style=\"text-align:left\">在条件语句中使用，等同于 else if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>else</code></td>\n<td style=\"text-align:left\">用于条件语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>except</code></td>\n<td style=\"text-align:left\">处理异常，发生异常时如何执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>False</code></td>\n<td style=\"text-align:left\">布尔值，比较运算的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>finally</code></td>\n<td style=\"text-align:left\">处理异常，无论是否存在异常，都将执行一段代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>for</code></td>\n<td style=\"text-align:left\">创建 for 循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>from</code></td>\n<td style=\"text-align:left\">导入模块的特定部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>global</code></td>\n<td style=\"text-align:left\">声明全局变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>if</code></td>\n<td style=\"text-align:left\">写一个条件语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>import</code></td>\n<td style=\"text-align:left\">导入模块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>in</code></td>\n<td style=\"text-align:left\">检查列表、元组等集合中是否存在某个值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is</code></td>\n<td style=\"text-align:left\">测试两个变量是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lambda</code></td>\n<td style=\"text-align:left\">创建匿名函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>None</code></td>\n<td style=\"text-align:left\">表示 <code>null</code> 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>nonlocal</code></td>\n<td style=\"text-align:left\">声明非局部变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pass</code></td>\n<td style=\"text-align:left\"><code>null</code> 语句，一条什么都不做的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>raise</code></td>\n<td style=\"text-align:left\">产生异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>return</code></td>\n<td style=\"text-align:left\">退出函数并返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>True</code></td>\n<td style=\"text-align:left\">布尔值，比较运算的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>try</code></td>\n<td style=\"text-align:left\">编写 <code>try...except</code> 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>while</code></td>\n<td style=\"text-align:left\">创建 <code>while</code> 循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>with</code></td>\n<td style=\"text-align:left\">用于简化异常处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>yield</code></td>\n<td style=\"text-align:left\">结束函数，返回生成器</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">内置函数</th>\n<th style=\"text-align:left\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>abs()</code></td>\n<td style=\"text-align:left\"><code>delattr()</code></td>\n<td style=\"text-align:left\"><code>hash()</code></td>\n<td style=\"text-align:left\"><code>memoryview()</code></td>\n<td><code>set()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>all()</code></td>\n<td style=\"text-align:left\"><code>dict()</code></td>\n<td style=\"text-align:left\"><code>help()</code></td>\n<td style=\"text-align:left\"><code>min()</code></td>\n<td><code>setattr()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>any()</code></td>\n<td style=\"text-align:left\"><code>dir()</code></td>\n<td style=\"text-align:left\"><code>hex()</code></td>\n<td style=\"text-align:left\"><code>next()</code></td>\n<td><code>slice()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ascii()</code></td>\n<td style=\"text-align:left\"><code>divmod()</code></td>\n<td style=\"text-align:left\"><code>id()</code></td>\n<td style=\"text-align:left\"><code>object()</code></td>\n<td><code>sorted()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bin()</code></td>\n<td style=\"text-align:left\"><code>enumerate()</code></td>\n<td style=\"text-align:left\"><code>input()</code></td>\n<td style=\"text-align:left\"><code>oct()</code></td>\n<td><code>staticmethod()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bool()</code></td>\n<td style=\"text-align:left\"><code>eval()</code></td>\n<td style=\"text-align:left\"><code>int()</code></td>\n<td style=\"text-align:left\"><code>open()</code></td>\n<td><code>str()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>breakpoint()</code></td>\n<td style=\"text-align:left\"><code>exec()</code></td>\n<td style=\"text-align:left\"><code>isinstance()</code></td>\n<td style=\"text-align:left\"><code>ord()</code></td>\n<td><code>sum()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bytearray()</code></td>\n<td style=\"text-align:left\"><code>filter()</code></td>\n<td style=\"text-align:left\"><code>issubclass()</code></td>\n<td style=\"text-align:left\"><code>pow()</code></td>\n<td><code>super()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bytes()</code></td>\n<td style=\"text-align:left\"><code>float()</code></td>\n<td style=\"text-align:left\"><code>iter()</code></td>\n<td style=\"text-align:left\"><code>print()</code></td>\n<td><code>tuple()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>callable()</code></td>\n<td style=\"text-align:left\"><code>format()</code></td>\n<td style=\"text-align:left\"><code>len()</code></td>\n<td style=\"text-align:left\"><code>property()</code></td>\n<td><code>type()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>chr()</code></td>\n<td style=\"text-align:left\"><code>frozenset()</code></td>\n<td style=\"text-align:left\"><code>list()</code></td>\n<td style=\"text-align:left\"><code>range()</code></td>\n<td><code>vars()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>classmethod()</code></td>\n<td style=\"text-align:left\"><code>getattr()</code></td>\n<td style=\"text-align:left\"><code>locals()</code></td>\n<td style=\"text-align:left\"><code>repr()</code></td>\n<td><code>zip()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>compile()</code></td>\n<td style=\"text-align:left\"><code>globals()</code></td>\n<td style=\"text-align:left\"><code>map()</code></td>\n<td style=\"text-align:left\"><code>reversed()</code></td>\n<td><code>__import__()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>complex()</code></td>\n<td style=\"text-align:left\"><code>hasattr()</code></td>\n<td style=\"text-align:left\"><code>max()</code></td>\n<td style=\"text-align:left\"><code>round()</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>\u0014\u0014</p>\n<h2 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h2><p>要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：</p>\n<h3 id=\"3-1-数字\"><a href=\"#3-1-数字\" class=\"headerlink\" title=\"3.1 数字\"></a>3.1 数字</h3><p>数字数据类型用于存储数值，他们是 <strong>不可改变</strong> 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。</p>\n<p>当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 <code>del</code> 语句；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 创建对象</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># 删除引用</span>\n<span class=\"token keyword\">del</span> number<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Python 支持如下不同的数字类型；</p>\n<ul>\n<li><code>int</code>：整型（⚠️ Python 2.x 中有 <code>int</code> 和 <code>long</code> 之分，但是 Python 3.x 中只有 <code>int</code>），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；</li>\n<li><code>float</code>：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（<code>456.78</code>），还支持科学记数法（<code>4.5678e2</code>）；</li>\n<li><code>complex</code>：复数类型，由实部和虚部组成，形如 <code>a + bj</code> 的形式，和数学中的复数表示一样，只是把 <code>i</code> 变成了 <code>j</code>；</li>\n</ul>\n<h3 id=\"3-2-字符串\"><a href=\"#3-2-字符串\" class=\"headerlink\" title=\"3.2 字符串\"></a>3.2 字符串</h3><p>以单引号或双引号括起来的任意文本，例如 <code>“cunyu1943”</code> 和 <code>‘cunyu1943’</code>，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\n公众号：村雨遥\nblog：cunyu1943.site\n'''</span>\n\n“”“\n公众号：村雨遥\nblog：cunyu1943<span class=\"token punctuation\">.</span>site\n”“”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Python 中字符串有 2 种取值顺序：</p>\n<ol>\n<li><strong>从左向右索引</strong>，索引值从 <code>0</code> 开始，最大索引值是字符串长度减 <code>1</code>；</li>\n<li><strong>从右向左索引</strong>，索引值从 <code>-1</code> 开始，最大索引值是字符串开头；</li>\n</ol>\n<p>如果我们要从字符串汇总获取一小段子字符串，则可以使用 <code>[头下标:尾下标]</code> 来进行截取。注意 <strong>左闭右开</strong> 原则，即通过  <code>[头下标:尾下标]</code> 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；</p>\n<p>加入我们的字符串 <code>s = 'abcdef’</code>，则通过不同方式索引的结果如下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a81823c17d94496142e6c265ad94b4e1.png\" alt=\"图片源自菜鸟教程\"></p>\n<h3 id=\"3-3-列表\"><a href=\"#3-3-列表\" class=\"headerlink\" title=\"3.3 列表\"></a>3.3 列表</h3><p><code>list</code> 是一种 <strong>有序</strong> 的集合，能随时向其中添加和删除元素，用 <code>[]</code> 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 <code>[头下标:尾下标]</code> 的方式来进行截取相应子列表，索引方式同字符串，示例如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b74bdbedc3906fdef50d0362d258c52b.png\" alt=\"源自菜鸟教程\"></p>\n<p><code>list</code> 中常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(list)</code></td>\n<td>列表元素个数</td>\n</tr>\n<tr>\n<td><code>list(seq)</code></td>\n<td>将元组转换为列表</td>\n</tr>\n<tr>\n<td><code>list.pop()</code></td>\n<td>删除 <code>list</code> 末尾的元素</td>\n</tr>\n<tr>\n<td><code>list.pop(index)</code></td>\n<td>删除 <code>list</code> 中索引位置为 <code>index</code> 的元素</td>\n</tr>\n<tr>\n<td><code>list.append(obj)</code></td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td><code>list.count(obj)</code></td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td><code>list.insert(index, obj)</code></td>\n<td>将对象插入列表指定位置</td>\n</tr>\n<tr>\n<td><code>list.remove(obj)</code></td>\n<td>移除列表中某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td><code>list.reverse()</code></td>\n<td>反转列表中元素</td>\n</tr>\n<tr>\n<td><code>list.index(obj)</code></td>\n<td>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td><code>list.sort(cmp=None, key=None, reverse=False)</code></td>\n<td>对原列表进行排序，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 <code>+</code> 来连接不同的数组；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">+</span> list2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而如果我们想要某个列表重复，则可以使用 <code>*</code> ；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-4-元组\"><a href=\"#3-4-元组\" class=\"headerlink\" title=\"3.4 元组\"></a>3.4 元组</h3><p><code>tuple</code> 也是一种类似于 <code>list</code> 的 <strong>有序</strong> 列表，用 <code>()</code> 标识，内部元素用逗号隔开。它俩的一个最大区别在于： <code>tuple</code> 一旦初始化之后，就不能再修改了，相当于只读列表，所以 <code>tuple</code> 不像 <code>list</code> 一样有类似 <code>append()、insert()</code> 等方法；</p>\n<p>常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(tuple)</code></td>\n<td>计算元组元素个数</td>\n</tr>\n<tr>\n<td><code>tuple(seq)</code></td>\n<td>将列表转换为元组</td>\n</tr>\n<tr>\n<td><code>max(tuple)</code></td>\n<td>返回元组中元素最大值</td>\n</tr>\n<tr>\n<td><code>min(tuple)</code></td>\n<td>返回元组中元素最小值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们要定义一个空的元组，可以用如下的方式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">tuple</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-5-字典\"><a href=\"#3-5-字典\" class=\"headerlink\" title=\"3.5 字典\"></a>3.5 字典</h3><p>列表是有序的对象集合，而字典则是无序的对象集合，字典用 <code>{}</code>标识，元素间用逗号分隔，每个元素由 <code>key:value</code> 的形式组成。</p>\n<p>两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。</p>\n<p>字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：</p>\n<ol>\n<li>不允许同一个键出现两次；</li>\n<li>键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；</li>\n</ol>\n<p>字典也有许多方法供我们使用，主要方法总结如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(dict)</code></td>\n<td>计算字典元素个数，即键的总数</td>\n</tr>\n<tr>\n<td><code>str(dict)</code></td>\n<td>输出字典可打印的字符串表示</td>\n</tr>\n<tr>\n<td><code>type(variable)</code></td>\n<td>返回输入的变量类型，如果变量是字典就返回字典类型</td>\n</tr>\n<tr>\n<td><code>dict.clear()</code></td>\n<td>删除字典内所有元素</td>\n</tr>\n<tr>\n<td><code>dict.copy()</code></td>\n<td>返回一个字典的浅复制</td>\n</tr>\n<tr>\n<td><code>dict.haskey(key)</code></td>\n<td>如果键在字典 <code>dict</code> 里返回 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n<tr>\n<td><code>dict.get(key)</code></td>\n<td>返回指定键的值</td>\n</tr>\n<tr>\n<td><code>dict.keys()</code></td>\n<td>以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td><code>dict.values()</code></td>\n<td>以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td><code>dict.items()</code></td>\n<td>以列表返回可遍历的(键, 值) 元组数组</td>\n</tr>\n<tr>\n<td><code>pop(key)</code></td>\n<td>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值</td>\n</tr>\n<tr>\n<td><code>popitem()</code></td>\n<td>返回并删除字典中的最后一对键和值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-6-布尔值\"><a href=\"#3-6-布尔值\" class=\"headerlink\" title=\"3.6 布尔值\"></a>3.6 布尔值</h3><p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。在Python中，可以直接用<code>True</code>、<code>False</code> 直接表示布尔值，也可以通过布尔运算计算出来。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">False</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4. 运算符\"></a>4. 运算符</h2><p>Python 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，取模和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘<code>AND</code>‘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`^</td>\n<td style=\"text-align:left\">`</td>\n<td>位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&gt; == !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-1-算术运算符\"><a href=\"#4-1-算术运算符\" class=\"headerlink\" title=\"4.1 算术运算符\"></a>4.1 算术运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加 - 两个对象相加</td>\n<td style=\"text-align:left\"><code>a + b</code> 输出结果 30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减 - 得到负数或是一个数减去另一个数</td>\n<td style=\"text-align:left\"><code>a - b</code> 输出结果 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td style=\"text-align:left\"><code>a * b</code> 输出结果 200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除 - <code>x</code> 除以 <code>y</code></td>\n<td style=\"text-align:left\"><code>b / a</code> 输出结果 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%</code></td>\n<td style=\"text-align:left\">取模 - 返回除法的余数</td>\n<td style=\"text-align:left\"><code>b % a</code> 输出结果 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>**</code></td>\n<td style=\"text-align:left\">幂 - 返回 <code>x</code> 的 <code>y</code> 次幂</td>\n<td style=\"text-align:left\"><code>a**b</code> 为 10 的 20 次方， 输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>//</code></td>\n<td style=\"text-align:left\">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>\n<td style=\"text-align:left\"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-2-比较运算符\"><a href=\"#4-2-比较运算符\" class=\"headerlink\" title=\"4.2 比较运算符\"></a>4.2 比较运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">等于 - 比较对象是否相等</td>\n<td style=\"text-align:left\"><code>(a == b)</code> 返回  <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:left\"><code>(a != b)</code> 返回  <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&gt;</code></td>\n<td style=\"text-align:left\">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td>\n<td style=\"text-align:left\"><code>(a &lt;&gt; b)</code>返回 <code>True</code>。这个运算符类似 !=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">大于 - 返回 <code>x</code> 是否大于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &gt; b)</code>  返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">小于 - 返回 <code>x</code> 是否小于 <code>y</code>。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 <code>True</code> 和 <code>False</code> 等价</td>\n<td style=\"text-align:left\"><code>(a &lt; b)</code>返回 <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">大于等于 - 返回 <code>x</code> 是否大于等于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &gt;= b)</code> 返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">小于等于 - 返回 <code>x</code> 是否小于等于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &lt;= b)</code> 返回 <code>True</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-3-赋值运算符\"><a href=\"#4-3-赋值运算符\" class=\"headerlink\" title=\"4.3 赋值运算符\"></a>4.3 赋值运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\"><code>c = a + b</code> 将 <code>a + b</code> 的运算结果赋值为 <code>c</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\"><code>c += a</code> 等效于 <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\"><code>c -= a</code> 等效于 <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\"><code>c *= a</code> 等效于 <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\"><code>c /= a</code> 等效于<code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%=</code></td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\"><code>c %= a</code> 等效于 <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>**=</code></td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\"><code>c \\**= a</code> 等效于 <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>//=</code></td>\n<td style=\"text-align:left\">取整除赋值运算符</td>\n<td style=\"text-align:left\"><code>c //= a</code> 等效于 <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-4-逻辑运算符\"><a href=\"#4-4-逻辑运算符\" class=\"headerlink\" title=\"4.4 逻辑运算符\"></a>4.4 逻辑运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>and</code></td>\n<td style=\"text-align:left\"><code>x and y</code></td>\n<td style=\"text-align:left\">布尔”与” - 如果 <code>x</code> 为 <code>False</code>，<code>x and y</code> 返回 <code>False</code>，否则它返回 <code>y</code> 的计算值</td>\n<td style=\"text-align:left\"><code>(a and b)</code> 返回 20</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>or</code></td>\n<td style=\"text-align:left\"><code>x or y</code></td>\n<td style=\"text-align:left\">布尔”或” - 如果 <code>x</code> 是非 0，它返回 <code>x</code> 的值，否则它返回 <code>y</code> 的计算值</td>\n<td style=\"text-align:left\"><code>(a or b)</code> 返回 10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not</code></td>\n<td style=\"text-align:left\"><code>not x</code></td>\n<td style=\"text-align:left\">布尔”非” - 如果 <code>x</code> 为 <code>True</code>，返回 <code>False</code> 。如果 <code>x</code> 为 <code>False</code>，它返回 <code>True</code></td>\n<td style=\"text-align:left\"><code>not(a and b)</code> 返回 <code>False</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-5-位运算符\"><a href=\"#4-5-位运算符\" class=\"headerlink\" title=\"4.5 位运算符\"></a>4.5 位运算符</h3><p>假设变量 <code>a = 60, b = 13</code>：</p>\n<p>按位运算符石将数字转换为二进制之后来进行计算的，则 <code>a = 00111100、b = 00001101</code></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1</td>\n<td>`(a</td>\n<td>b)` 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为 1</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。<strong>~x</strong> 类似于 <strong>-x-1</strong></td>\n<td style=\"text-align:left\"><code>(~a )</code>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补 0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-6-成员运算符\"><a href=\"#4-6-成员运算符\" class=\"headerlink\" title=\"4.6 成员运算符\"></a>4.6 成员运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>in</code></td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>\n<td style=\"text-align:left\"><code>x</code> 在 <code>y</code> 序列中 , 如果 <code>x</code> 在 <code>y</code> 序列中返回 <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not in</code></td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>\n<td style=\"text-align:left\"><code>x</code> 不在 <code>y</code> 序列中 , 如果 <code>x</code> 不在 <code>y</code> 序列中返回 <code>True</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-7-身份运算符\"><a href=\"#4-7-身份运算符\" class=\"headerlink\" title=\"4.7 身份运算符\"></a>4.7 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>is</code></td>\n<td style=\"text-align:left\"><code>is</code> 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\"><code>x is y</code>, 类似 <code>id(x) == id(y)</code> , 如果引用的是同一个对象则返回 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is not</code></td>\n<td style=\"text-align:left\"><code>is not</code> 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\"><code>x is not y</code> ， 类似 <code>id(a) != id(b)</code>。如果引用的不是同一个对象则返回结果 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。</p>\n<p>如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 <strong>加群</strong>，我人工拉你入群哦。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ff1f319675f421e98cbf2c93da3bf08b.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。</p>\n<p>今天主要内容就介绍 Python 中的如下知识点：</p>\n<ol>\n<li><strong>变量</strong></li>\n<li><strong>数据类型</strong></li>\n<li><strong>运算符</strong></li>\n</ol>\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><h3 id=\"2-1-什么是变量\"><a href=\"#2-1-什么是变量\" class=\"headerlink\" title=\"2.1 什么是变量\"></a>2.1 什么是变量</h3><p>所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 <strong>能够存储计算结果或者能够表示值的抽象概念</strong>。</p>\n<p>我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。</p>\n<h3 id=\"2-2-变量命名规则\"><a href=\"#2-2-变量命名规则\" class=\"headerlink\" title=\"2.2 变量命名规则\"></a>2.2 变量命名规则</h3><p>Python 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。</p>\n<p>Python 中，标识符 <strong>必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写</strong>。总结起来就是如下几点：</p>\n<ol>\n<li><p><strong>变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头</strong>，比如我们可以把一个变量命名为 <code>cunyu_1943、_cunyu1943</code> 但是不能命名为 <code>1943_cunyu</code>；</p>\n</li>\n<li><p><strong>变量名中间不能包含空格，但是可以用下划线来进行分割</strong>，比如可以命名为 <code>student_name</code>，但不能命名为 <code>student name</code>；</p>\n</li>\n<li><strong>变量名应该尽量简短切具有描述性</strong>，比如我们变量名为 <code>name</code>，那别人一看就知道这是表示名字的，但如果我们命名为 <code>n</code>，那可能就得花更多的时间来搞清楚它到底是啥意思；</li>\n<li><strong>不要把 Python 中的关键字和内置函数名用做变量名</strong>，Python 中常见的关键字和内置函数如下表；</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>and</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>as</code></td>\n<td style=\"text-align:left\">创建别名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>assert</code></td>\n<td style=\"text-align:left\">用于调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>break</code></td>\n<td style=\"text-align:left\">跳出循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>class</code></td>\n<td style=\"text-align:left\">定义类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>continue</code></td>\n<td style=\"text-align:left\">继续循环的下一个迭代</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>def</code></td>\n<td style=\"text-align:left\">定义函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>del</code></td>\n<td style=\"text-align:left\">删除对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>elif</code></td>\n<td style=\"text-align:left\">在条件语句中使用，等同于 else if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>else</code></td>\n<td style=\"text-align:left\">用于条件语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>except</code></td>\n<td style=\"text-align:left\">处理异常，发生异常时如何执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>False</code></td>\n<td style=\"text-align:left\">布尔值，比较运算的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>finally</code></td>\n<td style=\"text-align:left\">处理异常，无论是否存在异常，都将执行一段代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>for</code></td>\n<td style=\"text-align:left\">创建 for 循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>from</code></td>\n<td style=\"text-align:left\">导入模块的特定部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>global</code></td>\n<td style=\"text-align:left\">声明全局变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>if</code></td>\n<td style=\"text-align:left\">写一个条件语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>import</code></td>\n<td style=\"text-align:left\">导入模块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>in</code></td>\n<td style=\"text-align:left\">检查列表、元组等集合中是否存在某个值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is</code></td>\n<td style=\"text-align:left\">测试两个变量是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lambda</code></td>\n<td style=\"text-align:left\">创建匿名函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>None</code></td>\n<td style=\"text-align:left\">表示 <code>null</code> 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>nonlocal</code></td>\n<td style=\"text-align:left\">声明非局部变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pass</code></td>\n<td style=\"text-align:left\"><code>null</code> 语句，一条什么都不做的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>raise</code></td>\n<td style=\"text-align:left\">产生异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>return</code></td>\n<td style=\"text-align:left\">退出函数并返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>True</code></td>\n<td style=\"text-align:left\">布尔值，比较运算的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>try</code></td>\n<td style=\"text-align:left\">编写 <code>try...except</code> 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>while</code></td>\n<td style=\"text-align:left\">创建 <code>while</code> 循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>with</code></td>\n<td style=\"text-align:left\">用于简化异常处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>yield</code></td>\n<td style=\"text-align:left\">结束函数，返回生成器</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">内置函数</th>\n<th style=\"text-align:left\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>abs()</code></td>\n<td style=\"text-align:left\"><code>delattr()</code></td>\n<td style=\"text-align:left\"><code>hash()</code></td>\n<td style=\"text-align:left\"><code>memoryview()</code></td>\n<td><code>set()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>all()</code></td>\n<td style=\"text-align:left\"><code>dict()</code></td>\n<td style=\"text-align:left\"><code>help()</code></td>\n<td style=\"text-align:left\"><code>min()</code></td>\n<td><code>setattr()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>any()</code></td>\n<td style=\"text-align:left\"><code>dir()</code></td>\n<td style=\"text-align:left\"><code>hex()</code></td>\n<td style=\"text-align:left\"><code>next()</code></td>\n<td><code>slice()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ascii()</code></td>\n<td style=\"text-align:left\"><code>divmod()</code></td>\n<td style=\"text-align:left\"><code>id()</code></td>\n<td style=\"text-align:left\"><code>object()</code></td>\n<td><code>sorted()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bin()</code></td>\n<td style=\"text-align:left\"><code>enumerate()</code></td>\n<td style=\"text-align:left\"><code>input()</code></td>\n<td style=\"text-align:left\"><code>oct()</code></td>\n<td><code>staticmethod()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bool()</code></td>\n<td style=\"text-align:left\"><code>eval()</code></td>\n<td style=\"text-align:left\"><code>int()</code></td>\n<td style=\"text-align:left\"><code>open()</code></td>\n<td><code>str()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>breakpoint()</code></td>\n<td style=\"text-align:left\"><code>exec()</code></td>\n<td style=\"text-align:left\"><code>isinstance()</code></td>\n<td style=\"text-align:left\"><code>ord()</code></td>\n<td><code>sum()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bytearray()</code></td>\n<td style=\"text-align:left\"><code>filter()</code></td>\n<td style=\"text-align:left\"><code>issubclass()</code></td>\n<td style=\"text-align:left\"><code>pow()</code></td>\n<td><code>super()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>bytes()</code></td>\n<td style=\"text-align:left\"><code>float()</code></td>\n<td style=\"text-align:left\"><code>iter()</code></td>\n<td style=\"text-align:left\"><code>print()</code></td>\n<td><code>tuple()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>callable()</code></td>\n<td style=\"text-align:left\"><code>format()</code></td>\n<td style=\"text-align:left\"><code>len()</code></td>\n<td style=\"text-align:left\"><code>property()</code></td>\n<td><code>type()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>chr()</code></td>\n<td style=\"text-align:left\"><code>frozenset()</code></td>\n<td style=\"text-align:left\"><code>list()</code></td>\n<td style=\"text-align:left\"><code>range()</code></td>\n<td><code>vars()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>classmethod()</code></td>\n<td style=\"text-align:left\"><code>getattr()</code></td>\n<td style=\"text-align:left\"><code>locals()</code></td>\n<td style=\"text-align:left\"><code>repr()</code></td>\n<td><code>zip()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>compile()</code></td>\n<td style=\"text-align:left\"><code>globals()</code></td>\n<td style=\"text-align:left\"><code>map()</code></td>\n<td style=\"text-align:left\"><code>reversed()</code></td>\n<td><code>__import__()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>complex()</code></td>\n<td style=\"text-align:left\"><code>hasattr()</code></td>\n<td style=\"text-align:left\"><code>max()</code></td>\n<td style=\"text-align:left\"><code>round()</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>\u0014\u0014</p>\n<h2 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h2><p>要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：</p>\n<h3 id=\"3-1-数字\"><a href=\"#3-1-数字\" class=\"headerlink\" title=\"3.1 数字\"></a>3.1 数字</h3><p>数字数据类型用于存储数值，他们是 <strong>不可改变</strong> 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。</p>\n<p>当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 <code>del</code> 语句；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 创建对象</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># 删除引用</span>\n<span class=\"token keyword\">del</span> number<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Python 支持如下不同的数字类型；</p>\n<ul>\n<li><code>int</code>：整型（⚠️ Python 2.x 中有 <code>int</code> 和 <code>long</code> 之分，但是 Python 3.x 中只有 <code>int</code>），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；</li>\n<li><code>float</code>：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（<code>456.78</code>），还支持科学记数法（<code>4.5678e2</code>）；</li>\n<li><code>complex</code>：复数类型，由实部和虚部组成，形如 <code>a + bj</code> 的形式，和数学中的复数表示一样，只是把 <code>i</code> 变成了 <code>j</code>；</li>\n</ul>\n<h3 id=\"3-2-字符串\"><a href=\"#3-2-字符串\" class=\"headerlink\" title=\"3.2 字符串\"></a>3.2 字符串</h3><p>以单引号或双引号括起来的任意文本，例如 <code>“cunyu1943”</code> 和 <code>‘cunyu1943’</code>，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\n公众号：村雨遥\nblog：cunyu1943.site\n'''</span>\n\n“”“\n公众号：村雨遥\nblog：cunyu1943<span class=\"token punctuation\">.</span>site\n”“”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Python 中字符串有 2 种取值顺序：</p>\n<ol>\n<li><strong>从左向右索引</strong>，索引值从 <code>0</code> 开始，最大索引值是字符串长度减 <code>1</code>；</li>\n<li><strong>从右向左索引</strong>，索引值从 <code>-1</code> 开始，最大索引值是字符串开头；</li>\n</ol>\n<p>如果我们要从字符串汇总获取一小段子字符串，则可以使用 <code>[头下标:尾下标]</code> 来进行截取。注意 <strong>左闭右开</strong> 原则，即通过  <code>[头下标:尾下标]</code> 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；</p>\n<p>加入我们的字符串 <code>s = &#39;abcdef’</code>，则通过不同方式索引的结果如下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a81823c17d94496142e6c265ad94b4e1.png\" alt=\"图片源自菜鸟教程\"></p>\n<h3 id=\"3-3-列表\"><a href=\"#3-3-列表\" class=\"headerlink\" title=\"3.3 列表\"></a>3.3 列表</h3><p><code>list</code> 是一种 <strong>有序</strong> 的集合，能随时向其中添加和删除元素，用 <code>[]</code> 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 <code>[头下标:尾下标]</code> 的方式来进行截取相应子列表，索引方式同字符串，示例如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b74bdbedc3906fdef50d0362d258c52b.png\" alt=\"源自菜鸟教程\"></p>\n<p><code>list</code> 中常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(list)</code></td>\n<td>列表元素个数</td>\n</tr>\n<tr>\n<td><code>list(seq)</code></td>\n<td>将元组转换为列表</td>\n</tr>\n<tr>\n<td><code>list.pop()</code></td>\n<td>删除 <code>list</code> 末尾的元素</td>\n</tr>\n<tr>\n<td><code>list.pop(index)</code></td>\n<td>删除 <code>list</code> 中索引位置为 <code>index</code> 的元素</td>\n</tr>\n<tr>\n<td><code>list.append(obj)</code></td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td><code>list.count(obj)</code></td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td><code>list.insert(index, obj)</code></td>\n<td>将对象插入列表指定位置</td>\n</tr>\n<tr>\n<td><code>list.remove(obj)</code></td>\n<td>移除列表中某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td><code>list.reverse()</code></td>\n<td>反转列表中元素</td>\n</tr>\n<tr>\n<td><code>list.index(obj)</code></td>\n<td>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td><code>list.sort(cmp=None, key=None, reverse=False)</code></td>\n<td>对原列表进行排序，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 <code>+</code> 来连接不同的数组；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">+</span> list2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而如果我们想要某个列表重复，则可以使用 <code>*</code> ；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-4-元组\"><a href=\"#3-4-元组\" class=\"headerlink\" title=\"3.4 元组\"></a>3.4 元组</h3><p><code>tuple</code> 也是一种类似于 <code>list</code> 的 <strong>有序</strong> 列表，用 <code>()</code> 标识，内部元素用逗号隔开。它俩的一个最大区别在于： <code>tuple</code> 一旦初始化之后，就不能再修改了，相当于只读列表，所以 <code>tuple</code> 不像 <code>list</code> 一样有类似 <code>append()、insert()</code> 等方法；</p>\n<p>常用方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(tuple)</code></td>\n<td>计算元组元素个数</td>\n</tr>\n<tr>\n<td><code>tuple(seq)</code></td>\n<td>将列表转换为元组</td>\n</tr>\n<tr>\n<td><code>max(tuple)</code></td>\n<td>返回元组中元素最大值</td>\n</tr>\n<tr>\n<td><code>min(tuple)</code></td>\n<td>返回元组中元素最小值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们要定义一个空的元组，可以用如下的方式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">tuple</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-5-字典\"><a href=\"#3-5-字典\" class=\"headerlink\" title=\"3.5 字典\"></a>3.5 字典</h3><p>列表是有序的对象集合，而字典则是无序的对象集合，字典用 <code>&#123;&#125;</code>标识，元素间用逗号分隔，每个元素由 <code>key:value</code> 的形式组成。</p>\n<p>两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。</p>\n<p>字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：</p>\n<ol>\n<li>不允许同一个键出现两次；</li>\n<li>键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；</li>\n</ol>\n<p>字典也有许多方法供我们使用，主要方法总结如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>len(dict)</code></td>\n<td>计算字典元素个数，即键的总数</td>\n</tr>\n<tr>\n<td><code>str(dict)</code></td>\n<td>输出字典可打印的字符串表示</td>\n</tr>\n<tr>\n<td><code>type(variable)</code></td>\n<td>返回输入的变量类型，如果变量是字典就返回字典类型</td>\n</tr>\n<tr>\n<td><code>dict.clear()</code></td>\n<td>删除字典内所有元素</td>\n</tr>\n<tr>\n<td><code>dict.copy()</code></td>\n<td>返回一个字典的浅复制</td>\n</tr>\n<tr>\n<td><code>dict.haskey(key)</code></td>\n<td>如果键在字典 <code>dict</code> 里返回 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n<tr>\n<td><code>dict.get(key)</code></td>\n<td>返回指定键的值</td>\n</tr>\n<tr>\n<td><code>dict.keys()</code></td>\n<td>以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td><code>dict.values()</code></td>\n<td>以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td><code>dict.items()</code></td>\n<td>以列表返回可遍历的(键, 值) 元组数组</td>\n</tr>\n<tr>\n<td><code>pop(key)</code></td>\n<td>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值</td>\n</tr>\n<tr>\n<td><code>popitem()</code></td>\n<td>返回并删除字典中的最后一对键和值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-6-布尔值\"><a href=\"#3-6-布尔值\" class=\"headerlink\" title=\"3.6 布尔值\"></a>3.6 布尔值</h3><p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。在Python中，可以直接用<code>True</code>、<code>False</code> 直接表示布尔值，也可以通过布尔运算计算出来。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token boolean\">False</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4. 运算符\"></a>4. 运算符</h2><p>Python 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，取模和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘<code>AND</code>‘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`^</td>\n<td style=\"text-align:left\">`</td>\n<td>位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&gt; == !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-1-算术运算符\"><a href=\"#4-1-算术运算符\" class=\"headerlink\" title=\"4.1 算术运算符\"></a>4.1 算术运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加 - 两个对象相加</td>\n<td style=\"text-align:left\"><code>a + b</code> 输出结果 30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减 - 得到负数或是一个数减去另一个数</td>\n<td style=\"text-align:left\"><code>a - b</code> 输出结果 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td style=\"text-align:left\"><code>a * b</code> 输出结果 200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除 - <code>x</code> 除以 <code>y</code></td>\n<td style=\"text-align:left\"><code>b / a</code> 输出结果 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%</code></td>\n<td style=\"text-align:left\">取模 - 返回除法的余数</td>\n<td style=\"text-align:left\"><code>b % a</code> 输出结果 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>**</code></td>\n<td style=\"text-align:left\">幂 - 返回 <code>x</code> 的 <code>y</code> 次幂</td>\n<td style=\"text-align:left\"><code>a**b</code> 为 10 的 20 次方， 输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>//</code></td>\n<td style=\"text-align:left\">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>\n<td style=\"text-align:left\"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-2-比较运算符\"><a href=\"#4-2-比较运算符\" class=\"headerlink\" title=\"4.2 比较运算符\"></a>4.2 比较运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">等于 - 比较对象是否相等</td>\n<td style=\"text-align:left\"><code>(a == b)</code> 返回  <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:left\"><code>(a != b)</code> 返回  <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&gt;</code></td>\n<td style=\"text-align:left\">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td>\n<td style=\"text-align:left\"><code>(a &lt;&gt; b)</code>返回 <code>True</code>。这个运算符类似 !=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">大于 - 返回 <code>x</code> 是否大于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &gt; b)</code>  返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">小于 - 返回 <code>x</code> 是否小于 <code>y</code>。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 <code>True</code> 和 <code>False</code> 等价</td>\n<td style=\"text-align:left\"><code>(a &lt; b)</code>返回 <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">大于等于 - 返回 <code>x</code> 是否大于等于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &gt;= b)</code> 返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">小于等于 - 返回 <code>x</code> 是否小于等于 <code>y</code></td>\n<td style=\"text-align:left\"><code>(a &lt;= b)</code> 返回 <code>True</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-3-赋值运算符\"><a href=\"#4-3-赋值运算符\" class=\"headerlink\" title=\"4.3 赋值运算符\"></a>4.3 赋值运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\"><code>c = a + b</code> 将 <code>a + b</code> 的运算结果赋值为 <code>c</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\"><code>c += a</code> 等效于 <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\"><code>c -= a</code> 等效于 <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\"><code>c *= a</code> 等效于 <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\"><code>c /= a</code> 等效于<code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%=</code></td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\"><code>c %= a</code> 等效于 <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>**=</code></td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\"><code>c \\**= a</code> 等效于 <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>//=</code></td>\n<td style=\"text-align:left\">取整除赋值运算符</td>\n<td style=\"text-align:left\"><code>c //= a</code> 等效于 <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-4-逻辑运算符\"><a href=\"#4-4-逻辑运算符\" class=\"headerlink\" title=\"4.4 逻辑运算符\"></a>4.4 逻辑运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>and</code></td>\n<td style=\"text-align:left\"><code>x and y</code></td>\n<td style=\"text-align:left\">布尔”与” - 如果 <code>x</code> 为 <code>False</code>，<code>x and y</code> 返回 <code>False</code>，否则它返回 <code>y</code> 的计算值</td>\n<td style=\"text-align:left\"><code>(a and b)</code> 返回 20</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>or</code></td>\n<td style=\"text-align:left\"><code>x or y</code></td>\n<td style=\"text-align:left\">布尔”或” - 如果 <code>x</code> 是非 0，它返回 <code>x</code> 的值，否则它返回 <code>y</code> 的计算值</td>\n<td style=\"text-align:left\"><code>(a or b)</code> 返回 10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not</code></td>\n<td style=\"text-align:left\"><code>not x</code></td>\n<td style=\"text-align:left\">布尔”非” - 如果 <code>x</code> 为 <code>True</code>，返回 <code>False</code> 。如果 <code>x</code> 为 <code>False</code>，它返回 <code>True</code></td>\n<td style=\"text-align:left\"><code>not(a and b)</code> 返回 <code>False</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-5-位运算符\"><a href=\"#4-5-位运算符\" class=\"headerlink\" title=\"4.5 位运算符\"></a>4.5 位运算符</h3><p>假设变量 <code>a = 60, b = 13</code>：</p>\n<p>按位运算符石将数字转换为二进制之后来进行计算的，则 <code>a = 00111100、b = 00001101</code></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1</td>\n<td>`(a</td>\n<td>b)` 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为 1</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。<strong>~x</strong> 类似于 <strong>-x-1</strong></td>\n<td style=\"text-align:left\"><code>(~a )</code>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补 0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-6-成员运算符\"><a href=\"#4-6-成员运算符\" class=\"headerlink\" title=\"4.6 成员运算符\"></a>4.6 成员运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>in</code></td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>\n<td style=\"text-align:left\"><code>x</code> 在 <code>y</code> 序列中 , 如果 <code>x</code> 在 <code>y</code> 序列中返回 <code>True</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>not in</code></td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>\n<td style=\"text-align:left\"><code>x</code> 不在 <code>y</code> 序列中 , 如果 <code>x</code> 不在 <code>y</code> 序列中返回 <code>True</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-7-身份运算符\"><a href=\"#4-7-身份运算符\" class=\"headerlink\" title=\"4.7 身份运算符\"></a>4.7 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>is</code></td>\n<td style=\"text-align:left\"><code>is</code> 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\"><code>x is y</code>, 类似 <code>id(x) == id(y)</code> , 如果引用的是同一个对象则返回 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is not</code></td>\n<td style=\"text-align:left\"><code>is not</code> 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\"><code>x is not y</code> ， 类似 <code>id(a) != id(b)</code>。如果引用的不是同一个对象则返回结果 <code>True</code>，否则返回 <code>False</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。</p>\n<p>如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 <strong>加群</strong>，我人工拉你入群哦。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ff1f319675f421e98cbf2c93da3bf08b.png\" alt=\"\"></p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Java】第 3 弹：纯干货，计算机网络面试知识点总结","abbrlink":"7eca1e70","date":"2021-05-02T14:51:19.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 计算机网络基础\n\n### 1.1 主机间的通信方式\n\n1.  **客户端-服务器（C/S）**\n\n客户端是服务的请求放，服务器是服务的提供方。\n\n2.  **对等（P2P）**\n\n不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。\n\n### 1.2 电路 & 分组交换\n\n1.  **分组交换**\n\n每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不影响，因此在同一条传输线路上允许同时传输多个分组，即分组交换不会占用传输线路。\n\n2.  **电路交换**\n\n电路交换用于电话通讯系统，两个用户之间建立通信前需要有一条专用的物理链路，而且在通信过程中始终占用该链路。由于通信过程中不可能一直在使用传输线路，因此电路交换对线路利用率很低，通常不到 10%.\n\n### 1.3 时延\n\n1.  **排队时延**\n\n分组在路由器的输入和输出队列中排队等待所需时间，取决于当前网络的通信量；\n\n2.  **处理时延**\n\n主机或路由器接收到分组时进行处理所需时间，一般这些处理包括分析首部、从分组中提取数据、进行差错校验或查找适当路由等；\n\n3.  **传输时延**\n\n主机或路由器传输数据帧所需时间：\n\n$$delay = length(bit)/v(bit/s)$$\n\n其中 `length` 表示数据帧的长度，`v` 表示传输速率；\n\n4.  **传播时延**\n\n电磁波在信道中传输所需时间，电磁波传播速度无限接近于光速：\n\n$$delay = length(m)/v(m/s)$$\n\n其中 `length` 表示信道的长度，`v` 表示电磁波在信道中的传播速度；\n\n### 1.4 体系结构\n\n![](https://img-blog.csdnimg.cn/img_convert/a468e849bf48b218f0a3266e1d9cd5b9.png)\n\n| 体系结构 | 协议                                                         |\n| -------- | ------------------------------------------------------------ |\n| 物理层   | RJ45、CLOCK、IEEE802.3（中继器、集线器）                     |\n| 数据链路 | PPP、FR、HDLC、VLAN、MAC（网桥、交换机）                     |\n| 网络层   | IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）          |\n| 传输层   | TCP（HTTP/S、FTP、POP3、SMTP、TENET、SSH）、UDP（BOOTP、NTP、DHCP）、SPX |\n| 会话层   | NFS、SQL、NETBIOS、RPC                                       |\n| 表示层   | JPEG、MPEG、ASII                                             |\n| 应用层   | FTP、DNS、Telenet、SMTP、HTTP、WWW、NFS                      |\n\n1.  **OSI 七层体系结构**\n\n为把在一个网络结构下开发的系统与在另一个网络结构下开发的系统互联起来，以实现更高一级的应用，使异种机之间的通信成为可能，便于网络结构标准化，国际标准化组织（ISO）于1984年形成了开放系统互连参考模型OSI/RM（Open Systems Interconnection Reference Model，简称OSI）的正式文件。\n\n- **物理层（Physical，PH）：** 传递信息需要利用一些物理传输媒体，如双绞线、同轴电缆、光纤等。物理层的任务就是为上层提供一个物理的连接，以及该物理连接表现出来的机械、电气、功能和过程特性，实现透明的比特流传输。在这一层，数据还没有组织，仅作为原始的比特流提交给上层——数据链路层。\n\n-   **数据链路层（Data-link，D）**：数据链路层负责在2个相邻的结点之间的链路上实现无差错的数据帧传输。每一帧包括一定的数据和必要的控制信息，在接收方接收到数据出错时要通知发送方重发，直到这一帧无差错地到达接收结点，数据链路层就是把一条有可能出错的实际链路变成让网络层看起来像不会出错的数据链路。实现的主要功能有：帧的同步、差错控制、流量控制、寻址、帧内定界、透明比特组合传输等。\n-   **网络层（Network，N）**：网络中通信的2个计算机之间可能要经过许多结点和链路，还可能经过几个通信子网。网络层数据传输的单位是分组（Packet）。网络层的主要任务是为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机，交付给目的主机的传输层。\n\n- **传输层（Transport，T）**：传输层的主要任务是通过通信子网的特性，最佳地利用网络资源，并以可靠与经济的方式为2个端系统的会话层之间建立一条连接通道，以透明地传输报文。传输层向上一层提供一个可靠的端到端的服务，使会话层不知道传输层以下的数据通信的细节。传输层只存在端系统中，传输层以上各层就不再考虑信息传输的问题了。\n\n-   **会话层（Session，S）**：在会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制。如服务器验证用户登录便是由会话层完成的。\n-   **表示层（Presentation，P）**：这一层主要解决用户信息的语法表示问题。它将要交换的数据从适合某一用户的抽象语法，转换为适合OSI内部表示使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工作都由表示层负责。\n\n-   **应用层（Application，A）**：这是OSI参考模型的最高层。应用层确定进程之间通信的性质以满足用户的需求，以及提供网络与用户软件之间的接口服务。\n\n2.  **五层协议**\n\n我们日常网络中使用的体系结构，总共可以分为 5 层，分别是：\n\n-   **应用层** ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。\n-   **传输层** ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。\n-   **网络层** ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。\n-   **数据链路层** ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n-   **物理层** ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n3.  **TCP/IP** \n\n不严格遵循 OSI 分层概念，只有四层，相当于将五层协议中的数据链路层和物理层合并为网络结构层。\n\n## 2. 五层协议详解\n\n### 2.1 物理层\n\n物理层上传送的数据单位是比特，其作用是实现相邻计算机节点间比特流的透明传送，尽可能屏蔽调具体传输介质和屋里设备的差异。根据信息在传输线上的传输方向，可以分为如下三种通信方式：\n\n-   单工通信：单向传输\n-   半双工通信：双向交替传输\n-   全双工通信：双向同时传输\n\n### 2.2 链路层\n\n两台主机之间的数据传输，总是在一段一段的链路上进行传送的，此时就需要使用专门的链路层协议。在两个相邻节点间传输数据时，数据链路层将网络层交下来的 IP 数据包组装成帧，在两个相邻节点间的链路上传送帧，每帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。\n\n### 2.3 网络层\n\n互联网的核心，向上提供数据报服务，通过 IP 协议将异构的物理网络连接起来。其任务是选择合适的网间路由和交换节点，从而确保计算机通信的数据及时传送，配套使用的有如下三个协议：\n\n-   **地址解析协议 ARP**\n-   **网际控制报文协议 ICMP**\n-   **网际组管理协议 IGMP**\n\n### 2.4 传输层\n\n传输层提供了进程间的逻辑通信，负责向两台主机进程之间的通信提供通用的 **数据传输服务**，向高层用户屏蔽网络层的核心细节，这一层中主要涉及 UDP 和 TCP 两个协议。\n\n### 2.5 应用层\n\n应用层的任务是通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间的通信和交互的规则。\n\n对于不同的网络应用需要不同的应用层协议，常见的有 DNS、HTTP、SMTP 协议等；\n\n## 3. HTTP\n\n### 3.1 HTTP 基础\n\n1.  **URI（统一资源标识符）**\n\n>   URI = URL + URN\n\nURL：统一资源 **定位** 符，标示一个具体的资源位置\n\nURN：统一资源名称\n\n2.  **请求报文**\n\n![](https://img-blog.csdnimg.cn/img_convert/6b09a3bc1b49c1cb772d6eedce2f66a9.png)\n\n主要由以下三部分构成：\n\n-   **请求行**：包括请求方法、URL、协议/版本\n-   **请求头**：`Request Header`\n-   **请求正文**\n\n3.  **响应报文**\n\n![](https://img-blog.csdnimg.cn/img_convert/b5a6afaaab6917b98040b871ca963f00.png)\n\n主要由以下三部分构成：\n\n-   **状态行**\n-   **响应头**\n-   **响应正文**\n\n### 3.2 HTTP 方法\n\n| 方法      | 说明                                                         |\n| --------- | ------------------------------------------------------------ |\n| `GET`     | 请求指定页面信息，并返回实体主体                             |\n| `POST`    | 传输实体主体，向指定资源提交数据进行处理请求，数据被包含在请求体中，可能会导致新资源的建立和/或已有资源的修改 |\n| `PUT`     | 从客户端向服务器传送的数据取代指定文档的内容，上传文件 ，不带验证机制，存在安全性问题 |\n| `DELETE`  | 请求服务器删除指定页面，一般是删除文件                       |\n| `HEAD`    | 获取报文首部，类似于 `GET`，但不返回报文实体主体部分，主要用于确认 URL 的有效性以及资源更新时间等 |\n| `PATCH`   | 对资源进行部分修改                                           |\n| `OPTIONS` | 查询支持的方法，查询指定的 URL 能支持的方法，返回 `Allow: GET,POST,HEAD,OPTIONS` 等内容 |\n| `CONNECT` | 要求在于代理服务器通信时建立隧道，使用 SSL 和 TLS 协议将通信内容加密后经网络隧道传输 |\n| `TRACE`   | 追踪路径，服务器将通信路径返回给客户端                       |\n\n### 3.3 HTTP 状态码\n\n服务器返回的响应报文中的第一行是状态行，包含状态码以及原因短语，用于告知客户端请求的结果，主要分为如下类型，常见的状态码如下：\n\n-   **1xx - 信息型**：服务器收到请求，需要请求者继续操作；\n-   **2xx - 成功型**：请求成功收到，理解并处理；\n-   **3xx - 重定向**：需要进一步操作以完成请求；\n-   **4xx - 客户端错误**：请求包含语法错误或无法完成请求；\n-   **5xx - 服务器错误**：服务器在处理请求的过程中发生了错误；\n\n| 状态码 | 状态                    | 说明                                                         |\n| ------ | ----------------------- | ------------------------------------------------------------ |\n| 100    | `Continue`              | 到目前为止很正常，客户端能继续发送请求或忽略该响应           |\n| 200    | `OK`                    | 表示请求成功                                                 |\n| 204    | `No Content`            | 请求已经成功处理，但返回的响应报文不含实体的主体部分，一般只需要从客户端向服务器发送信息，而无需返回数据时使用 |\n| 206    | `Partial Content`       | 表示客户端进行范围请求，响应报文包含由 `Content-Range` 指定范围的实体内容 |\n| 301    | `Moved Permanently`     | 永久性重定向                                                 |\n| 302    | `Found`                 | 临时性重定向                                                 |\n| 303    | `See Other`             | 和 302 功能相同，但 303 明确要求客户端应该采用 `GET` 方法获取资源 |\n| 304    | `Not Modified`          | 若请求报文首部包含一些条件，如 `If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since`，若不满足条件，则服务器返回 304 |\n| 307    | `Temporary Redirect`    | 临时重定向，类似于 302，但 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法 |\n| 400    | `Bad Request`           | 请求报文中存在语法错误                                       |\n| 401    | `Unauthorized`          | 该状态码表示发送的请求需要有认证信息                         |\n| 403    | `Forbidden`             | 请求被拒绝                                                   |\n| 404    | `Not Found`             | 请求的页面不存在                                             |\n| 500    | `Internal Server Error` | 服务器正在执行请求时发生错误                                 |\n| 503    | `Service Unavailable`   | 服务器暂时处于超负载或正进行停机维护，现在无法处理请求       |\n\n### 3.4 HTTP 首部\n\n有 4 中类型的首部字段：\n\n-   **通用首部字段**\n-   **请求首部字段**\n-   **响应首部字段**\n-   **实体首部字段**\n\n### 3.5 GET vs POST\n\n1.  **作用不同**\n\n`GET` 用于获取资源，一般是查询，而 `POST` 用于传输实体主体，一般是提交；\n\n2.  **参数不同**\n\n`GET` 和 `POST` 的请求都能使用额外参数，但 `GET` 的参数以查询字符串出现在 URL 中，不会对服务器中的内容产生作用，但 `POST` 的参数存储在实体主体中。但是 `POST` 的安全性也不能说很高，我们仍然可以用抓包工具来进行查看。另一方面，URL 只支持 ASCII，因此 GET 的参数中若有中文等字符时需要先进行编码，但是 POST 的参数支持标准字符集；\n\n3.  **安全性**\n\nGET 方法是安全的，因为它不会改变服务器的状态。但是 POST  非安全，因为 POST 的目的是传送实体主体内容，内容可能是用户上传的表单数据，一旦上传成功，服务器就可能把该数据存入数据库，此时状态也就发生了改变。\n\n安全的方法：`GET、HEAD、OPTIONS`；\n\n不安全的方法：`POST、PUT、DELETE`；\n\n4.  **幂等性**\n\n幂等的 HTTP 方法，同样的请求被执行一次和被连续执行多次的效果是一样的，服务器的状态也一样，即幂等的方法不具有副作用，因此所有安全的方法也都是幂等的。\n\n一般来说，`GET、HEAD、PUT、DELETE` 等方法都是幂等的，但 `POST` 不是。\n\n5.  **可缓存**\n\n若要对响应进行缓存，则应该满足一下条件：\n\n-   请求报文的 HTTP 方法本身是可缓存的，包括 `GET、HEAD`，但是 `PUT、DELETE` 不可缓存，`POST` 在大多数情况下是不可缓存的；\n-   响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、411、501；\n-   响应报文的 `Cache-Control` 首部字段未指定则不进行缓存； \n\n## 4. HTTP 和 HTTPS\n\n### 4.1 什么是 HTTP/S 协议？\n\n1.  **HTTP**\n\nHTTP（Hyper Text Transfer Protocol），**超文本传输协议**，它是从 Web 服务器传输超文本标记语言（HTML）到本地浏览器的传送协议。\n\nHTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；\n\n2.  **HTTPS**\n\nHTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），以安全为目标的 HTTP 通道，通俗来讲就是 HTTP 的安全版，加入了 SSL/TLS 层，通过 SSL 证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。HTTPS 的安全基础是 SSL，其主要作用有如下两种：\n\n-   建立一个信息安全通道，来保证数据传输的安全；\n-   确认网站真实性；\n\n###  4.2 HTTP/S 特点\n\n1.  **HTTP**\n\n-   HTTP 支持 C/S 模式，是一种 **请求/响应模式** 的协议；\n-   **简单快速**：客户向服务器请求服务时，只需要传送请求方法和路径，常用方法有 `GET、POST、HEAD`；\n-   **灵活**：HTTP 允许传输任意类型的数据对象，传输数据的类型由 `Content - Type` 来标记；\n-   **无连接**：限制每次连接只处理一个请求，服务器处理完请求并受到客户的应答后，会断开连接，但是不利于客户端和服务器保持会话连接；\n-   **无状态**：值协议对于事务处理没有回忆，后续处理如果需要前面的信息，则必须重传；\n\n### 4.2 HTTP/S 原理\n\n1.  **HTTP**\n\nHTTP 是 **基于 TCP/IP 通信协议来传递数据的协议**，传输的数据类型有 HTML 文件、图片文件、查询结果等。此外，HTTP 协议一般用于 `B/S` 架构，浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务器即 Web 服务器发送所有请求；\n\n![](https://img-blog.csdnimg.cn/img_convert/6ed01a44de3bc699551d355ec5cb400e.png)\n\n2.  **HTTPS**\n\n![](https://img-blog.csdnimg.cn/img_convert/e83d235b519cb62cfe22fec281fbe7d5.png)\n\n如上图，使用 HTTPS 传输数据的流程如下：\n\n1.  首先客户端通过 URL 访问服务器建立 SSL 连接；\n2.  服务器收到客户端请求后，将网站支持的证书信息（其中包含公钥）传送一份给客户端；\n3.  客户端的服务器开始协商 SSL 连接的安全等级，即信息加密的等级；\n4.  客户端的浏览器根据双方同意的安全等级，建立会话秘钥，然后利用网站的公钥将会话秘钥加密，并传送给网站；\n5.  服务器利用自己的秘钥解密出会话秘钥；\n6.  服务器利用会话秘钥加密与客户端之间的通信；\n\n### 4.3 HTTP 和 HTTPS 的区别\n\nHTTP 协议传输的数据都是未经加密的，即明文的，因此使用 HTTP 协议传输隐私信息不安全。为了保证隐私数据能够加密传输，于是使用 SSL 协议用于对 HTTP 协议传输的数据进行加密，即 HTTPS；\n\nHTTPS 协议是 HTTP + SSL 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全，两者的区别主要有：\n\n1.  HTTPS 需要到 CA 申请证书，一般免费证书较少，因此需要一定费用；\n2.  HTTP 是超文本传输信息，信息是明文传输；HTTPS 是具有安全性的 SSL 加密传输协议；\n3.  HTTP 和 HTTPS 使用的是完全不同的连接方式，HTTP 默认使用 `80` 端口，而 HTTPS 默认使用 `443` 端口；\n4.  HTTP 的连接简单，是无状态的；而 HTTPS 是 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全；\n\n| 区别     | HTTP                                                       | HTTPS                                                        |\n| -------- | ---------------------------------------------------------- | ------------------------------------------------------------ |\n| 协议     | 基于 TCP，明文传输，**客户端与服务器端均无法验证对方身份** | HTTP + SSL，运行于 TCP 之上，**添加了加密和认证机制的 HTTP** |\n| 端口     | 80                                                         | 443                                                          |\n| 资源消耗 | 较少                                                       | 由于加解密操作，将消耗更多的 CPU 和内存资源                  |\n| 开销     | 无需证书                                                   | 需要证书，一般是向认证机构购买                               |\n| 加密机制 | 无                                                         | 共享秘钥加密和公开秘钥加密并用的混合加密机制                 |\n| 安全性   | 弱                                                         | 强                                                           |\n\n\n\n## 5. TCP VS UDP\n\n### 5.1 TCP 和 UDP 的特点\n\n1.  **TCP**\n\nTCP（传输控制协议，Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供 **全双工通信，面向字节流** （将应用层传下来的报文当做字节流，将字节流组织为大小不等的数据块），每条 TCP 连接只能是 **点对点（一对一）**，总结起来有如下特点：\n\n-   **面向连接**\n-   **仅支持单播**\n-   **面向字节流**\n-   **可靠性**\n-   **提供拥塞控制以及全双工通信**\n\n2.  **UDP**\n\nUDP（用户数据表协议，User Datagram Protocol）是面向无连接的，尽最大可能交付，无拥塞控制，**面向报文**（对应用层中传下来的报文不合并也不拆分，只添加 UDP 首部），支持 **一对一、一对多、多对一和对多点的交互通信**，总结起来有如下特点：\n\n-   **面向无连接**\n-   **有单播、多播、广播的功能**\n-   **面向报文**\n-   **不可靠性**\n-   **头部开销小，传输数据时高效**\n\n### 5.2 TCP VS UDP\n\n|              | TCP                              | UDP                                  |\n| ------------ | -------------------------------- | ------------------------------------ |\n| 是否连接     | 面向连接                         | 无连接                               |\n| 是否可靠     | 可靠传输，使用流量控制和拥塞控制 | 不可靠传输，不使用流量控制和拥塞控制 |\n| 连接对象个数 | 只能一对一                       | 支持一对一、一对多、多对一和多对多   |\n| 传输方式     | 面向字节流                       | 面向报文                             |\n| 首部开销     | 首部最小 20 字节，最大 60 字节   | 首部开销小，仅 8 字节                |\n| 场景         | 传输可靠，比如文件传输等         | 实时应用，比如视频会议、直播等       |\n\n\n\n### 5.3 三次握手以及四次挥手\n\n1.  **三次握手**\n\n-   **第一次握手**：客户端向服务端发送连接请求报文段，报文段中含有自身的数据通讯初始序号。请求发送后，客户端进入 `SYN-SENT` 状态；\n-   **第二次握手**：服务端接收到来自客户端的连接请求报文，如果同意就会发送一个响应，响应中也会包含自身的数据通讯初始序号，发送完成后进入 `SYN-RECEIVED` 状态；\n-   **第三次握手**：客户端收到来自服务端同意连接的响应后，再次向服务端发送一个确认报文。客户端发送完该报文后进行 `ESTABLISHED` 状态，服务端收到该应答后也进入 `ESTABLISHED` 状态，此时连接就建立成功了。\n\n![源自 ThinkWon 博客](https://img-blog.csdnimg.cn/img_convert/1d5ac6b297456fd31f8e4b9c518f0e53.png)\n\n2.  **四次挥手**\n\n-   **第一次挥手：** 一旦客户端 A 认为数据发送完成，则向服务端 B 发送请求释放请求；\n-   **第二次挥手：** 服务端 B 收到连接释放请求后，将告知应用层释放 TCP 连接，接着发送 ACK 包并进入 `CLOST_WAIT` 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据。但是 TCP 是双向通信的，所以 B 此时仍可以向 A 发送数据；\n-   **第三次挥手：** 若 B 此时还有未发送完的数据，就会继续发送直到完毕，然后向 A 发送连接释放请求，接着 B 进入 `LAST-ACK` 状态；\n-   **第四次挥手：** A 收到释放请求后，向 B 发送确认应答，此时 A 进入 `TIME-WAIT` 状态并持续一段时间（一般是 2MSL），若在该时间段内没有来自 B 的重发请求，就进入 `CLOSED` 状态。当 B 收到确认应答后，也进入 `CLOSE` 状态。\n\n![图源自 Thinkwon 博客](https://img-blog.csdnimg.cn/img_convert/b606acad67d96dfe7b05087d9f9c5da6.png)\n\n## 6. Session vs Cookie\n\n### 6.1 Session 和 Cookie 的定义\n\n#### 6.1.1 什么是 cookie\n\n`cookie` 是由 Web 服务器保存在用户浏览器上的小文件（`key-value` 格式），包含用户相关信息。客户端向服务器发起请求，若服务器需要记录该用户状态，则使用 `response` 向客户端浏览器颁发一个 `cookie`。客户端浏览器将 `cookie` 保存起来，当浏览器再请求该网站时，浏览器将请求的网址连同该 `cookie` 一起提交给服务器，服务器检查该 `cookie`，以此来确认用户身份。\n\n#### 6.1.2 什么是 session\n\n`session` 依赖于 `cookie` 实现，`session` 是服务端对象。`session` 浏览器和服务器会话过程中，服务器分配的一块存储空间。服务器默认为浏览器在 `cookie` 中设置 `sessionid`，浏览器在向服务器请求过程中传输 `cookie` 包含 `sessionid`，服务器将根据 `sessionid` 获取出会话中存储的信息，然后确认会话的身份信息。\n\n### 6.2 Session 和 Cookie 的区别\n\n1.  **存储空间**：单个 `cookie` 所保存的数据不能超过 4k，许多浏览器都会限制一个站点最多能保存的 `cookie` 数（一般是 20），但是 `session` 没有该限制；\n2.  **占用服务器资源**：`session` 一定时间保存在服务器上，当访问增多时，占用服务器性能，考虑到服务器性能方面，应当使用 `cookie`；\n3.  **存储位置与安全性**：`cookie` 数据放在客户端，安全性较差，`session` 数据放在服务器上，安全性相对较高；\n\n\n\n## 7. 常见面试题\n\n### 7.1 TCP 连接为什么不是 2 次，而是 3 次？\n\n因为考虑到连接时丢包的问题，如果是 2 次，那么第二次握手时如果服务器响应给客户端的确认报文段丢失，但此时服务器端已经准备好接收数据，而客户端一直没收到服务端的确认报文，客户端就不清楚服务端是否已经准备好了。这样一来，客户端既不会向服务端发送数据，也会忽略服务端所发送过来的数据。\n\n### 7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？\n\n同样是出于考虑丢包问题，若第四次挥手的报文丢失，服务器未确认 Ack 报文就会重发第三次挥手的报文，若报文一来一去的最常时间就是 2 MSL，所以需要等这么长时间来确认服务端确实已经收到。\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","source":"_posts/【剑指-Java】第-3-弹：纯干货，计算机网络面试知识点总结.md","raw":"---\ntitle: 【剑指 Java】第 3 弹：纯干货，计算机网络面试知识点总结\ntags:\n  - 面试\n  - 计算机网络\ncategories:\n  - 剑指 Java\nabbrlink: 7eca1e70\ndate: 2021-05-02 22:51:19\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 计算机网络基础\n\n### 1.1 主机间的通信方式\n\n1.  **客户端-服务器（C/S）**\n\n客户端是服务的请求放，服务器是服务的提供方。\n\n2.  **对等（P2P）**\n\n不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。\n\n### 1.2 电路 & 分组交换\n\n1.  **分组交换**\n\n每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不影响，因此在同一条传输线路上允许同时传输多个分组，即分组交换不会占用传输线路。\n\n2.  **电路交换**\n\n电路交换用于电话通讯系统，两个用户之间建立通信前需要有一条专用的物理链路，而且在通信过程中始终占用该链路。由于通信过程中不可能一直在使用传输线路，因此电路交换对线路利用率很低，通常不到 10%.\n\n### 1.3 时延\n\n1.  **排队时延**\n\n分组在路由器的输入和输出队列中排队等待所需时间，取决于当前网络的通信量；\n\n2.  **处理时延**\n\n主机或路由器接收到分组时进行处理所需时间，一般这些处理包括分析首部、从分组中提取数据、进行差错校验或查找适当路由等；\n\n3.  **传输时延**\n\n主机或路由器传输数据帧所需时间：\n\n$$delay = length(bit)/v(bit/s)$$\n\n其中 `length` 表示数据帧的长度，`v` 表示传输速率；\n\n4.  **传播时延**\n\n电磁波在信道中传输所需时间，电磁波传播速度无限接近于光速：\n\n$$delay = length(m)/v(m/s)$$\n\n其中 `length` 表示信道的长度，`v` 表示电磁波在信道中的传播速度；\n\n### 1.4 体系结构\n\n![](https://img-blog.csdnimg.cn/img_convert/a468e849bf48b218f0a3266e1d9cd5b9.png)\n\n| 体系结构 | 协议                                                         |\n| -------- | ------------------------------------------------------------ |\n| 物理层   | RJ45、CLOCK、IEEE802.3（中继器、集线器）                     |\n| 数据链路 | PPP、FR、HDLC、VLAN、MAC（网桥、交换机）                     |\n| 网络层   | IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）          |\n| 传输层   | TCP（HTTP/S、FTP、POP3、SMTP、TENET、SSH）、UDP（BOOTP、NTP、DHCP）、SPX |\n| 会话层   | NFS、SQL、NETBIOS、RPC                                       |\n| 表示层   | JPEG、MPEG、ASII                                             |\n| 应用层   | FTP、DNS、Telenet、SMTP、HTTP、WWW、NFS                      |\n\n1.  **OSI 七层体系结构**\n\n为把在一个网络结构下开发的系统与在另一个网络结构下开发的系统互联起来，以实现更高一级的应用，使异种机之间的通信成为可能，便于网络结构标准化，国际标准化组织（ISO）于1984年形成了开放系统互连参考模型OSI/RM（Open Systems Interconnection Reference Model，简称OSI）的正式文件。\n\n- **物理层（Physical，PH）：** 传递信息需要利用一些物理传输媒体，如双绞线、同轴电缆、光纤等。物理层的任务就是为上层提供一个物理的连接，以及该物理连接表现出来的机械、电气、功能和过程特性，实现透明的比特流传输。在这一层，数据还没有组织，仅作为原始的比特流提交给上层——数据链路层。\n\n-   **数据链路层（Data-link，D）**：数据链路层负责在2个相邻的结点之间的链路上实现无差错的数据帧传输。每一帧包括一定的数据和必要的控制信息，在接收方接收到数据出错时要通知发送方重发，直到这一帧无差错地到达接收结点，数据链路层就是把一条有可能出错的实际链路变成让网络层看起来像不会出错的数据链路。实现的主要功能有：帧的同步、差错控制、流量控制、寻址、帧内定界、透明比特组合传输等。\n-   **网络层（Network，N）**：网络中通信的2个计算机之间可能要经过许多结点和链路，还可能经过几个通信子网。网络层数据传输的单位是分组（Packet）。网络层的主要任务是为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机，交付给目的主机的传输层。\n\n- **传输层（Transport，T）**：传输层的主要任务是通过通信子网的特性，最佳地利用网络资源，并以可靠与经济的方式为2个端系统的会话层之间建立一条连接通道，以透明地传输报文。传输层向上一层提供一个可靠的端到端的服务，使会话层不知道传输层以下的数据通信的细节。传输层只存在端系统中，传输层以上各层就不再考虑信息传输的问题了。\n\n-   **会话层（Session，S）**：在会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制。如服务器验证用户登录便是由会话层完成的。\n-   **表示层（Presentation，P）**：这一层主要解决用户信息的语法表示问题。它将要交换的数据从适合某一用户的抽象语法，转换为适合OSI内部表示使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工作都由表示层负责。\n\n-   **应用层（Application，A）**：这是OSI参考模型的最高层。应用层确定进程之间通信的性质以满足用户的需求，以及提供网络与用户软件之间的接口服务。\n\n2.  **五层协议**\n\n我们日常网络中使用的体系结构，总共可以分为 5 层，分别是：\n\n-   **应用层** ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。\n-   **传输层** ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。\n-   **网络层** ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。\n-   **数据链路层** ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n-   **物理层** ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n3.  **TCP/IP** \n\n不严格遵循 OSI 分层概念，只有四层，相当于将五层协议中的数据链路层和物理层合并为网络结构层。\n\n## 2. 五层协议详解\n\n### 2.1 物理层\n\n物理层上传送的数据单位是比特，其作用是实现相邻计算机节点间比特流的透明传送，尽可能屏蔽调具体传输介质和屋里设备的差异。根据信息在传输线上的传输方向，可以分为如下三种通信方式：\n\n-   单工通信：单向传输\n-   半双工通信：双向交替传输\n-   全双工通信：双向同时传输\n\n### 2.2 链路层\n\n两台主机之间的数据传输，总是在一段一段的链路上进行传送的，此时就需要使用专门的链路层协议。在两个相邻节点间传输数据时，数据链路层将网络层交下来的 IP 数据包组装成帧，在两个相邻节点间的链路上传送帧，每帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。\n\n### 2.3 网络层\n\n互联网的核心，向上提供数据报服务，通过 IP 协议将异构的物理网络连接起来。其任务是选择合适的网间路由和交换节点，从而确保计算机通信的数据及时传送，配套使用的有如下三个协议：\n\n-   **地址解析协议 ARP**\n-   **网际控制报文协议 ICMP**\n-   **网际组管理协议 IGMP**\n\n### 2.4 传输层\n\n传输层提供了进程间的逻辑通信，负责向两台主机进程之间的通信提供通用的 **数据传输服务**，向高层用户屏蔽网络层的核心细节，这一层中主要涉及 UDP 和 TCP 两个协议。\n\n### 2.5 应用层\n\n应用层的任务是通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间的通信和交互的规则。\n\n对于不同的网络应用需要不同的应用层协议，常见的有 DNS、HTTP、SMTP 协议等；\n\n## 3. HTTP\n\n### 3.1 HTTP 基础\n\n1.  **URI（统一资源标识符）**\n\n>   URI = URL + URN\n\nURL：统一资源 **定位** 符，标示一个具体的资源位置\n\nURN：统一资源名称\n\n2.  **请求报文**\n\n![](https://img-blog.csdnimg.cn/img_convert/6b09a3bc1b49c1cb772d6eedce2f66a9.png)\n\n主要由以下三部分构成：\n\n-   **请求行**：包括请求方法、URL、协议/版本\n-   **请求头**：`Request Header`\n-   **请求正文**\n\n3.  **响应报文**\n\n![](https://img-blog.csdnimg.cn/img_convert/b5a6afaaab6917b98040b871ca963f00.png)\n\n主要由以下三部分构成：\n\n-   **状态行**\n-   **响应头**\n-   **响应正文**\n\n### 3.2 HTTP 方法\n\n| 方法      | 说明                                                         |\n| --------- | ------------------------------------------------------------ |\n| `GET`     | 请求指定页面信息，并返回实体主体                             |\n| `POST`    | 传输实体主体，向指定资源提交数据进行处理请求，数据被包含在请求体中，可能会导致新资源的建立和/或已有资源的修改 |\n| `PUT`     | 从客户端向服务器传送的数据取代指定文档的内容，上传文件 ，不带验证机制，存在安全性问题 |\n| `DELETE`  | 请求服务器删除指定页面，一般是删除文件                       |\n| `HEAD`    | 获取报文首部，类似于 `GET`，但不返回报文实体主体部分，主要用于确认 URL 的有效性以及资源更新时间等 |\n| `PATCH`   | 对资源进行部分修改                                           |\n| `OPTIONS` | 查询支持的方法，查询指定的 URL 能支持的方法，返回 `Allow: GET,POST,HEAD,OPTIONS` 等内容 |\n| `CONNECT` | 要求在于代理服务器通信时建立隧道，使用 SSL 和 TLS 协议将通信内容加密后经网络隧道传输 |\n| `TRACE`   | 追踪路径，服务器将通信路径返回给客户端                       |\n\n### 3.3 HTTP 状态码\n\n服务器返回的响应报文中的第一行是状态行，包含状态码以及原因短语，用于告知客户端请求的结果，主要分为如下类型，常见的状态码如下：\n\n-   **1xx - 信息型**：服务器收到请求，需要请求者继续操作；\n-   **2xx - 成功型**：请求成功收到，理解并处理；\n-   **3xx - 重定向**：需要进一步操作以完成请求；\n-   **4xx - 客户端错误**：请求包含语法错误或无法完成请求；\n-   **5xx - 服务器错误**：服务器在处理请求的过程中发生了错误；\n\n| 状态码 | 状态                    | 说明                                                         |\n| ------ | ----------------------- | ------------------------------------------------------------ |\n| 100    | `Continue`              | 到目前为止很正常，客户端能继续发送请求或忽略该响应           |\n| 200    | `OK`                    | 表示请求成功                                                 |\n| 204    | `No Content`            | 请求已经成功处理，但返回的响应报文不含实体的主体部分，一般只需要从客户端向服务器发送信息，而无需返回数据时使用 |\n| 206    | `Partial Content`       | 表示客户端进行范围请求，响应报文包含由 `Content-Range` 指定范围的实体内容 |\n| 301    | `Moved Permanently`     | 永久性重定向                                                 |\n| 302    | `Found`                 | 临时性重定向                                                 |\n| 303    | `See Other`             | 和 302 功能相同，但 303 明确要求客户端应该采用 `GET` 方法获取资源 |\n| 304    | `Not Modified`          | 若请求报文首部包含一些条件，如 `If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since`，若不满足条件，则服务器返回 304 |\n| 307    | `Temporary Redirect`    | 临时重定向，类似于 302，但 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法 |\n| 400    | `Bad Request`           | 请求报文中存在语法错误                                       |\n| 401    | `Unauthorized`          | 该状态码表示发送的请求需要有认证信息                         |\n| 403    | `Forbidden`             | 请求被拒绝                                                   |\n| 404    | `Not Found`             | 请求的页面不存在                                             |\n| 500    | `Internal Server Error` | 服务器正在执行请求时发生错误                                 |\n| 503    | `Service Unavailable`   | 服务器暂时处于超负载或正进行停机维护，现在无法处理请求       |\n\n### 3.4 HTTP 首部\n\n有 4 中类型的首部字段：\n\n-   **通用首部字段**\n-   **请求首部字段**\n-   **响应首部字段**\n-   **实体首部字段**\n\n### 3.5 GET vs POST\n\n1.  **作用不同**\n\n`GET` 用于获取资源，一般是查询，而 `POST` 用于传输实体主体，一般是提交；\n\n2.  **参数不同**\n\n`GET` 和 `POST` 的请求都能使用额外参数，但 `GET` 的参数以查询字符串出现在 URL 中，不会对服务器中的内容产生作用，但 `POST` 的参数存储在实体主体中。但是 `POST` 的安全性也不能说很高，我们仍然可以用抓包工具来进行查看。另一方面，URL 只支持 ASCII，因此 GET 的参数中若有中文等字符时需要先进行编码，但是 POST 的参数支持标准字符集；\n\n3.  **安全性**\n\nGET 方法是安全的，因为它不会改变服务器的状态。但是 POST  非安全，因为 POST 的目的是传送实体主体内容，内容可能是用户上传的表单数据，一旦上传成功，服务器就可能把该数据存入数据库，此时状态也就发生了改变。\n\n安全的方法：`GET、HEAD、OPTIONS`；\n\n不安全的方法：`POST、PUT、DELETE`；\n\n4.  **幂等性**\n\n幂等的 HTTP 方法，同样的请求被执行一次和被连续执行多次的效果是一样的，服务器的状态也一样，即幂等的方法不具有副作用，因此所有安全的方法也都是幂等的。\n\n一般来说，`GET、HEAD、PUT、DELETE` 等方法都是幂等的，但 `POST` 不是。\n\n5.  **可缓存**\n\n若要对响应进行缓存，则应该满足一下条件：\n\n-   请求报文的 HTTP 方法本身是可缓存的，包括 `GET、HEAD`，但是 `PUT、DELETE` 不可缓存，`POST` 在大多数情况下是不可缓存的；\n-   响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、411、501；\n-   响应报文的 `Cache-Control` 首部字段未指定则不进行缓存； \n\n## 4. HTTP 和 HTTPS\n\n### 4.1 什么是 HTTP/S 协议？\n\n1.  **HTTP**\n\nHTTP（Hyper Text Transfer Protocol），**超文本传输协议**，它是从 Web 服务器传输超文本标记语言（HTML）到本地浏览器的传送协议。\n\nHTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；\n\n2.  **HTTPS**\n\nHTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），以安全为目标的 HTTP 通道，通俗来讲就是 HTTP 的安全版，加入了 SSL/TLS 层，通过 SSL 证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。HTTPS 的安全基础是 SSL，其主要作用有如下两种：\n\n-   建立一个信息安全通道，来保证数据传输的安全；\n-   确认网站真实性；\n\n###  4.2 HTTP/S 特点\n\n1.  **HTTP**\n\n-   HTTP 支持 C/S 模式，是一种 **请求/响应模式** 的协议；\n-   **简单快速**：客户向服务器请求服务时，只需要传送请求方法和路径，常用方法有 `GET、POST、HEAD`；\n-   **灵活**：HTTP 允许传输任意类型的数据对象，传输数据的类型由 `Content - Type` 来标记；\n-   **无连接**：限制每次连接只处理一个请求，服务器处理完请求并受到客户的应答后，会断开连接，但是不利于客户端和服务器保持会话连接；\n-   **无状态**：值协议对于事务处理没有回忆，后续处理如果需要前面的信息，则必须重传；\n\n### 4.2 HTTP/S 原理\n\n1.  **HTTP**\n\nHTTP 是 **基于 TCP/IP 通信协议来传递数据的协议**，传输的数据类型有 HTML 文件、图片文件、查询结果等。此外，HTTP 协议一般用于 `B/S` 架构，浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务器即 Web 服务器发送所有请求；\n\n![](https://img-blog.csdnimg.cn/img_convert/6ed01a44de3bc699551d355ec5cb400e.png)\n\n2.  **HTTPS**\n\n![](https://img-blog.csdnimg.cn/img_convert/e83d235b519cb62cfe22fec281fbe7d5.png)\n\n如上图，使用 HTTPS 传输数据的流程如下：\n\n1.  首先客户端通过 URL 访问服务器建立 SSL 连接；\n2.  服务器收到客户端请求后，将网站支持的证书信息（其中包含公钥）传送一份给客户端；\n3.  客户端的服务器开始协商 SSL 连接的安全等级，即信息加密的等级；\n4.  客户端的浏览器根据双方同意的安全等级，建立会话秘钥，然后利用网站的公钥将会话秘钥加密，并传送给网站；\n5.  服务器利用自己的秘钥解密出会话秘钥；\n6.  服务器利用会话秘钥加密与客户端之间的通信；\n\n### 4.3 HTTP 和 HTTPS 的区别\n\nHTTP 协议传输的数据都是未经加密的，即明文的，因此使用 HTTP 协议传输隐私信息不安全。为了保证隐私数据能够加密传输，于是使用 SSL 协议用于对 HTTP 协议传输的数据进行加密，即 HTTPS；\n\nHTTPS 协议是 HTTP + SSL 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全，两者的区别主要有：\n\n1.  HTTPS 需要到 CA 申请证书，一般免费证书较少，因此需要一定费用；\n2.  HTTP 是超文本传输信息，信息是明文传输；HTTPS 是具有安全性的 SSL 加密传输协议；\n3.  HTTP 和 HTTPS 使用的是完全不同的连接方式，HTTP 默认使用 `80` 端口，而 HTTPS 默认使用 `443` 端口；\n4.  HTTP 的连接简单，是无状态的；而 HTTPS 是 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全；\n\n| 区别     | HTTP                                                       | HTTPS                                                        |\n| -------- | ---------------------------------------------------------- | ------------------------------------------------------------ |\n| 协议     | 基于 TCP，明文传输，**客户端与服务器端均无法验证对方身份** | HTTP + SSL，运行于 TCP 之上，**添加了加密和认证机制的 HTTP** |\n| 端口     | 80                                                         | 443                                                          |\n| 资源消耗 | 较少                                                       | 由于加解密操作，将消耗更多的 CPU 和内存资源                  |\n| 开销     | 无需证书                                                   | 需要证书，一般是向认证机构购买                               |\n| 加密机制 | 无                                                         | 共享秘钥加密和公开秘钥加密并用的混合加密机制                 |\n| 安全性   | 弱                                                         | 强                                                           |\n\n\n\n## 5. TCP VS UDP\n\n### 5.1 TCP 和 UDP 的特点\n\n1.  **TCP**\n\nTCP（传输控制协议，Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供 **全双工通信，面向字节流** （将应用层传下来的报文当做字节流，将字节流组织为大小不等的数据块），每条 TCP 连接只能是 **点对点（一对一）**，总结起来有如下特点：\n\n-   **面向连接**\n-   **仅支持单播**\n-   **面向字节流**\n-   **可靠性**\n-   **提供拥塞控制以及全双工通信**\n\n2.  **UDP**\n\nUDP（用户数据表协议，User Datagram Protocol）是面向无连接的，尽最大可能交付，无拥塞控制，**面向报文**（对应用层中传下来的报文不合并也不拆分，只添加 UDP 首部），支持 **一对一、一对多、多对一和对多点的交互通信**，总结起来有如下特点：\n\n-   **面向无连接**\n-   **有单播、多播、广播的功能**\n-   **面向报文**\n-   **不可靠性**\n-   **头部开销小，传输数据时高效**\n\n### 5.2 TCP VS UDP\n\n|              | TCP                              | UDP                                  |\n| ------------ | -------------------------------- | ------------------------------------ |\n| 是否连接     | 面向连接                         | 无连接                               |\n| 是否可靠     | 可靠传输，使用流量控制和拥塞控制 | 不可靠传输，不使用流量控制和拥塞控制 |\n| 连接对象个数 | 只能一对一                       | 支持一对一、一对多、多对一和多对多   |\n| 传输方式     | 面向字节流                       | 面向报文                             |\n| 首部开销     | 首部最小 20 字节，最大 60 字节   | 首部开销小，仅 8 字节                |\n| 场景         | 传输可靠，比如文件传输等         | 实时应用，比如视频会议、直播等       |\n\n\n\n### 5.3 三次握手以及四次挥手\n\n1.  **三次握手**\n\n-   **第一次握手**：客户端向服务端发送连接请求报文段，报文段中含有自身的数据通讯初始序号。请求发送后，客户端进入 `SYN-SENT` 状态；\n-   **第二次握手**：服务端接收到来自客户端的连接请求报文，如果同意就会发送一个响应，响应中也会包含自身的数据通讯初始序号，发送完成后进入 `SYN-RECEIVED` 状态；\n-   **第三次握手**：客户端收到来自服务端同意连接的响应后，再次向服务端发送一个确认报文。客户端发送完该报文后进行 `ESTABLISHED` 状态，服务端收到该应答后也进入 `ESTABLISHED` 状态，此时连接就建立成功了。\n\n![源自 ThinkWon 博客](https://img-blog.csdnimg.cn/img_convert/1d5ac6b297456fd31f8e4b9c518f0e53.png)\n\n2.  **四次挥手**\n\n-   **第一次挥手：** 一旦客户端 A 认为数据发送完成，则向服务端 B 发送请求释放请求；\n-   **第二次挥手：** 服务端 B 收到连接释放请求后，将告知应用层释放 TCP 连接，接着发送 ACK 包并进入 `CLOST_WAIT` 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据。但是 TCP 是双向通信的，所以 B 此时仍可以向 A 发送数据；\n-   **第三次挥手：** 若 B 此时还有未发送完的数据，就会继续发送直到完毕，然后向 A 发送连接释放请求，接着 B 进入 `LAST-ACK` 状态；\n-   **第四次挥手：** A 收到释放请求后，向 B 发送确认应答，此时 A 进入 `TIME-WAIT` 状态并持续一段时间（一般是 2MSL），若在该时间段内没有来自 B 的重发请求，就进入 `CLOSED` 状态。当 B 收到确认应答后，也进入 `CLOSE` 状态。\n\n![图源自 Thinkwon 博客](https://img-blog.csdnimg.cn/img_convert/b606acad67d96dfe7b05087d9f9c5da6.png)\n\n## 6. Session vs Cookie\n\n### 6.1 Session 和 Cookie 的定义\n\n#### 6.1.1 什么是 cookie\n\n`cookie` 是由 Web 服务器保存在用户浏览器上的小文件（`key-value` 格式），包含用户相关信息。客户端向服务器发起请求，若服务器需要记录该用户状态，则使用 `response` 向客户端浏览器颁发一个 `cookie`。客户端浏览器将 `cookie` 保存起来，当浏览器再请求该网站时，浏览器将请求的网址连同该 `cookie` 一起提交给服务器，服务器检查该 `cookie`，以此来确认用户身份。\n\n#### 6.1.2 什么是 session\n\n`session` 依赖于 `cookie` 实现，`session` 是服务端对象。`session` 浏览器和服务器会话过程中，服务器分配的一块存储空间。服务器默认为浏览器在 `cookie` 中设置 `sessionid`，浏览器在向服务器请求过程中传输 `cookie` 包含 `sessionid`，服务器将根据 `sessionid` 获取出会话中存储的信息，然后确认会话的身份信息。\n\n### 6.2 Session 和 Cookie 的区别\n\n1.  **存储空间**：单个 `cookie` 所保存的数据不能超过 4k，许多浏览器都会限制一个站点最多能保存的 `cookie` 数（一般是 20），但是 `session` 没有该限制；\n2.  **占用服务器资源**：`session` 一定时间保存在服务器上，当访问增多时，占用服务器性能，考虑到服务器性能方面，应当使用 `cookie`；\n3.  **存储位置与安全性**：`cookie` 数据放在客户端，安全性较差，`session` 数据放在服务器上，安全性相对较高；\n\n\n\n## 7. 常见面试题\n\n### 7.1 TCP 连接为什么不是 2 次，而是 3 次？\n\n因为考虑到连接时丢包的问题，如果是 2 次，那么第二次握手时如果服务器响应给客户端的确认报文段丢失，但此时服务器端已经准备好接收数据，而客户端一直没收到服务端的确认报文，客户端就不清楚服务端是否已经准备好了。这样一来，客户端既不会向服务端发送数据，也会忽略服务端所发送过来的数据。\n\n### 7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？\n\n同样是出于考虑丢包问题，若第四次挥手的报文丢失，服务器未确认 Ack 报文就会重发第三次挥手的报文，若报文一来一去的最常时间就是 2 MSL，所以需要等这么长时间来确认服务端确实已经收到。\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","slug":"【剑指-Java】第-3-弹：纯干货，计算机网络面试知识点总结","published":1,"updated":"2021-05-02T14:58:03.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1m004rbw346wm4bxci","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-计算机网络基础\"><a href=\"#1-计算机网络基础\" class=\"headerlink\" title=\"1. 计算机网络基础\"></a>1. 计算机网络基础</h2><h3 id=\"1-1-主机间的通信方式\"><a href=\"#1-1-主机间的通信方式\" class=\"headerlink\" title=\"1.1 主机间的通信方式\"></a>1.1 主机间的通信方式</h3><ol>\n<li><strong>客户端-服务器（C/S）</strong></li>\n</ol>\n<p>客户端是服务的请求放，服务器是服务的提供方。</p>\n<ol>\n<li><strong>对等（P2P）</strong></li>\n</ol>\n<p>不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。</p>\n<h3 id=\"1-2-电路-amp-分组交换\"><a href=\"#1-2-电路-amp-分组交换\" class=\"headerlink\" title=\"1.2 电路 &amp; 分组交换\"></a>1.2 电路 &amp; 分组交换</h3><ol>\n<li><strong>分组交换</strong></li>\n</ol>\n<p>每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不影响，因此在同一条传输线路上允许同时传输多个分组，即分组交换不会占用传输线路。</p>\n<ol>\n<li><strong>电路交换</strong></li>\n</ol>\n<p>电路交换用于电话通讯系统，两个用户之间建立通信前需要有一条专用的物理链路，而且在通信过程中始终占用该链路。由于通信过程中不可能一直在使用传输线路，因此电路交换对线路利用率很低，通常不到 10%.</p>\n<h3 id=\"1-3-时延\"><a href=\"#1-3-时延\" class=\"headerlink\" title=\"1.3 时延\"></a>1.3 时延</h3><ol>\n<li><strong>排队时延</strong></li>\n</ol>\n<p>分组在路由器的输入和输出队列中排队等待所需时间，取决于当前网络的通信量；</p>\n<ol>\n<li><strong>处理时延</strong></li>\n</ol>\n<p>主机或路由器接收到分组时进行处理所需时间，一般这些处理包括分析首部、从分组中提取数据、进行差错校验或查找适当路由等；</p>\n<ol>\n<li><strong>传输时延</strong></li>\n</ol>\n<p>主机或路由器传输数据帧所需时间：</p>\n<script type=\"math/tex; mode=display\">delay = length(bit)/v(bit/s)</script><p>其中 <code>length</code> 表示数据帧的长度，<code>v</code> 表示传输速率；</p>\n<ol>\n<li><strong>传播时延</strong></li>\n</ol>\n<p>电磁波在信道中传输所需时间，电磁波传播速度无限接近于光速：</p>\n<script type=\"math/tex; mode=display\">delay = length(m)/v(m/s)</script><p>其中 <code>length</code> 表示信道的长度，<code>v</code> 表示电磁波在信道中的传播速度；</p>\n<h3 id=\"1-4-体系结构\"><a href=\"#1-4-体系结构\" class=\"headerlink\" title=\"1.4 体系结构\"></a>1.4 体系结构</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/a468e849bf48b218f0a3266e1d9cd5b9.png\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>体系结构</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>RJ45、CLOCK、IEEE802.3（中继器、集线器）</td>\n</tr>\n<tr>\n<td>数据链路</td>\n<td>PPP、FR、HDLC、VLAN、MAC（网桥、交换机）</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP（HTTP/S、FTP、POP3、SMTP、TENET、SSH）、UDP（BOOTP、NTP、DHCP）、SPX</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>NFS、SQL、NETBIOS、RPC</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>JPEG、MPEG、ASII</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>FTP、DNS、Telenet、SMTP、HTTP、WWW、NFS</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li><strong>OSI 七层体系结构</strong></li>\n</ol>\n<p>为把在一个网络结构下开发的系统与在另一个网络结构下开发的系统互联起来，以实现更高一级的应用，使异种机之间的通信成为可能，便于网络结构标准化，国际标准化组织（ISO）于1984年形成了开放系统互连参考模型OSI/RM（Open Systems Interconnection Reference Model，简称OSI）的正式文件。</p>\n<ul>\n<li><p><strong>物理层（Physical，PH）：</strong> 传递信息需要利用一些物理传输媒体，如双绞线、同轴电缆、光纤等。物理层的任务就是为上层提供一个物理的连接，以及该物理连接表现出来的机械、电气、功能和过程特性，实现透明的比特流传输。在这一层，数据还没有组织，仅作为原始的比特流提交给上层——数据链路层。</p>\n</li>\n<li><p><strong>数据链路层（Data-link，D）</strong>：数据链路层负责在2个相邻的结点之间的链路上实现无差错的数据帧传输。每一帧包括一定的数据和必要的控制信息，在接收方接收到数据出错时要通知发送方重发，直到这一帧无差错地到达接收结点，数据链路层就是把一条有可能出错的实际链路变成让网络层看起来像不会出错的数据链路。实现的主要功能有：帧的同步、差错控制、流量控制、寻址、帧内定界、透明比特组合传输等。</p>\n</li>\n<li><p><strong>网络层（Network，N）</strong>：网络中通信的2个计算机之间可能要经过许多结点和链路，还可能经过几个通信子网。网络层数据传输的单位是分组（Packet）。网络层的主要任务是为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机，交付给目的主机的传输层。</p>\n</li>\n<li><p><strong>传输层（Transport，T）</strong>：传输层的主要任务是通过通信子网的特性，最佳地利用网络资源，并以可靠与经济的方式为2个端系统的会话层之间建立一条连接通道，以透明地传输报文。传输层向上一层提供一个可靠的端到端的服务，使会话层不知道传输层以下的数据通信的细节。传输层只存在端系统中，传输层以上各层就不再考虑信息传输的问题了。</p>\n</li>\n<li><p><strong>会话层（Session，S）</strong>：在会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制。如服务器验证用户登录便是由会话层完成的。</p>\n</li>\n<li><p><strong>表示层（Presentation，P）</strong>：这一层主要解决用户信息的语法表示问题。它将要交换的数据从适合某一用户的抽象语法，转换为适合OSI内部表示使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工作都由表示层负责。</p>\n</li>\n<li><p><strong>应用层（Application，A）</strong>：这是OSI参考模型的最高层。应用层确定进程之间通信的性质以满足用户的需求，以及提供网络与用户软件之间的接口服务。</p>\n</li>\n</ul>\n<ol>\n<li><strong>五层协议</strong></li>\n</ol>\n<p>我们日常网络中使用的体系结构，总共可以分为 5 层，分别是：</p>\n<ul>\n<li><strong>应用层</strong> ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</li>\n<li><strong>传输层</strong> ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</li>\n<li><strong>网络层</strong> ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。</li>\n<li><strong>数据链路层</strong> ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</li>\n<li><strong>物理层</strong> ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</li>\n</ul>\n<ol>\n<li><strong>TCP/IP</strong> </li>\n</ol>\n<p>不严格遵循 OSI 分层概念，只有四层，相当于将五层协议中的数据链路层和物理层合并为网络结构层。</p>\n<h2 id=\"2-五层协议详解\"><a href=\"#2-五层协议详解\" class=\"headerlink\" title=\"2. 五层协议详解\"></a>2. 五层协议详解</h2><h3 id=\"2-1-物理层\"><a href=\"#2-1-物理层\" class=\"headerlink\" title=\"2.1 物理层\"></a>2.1 物理层</h3><p>物理层上传送的数据单位是比特，其作用是实现相邻计算机节点间比特流的透明传送，尽可能屏蔽调具体传输介质和屋里设备的差异。根据信息在传输线上的传输方向，可以分为如下三种通信方式：</p>\n<ul>\n<li>单工通信：单向传输</li>\n<li>半双工通信：双向交替传输</li>\n<li>全双工通信：双向同时传输</li>\n</ul>\n<h3 id=\"2-2-链路层\"><a href=\"#2-2-链路层\" class=\"headerlink\" title=\"2.2 链路层\"></a>2.2 链路层</h3><p>两台主机之间的数据传输，总是在一段一段的链路上进行传送的，此时就需要使用专门的链路层协议。在两个相邻节点间传输数据时，数据链路层将网络层交下来的 IP 数据包组装成帧，在两个相邻节点间的链路上传送帧，每帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>\n<h3 id=\"2-3-网络层\"><a href=\"#2-3-网络层\" class=\"headerlink\" title=\"2.3 网络层\"></a>2.3 网络层</h3><p>互联网的核心，向上提供数据报服务，通过 IP 协议将异构的物理网络连接起来。其任务是选择合适的网间路由和交换节点，从而确保计算机通信的数据及时传送，配套使用的有如下三个协议：</p>\n<ul>\n<li><strong>地址解析协议 ARP</strong></li>\n<li><strong>网际控制报文协议 ICMP</strong></li>\n<li><strong>网际组管理协议 IGMP</strong></li>\n</ul>\n<h3 id=\"2-4-传输层\"><a href=\"#2-4-传输层\" class=\"headerlink\" title=\"2.4 传输层\"></a>2.4 传输层</h3><p>传输层提供了进程间的逻辑通信，负责向两台主机进程之间的通信提供通用的 <strong>数据传输服务</strong>，向高层用户屏蔽网络层的核心细节，这一层中主要涉及 UDP 和 TCP 两个协议。</p>\n<h3 id=\"2-5-应用层\"><a href=\"#2-5-应用层\" class=\"headerlink\" title=\"2.5 应用层\"></a>2.5 应用层</h3><p>应用层的任务是通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间的通信和交互的规则。</p>\n<p>对于不同的网络应用需要不同的应用层协议，常见的有 DNS、HTTP、SMTP 协议等；</p>\n<h2 id=\"3-HTTP\"><a href=\"#3-HTTP\" class=\"headerlink\" title=\"3. HTTP\"></a>3. HTTP</h2><h3 id=\"3-1-HTTP-基础\"><a href=\"#3-1-HTTP-基础\" class=\"headerlink\" title=\"3.1 HTTP 基础\"></a>3.1 HTTP 基础</h3><ol>\n<li><strong>URI（统一资源标识符）</strong></li>\n</ol>\n<blockquote>\n<p>  URI = URL + URN</p>\n</blockquote>\n<p>URL：统一资源 <strong>定位</strong> 符，标示一个具体的资源位置</p>\n<p>URN：统一资源名称</p>\n<ol>\n<li><strong>请求报文</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6b09a3bc1b49c1cb772d6eedce2f66a9.png\" alt=\"\"></p>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>请求行</strong>：包括请求方法、URL、协议/版本</li>\n<li><strong>请求头</strong>：<code>Request Header</code></li>\n<li><strong>请求正文</strong></li>\n</ul>\n<ol>\n<li><strong>响应报文</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b5a6afaaab6917b98040b871ca963f00.png\" alt=\"\"></p>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>状态行</strong></li>\n<li><strong>响应头</strong></li>\n<li><strong>响应正文</strong></li>\n</ul>\n<h3 id=\"3-2-HTTP-方法\"><a href=\"#3-2-HTTP-方法\" class=\"headerlink\" title=\"3.2 HTTP 方法\"></a>3.2 HTTP 方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>GET</code></td>\n<td>请求指定页面信息，并返回实体主体</td>\n</tr>\n<tr>\n<td><code>POST</code></td>\n<td>传输实体主体，向指定资源提交数据进行处理请求，数据被包含在请求体中，可能会导致新资源的建立和/或已有资源的修改</td>\n</tr>\n<tr>\n<td><code>PUT</code></td>\n<td>从客户端向服务器传送的数据取代指定文档的内容，上传文件 ，不带验证机制，存在安全性问题</td>\n</tr>\n<tr>\n<td><code>DELETE</code></td>\n<td>请求服务器删除指定页面，一般是删除文件</td>\n</tr>\n<tr>\n<td><code>HEAD</code></td>\n<td>获取报文首部，类似于 <code>GET</code>，但不返回报文实体主体部分，主要用于确认 URL 的有效性以及资源更新时间等</td>\n</tr>\n<tr>\n<td><code>PATCH</code></td>\n<td>对资源进行部分修改</td>\n</tr>\n<tr>\n<td><code>OPTIONS</code></td>\n<td>查询支持的方法，查询指定的 URL 能支持的方法，返回 <code>Allow: GET,POST,HEAD,OPTIONS</code> 等内容</td>\n</tr>\n<tr>\n<td><code>CONNECT</code></td>\n<td>要求在于代理服务器通信时建立隧道，使用 SSL 和 TLS 协议将通信内容加密后经网络隧道传输</td>\n</tr>\n<tr>\n<td><code>TRACE</code></td>\n<td>追踪路径，服务器将通信路径返回给客户端</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-3-HTTP-状态码\"><a href=\"#3-3-HTTP-状态码\" class=\"headerlink\" title=\"3.3 HTTP 状态码\"></a>3.3 HTTP 状态码</h3><p>服务器返回的响应报文中的第一行是状态行，包含状态码以及原因短语，用于告知客户端请求的结果，主要分为如下类型，常见的状态码如下：</p>\n<ul>\n<li><strong>1xx - 信息型</strong>：服务器收到请求，需要请求者继续操作；</li>\n<li><strong>2xx - 成功型</strong>：请求成功收到，理解并处理；</li>\n<li><strong>3xx - 重定向</strong>：需要进一步操作以完成请求；</li>\n<li><strong>4xx - 客户端错误</strong>：请求包含语法错误或无法完成请求；</li>\n<li><strong>5xx - 服务器错误</strong>：服务器在处理请求的过程中发生了错误；</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td><code>Continue</code></td>\n<td>到目前为止很正常，客户端能继续发送请求或忽略该响应</td>\n</tr>\n<tr>\n<td>200</td>\n<td><code>OK</code></td>\n<td>表示请求成功</td>\n</tr>\n<tr>\n<td>204</td>\n<td><code>No Content</code></td>\n<td>请求已经成功处理，但返回的响应报文不含实体的主体部分，一般只需要从客户端向服务器发送信息，而无需返回数据时使用</td>\n</tr>\n<tr>\n<td>206</td>\n<td><code>Partial Content</code></td>\n<td>表示客户端进行范围请求，响应报文包含由 <code>Content-Range</code> 指定范围的实体内容</td>\n</tr>\n<tr>\n<td>301</td>\n<td><code>Moved Permanently</code></td>\n<td>永久性重定向</td>\n</tr>\n<tr>\n<td>302</td>\n<td><code>Found</code></td>\n<td>临时性重定向</td>\n</tr>\n<tr>\n<td>303</td>\n<td><code>See Other</code></td>\n<td>和 302 功能相同，但 303 明确要求客户端应该采用 <code>GET</code> 方法获取资源</td>\n</tr>\n<tr>\n<td>304</td>\n<td><code>Not Modified</code></td>\n<td>若请求报文首部包含一些条件，如 <code>If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since</code>，若不满足条件，则服务器返回 304</td>\n</tr>\n<tr>\n<td>307</td>\n<td><code>Temporary Redirect</code></td>\n<td>临时重定向，类似于 302，但 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法</td>\n</tr>\n<tr>\n<td>400</td>\n<td><code>Bad Request</code></td>\n<td>请求报文中存在语法错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td><code>Unauthorized</code></td>\n<td>该状态码表示发送的请求需要有认证信息</td>\n</tr>\n<tr>\n<td>403</td>\n<td><code>Forbidden</code></td>\n<td>请求被拒绝</td>\n</tr>\n<tr>\n<td>404</td>\n<td><code>Not Found</code></td>\n<td>请求的页面不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td><code>Internal Server Error</code></td>\n<td>服务器正在执行请求时发生错误</td>\n</tr>\n<tr>\n<td>503</td>\n<td><code>Service Unavailable</code></td>\n<td>服务器暂时处于超负载或正进行停机维护，现在无法处理请求</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-4-HTTP-首部\"><a href=\"#3-4-HTTP-首部\" class=\"headerlink\" title=\"3.4 HTTP 首部\"></a>3.4 HTTP 首部</h3><p>有 4 中类型的首部字段：</p>\n<ul>\n<li><strong>通用首部字段</strong></li>\n<li><strong>请求首部字段</strong></li>\n<li><strong>响应首部字段</strong></li>\n<li><strong>实体首部字段</strong></li>\n</ul>\n<h3 id=\"3-5-GET-vs-POST\"><a href=\"#3-5-GET-vs-POST\" class=\"headerlink\" title=\"3.5 GET vs POST\"></a>3.5 GET vs POST</h3><ol>\n<li><strong>作用不同</strong></li>\n</ol>\n<p><code>GET</code> 用于获取资源，一般是查询，而 <code>POST</code> 用于传输实体主体，一般是提交；</p>\n<ol>\n<li><strong>参数不同</strong></li>\n</ol>\n<p><code>GET</code> 和 <code>POST</code> 的请求都能使用额外参数，但 <code>GET</code> 的参数以查询字符串出现在 URL 中，不会对服务器中的内容产生作用，但 <code>POST</code> 的参数存储在实体主体中。但是 <code>POST</code> 的安全性也不能说很高，我们仍然可以用抓包工具来进行查看。另一方面，URL 只支持 ASCII，因此 GET 的参数中若有中文等字符时需要先进行编码，但是 POST 的参数支持标准字符集；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>GET 方法是安全的，因为它不会改变服务器的状态。但是 POST  非安全，因为 POST 的目的是传送实体主体内容，内容可能是用户上传的表单数据，一旦上传成功，服务器就可能把该数据存入数据库，此时状态也就发生了改变。</p>\n<p>安全的方法：<code>GET、HEAD、OPTIONS</code>；</p>\n<p>不安全的方法：<code>POST、PUT、DELETE</code>；</p>\n<ol>\n<li><strong>幂等性</strong></li>\n</ol>\n<p>幂等的 HTTP 方法，同样的请求被执行一次和被连续执行多次的效果是一样的，服务器的状态也一样，即幂等的方法不具有副作用，因此所有安全的方法也都是幂等的。</p>\n<p>一般来说，<code>GET、HEAD、PUT、DELETE</code> 等方法都是幂等的，但 <code>POST</code> 不是。</p>\n<ol>\n<li><strong>可缓存</strong></li>\n</ol>\n<p>若要对响应进行缓存，则应该满足一下条件：</p>\n<ul>\n<li>请求报文的 HTTP 方法本身是可缓存的，包括 <code>GET、HEAD</code>，但是 <code>PUT、DELETE</code> 不可缓存，<code>POST</code> 在大多数情况下是不可缓存的；</li>\n<li>响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、411、501；</li>\n<li>响应报文的 <code>Cache-Control</code> 首部字段未指定则不进行缓存； </li>\n</ul>\n<h2 id=\"4-HTTP-和-HTTPS\"><a href=\"#4-HTTP-和-HTTPS\" class=\"headerlink\" title=\"4. HTTP 和 HTTPS\"></a>4. HTTP 和 HTTPS</h2><h3 id=\"4-1-什么是-HTTP-S-协议？\"><a href=\"#4-1-什么是-HTTP-S-协议？\" class=\"headerlink\" title=\"4.1 什么是 HTTP/S 协议？\"></a>4.1 什么是 HTTP/S 协议？</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP（Hyper Text Transfer Protocol），<strong>超文本传输协议</strong>，它是从 Web 服务器传输超文本标记语言（HTML）到本地浏览器的传送协议。</p>\n<p>HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；</p>\n<ol>\n<li><strong>HTTPS</strong></li>\n</ol>\n<p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），以安全为目标的 HTTP 通道，通俗来讲就是 HTTP 的安全版，加入了 SSL/TLS 层，通过 SSL 证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。HTTPS 的安全基础是 SSL，其主要作用有如下两种：</p>\n<ul>\n<li>建立一个信息安全通道，来保证数据传输的安全；</li>\n<li>确认网站真实性；</li>\n</ul>\n<h3 id=\"4-2-HTTP-S-特点\"><a href=\"#4-2-HTTP-S-特点\" class=\"headerlink\" title=\"4.2 HTTP/S 特点\"></a>4.2 HTTP/S 特点</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<ul>\n<li>HTTP 支持 C/S 模式，是一种 <strong>请求/响应模式</strong> 的协议；</li>\n<li><strong>简单快速</strong>：客户向服务器请求服务时，只需要传送请求方法和路径，常用方法有 <code>GET、POST、HEAD</code>；</li>\n<li><strong>灵活</strong>：HTTP 允许传输任意类型的数据对象，传输数据的类型由 <code>Content - Type</code> 来标记；</li>\n<li><strong>无连接</strong>：限制每次连接只处理一个请求，服务器处理完请求并受到客户的应答后，会断开连接，但是不利于客户端和服务器保持会话连接；</li>\n<li><strong>无状态</strong>：值协议对于事务处理没有回忆，后续处理如果需要前面的信息，则必须重传；</li>\n</ul>\n<h3 id=\"4-2-HTTP-S-原理\"><a href=\"#4-2-HTTP-S-原理\" class=\"headerlink\" title=\"4.2 HTTP/S 原理\"></a>4.2 HTTP/S 原理</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP 是 <strong>基于 TCP/IP 通信协议来传递数据的协议</strong>，传输的数据类型有 HTML 文件、图片文件、查询结果等。此外，HTTP 协议一般用于 <code>B/S</code> 架构，浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务器即 Web 服务器发送所有请求；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6ed01a44de3bc699551d355ec5cb400e.png\" alt=\"\"></p>\n<ol>\n<li><strong>HTTPS</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e83d235b519cb62cfe22fec281fbe7d5.png\" alt=\"\"></p>\n<p>如上图，使用 HTTPS 传输数据的流程如下：</p>\n<ol>\n<li>首先客户端通过 URL 访问服务器建立 SSL 连接；</li>\n<li>服务器收到客户端请求后，将网站支持的证书信息（其中包含公钥）传送一份给客户端；</li>\n<li>客户端的服务器开始协商 SSL 连接的安全等级，即信息加密的等级；</li>\n<li>客户端的浏览器根据双方同意的安全等级，建立会话秘钥，然后利用网站的公钥将会话秘钥加密，并传送给网站；</li>\n<li>服务器利用自己的秘钥解密出会话秘钥；</li>\n<li>服务器利用会话秘钥加密与客户端之间的通信；</li>\n</ol>\n<h3 id=\"4-3-HTTP-和-HTTPS-的区别\"><a href=\"#4-3-HTTP-和-HTTPS-的区别\" class=\"headerlink\" title=\"4.3 HTTP 和 HTTPS 的区别\"></a>4.3 HTTP 和 HTTPS 的区别</h3><p>HTTP 协议传输的数据都是未经加密的，即明文的，因此使用 HTTP 协议传输隐私信息不安全。为了保证隐私数据能够加密传输，于是使用 SSL 协议用于对 HTTP 协议传输的数据进行加密，即 HTTPS；</p>\n<p>HTTPS 协议是 HTTP + SSL 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全，两者的区别主要有：</p>\n<ol>\n<li>HTTPS 需要到 CA 申请证书，一般免费证书较少，因此需要一定费用；</li>\n<li>HTTP 是超文本传输信息，信息是明文传输；HTTPS 是具有安全性的 SSL 加密传输协议；</li>\n<li>HTTP 和 HTTPS 使用的是完全不同的连接方式，HTTP 默认使用 <code>80</code> 端口，而 HTTPS 默认使用 <code>443</code> 端口；</li>\n<li>HTTP 的连接简单，是无状态的；而 HTTPS 是 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全；</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>HTTP</th>\n<th>HTTPS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>协议</td>\n<td>基于 TCP，明文传输，<strong>客户端与服务器端均无法验证对方身份</strong></td>\n<td>HTTP + SSL，运行于 TCP 之上，<strong>添加了加密和认证机制的 HTTP</strong></td>\n</tr>\n<tr>\n<td>端口</td>\n<td>80</td>\n<td>443</td>\n</tr>\n<tr>\n<td>资源消耗</td>\n<td>较少</td>\n<td>由于加解密操作，将消耗更多的 CPU 和内存资源</td>\n</tr>\n<tr>\n<td>开销</td>\n<td>无需证书</td>\n<td>需要证书，一般是向认证机构购买</td>\n</tr>\n<tr>\n<td>加密机制</td>\n<td>无</td>\n<td>共享秘钥加密和公开秘钥加密并用的混合加密机制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>弱</td>\n<td>强</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-TCP-VS-UDP\"><a href=\"#5-TCP-VS-UDP\" class=\"headerlink\" title=\"5. TCP VS UDP\"></a>5. TCP VS UDP</h2><h3 id=\"5-1-TCP-和-UDP-的特点\"><a href=\"#5-1-TCP-和-UDP-的特点\" class=\"headerlink\" title=\"5.1 TCP 和 UDP 的特点\"></a>5.1 TCP 和 UDP 的特点</h3><ol>\n<li><strong>TCP</strong></li>\n</ol>\n<p>TCP（传输控制协议，Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供 <strong>全双工通信，面向字节流</strong> （将应用层传下来的报文当做字节流，将字节流组织为大小不等的数据块），每条 TCP 连接只能是 <strong>点对点（一对一）</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向连接</strong></li>\n<li><strong>仅支持单播</strong></li>\n<li><strong>面向字节流</strong></li>\n<li><strong>可靠性</strong></li>\n<li><strong>提供拥塞控制以及全双工通信</strong></li>\n</ul>\n<ol>\n<li><strong>UDP</strong></li>\n</ol>\n<p>UDP（用户数据表协议，User Datagram Protocol）是面向无连接的，尽最大可能交付，无拥塞控制，<strong>面向报文</strong>（对应用层中传下来的报文不合并也不拆分，只添加 UDP 首部），支持 <strong>一对一、一对多、多对一和对多点的交互通信</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向无连接</strong></li>\n<li><strong>有单播、多播、广播的功能</strong></li>\n<li><strong>面向报文</strong></li>\n<li><strong>不可靠性</strong></li>\n<li><strong>头部开销小，传输数据时高效</strong></li>\n</ul>\n<h3 id=\"5-2-TCP-VS-UDP\"><a href=\"#5-2-TCP-VS-UDP\" class=\"headerlink\" title=\"5.2 TCP VS UDP\"></a>5.2 TCP VS UDP</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否连接</td>\n<td>面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>是否可靠</td>\n<td>可靠传输，使用流量控制和拥塞控制</td>\n<td>不可靠传输，不使用流量控制和拥塞控制</td>\n</tr>\n<tr>\n<td>连接对象个数</td>\n<td>只能一对一</td>\n<td>支持一对一、一对多、多对一和多对多</td>\n</tr>\n<tr>\n<td>传输方式</td>\n<td>面向字节流</td>\n<td>面向报文</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td>首部最小 20 字节，最大 60 字节</td>\n<td>首部开销小，仅 8 字节</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>传输可靠，比如文件传输等</td>\n<td>实时应用，比如视频会议、直播等</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"5-3-三次握手以及四次挥手\"><a href=\"#5-3-三次握手以及四次挥手\" class=\"headerlink\" title=\"5.3 三次握手以及四次挥手\"></a>5.3 三次握手以及四次挥手</h3><ol>\n<li><strong>三次握手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次握手</strong>：客户端向服务端发送连接请求报文段，报文段中含有自身的数据通讯初始序号。请求发送后，客户端进入 <code>SYN-SENT</code> 状态；</li>\n<li><strong>第二次握手</strong>：服务端接收到来自客户端的连接请求报文，如果同意就会发送一个响应，响应中也会包含自身的数据通讯初始序号，发送完成后进入 <code>SYN-RECEIVED</code> 状态；</li>\n<li><strong>第三次握手</strong>：客户端收到来自服务端同意连接的响应后，再次向服务端发送一个确认报文。客户端发送完该报文后进行 <code>ESTABLISHED</code> 状态，服务端收到该应答后也进入 <code>ESTABLISHED</code> 状态，此时连接就建立成功了。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1d5ac6b297456fd31f8e4b9c518f0e53.png\" alt=\"源自 ThinkWon 博客\"></p>\n<ol>\n<li><strong>四次挥手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次挥手：</strong> 一旦客户端 A 认为数据发送完成，则向服务端 B 发送请求释放请求；</li>\n<li><strong>第二次挥手：</strong> 服务端 B 收到连接释放请求后，将告知应用层释放 TCP 连接，接着发送 ACK 包并进入 <code>CLOST_WAIT</code> 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据。但是 TCP 是双向通信的，所以 B 此时仍可以向 A 发送数据；</li>\n<li><strong>第三次挥手：</strong> 若 B 此时还有未发送完的数据，就会继续发送直到完毕，然后向 A 发送连接释放请求，接着 B 进入 <code>LAST-ACK</code> 状态；</li>\n<li><strong>第四次挥手：</strong> A 收到释放请求后，向 B 发送确认应答，此时 A 进入 <code>TIME-WAIT</code> 状态并持续一段时间（一般是 2MSL），若在该时间段内没有来自 B 的重发请求，就进入 <code>CLOSED</code> 状态。当 B 收到确认应答后，也进入 <code>CLOSE</code> 状态。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b606acad67d96dfe7b05087d9f9c5da6.png\" alt=\"图源自 Thinkwon 博客\"></p>\n<h2 id=\"6-Session-vs-Cookie\"><a href=\"#6-Session-vs-Cookie\" class=\"headerlink\" title=\"6. Session vs Cookie\"></a>6. Session vs Cookie</h2><h3 id=\"6-1-Session-和-Cookie-的定义\"><a href=\"#6-1-Session-和-Cookie-的定义\" class=\"headerlink\" title=\"6.1 Session 和 Cookie 的定义\"></a>6.1 Session 和 Cookie 的定义</h3><h4 id=\"6-1-1-什么是-cookie\"><a href=\"#6-1-1-什么是-cookie\" class=\"headerlink\" title=\"6.1.1 什么是 cookie\"></a>6.1.1 什么是 cookie</h4><p><code>cookie</code> 是由 Web 服务器保存在用户浏览器上的小文件（<code>key-value</code> 格式），包含用户相关信息。客户端向服务器发起请求，若服务器需要记录该用户状态，则使用 <code>response</code> 向客户端浏览器颁发一个 <code>cookie</code>。客户端浏览器将 <code>cookie</code> 保存起来，当浏览器再请求该网站时，浏览器将请求的网址连同该 <code>cookie</code> 一起提交给服务器，服务器检查该 <code>cookie</code>，以此来确认用户身份。</p>\n<h4 id=\"6-1-2-什么是-session\"><a href=\"#6-1-2-什么是-session\" class=\"headerlink\" title=\"6.1.2 什么是 session\"></a>6.1.2 什么是 session</h4><p><code>session</code> 依赖于 <code>cookie</code> 实现，<code>session</code> 是服务端对象。<code>session</code> 浏览器和服务器会话过程中，服务器分配的一块存储空间。服务器默认为浏览器在 <code>cookie</code> 中设置 <code>sessionid</code>，浏览器在向服务器请求过程中传输 <code>cookie</code> 包含 <code>sessionid</code>，服务器将根据 <code>sessionid</code> 获取出会话中存储的信息，然后确认会话的身份信息。</p>\n<h3 id=\"6-2-Session-和-Cookie-的区别\"><a href=\"#6-2-Session-和-Cookie-的区别\" class=\"headerlink\" title=\"6.2 Session 和 Cookie 的区别\"></a>6.2 Session 和 Cookie 的区别</h3><ol>\n<li><strong>存储空间</strong>：单个 <code>cookie</code> 所保存的数据不能超过 4k，许多浏览器都会限制一个站点最多能保存的 <code>cookie</code> 数（一般是 20），但是 <code>session</code> 没有该限制；</li>\n<li><strong>占用服务器资源</strong>：<code>session</code> 一定时间保存在服务器上，当访问增多时，占用服务器性能，考虑到服务器性能方面，应当使用 <code>cookie</code>；</li>\n<li><strong>存储位置与安全性</strong>：<code>cookie</code> 数据放在客户端，安全性较差，<code>session</code> 数据放在服务器上，安全性相对较高；</li>\n</ol>\n<h2 id=\"7-常见面试题\"><a href=\"#7-常见面试题\" class=\"headerlink\" title=\"7. 常见面试题\"></a>7. 常见面试题</h2><h3 id=\"7-1-TCP-连接为什么不是-2-次，而是-3-次？\"><a href=\"#7-1-TCP-连接为什么不是-2-次，而是-3-次？\" class=\"headerlink\" title=\"7.1 TCP 连接为什么不是 2 次，而是 3 次？\"></a>7.1 TCP 连接为什么不是 2 次，而是 3 次？</h3><p>因为考虑到连接时丢包的问题，如果是 2 次，那么第二次握手时如果服务器响应给客户端的确认报文段丢失，但此时服务器端已经准备好接收数据，而客户端一直没收到服务端的确认报文，客户端就不清楚服务端是否已经准备好了。这样一来，客户端既不会向服务端发送数据，也会忽略服务端所发送过来的数据。</p>\n<h3 id=\"7-2-发出-4-次挥手的确认报文后为什么要等-2MSL-的时间才能释放-TCP-连接？\"><a href=\"#7-2-发出-4-次挥手的确认报文后为什么要等-2MSL-的时间才能释放-TCP-连接？\" class=\"headerlink\" title=\"7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？\"></a>7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？</h3><p>同样是出于考虑丢包问题，若第四次挥手的报文丢失，服务器未确认 Ack 报文就会重发第三次挥手的报文，若报文一来一去的最常时间就是 2 MSL，所以需要等这么长时间来确认服务端确实已经收到。</p>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-计算机网络基础\"><a href=\"#1-计算机网络基础\" class=\"headerlink\" title=\"1. 计算机网络基础\"></a>1. 计算机网络基础</h2><h3 id=\"1-1-主机间的通信方式\"><a href=\"#1-1-主机间的通信方式\" class=\"headerlink\" title=\"1.1 主机间的通信方式\"></a>1.1 主机间的通信方式</h3><ol>\n<li><strong>客户端-服务器（C/S）</strong></li>\n</ol>\n<p>客户端是服务的请求放，服务器是服务的提供方。</p>\n<ol>\n<li><strong>对等（P2P）</strong></li>\n</ol>\n<p>不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。</p>\n<h3 id=\"1-2-电路-amp-分组交换\"><a href=\"#1-2-电路-amp-分组交换\" class=\"headerlink\" title=\"1.2 电路 &amp; 分组交换\"></a>1.2 电路 &amp; 分组交换</h3><ol>\n<li><strong>分组交换</strong></li>\n</ol>\n<p>每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不影响，因此在同一条传输线路上允许同时传输多个分组，即分组交换不会占用传输线路。</p>\n<ol>\n<li><strong>电路交换</strong></li>\n</ol>\n<p>电路交换用于电话通讯系统，两个用户之间建立通信前需要有一条专用的物理链路，而且在通信过程中始终占用该链路。由于通信过程中不可能一直在使用传输线路，因此电路交换对线路利用率很低，通常不到 10%.</p>\n<h3 id=\"1-3-时延\"><a href=\"#1-3-时延\" class=\"headerlink\" title=\"1.3 时延\"></a>1.3 时延</h3><ol>\n<li><strong>排队时延</strong></li>\n</ol>\n<p>分组在路由器的输入和输出队列中排队等待所需时间，取决于当前网络的通信量；</p>\n<ol>\n<li><strong>处理时延</strong></li>\n</ol>\n<p>主机或路由器接收到分组时进行处理所需时间，一般这些处理包括分析首部、从分组中提取数据、进行差错校验或查找适当路由等；</p>\n<ol>\n<li><strong>传输时延</strong></li>\n</ol>\n<p>主机或路由器传输数据帧所需时间：</p>\n<script type=\"math/tex; mode=display\">delay = length(bit)/v(bit/s)</script><p>其中 <code>length</code> 表示数据帧的长度，<code>v</code> 表示传输速率；</p>\n<ol>\n<li><strong>传播时延</strong></li>\n</ol>\n<p>电磁波在信道中传输所需时间，电磁波传播速度无限接近于光速：</p>\n<script type=\"math/tex; mode=display\">delay = length(m)/v(m/s)</script><p>其中 <code>length</code> 表示信道的长度，<code>v</code> 表示电磁波在信道中的传播速度；</p>\n<h3 id=\"1-4-体系结构\"><a href=\"#1-4-体系结构\" class=\"headerlink\" title=\"1.4 体系结构\"></a>1.4 体系结构</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/a468e849bf48b218f0a3266e1d9cd5b9.png\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>体系结构</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>RJ45、CLOCK、IEEE802.3（中继器、集线器）</td>\n</tr>\n<tr>\n<td>数据链路</td>\n<td>PPP、FR、HDLC、VLAN、MAC（网桥、交换机）</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP（HTTP/S、FTP、POP3、SMTP、TENET、SSH）、UDP（BOOTP、NTP、DHCP）、SPX</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>NFS、SQL、NETBIOS、RPC</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>JPEG、MPEG、ASII</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>FTP、DNS、Telenet、SMTP、HTTP、WWW、NFS</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li><strong>OSI 七层体系结构</strong></li>\n</ol>\n<p>为把在一个网络结构下开发的系统与在另一个网络结构下开发的系统互联起来，以实现更高一级的应用，使异种机之间的通信成为可能，便于网络结构标准化，国际标准化组织（ISO）于1984年形成了开放系统互连参考模型OSI/RM（Open Systems Interconnection Reference Model，简称OSI）的正式文件。</p>\n<ul>\n<li><p><strong>物理层（Physical，PH）：</strong> 传递信息需要利用一些物理传输媒体，如双绞线、同轴电缆、光纤等。物理层的任务就是为上层提供一个物理的连接，以及该物理连接表现出来的机械、电气、功能和过程特性，实现透明的比特流传输。在这一层，数据还没有组织，仅作为原始的比特流提交给上层——数据链路层。</p>\n</li>\n<li><p><strong>数据链路层（Data-link，D）</strong>：数据链路层负责在2个相邻的结点之间的链路上实现无差错的数据帧传输。每一帧包括一定的数据和必要的控制信息，在接收方接收到数据出错时要通知发送方重发，直到这一帧无差错地到达接收结点，数据链路层就是把一条有可能出错的实际链路变成让网络层看起来像不会出错的数据链路。实现的主要功能有：帧的同步、差错控制、流量控制、寻址、帧内定界、透明比特组合传输等。</p>\n</li>\n<li><p><strong>网络层（Network，N）</strong>：网络中通信的2个计算机之间可能要经过许多结点和链路，还可能经过几个通信子网。网络层数据传输的单位是分组（Packet）。网络层的主要任务是为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机，交付给目的主机的传输层。</p>\n</li>\n<li><p><strong>传输层（Transport，T）</strong>：传输层的主要任务是通过通信子网的特性，最佳地利用网络资源，并以可靠与经济的方式为2个端系统的会话层之间建立一条连接通道，以透明地传输报文。传输层向上一层提供一个可靠的端到端的服务，使会话层不知道传输层以下的数据通信的细节。传输层只存在端系统中，传输层以上各层就不再考虑信息传输的问题了。</p>\n</li>\n<li><p><strong>会话层（Session，S）</strong>：在会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制。如服务器验证用户登录便是由会话层完成的。</p>\n</li>\n<li><p><strong>表示层（Presentation，P）</strong>：这一层主要解决用户信息的语法表示问题。它将要交换的数据从适合某一用户的抽象语法，转换为适合OSI内部表示使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工作都由表示层负责。</p>\n</li>\n<li><p><strong>应用层（Application，A）</strong>：这是OSI参考模型的最高层。应用层确定进程之间通信的性质以满足用户的需求，以及提供网络与用户软件之间的接口服务。</p>\n</li>\n</ul>\n<ol>\n<li><strong>五层协议</strong></li>\n</ol>\n<p>我们日常网络中使用的体系结构，总共可以分为 5 层，分别是：</p>\n<ul>\n<li><strong>应用层</strong> ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</li>\n<li><strong>传输层</strong> ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</li>\n<li><strong>网络层</strong> ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。</li>\n<li><strong>数据链路层</strong> ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</li>\n<li><strong>物理层</strong> ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</li>\n</ul>\n<ol>\n<li><strong>TCP/IP</strong> </li>\n</ol>\n<p>不严格遵循 OSI 分层概念，只有四层，相当于将五层协议中的数据链路层和物理层合并为网络结构层。</p>\n<h2 id=\"2-五层协议详解\"><a href=\"#2-五层协议详解\" class=\"headerlink\" title=\"2. 五层协议详解\"></a>2. 五层协议详解</h2><h3 id=\"2-1-物理层\"><a href=\"#2-1-物理层\" class=\"headerlink\" title=\"2.1 物理层\"></a>2.1 物理层</h3><p>物理层上传送的数据单位是比特，其作用是实现相邻计算机节点间比特流的透明传送，尽可能屏蔽调具体传输介质和屋里设备的差异。根据信息在传输线上的传输方向，可以分为如下三种通信方式：</p>\n<ul>\n<li>单工通信：单向传输</li>\n<li>半双工通信：双向交替传输</li>\n<li>全双工通信：双向同时传输</li>\n</ul>\n<h3 id=\"2-2-链路层\"><a href=\"#2-2-链路层\" class=\"headerlink\" title=\"2.2 链路层\"></a>2.2 链路层</h3><p>两台主机之间的数据传输，总是在一段一段的链路上进行传送的，此时就需要使用专门的链路层协议。在两个相邻节点间传输数据时，数据链路层将网络层交下来的 IP 数据包组装成帧，在两个相邻节点间的链路上传送帧，每帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>\n<h3 id=\"2-3-网络层\"><a href=\"#2-3-网络层\" class=\"headerlink\" title=\"2.3 网络层\"></a>2.3 网络层</h3><p>互联网的核心，向上提供数据报服务，通过 IP 协议将异构的物理网络连接起来。其任务是选择合适的网间路由和交换节点，从而确保计算机通信的数据及时传送，配套使用的有如下三个协议：</p>\n<ul>\n<li><strong>地址解析协议 ARP</strong></li>\n<li><strong>网际控制报文协议 ICMP</strong></li>\n<li><strong>网际组管理协议 IGMP</strong></li>\n</ul>\n<h3 id=\"2-4-传输层\"><a href=\"#2-4-传输层\" class=\"headerlink\" title=\"2.4 传输层\"></a>2.4 传输层</h3><p>传输层提供了进程间的逻辑通信，负责向两台主机进程之间的通信提供通用的 <strong>数据传输服务</strong>，向高层用户屏蔽网络层的核心细节，这一层中主要涉及 UDP 和 TCP 两个协议。</p>\n<h3 id=\"2-5-应用层\"><a href=\"#2-5-应用层\" class=\"headerlink\" title=\"2.5 应用层\"></a>2.5 应用层</h3><p>应用层的任务是通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间的通信和交互的规则。</p>\n<p>对于不同的网络应用需要不同的应用层协议，常见的有 DNS、HTTP、SMTP 协议等；</p>\n<h2 id=\"3-HTTP\"><a href=\"#3-HTTP\" class=\"headerlink\" title=\"3. HTTP\"></a>3. HTTP</h2><h3 id=\"3-1-HTTP-基础\"><a href=\"#3-1-HTTP-基础\" class=\"headerlink\" title=\"3.1 HTTP 基础\"></a>3.1 HTTP 基础</h3><ol>\n<li><strong>URI（统一资源标识符）</strong></li>\n</ol>\n<blockquote>\n<p>  URI = URL + URN</p>\n</blockquote>\n<p>URL：统一资源 <strong>定位</strong> 符，标示一个具体的资源位置</p>\n<p>URN：统一资源名称</p>\n<ol>\n<li><strong>请求报文</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6b09a3bc1b49c1cb772d6eedce2f66a9.png\" alt=\"\"></p>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>请求行</strong>：包括请求方法、URL、协议/版本</li>\n<li><strong>请求头</strong>：<code>Request Header</code></li>\n<li><strong>请求正文</strong></li>\n</ul>\n<ol>\n<li><strong>响应报文</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b5a6afaaab6917b98040b871ca963f00.png\" alt=\"\"></p>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>状态行</strong></li>\n<li><strong>响应头</strong></li>\n<li><strong>响应正文</strong></li>\n</ul>\n<h3 id=\"3-2-HTTP-方法\"><a href=\"#3-2-HTTP-方法\" class=\"headerlink\" title=\"3.2 HTTP 方法\"></a>3.2 HTTP 方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>GET</code></td>\n<td>请求指定页面信息，并返回实体主体</td>\n</tr>\n<tr>\n<td><code>POST</code></td>\n<td>传输实体主体，向指定资源提交数据进行处理请求，数据被包含在请求体中，可能会导致新资源的建立和/或已有资源的修改</td>\n</tr>\n<tr>\n<td><code>PUT</code></td>\n<td>从客户端向服务器传送的数据取代指定文档的内容，上传文件 ，不带验证机制，存在安全性问题</td>\n</tr>\n<tr>\n<td><code>DELETE</code></td>\n<td>请求服务器删除指定页面，一般是删除文件</td>\n</tr>\n<tr>\n<td><code>HEAD</code></td>\n<td>获取报文首部，类似于 <code>GET</code>，但不返回报文实体主体部分，主要用于确认 URL 的有效性以及资源更新时间等</td>\n</tr>\n<tr>\n<td><code>PATCH</code></td>\n<td>对资源进行部分修改</td>\n</tr>\n<tr>\n<td><code>OPTIONS</code></td>\n<td>查询支持的方法，查询指定的 URL 能支持的方法，返回 <code>Allow: GET,POST,HEAD,OPTIONS</code> 等内容</td>\n</tr>\n<tr>\n<td><code>CONNECT</code></td>\n<td>要求在于代理服务器通信时建立隧道，使用 SSL 和 TLS 协议将通信内容加密后经网络隧道传输</td>\n</tr>\n<tr>\n<td><code>TRACE</code></td>\n<td>追踪路径，服务器将通信路径返回给客户端</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-3-HTTP-状态码\"><a href=\"#3-3-HTTP-状态码\" class=\"headerlink\" title=\"3.3 HTTP 状态码\"></a>3.3 HTTP 状态码</h3><p>服务器返回的响应报文中的第一行是状态行，包含状态码以及原因短语，用于告知客户端请求的结果，主要分为如下类型，常见的状态码如下：</p>\n<ul>\n<li><strong>1xx - 信息型</strong>：服务器收到请求，需要请求者继续操作；</li>\n<li><strong>2xx - 成功型</strong>：请求成功收到，理解并处理；</li>\n<li><strong>3xx - 重定向</strong>：需要进一步操作以完成请求；</li>\n<li><strong>4xx - 客户端错误</strong>：请求包含语法错误或无法完成请求；</li>\n<li><strong>5xx - 服务器错误</strong>：服务器在处理请求的过程中发生了错误；</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td><code>Continue</code></td>\n<td>到目前为止很正常，客户端能继续发送请求或忽略该响应</td>\n</tr>\n<tr>\n<td>200</td>\n<td><code>OK</code></td>\n<td>表示请求成功</td>\n</tr>\n<tr>\n<td>204</td>\n<td><code>No Content</code></td>\n<td>请求已经成功处理，但返回的响应报文不含实体的主体部分，一般只需要从客户端向服务器发送信息，而无需返回数据时使用</td>\n</tr>\n<tr>\n<td>206</td>\n<td><code>Partial Content</code></td>\n<td>表示客户端进行范围请求，响应报文包含由 <code>Content-Range</code> 指定范围的实体内容</td>\n</tr>\n<tr>\n<td>301</td>\n<td><code>Moved Permanently</code></td>\n<td>永久性重定向</td>\n</tr>\n<tr>\n<td>302</td>\n<td><code>Found</code></td>\n<td>临时性重定向</td>\n</tr>\n<tr>\n<td>303</td>\n<td><code>See Other</code></td>\n<td>和 302 功能相同，但 303 明确要求客户端应该采用 <code>GET</code> 方法获取资源</td>\n</tr>\n<tr>\n<td>304</td>\n<td><code>Not Modified</code></td>\n<td>若请求报文首部包含一些条件，如 <code>If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since</code>，若不满足条件，则服务器返回 304</td>\n</tr>\n<tr>\n<td>307</td>\n<td><code>Temporary Redirect</code></td>\n<td>临时重定向，类似于 302，但 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法</td>\n</tr>\n<tr>\n<td>400</td>\n<td><code>Bad Request</code></td>\n<td>请求报文中存在语法错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td><code>Unauthorized</code></td>\n<td>该状态码表示发送的请求需要有认证信息</td>\n</tr>\n<tr>\n<td>403</td>\n<td><code>Forbidden</code></td>\n<td>请求被拒绝</td>\n</tr>\n<tr>\n<td>404</td>\n<td><code>Not Found</code></td>\n<td>请求的页面不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td><code>Internal Server Error</code></td>\n<td>服务器正在执行请求时发生错误</td>\n</tr>\n<tr>\n<td>503</td>\n<td><code>Service Unavailable</code></td>\n<td>服务器暂时处于超负载或正进行停机维护，现在无法处理请求</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-4-HTTP-首部\"><a href=\"#3-4-HTTP-首部\" class=\"headerlink\" title=\"3.4 HTTP 首部\"></a>3.4 HTTP 首部</h3><p>有 4 中类型的首部字段：</p>\n<ul>\n<li><strong>通用首部字段</strong></li>\n<li><strong>请求首部字段</strong></li>\n<li><strong>响应首部字段</strong></li>\n<li><strong>实体首部字段</strong></li>\n</ul>\n<h3 id=\"3-5-GET-vs-POST\"><a href=\"#3-5-GET-vs-POST\" class=\"headerlink\" title=\"3.5 GET vs POST\"></a>3.5 GET vs POST</h3><ol>\n<li><strong>作用不同</strong></li>\n</ol>\n<p><code>GET</code> 用于获取资源，一般是查询，而 <code>POST</code> 用于传输实体主体，一般是提交；</p>\n<ol>\n<li><strong>参数不同</strong></li>\n</ol>\n<p><code>GET</code> 和 <code>POST</code> 的请求都能使用额外参数，但 <code>GET</code> 的参数以查询字符串出现在 URL 中，不会对服务器中的内容产生作用，但 <code>POST</code> 的参数存储在实体主体中。但是 <code>POST</code> 的安全性也不能说很高，我们仍然可以用抓包工具来进行查看。另一方面，URL 只支持 ASCII，因此 GET 的参数中若有中文等字符时需要先进行编码，但是 POST 的参数支持标准字符集；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>GET 方法是安全的，因为它不会改变服务器的状态。但是 POST  非安全，因为 POST 的目的是传送实体主体内容，内容可能是用户上传的表单数据，一旦上传成功，服务器就可能把该数据存入数据库，此时状态也就发生了改变。</p>\n<p>安全的方法：<code>GET、HEAD、OPTIONS</code>；</p>\n<p>不安全的方法：<code>POST、PUT、DELETE</code>；</p>\n<ol>\n<li><strong>幂等性</strong></li>\n</ol>\n<p>幂等的 HTTP 方法，同样的请求被执行一次和被连续执行多次的效果是一样的，服务器的状态也一样，即幂等的方法不具有副作用，因此所有安全的方法也都是幂等的。</p>\n<p>一般来说，<code>GET、HEAD、PUT、DELETE</code> 等方法都是幂等的，但 <code>POST</code> 不是。</p>\n<ol>\n<li><strong>可缓存</strong></li>\n</ol>\n<p>若要对响应进行缓存，则应该满足一下条件：</p>\n<ul>\n<li>请求报文的 HTTP 方法本身是可缓存的，包括 <code>GET、HEAD</code>，但是 <code>PUT、DELETE</code> 不可缓存，<code>POST</code> 在大多数情况下是不可缓存的；</li>\n<li>响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、411、501；</li>\n<li>响应报文的 <code>Cache-Control</code> 首部字段未指定则不进行缓存； </li>\n</ul>\n<h2 id=\"4-HTTP-和-HTTPS\"><a href=\"#4-HTTP-和-HTTPS\" class=\"headerlink\" title=\"4. HTTP 和 HTTPS\"></a>4. HTTP 和 HTTPS</h2><h3 id=\"4-1-什么是-HTTP-S-协议？\"><a href=\"#4-1-什么是-HTTP-S-协议？\" class=\"headerlink\" title=\"4.1 什么是 HTTP/S 协议？\"></a>4.1 什么是 HTTP/S 协议？</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP（Hyper Text Transfer Protocol），<strong>超文本传输协议</strong>，它是从 Web 服务器传输超文本标记语言（HTML）到本地浏览器的传送协议。</p>\n<p>HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；</p>\n<ol>\n<li><strong>HTTPS</strong></li>\n</ol>\n<p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），以安全为目标的 HTTP 通道，通俗来讲就是 HTTP 的安全版，加入了 SSL/TLS 层，通过 SSL 证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。HTTPS 的安全基础是 SSL，其主要作用有如下两种：</p>\n<ul>\n<li>建立一个信息安全通道，来保证数据传输的安全；</li>\n<li>确认网站真实性；</li>\n</ul>\n<h3 id=\"4-2-HTTP-S-特点\"><a href=\"#4-2-HTTP-S-特点\" class=\"headerlink\" title=\"4.2 HTTP/S 特点\"></a>4.2 HTTP/S 特点</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<ul>\n<li>HTTP 支持 C/S 模式，是一种 <strong>请求/响应模式</strong> 的协议；</li>\n<li><strong>简单快速</strong>：客户向服务器请求服务时，只需要传送请求方法和路径，常用方法有 <code>GET、POST、HEAD</code>；</li>\n<li><strong>灵活</strong>：HTTP 允许传输任意类型的数据对象，传输数据的类型由 <code>Content - Type</code> 来标记；</li>\n<li><strong>无连接</strong>：限制每次连接只处理一个请求，服务器处理完请求并受到客户的应答后，会断开连接，但是不利于客户端和服务器保持会话连接；</li>\n<li><strong>无状态</strong>：值协议对于事务处理没有回忆，后续处理如果需要前面的信息，则必须重传；</li>\n</ul>\n<h3 id=\"4-2-HTTP-S-原理\"><a href=\"#4-2-HTTP-S-原理\" class=\"headerlink\" title=\"4.2 HTTP/S 原理\"></a>4.2 HTTP/S 原理</h3><ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP 是 <strong>基于 TCP/IP 通信协议来传递数据的协议</strong>，传输的数据类型有 HTML 文件、图片文件、查询结果等。此外，HTTP 协议一般用于 <code>B/S</code> 架构，浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务器即 Web 服务器发送所有请求；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6ed01a44de3bc699551d355ec5cb400e.png\" alt=\"\"></p>\n<ol>\n<li><strong>HTTPS</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e83d235b519cb62cfe22fec281fbe7d5.png\" alt=\"\"></p>\n<p>如上图，使用 HTTPS 传输数据的流程如下：</p>\n<ol>\n<li>首先客户端通过 URL 访问服务器建立 SSL 连接；</li>\n<li>服务器收到客户端请求后，将网站支持的证书信息（其中包含公钥）传送一份给客户端；</li>\n<li>客户端的服务器开始协商 SSL 连接的安全等级，即信息加密的等级；</li>\n<li>客户端的浏览器根据双方同意的安全等级，建立会话秘钥，然后利用网站的公钥将会话秘钥加密，并传送给网站；</li>\n<li>服务器利用自己的秘钥解密出会话秘钥；</li>\n<li>服务器利用会话秘钥加密与客户端之间的通信；</li>\n</ol>\n<h3 id=\"4-3-HTTP-和-HTTPS-的区别\"><a href=\"#4-3-HTTP-和-HTTPS-的区别\" class=\"headerlink\" title=\"4.3 HTTP 和 HTTPS 的区别\"></a>4.3 HTTP 和 HTTPS 的区别</h3><p>HTTP 协议传输的数据都是未经加密的，即明文的，因此使用 HTTP 协议传输隐私信息不安全。为了保证隐私数据能够加密传输，于是使用 SSL 协议用于对 HTTP 协议传输的数据进行加密，即 HTTPS；</p>\n<p>HTTPS 协议是 HTTP + SSL 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全，两者的区别主要有：</p>\n<ol>\n<li>HTTPS 需要到 CA 申请证书，一般免费证书较少，因此需要一定费用；</li>\n<li>HTTP 是超文本传输信息，信息是明文传输；HTTPS 是具有安全性的 SSL 加密传输协议；</li>\n<li>HTTP 和 HTTPS 使用的是完全不同的连接方式，HTTP 默认使用 <code>80</code> 端口，而 HTTPS 默认使用 <code>443</code> 端口；</li>\n<li>HTTP 的连接简单，是无状态的；而 HTTPS 是 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全；</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>HTTP</th>\n<th>HTTPS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>协议</td>\n<td>基于 TCP，明文传输，<strong>客户端与服务器端均无法验证对方身份</strong></td>\n<td>HTTP + SSL，运行于 TCP 之上，<strong>添加了加密和认证机制的 HTTP</strong></td>\n</tr>\n<tr>\n<td>端口</td>\n<td>80</td>\n<td>443</td>\n</tr>\n<tr>\n<td>资源消耗</td>\n<td>较少</td>\n<td>由于加解密操作，将消耗更多的 CPU 和内存资源</td>\n</tr>\n<tr>\n<td>开销</td>\n<td>无需证书</td>\n<td>需要证书，一般是向认证机构购买</td>\n</tr>\n<tr>\n<td>加密机制</td>\n<td>无</td>\n<td>共享秘钥加密和公开秘钥加密并用的混合加密机制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>弱</td>\n<td>强</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-TCP-VS-UDP\"><a href=\"#5-TCP-VS-UDP\" class=\"headerlink\" title=\"5. TCP VS UDP\"></a>5. TCP VS UDP</h2><h3 id=\"5-1-TCP-和-UDP-的特点\"><a href=\"#5-1-TCP-和-UDP-的特点\" class=\"headerlink\" title=\"5.1 TCP 和 UDP 的特点\"></a>5.1 TCP 和 UDP 的特点</h3><ol>\n<li><strong>TCP</strong></li>\n</ol>\n<p>TCP（传输控制协议，Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供 <strong>全双工通信，面向字节流</strong> （将应用层传下来的报文当做字节流，将字节流组织为大小不等的数据块），每条 TCP 连接只能是 <strong>点对点（一对一）</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向连接</strong></li>\n<li><strong>仅支持单播</strong></li>\n<li><strong>面向字节流</strong></li>\n<li><strong>可靠性</strong></li>\n<li><strong>提供拥塞控制以及全双工通信</strong></li>\n</ul>\n<ol>\n<li><strong>UDP</strong></li>\n</ol>\n<p>UDP（用户数据表协议，User Datagram Protocol）是面向无连接的，尽最大可能交付，无拥塞控制，<strong>面向报文</strong>（对应用层中传下来的报文不合并也不拆分，只添加 UDP 首部），支持 <strong>一对一、一对多、多对一和对多点的交互通信</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向无连接</strong></li>\n<li><strong>有单播、多播、广播的功能</strong></li>\n<li><strong>面向报文</strong></li>\n<li><strong>不可靠性</strong></li>\n<li><strong>头部开销小，传输数据时高效</strong></li>\n</ul>\n<h3 id=\"5-2-TCP-VS-UDP\"><a href=\"#5-2-TCP-VS-UDP\" class=\"headerlink\" title=\"5.2 TCP VS UDP\"></a>5.2 TCP VS UDP</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否连接</td>\n<td>面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>是否可靠</td>\n<td>可靠传输，使用流量控制和拥塞控制</td>\n<td>不可靠传输，不使用流量控制和拥塞控制</td>\n</tr>\n<tr>\n<td>连接对象个数</td>\n<td>只能一对一</td>\n<td>支持一对一、一对多、多对一和多对多</td>\n</tr>\n<tr>\n<td>传输方式</td>\n<td>面向字节流</td>\n<td>面向报文</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td>首部最小 20 字节，最大 60 字节</td>\n<td>首部开销小，仅 8 字节</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>传输可靠，比如文件传输等</td>\n<td>实时应用，比如视频会议、直播等</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"5-3-三次握手以及四次挥手\"><a href=\"#5-3-三次握手以及四次挥手\" class=\"headerlink\" title=\"5.3 三次握手以及四次挥手\"></a>5.3 三次握手以及四次挥手</h3><ol>\n<li><strong>三次握手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次握手</strong>：客户端向服务端发送连接请求报文段，报文段中含有自身的数据通讯初始序号。请求发送后，客户端进入 <code>SYN-SENT</code> 状态；</li>\n<li><strong>第二次握手</strong>：服务端接收到来自客户端的连接请求报文，如果同意就会发送一个响应，响应中也会包含自身的数据通讯初始序号，发送完成后进入 <code>SYN-RECEIVED</code> 状态；</li>\n<li><strong>第三次握手</strong>：客户端收到来自服务端同意连接的响应后，再次向服务端发送一个确认报文。客户端发送完该报文后进行 <code>ESTABLISHED</code> 状态，服务端收到该应答后也进入 <code>ESTABLISHED</code> 状态，此时连接就建立成功了。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1d5ac6b297456fd31f8e4b9c518f0e53.png\" alt=\"源自 ThinkWon 博客\"></p>\n<ol>\n<li><strong>四次挥手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次挥手：</strong> 一旦客户端 A 认为数据发送完成，则向服务端 B 发送请求释放请求；</li>\n<li><strong>第二次挥手：</strong> 服务端 B 收到连接释放请求后，将告知应用层释放 TCP 连接，接着发送 ACK 包并进入 <code>CLOST_WAIT</code> 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据。但是 TCP 是双向通信的，所以 B 此时仍可以向 A 发送数据；</li>\n<li><strong>第三次挥手：</strong> 若 B 此时还有未发送完的数据，就会继续发送直到完毕，然后向 A 发送连接释放请求，接着 B 进入 <code>LAST-ACK</code> 状态；</li>\n<li><strong>第四次挥手：</strong> A 收到释放请求后，向 B 发送确认应答，此时 A 进入 <code>TIME-WAIT</code> 状态并持续一段时间（一般是 2MSL），若在该时间段内没有来自 B 的重发请求，就进入 <code>CLOSED</code> 状态。当 B 收到确认应答后，也进入 <code>CLOSE</code> 状态。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b606acad67d96dfe7b05087d9f9c5da6.png\" alt=\"图源自 Thinkwon 博客\"></p>\n<h2 id=\"6-Session-vs-Cookie\"><a href=\"#6-Session-vs-Cookie\" class=\"headerlink\" title=\"6. Session vs Cookie\"></a>6. Session vs Cookie</h2><h3 id=\"6-1-Session-和-Cookie-的定义\"><a href=\"#6-1-Session-和-Cookie-的定义\" class=\"headerlink\" title=\"6.1 Session 和 Cookie 的定义\"></a>6.1 Session 和 Cookie 的定义</h3><h4 id=\"6-1-1-什么是-cookie\"><a href=\"#6-1-1-什么是-cookie\" class=\"headerlink\" title=\"6.1.1 什么是 cookie\"></a>6.1.1 什么是 cookie</h4><p><code>cookie</code> 是由 Web 服务器保存在用户浏览器上的小文件（<code>key-value</code> 格式），包含用户相关信息。客户端向服务器发起请求，若服务器需要记录该用户状态，则使用 <code>response</code> 向客户端浏览器颁发一个 <code>cookie</code>。客户端浏览器将 <code>cookie</code> 保存起来，当浏览器再请求该网站时，浏览器将请求的网址连同该 <code>cookie</code> 一起提交给服务器，服务器检查该 <code>cookie</code>，以此来确认用户身份。</p>\n<h4 id=\"6-1-2-什么是-session\"><a href=\"#6-1-2-什么是-session\" class=\"headerlink\" title=\"6.1.2 什么是 session\"></a>6.1.2 什么是 session</h4><p><code>session</code> 依赖于 <code>cookie</code> 实现，<code>session</code> 是服务端对象。<code>session</code> 浏览器和服务器会话过程中，服务器分配的一块存储空间。服务器默认为浏览器在 <code>cookie</code> 中设置 <code>sessionid</code>，浏览器在向服务器请求过程中传输 <code>cookie</code> 包含 <code>sessionid</code>，服务器将根据 <code>sessionid</code> 获取出会话中存储的信息，然后确认会话的身份信息。</p>\n<h3 id=\"6-2-Session-和-Cookie-的区别\"><a href=\"#6-2-Session-和-Cookie-的区别\" class=\"headerlink\" title=\"6.2 Session 和 Cookie 的区别\"></a>6.2 Session 和 Cookie 的区别</h3><ol>\n<li><strong>存储空间</strong>：单个 <code>cookie</code> 所保存的数据不能超过 4k，许多浏览器都会限制一个站点最多能保存的 <code>cookie</code> 数（一般是 20），但是 <code>session</code> 没有该限制；</li>\n<li><strong>占用服务器资源</strong>：<code>session</code> 一定时间保存在服务器上，当访问增多时，占用服务器性能，考虑到服务器性能方面，应当使用 <code>cookie</code>；</li>\n<li><strong>存储位置与安全性</strong>：<code>cookie</code> 数据放在客户端，安全性较差，<code>session</code> 数据放在服务器上，安全性相对较高；</li>\n</ol>\n<h2 id=\"7-常见面试题\"><a href=\"#7-常见面试题\" class=\"headerlink\" title=\"7. 常见面试题\"></a>7. 常见面试题</h2><h3 id=\"7-1-TCP-连接为什么不是-2-次，而是-3-次？\"><a href=\"#7-1-TCP-连接为什么不是-2-次，而是-3-次？\" class=\"headerlink\" title=\"7.1 TCP 连接为什么不是 2 次，而是 3 次？\"></a>7.1 TCP 连接为什么不是 2 次，而是 3 次？</h3><p>因为考虑到连接时丢包的问题，如果是 2 次，那么第二次握手时如果服务器响应给客户端的确认报文段丢失，但此时服务器端已经准备好接收数据，而客户端一直没收到服务端的确认报文，客户端就不清楚服务端是否已经准备好了。这样一来，客户端既不会向服务端发送数据，也会忽略服务端所发送过来的数据。</p>\n<h3 id=\"7-2-发出-4-次挥手的确认报文后为什么要等-2MSL-的时间才能释放-TCP-连接？\"><a href=\"#7-2-发出-4-次挥手的确认报文后为什么要等-2MSL-的时间才能释放-TCP-连接？\" class=\"headerlink\" title=\"7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？\"></a>7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？</h3><p>同样是出于考虑丢包问题，若第四次挥手的报文丢失，服务器未确认 Ack 报文就会重发第三次挥手的报文，若报文一来一去的最常时间就是 2 MSL，所以需要等这么长时间来确认服务端确实已经收到。</p>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n"},{"title":"【剑指 Java】第 2 弹：剑指大厂，这份数据库面试总结请收好","abbrlink":"da8b2920","date":"2021-05-02T14:49:32.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 数据库基础\n\n### 1.1 使用数据库的优点\n\n最开始，我们是将数据保存在 **内存** 中，这能够保证我们十分 **快速存取，但是一旦断电，数据就丢失了，无法永久保存。** 于是我们将数据存放在 **文件** 中，这样一来我们就 **能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。** 于是，我们转移到了 **数据库** 存储，通过这种方式不但 **能将永久保存数据，而且查询管理也更加高效方便**。\n\n### 1.2 什么是 MySQL\n\nMySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 **3306**。\n\n### 1.3 数据库三大范式\n\n1.  **第一范式：属性原子性**\n\n最基本的范式，若数据库表中 **所有字段值均为不可分解的原子值**，则满足第一范式；\n\n2.  **第二范式：记录唯一性，确保表中每列均与主键相关**\n\n在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 **在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中**；\n\n3.  **第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖**\n\n在第二范式的基础上，确保数据表中的 **每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生**；\n\n### 1.4 MySQL 中自带的权限表\n\nMySQL 通过权限表来控制用户对数据库的访问，一般是存放在 `mysql` 表中，由 `mysql_install_db` 脚本进行初始化，分别包括：\n\n-   **user**：记录允许连接服务器的用户账号信息，权限是全局性的；\n-   **db**：记录各个账号在不同数据库上的操作权限；\n-   **table_priv**：记录数据表级别的操作权限；\n-   **columns_priv**：记录数据列级别的操作权限；\n-   **host**：配合 **db** 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 **GRANT** 和 **REVOKE** 的影响；\n\n## 2. 数据类型\n\n主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：\n\n![](https://img-blog.csdnimg.cn/img_convert/c514a82df9148a272a3b6e9bfcc7b328.png)\n\n| **分类**           | **类型名称**   | **说明**                                                     |\n| ------------------ | -------------- | ------------------------------------------------------------ |\n| **整数类型**       | `tinyInt`      | 很小的整数(8位二进制)                                        |\n|                    | `smallint`     | 小的整数(16位二进制)                                         |\n|                    | `mediumint`    | 中等大小的整数(24位二进制)                                   |\n|                    | `int(integer)` | 普通大小的整数(32位二进制)                                   |\n| **实数类型**       | `float`        | 单精度浮点数                                                 |\n|                    | `double`       | 双精度浮点数                                                 |\n|                    | `decimal(m,d)` | 压缩严格的定点数                                             |\n| **枚举类型**       | `enum`         |                                                              |\n| **日期和时间类型** | `year`         | YYYY 1901~2155                                               |\n|                    | `time`         | HH:MM:SS -838:59:59~838:59:59                                |\n|                    | `date`         | YYYY-MM-DD 1000-01-01~9999-12-3                              |\n|                    | `datetime`     | YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59 |\n|                    | `timestamp`    | YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC |\n| **字符串类型**     | `CHAR(M)`      | M为0~255之间的整数                                           |\n|                    | `VARCHAR(M)`   | M为0~65535之间的整数                                         |\n|                    | `TINYBLOB`     | 允许长度0~255字节                                            |\n|                    | `BLOB`         | 允许长度0~65535字节                                          |\n|                    | `MEDIUMBLOB`   | 允许长度0~167772150字节                                      |\n|                    | `LONGBLOB`     | 允许长度0~4294967295字节                                     |\n|                    | `TINYTEXT`     | 允许长度0~255字节                                            |\n|                    | `TEXT`         | 允许长度0~65535字节                                          |\n|                    | `MEDIUMTEXT`   | 允许长度0~167772150字节                                      |\n|                    | `LONGTEXT`     | 允许长度0~4294967295字节                                     |\n|                    | `VARBINARY(M)` | 允许长度0~M个字节的变长字节字符串                            |\n|                    | `BINARY(M)`    | 允许长度0~M个字节的定长字节字符串                            |\n\n## 3. 存储引擎\n\n要查看 MySQL 中所提供的引擎，可以通过如下命令：\n\n>   ```sql\n>   show engines;\n>   ```\n\n![](https://img-blog.csdnimg.cn/img_convert/b2a33e5e2de9b003ed77c8073af985f2.png)\n\n### 3.1 常用存储引擎\n\n| 引擎     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| `InnoDB` | **提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束**，其设计目标是处理大数据 |\n| `MyIASM` | **默认引擎**，**不提供事务的支持，也不支持行级锁和外键**     |\n| `MEMORY` | 所有数据均存于内存，存取速度快，但是安全性低                 |\n\n### 3.2 InnoDB vs MyISAM\n\n-   InnoDB 的 4 大特性\n\n1.  **插入缓冲（Insert Buffer）**\n2.  **二次写（Double Write）**\n3.  **自适应哈希索引（Ahi）**\n4.  **预读（Read Ahead）**\n\n-   两者区别\n\n| 对比项               | MyISAM                                                       | Innodb                                                       |\n| -------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 存储结构             | 每张表被存放在三个文件：<br />1. `.frm`-表格定义<br />2. `.MYD`(MYData)-数据文件<br />3. `.MYI`(MYIndex)-索引文件 | 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB |\n| 存储空间             | 可被压缩，存储空间较小                                       | 需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引 |\n| 可移植性、备份及恢复 | 数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作 | 免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了 |\n| 文件格式             | 数据和索引是分别存储的，数据`.MYD`，索引`.MYI`               | 数据和索引是集中存储的，`.ibd`                               |\n| 记录存储顺序         | 按记录插入顺序保存                                           | 按主键大小有序插入                                           |\n| **外键**             | **不支持**                                                   | **支持**                                                     |\n| **事务**             | **不支持**                                                   | **支持（默认 REPEATABLE-READ）**                             |\n| **锁支持**           | **表级锁定**                                                 | **行级锁定、表级锁定，锁定力度小并发能力高**                 |\n| **MVVC 支持**        | **不支持**                                                   | **支持**                                                     |\n| **崩溃修复**         | **不支持**                                                   | **支持**                                                     |\n| **哈希索引**         | **不支持**                                                   | **支持**                                                     |\n| **全文索引**         | **支持**                                                     | **不支持**                                                   |\n| 查询性能             | 更佳                                                         |                                                              |\n| 增删改性能           |                                                              | 更佳                                                         |\n| 统计数据量           | 更快，内部维护了一个计数器，可以直接调取。                   |                                                              |\n| 索引的实现方式       | B+ 树索引，myisam 是堆表                                     | B+ 树索引，Innodb 是索引组织表                               |\n\n两者主要区别如下：\n\n1.  InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；\n2.  InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；\n3.  InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；\n\n### 3.3 如何选择存储引擎\n\n-   **MyISAM**：默认的 MySQL 插件式存储引擎，适合 **以读写插入为主**，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；\n-   **InnoDB**：用于事务处理应用程序，如果 **更新删除等操作频率也高**，或者要 **保证数据完整性**，支持 **高并发、外键和事务等**；\n-   **Memory**：将所有数据保存在 `RAM` 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；\n-   **Merge**：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；\n\n## 4. 存储过程\n\n### 4.1 定义\n\n存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL  语句和一些特殊的控制结构组成。优点是 **允许模块化设计，即一次创建，多次调用。** 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。\n\n### 4.2 优缺点\n\n-   **优点**\n\n1.  由于是预编译，所以执行效率高；\n2.  存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；\n3.  安全性高，执行存储过程需要有一定权限的用户；\n4.  能够重复使用，提高开发效率；\n\n-   **缺点**\n\n1.  调试困难\n2.  移植困难\n3.  重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译\n4.  若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高 \n\n## 5. 事务\n\n### 5.1 事务定义\n\n事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。**即事务是逻辑上的一组操作，要么都执行，要么都不执行**。\n\n### 5.2 事务的 4 大特性\n\n关系型数据库都需要遵循 ACID 规则：\n\n1.  **原子性（Atomicity）**\n\n原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 **动作要么全部完成，要么完全不起作用。** **即事务是最小的执行单位，不允许分割**。\n\n2.  **一致性（Consistency）**\n\n指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。**在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同**。\n\n3.  **隔离性（Isolation）**\n\n并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；\n\n4.  **持久性（Durability）**\n\n表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；\n\n### 5.3 事务隔离级别\n\n#### 5.3.1 脏读、幻读 & 不可重复读\n\n了解事务隔离级别之前，先来看看这几个读的概念：\n\n1.  **脏读（Dirty Read）**\n\n表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。\n\n2.  **幻读（Phantom Read）**\n\n在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。\n\n3.  **不可重复读（Non-repeatable Read）**\n\n一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。\n\n**注意：不可重复读和幻读的区别在于：**\n\n>   **不可重复读的重点在于修改，** 比如多次读取一条记录发现其中某些列的值被修改，而 **幻读的重点在于新增或删除**，比如多次读取一条记录发现记录增多或减少了。\n\n#### 5.3.2 隔离级别\n\nSQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：\n\n1.  **READ-UNCOMMITTED（读取未提交）**\n\n最低的隔离级别，允许读取尚未提交的数据变更，**可能导致脏读、幻读或不可重复读**。\n\n2.  **READ-COMMITTED（读取已提交）**\n\n允许读取并发事务已经提交的数据，**能够阻止脏读，但可能导致幻读或不可重复读**。\n\n3.  **REPEATABLE-READ（可重复读）**\n\n对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，**能够阻止脏读和不可重复读，但可能导致幻读**。\n\n4.  **SERIALIZABLE（可串行化）**\n\n最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，**能够防止脏读、幻读以及不可重复读**、\n\n| 隔离级别           | 脏读 | 不可重复读 | 幻读 |\n| ------------------ | ---- | ---------- | ---- |\n| `READ-UNCOMMITTED` | ✔    | ✔          | ✔    |\n| `READ-COMMITTED`   | ❌    | ✔          | ✔    |\n| `REPEATABLE-READ`  | ❌    | ❌          | ✔    |\n| `SERIALIZABLE`     | ❌    | ❌          | ❌    |\n\n## 6. 锁\n\n### 6.1 定义\n\n当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。\n\n锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；\n\n### 6.2 事务隔离级别与锁的关系\n\n| 隔离级别           | 锁                                               |\n| ------------------ | ------------------------------------------------ |\n| `READ-UNCOMMITTED` | 读取无需加共享锁                                 |\n| `READ-COMMITTED`   | 读操作需要加共享锁，语句执行完后释放             |\n| `REPEATABLE-READ`  | 读操作需要加共享锁，事务执行完毕后释放           |\n| `SERIALIZABLE`     | **锁定整个范围的键**，并一直持有锁，直到事务完成 |\n\n### 6.3 数据库中死锁的定义及解决方法\n\n-   **定义**\n\n所谓死锁，**指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象**。\n\n-   **解决方法**\n\n1.  **若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；**\n2.  **同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；**\n3.  **对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；**\n\n### 6.4 乐观锁 & 悲观锁\n\n-   **定义**\n\n并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。\n\n1.  **乐观锁**\n\n假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 `version` 的方式来进行锁定，**一般使用版本号机制或CAS算法来实现** ；\n\n2.  **悲观锁**\n\n假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，**一般使用数据库中的锁机制来实现**；\n\n-   **使用场景**\n\n**乐观锁** 适合于 **读操作频繁，但写操作较少** 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；\n\n**悲观锁**  适合于 **写操作频繁，但读操作较少** 的情况，即冲突频发的场景；\n\n## 7. 索引\n\n### 7.1 定义\n\n所谓索引，就是一种特殊的文件，**包含数据表中所有记录的引用指针**。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。\n\n### 7.2 基本原理\n\n使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。\n\n索引的原理也很简单，即 **将无序数据变为有序的查询**，根据索引查询数据的步骤如下：\n\n1.  **将创建了索引的列的内容进行排序**\n2.  **对排序结果生成倒排表**\n3.  **在倒排内容上拼上数据地址链**\n4.  **在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据**\n\n### 7.3 索引优缺点\n\n-   **优点**\n\n1.  第一点毫无疑问是 **加快数据的检索速度**；\n2.  第二点则是 **通过使用索引，能够在查询过程中使用优化隐藏器，提高性能**。\n\n-   **缺点**\n\n1.  **时间方面**：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；\n2.  **空间方面**：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；\n\n### 7.4 索引类型\n\n#### 7.4.1 逻辑角度\n\n索引从逻辑角度主要可分为 4 种索引，分别是：\n\n1.  **主键索引**\n\n数据列不允许重复，不允许为 `NULL`，一个表中只能有一个主键；\n\n2.  **唯一索引**\n\n数据列不允许重复，允许为 `NULL` 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：\n\n-   **创建唯一索引**：`ALTER TABLE table_name ADD UNIQUE(column)`\n-   **创建唯一组合索引**：`ALTER TABLE table_name ADD UNIQUE(column1, column2)`；\n\n3.  **普通索引**\n\n最基本的索引类型，没有唯一性的限制，允许为 `NULL` 值，通过如下两种方式来创建唯一索引：\n\n-   **创建普通索引**：`ALTER TABLE table_name ADD INDEX index_name (column)`；\n-   **创建普通索引组合**：`ALTER TABLE table_name ADD INDEX index_name (column1, column2)`；\n\n4.  **全文索引**\n\n搜索引擎中也在使用的一种技术，通过 `ALTER TABLE table_name ADD FULLTEXT (column)` 来创建全文索引；\n\n5.  **组合索引**\n\n多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；\n\n#### 7.4.2 物理存储角度\n\n1.  **聚集索引（clustered index）**\n2.  **非聚集索引（non-clustered index）**\n\n#### 7.4.3 数据结构角度\n\n1.  **BTREE**\n2.  **HASH**\n3.  **FULLTEXT**\n4.  **R-Tree**\n\n### 7.5 索引算法\n\n常用的索引算法有 **Hash 算法 和 B 树算法**，分别多两个算法进行简单介绍：\n\n1.  **B+ 树算法**\n\n最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（`=、>、<、between` 等），也能够用于 `like` 操作符，只要其查询条件是一个 **不以通配符开头的常量**。底层实现的是 **多路平衡查找树**，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。\n\n2.  **Hash 算法**\n\nHash 算法索引只能用于对等比较（`=、>=、<=`），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 `Hash` 函数就能获取相应键值，然后进行回表查询获得实际数据。\n\n3.  **两者对比**\n\n-   Hash 索引进行等值查询更快，但是不能进行范围查询；\n-   Hash 索引不支持使用索引进行排序；\n-   Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；\n-   Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；\n-   Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；\n\n### 7.6 设计和创建索引的原则\n\n#### 7.6.1 设计原则\n\n1.  **选择唯一性索引**\n\n唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；\n\n2.  **为经常需要排序、分组和联合操作的字段建立索引**\n\n对于经常需要 `ORDER BY、GROUP BY、DISTINCT、UNION` 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；\n\n3.  **为经常作为查询条件的字段建立索引**\n\n若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；\n\n4.  **限制索引数目**\n\n索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；\n\n5.  **尽量使用数据量少的索引**\n\n如果索引值较长，查询速度也会受到影响；\n\n6.  **使用短索引，尽量使用前缀来索引**\n\n如果某索引字段值较长，最好使用值的前缀来进行索引；\n\n7.  **删除不再使用或很少使用的索引**\n\n表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；\n\n#### 7.6.2 创建原则\n\n使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：\n\n1.  **最左前缀匹配原则**\n2.  **频繁查询的字段才创建索引**\n3.  **更新频繁的字段不适合创建索引**\n4.  **区分度不高的字段不适合做索引**\n5.  **尽量扩展索引，而不用去创建新的索引**\n6.  **定义有外键的数据列一定要建立索引**\n7.  **对于查询中很少涉及，而且重复值较多的字段无需建立索引**\n8.  **对于 `text、image、bit` 类型的字段不要建立索引**\n\n### 7.7 B+ 树索引 和 Hash 索引底层实现\n\n1.  **Hash 索引**\n\nHash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；\n\n2.  **B+ 树索引**\n\nB+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；\n\n3.  **Hash 索引与 B+ 树的不同**\n\n-   Hash 索引进行等值查询更快，但无法进行范围查询。因为 `Hash` 索引中经过 `hash()` 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；\n-   Hash 索引不支持使用索引进行排序；\n-   Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 `hash()` 函数的不可预测；\n-   Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；\n-   Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；\n\n鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；\n\n## 8. 视图\n\n### 8.1 视图定义\n\n为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。\n\n视图的本质是 **一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。**  但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；\n\n视图的操作一般包括如下四部分：\n\n-   **创建视图**\n-   **查看视图**\n-   **删除视图**\n-   **修改视图**\n\n### 8.2 视图特点\n\n1.  视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；\n2.  视图是有基本表（实表）产生的表（虚表）；\n3.  视图的建立和删除不会对基本表造成影响；\n4.  对视图内容的更新（添加、删除和修改）会直接影响到基本表；\n5.  当视图来自多个基本表时，不允许添加和删除数据；\n\n### 8.3 视图优缺点\n\n#### 8.3.1 优点\n\n1.  **查询简单化**，视图能够简化用户操作，数据所见即所得；\n2.  **数据安全性**，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；\n3.  **逻辑数据独立性**，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；\n\n#### 8.3.2 缺点\n\n1.  **性能相对较差**，简单的查询也会变得很复杂；\n2.  **修改限制**，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；\n\n## 9. 优化\n\n### 9.1 大表优化\n\n当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：\n\n1.  **限定数据范围**\n\n务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；\n\n2.  **读/写分离**\n\n最经典的数据库拆分方案，主库负责写，从库负责读；\n\n3.  **垂直分区**\n\n即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 **列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护**。但是，垂直拆分也存在一定缺点。首先拆分将 **导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。**\n\n4.  **水平分区**\n\n**保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。**\n\n水平拆分是将数据表的行进行拆分，它能够 **支撑非常大的数据量存储**，应用端改造也少，但是 **分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。**\n\n一般来讲数据库分片操作的两种常见方案如下：\n\n-   **客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。**\n-   **中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。**\n\n## 10. 其他\n\n### 10.1 sql 注入\n\n用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；\n\n\n\n### 10.2 NULL 和空串\n\n`NULL` 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 `NOT NULL` 列是允许的，空串也是一个有效的值；\n\n要对 `NULL` 进行判断，则需要使用 `IS NULL` 或者 `IS NOT NULL`；\n\n### 10.3 如何创建用户并授权\n\n1.  **创建用户**\n\n```sql\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\n```\n\n2.  **授权**\n\n```sql\nGRANT privileges ON databasename.tablename TO 'username'@'host';\n```\n\n### 10.4 如何删除表\n\n| 方式       | 说明                                                         | 实例                        |\n| ---------- | ------------------------------------------------------------ | --------------------------- |\n| `delete`   | 仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢     | `delete from table_name`    |\n| `truncate` | 仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 `delete` | `truncate table table_name` |\n| `drop`     | 删除表数据同时删除表结构，将表所占空间均释放，删除效率最高   | `drop table table_name`     |\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","source":"_posts/【剑指-Java】第-2-弹：剑指大厂，这份数据库面试总结请收好.md","raw":"---\ntitle: 【剑指 Java】第 2 弹：剑指大厂，这份数据库面试总结请收好\ntags:\n  - 面试\n  - 数据库\n  - MySQL\n  - SQL\ncategories:\n  - 剑指 Java\nabbrlink: da8b2920\ndate: 2021-05-02 22:49:32\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. 数据库基础\n\n### 1.1 使用数据库的优点\n\n最开始，我们是将数据保存在 **内存** 中，这能够保证我们十分 **快速存取，但是一旦断电，数据就丢失了，无法永久保存。** 于是我们将数据存放在 **文件** 中，这样一来我们就 **能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。** 于是，我们转移到了 **数据库** 存储，通过这种方式不但 **能将永久保存数据，而且查询管理也更加高效方便**。\n\n### 1.2 什么是 MySQL\n\nMySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 **3306**。\n\n### 1.3 数据库三大范式\n\n1.  **第一范式：属性原子性**\n\n最基本的范式，若数据库表中 **所有字段值均为不可分解的原子值**，则满足第一范式；\n\n2.  **第二范式：记录唯一性，确保表中每列均与主键相关**\n\n在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 **在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中**；\n\n3.  **第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖**\n\n在第二范式的基础上，确保数据表中的 **每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生**；\n\n### 1.4 MySQL 中自带的权限表\n\nMySQL 通过权限表来控制用户对数据库的访问，一般是存放在 `mysql` 表中，由 `mysql_install_db` 脚本进行初始化，分别包括：\n\n-   **user**：记录允许连接服务器的用户账号信息，权限是全局性的；\n-   **db**：记录各个账号在不同数据库上的操作权限；\n-   **table_priv**：记录数据表级别的操作权限；\n-   **columns_priv**：记录数据列级别的操作权限；\n-   **host**：配合 **db** 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 **GRANT** 和 **REVOKE** 的影响；\n\n## 2. 数据类型\n\n主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：\n\n![](https://img-blog.csdnimg.cn/img_convert/c514a82df9148a272a3b6e9bfcc7b328.png)\n\n| **分类**           | **类型名称**   | **说明**                                                     |\n| ------------------ | -------------- | ------------------------------------------------------------ |\n| **整数类型**       | `tinyInt`      | 很小的整数(8位二进制)                                        |\n|                    | `smallint`     | 小的整数(16位二进制)                                         |\n|                    | `mediumint`    | 中等大小的整数(24位二进制)                                   |\n|                    | `int(integer)` | 普通大小的整数(32位二进制)                                   |\n| **实数类型**       | `float`        | 单精度浮点数                                                 |\n|                    | `double`       | 双精度浮点数                                                 |\n|                    | `decimal(m,d)` | 压缩严格的定点数                                             |\n| **枚举类型**       | `enum`         |                                                              |\n| **日期和时间类型** | `year`         | YYYY 1901~2155                                               |\n|                    | `time`         | HH:MM:SS -838:59:59~838:59:59                                |\n|                    | `date`         | YYYY-MM-DD 1000-01-01~9999-12-3                              |\n|                    | `datetime`     | YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59 |\n|                    | `timestamp`    | YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC |\n| **字符串类型**     | `CHAR(M)`      | M为0~255之间的整数                                           |\n|                    | `VARCHAR(M)`   | M为0~65535之间的整数                                         |\n|                    | `TINYBLOB`     | 允许长度0~255字节                                            |\n|                    | `BLOB`         | 允许长度0~65535字节                                          |\n|                    | `MEDIUMBLOB`   | 允许长度0~167772150字节                                      |\n|                    | `LONGBLOB`     | 允许长度0~4294967295字节                                     |\n|                    | `TINYTEXT`     | 允许长度0~255字节                                            |\n|                    | `TEXT`         | 允许长度0~65535字节                                          |\n|                    | `MEDIUMTEXT`   | 允许长度0~167772150字节                                      |\n|                    | `LONGTEXT`     | 允许长度0~4294967295字节                                     |\n|                    | `VARBINARY(M)` | 允许长度0~M个字节的变长字节字符串                            |\n|                    | `BINARY(M)`    | 允许长度0~M个字节的定长字节字符串                            |\n\n## 3. 存储引擎\n\n要查看 MySQL 中所提供的引擎，可以通过如下命令：\n\n>   ```sql\n>   show engines;\n>   ```\n\n![](https://img-blog.csdnimg.cn/img_convert/b2a33e5e2de9b003ed77c8073af985f2.png)\n\n### 3.1 常用存储引擎\n\n| 引擎     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| `InnoDB` | **提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束**，其设计目标是处理大数据 |\n| `MyIASM` | **默认引擎**，**不提供事务的支持，也不支持行级锁和外键**     |\n| `MEMORY` | 所有数据均存于内存，存取速度快，但是安全性低                 |\n\n### 3.2 InnoDB vs MyISAM\n\n-   InnoDB 的 4 大特性\n\n1.  **插入缓冲（Insert Buffer）**\n2.  **二次写（Double Write）**\n3.  **自适应哈希索引（Ahi）**\n4.  **预读（Read Ahead）**\n\n-   两者区别\n\n| 对比项               | MyISAM                                                       | Innodb                                                       |\n| -------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 存储结构             | 每张表被存放在三个文件：<br />1. `.frm`-表格定义<br />2. `.MYD`(MYData)-数据文件<br />3. `.MYI`(MYIndex)-索引文件 | 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB |\n| 存储空间             | 可被压缩，存储空间较小                                       | 需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引 |\n| 可移植性、备份及恢复 | 数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作 | 免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了 |\n| 文件格式             | 数据和索引是分别存储的，数据`.MYD`，索引`.MYI`               | 数据和索引是集中存储的，`.ibd`                               |\n| 记录存储顺序         | 按记录插入顺序保存                                           | 按主键大小有序插入                                           |\n| **外键**             | **不支持**                                                   | **支持**                                                     |\n| **事务**             | **不支持**                                                   | **支持（默认 REPEATABLE-READ）**                             |\n| **锁支持**           | **表级锁定**                                                 | **行级锁定、表级锁定，锁定力度小并发能力高**                 |\n| **MVVC 支持**        | **不支持**                                                   | **支持**                                                     |\n| **崩溃修复**         | **不支持**                                                   | **支持**                                                     |\n| **哈希索引**         | **不支持**                                                   | **支持**                                                     |\n| **全文索引**         | **支持**                                                     | **不支持**                                                   |\n| 查询性能             | 更佳                                                         |                                                              |\n| 增删改性能           |                                                              | 更佳                                                         |\n| 统计数据量           | 更快，内部维护了一个计数器，可以直接调取。                   |                                                              |\n| 索引的实现方式       | B+ 树索引，myisam 是堆表                                     | B+ 树索引，Innodb 是索引组织表                               |\n\n两者主要区别如下：\n\n1.  InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；\n2.  InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；\n3.  InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；\n\n### 3.3 如何选择存储引擎\n\n-   **MyISAM**：默认的 MySQL 插件式存储引擎，适合 **以读写插入为主**，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；\n-   **InnoDB**：用于事务处理应用程序，如果 **更新删除等操作频率也高**，或者要 **保证数据完整性**，支持 **高并发、外键和事务等**；\n-   **Memory**：将所有数据保存在 `RAM` 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；\n-   **Merge**：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；\n\n## 4. 存储过程\n\n### 4.1 定义\n\n存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL  语句和一些特殊的控制结构组成。优点是 **允许模块化设计，即一次创建，多次调用。** 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。\n\n### 4.2 优缺点\n\n-   **优点**\n\n1.  由于是预编译，所以执行效率高；\n2.  存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；\n3.  安全性高，执行存储过程需要有一定权限的用户；\n4.  能够重复使用，提高开发效率；\n\n-   **缺点**\n\n1.  调试困难\n2.  移植困难\n3.  重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译\n4.  若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高 \n\n## 5. 事务\n\n### 5.1 事务定义\n\n事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。**即事务是逻辑上的一组操作，要么都执行，要么都不执行**。\n\n### 5.2 事务的 4 大特性\n\n关系型数据库都需要遵循 ACID 规则：\n\n1.  **原子性（Atomicity）**\n\n原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 **动作要么全部完成，要么完全不起作用。** **即事务是最小的执行单位，不允许分割**。\n\n2.  **一致性（Consistency）**\n\n指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。**在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同**。\n\n3.  **隔离性（Isolation）**\n\n并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；\n\n4.  **持久性（Durability）**\n\n表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；\n\n### 5.3 事务隔离级别\n\n#### 5.3.1 脏读、幻读 & 不可重复读\n\n了解事务隔离级别之前，先来看看这几个读的概念：\n\n1.  **脏读（Dirty Read）**\n\n表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。\n\n2.  **幻读（Phantom Read）**\n\n在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。\n\n3.  **不可重复读（Non-repeatable Read）**\n\n一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。\n\n**注意：不可重复读和幻读的区别在于：**\n\n>   **不可重复读的重点在于修改，** 比如多次读取一条记录发现其中某些列的值被修改，而 **幻读的重点在于新增或删除**，比如多次读取一条记录发现记录增多或减少了。\n\n#### 5.3.2 隔离级别\n\nSQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：\n\n1.  **READ-UNCOMMITTED（读取未提交）**\n\n最低的隔离级别，允许读取尚未提交的数据变更，**可能导致脏读、幻读或不可重复读**。\n\n2.  **READ-COMMITTED（读取已提交）**\n\n允许读取并发事务已经提交的数据，**能够阻止脏读，但可能导致幻读或不可重复读**。\n\n3.  **REPEATABLE-READ（可重复读）**\n\n对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，**能够阻止脏读和不可重复读，但可能导致幻读**。\n\n4.  **SERIALIZABLE（可串行化）**\n\n最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，**能够防止脏读、幻读以及不可重复读**、\n\n| 隔离级别           | 脏读 | 不可重复读 | 幻读 |\n| ------------------ | ---- | ---------- | ---- |\n| `READ-UNCOMMITTED` | ✔    | ✔          | ✔    |\n| `READ-COMMITTED`   | ❌    | ✔          | ✔    |\n| `REPEATABLE-READ`  | ❌    | ❌          | ✔    |\n| `SERIALIZABLE`     | ❌    | ❌          | ❌    |\n\n## 6. 锁\n\n### 6.1 定义\n\n当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。\n\n锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；\n\n### 6.2 事务隔离级别与锁的关系\n\n| 隔离级别           | 锁                                               |\n| ------------------ | ------------------------------------------------ |\n| `READ-UNCOMMITTED` | 读取无需加共享锁                                 |\n| `READ-COMMITTED`   | 读操作需要加共享锁，语句执行完后释放             |\n| `REPEATABLE-READ`  | 读操作需要加共享锁，事务执行完毕后释放           |\n| `SERIALIZABLE`     | **锁定整个范围的键**，并一直持有锁，直到事务完成 |\n\n### 6.3 数据库中死锁的定义及解决方法\n\n-   **定义**\n\n所谓死锁，**指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象**。\n\n-   **解决方法**\n\n1.  **若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；**\n2.  **同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；**\n3.  **对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；**\n\n### 6.4 乐观锁 & 悲观锁\n\n-   **定义**\n\n并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。\n\n1.  **乐观锁**\n\n假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 `version` 的方式来进行锁定，**一般使用版本号机制或CAS算法来实现** ；\n\n2.  **悲观锁**\n\n假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，**一般使用数据库中的锁机制来实现**；\n\n-   **使用场景**\n\n**乐观锁** 适合于 **读操作频繁，但写操作较少** 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；\n\n**悲观锁**  适合于 **写操作频繁，但读操作较少** 的情况，即冲突频发的场景；\n\n## 7. 索引\n\n### 7.1 定义\n\n所谓索引，就是一种特殊的文件，**包含数据表中所有记录的引用指针**。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。\n\n### 7.2 基本原理\n\n使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。\n\n索引的原理也很简单，即 **将无序数据变为有序的查询**，根据索引查询数据的步骤如下：\n\n1.  **将创建了索引的列的内容进行排序**\n2.  **对排序结果生成倒排表**\n3.  **在倒排内容上拼上数据地址链**\n4.  **在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据**\n\n### 7.3 索引优缺点\n\n-   **优点**\n\n1.  第一点毫无疑问是 **加快数据的检索速度**；\n2.  第二点则是 **通过使用索引，能够在查询过程中使用优化隐藏器，提高性能**。\n\n-   **缺点**\n\n1.  **时间方面**：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；\n2.  **空间方面**：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；\n\n### 7.4 索引类型\n\n#### 7.4.1 逻辑角度\n\n索引从逻辑角度主要可分为 4 种索引，分别是：\n\n1.  **主键索引**\n\n数据列不允许重复，不允许为 `NULL`，一个表中只能有一个主键；\n\n2.  **唯一索引**\n\n数据列不允许重复，允许为 `NULL` 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：\n\n-   **创建唯一索引**：`ALTER TABLE table_name ADD UNIQUE(column)`\n-   **创建唯一组合索引**：`ALTER TABLE table_name ADD UNIQUE(column1, column2)`；\n\n3.  **普通索引**\n\n最基本的索引类型，没有唯一性的限制，允许为 `NULL` 值，通过如下两种方式来创建唯一索引：\n\n-   **创建普通索引**：`ALTER TABLE table_name ADD INDEX index_name (column)`；\n-   **创建普通索引组合**：`ALTER TABLE table_name ADD INDEX index_name (column1, column2)`；\n\n4.  **全文索引**\n\n搜索引擎中也在使用的一种技术，通过 `ALTER TABLE table_name ADD FULLTEXT (column)` 来创建全文索引；\n\n5.  **组合索引**\n\n多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；\n\n#### 7.4.2 物理存储角度\n\n1.  **聚集索引（clustered index）**\n2.  **非聚集索引（non-clustered index）**\n\n#### 7.4.3 数据结构角度\n\n1.  **BTREE**\n2.  **HASH**\n3.  **FULLTEXT**\n4.  **R-Tree**\n\n### 7.5 索引算法\n\n常用的索引算法有 **Hash 算法 和 B 树算法**，分别多两个算法进行简单介绍：\n\n1.  **B+ 树算法**\n\n最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（`=、>、<、between` 等），也能够用于 `like` 操作符，只要其查询条件是一个 **不以通配符开头的常量**。底层实现的是 **多路平衡查找树**，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。\n\n2.  **Hash 算法**\n\nHash 算法索引只能用于对等比较（`=、>=、<=`），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 `Hash` 函数就能获取相应键值，然后进行回表查询获得实际数据。\n\n3.  **两者对比**\n\n-   Hash 索引进行等值查询更快，但是不能进行范围查询；\n-   Hash 索引不支持使用索引进行排序；\n-   Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；\n-   Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；\n-   Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；\n\n### 7.6 设计和创建索引的原则\n\n#### 7.6.1 设计原则\n\n1.  **选择唯一性索引**\n\n唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；\n\n2.  **为经常需要排序、分组和联合操作的字段建立索引**\n\n对于经常需要 `ORDER BY、GROUP BY、DISTINCT、UNION` 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；\n\n3.  **为经常作为查询条件的字段建立索引**\n\n若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；\n\n4.  **限制索引数目**\n\n索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；\n\n5.  **尽量使用数据量少的索引**\n\n如果索引值较长，查询速度也会受到影响；\n\n6.  **使用短索引，尽量使用前缀来索引**\n\n如果某索引字段值较长，最好使用值的前缀来进行索引；\n\n7.  **删除不再使用或很少使用的索引**\n\n表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；\n\n#### 7.6.2 创建原则\n\n使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：\n\n1.  **最左前缀匹配原则**\n2.  **频繁查询的字段才创建索引**\n3.  **更新频繁的字段不适合创建索引**\n4.  **区分度不高的字段不适合做索引**\n5.  **尽量扩展索引，而不用去创建新的索引**\n6.  **定义有外键的数据列一定要建立索引**\n7.  **对于查询中很少涉及，而且重复值较多的字段无需建立索引**\n8.  **对于 `text、image、bit` 类型的字段不要建立索引**\n\n### 7.7 B+ 树索引 和 Hash 索引底层实现\n\n1.  **Hash 索引**\n\nHash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；\n\n2.  **B+ 树索引**\n\nB+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；\n\n3.  **Hash 索引与 B+ 树的不同**\n\n-   Hash 索引进行等值查询更快，但无法进行范围查询。因为 `Hash` 索引中经过 `hash()` 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；\n-   Hash 索引不支持使用索引进行排序；\n-   Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 `hash()` 函数的不可预测；\n-   Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；\n-   Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；\n\n鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；\n\n## 8. 视图\n\n### 8.1 视图定义\n\n为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。\n\n视图的本质是 **一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。**  但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；\n\n视图的操作一般包括如下四部分：\n\n-   **创建视图**\n-   **查看视图**\n-   **删除视图**\n-   **修改视图**\n\n### 8.2 视图特点\n\n1.  视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；\n2.  视图是有基本表（实表）产生的表（虚表）；\n3.  视图的建立和删除不会对基本表造成影响；\n4.  对视图内容的更新（添加、删除和修改）会直接影响到基本表；\n5.  当视图来自多个基本表时，不允许添加和删除数据；\n\n### 8.3 视图优缺点\n\n#### 8.3.1 优点\n\n1.  **查询简单化**，视图能够简化用户操作，数据所见即所得；\n2.  **数据安全性**，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；\n3.  **逻辑数据独立性**，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；\n\n#### 8.3.2 缺点\n\n1.  **性能相对较差**，简单的查询也会变得很复杂；\n2.  **修改限制**，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；\n\n## 9. 优化\n\n### 9.1 大表优化\n\n当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：\n\n1.  **限定数据范围**\n\n务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；\n\n2.  **读/写分离**\n\n最经典的数据库拆分方案，主库负责写，从库负责读；\n\n3.  **垂直分区**\n\n即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 **列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护**。但是，垂直拆分也存在一定缺点。首先拆分将 **导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。**\n\n4.  **水平分区**\n\n**保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。**\n\n水平拆分是将数据表的行进行拆分，它能够 **支撑非常大的数据量存储**，应用端改造也少，但是 **分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。**\n\n一般来讲数据库分片操作的两种常见方案如下：\n\n-   **客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。**\n-   **中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。**\n\n## 10. 其他\n\n### 10.1 sql 注入\n\n用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；\n\n\n\n### 10.2 NULL 和空串\n\n`NULL` 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 `NOT NULL` 列是允许的，空串也是一个有效的值；\n\n要对 `NULL` 进行判断，则需要使用 `IS NULL` 或者 `IS NOT NULL`；\n\n### 10.3 如何创建用户并授权\n\n1.  **创建用户**\n\n```sql\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\n```\n\n2.  **授权**\n\n```sql\nGRANT privileges ON databasename.tablename TO 'username'@'host';\n```\n\n### 10.4 如何删除表\n\n| 方式       | 说明                                                         | 实例                        |\n| ---------- | ------------------------------------------------------------ | --------------------------- |\n| `delete`   | 仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢     | `delete from table_name`    |\n| `truncate` | 仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 `delete` | `truncate table table_name` |\n| `drop`     | 删除表数据同时删除表结构，将表所占空间均释放，删除效率最高   | `drop table table_name`     |\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","slug":"【剑指-Java】第-2-弹：剑指大厂，这份数据库面试总结请收好","published":1,"updated":"2021-05-02T14:58:08.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1q004vbw343szweb64","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-数据库基础\"><a href=\"#1-数据库基础\" class=\"headerlink\" title=\"1. 数据库基础\"></a>1. 数据库基础</h2><h3 id=\"1-1-使用数据库的优点\"><a href=\"#1-1-使用数据库的优点\" class=\"headerlink\" title=\"1.1 使用数据库的优点\"></a>1.1 使用数据库的优点</h3><p>最开始，我们是将数据保存在 <strong>内存</strong> 中，这能够保证我们十分 <strong>快速存取，但是一旦断电，数据就丢失了，无法永久保存。</strong> 于是我们将数据存放在 <strong>文件</strong> 中，这样一来我们就 <strong>能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。</strong> 于是，我们转移到了 <strong>数据库</strong> 存储，通过这种方式不但 <strong>能将永久保存数据，而且查询管理也更加高效方便</strong>。</p>\n<h3 id=\"1-2-什么是-MySQL\"><a href=\"#1-2-什么是-MySQL\" class=\"headerlink\" title=\"1.2 什么是 MySQL\"></a>1.2 什么是 MySQL</h3><p>MySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 <strong>3306</strong>。</p>\n<h3 id=\"1-3-数据库三大范式\"><a href=\"#1-3-数据库三大范式\" class=\"headerlink\" title=\"1.3 数据库三大范式\"></a>1.3 数据库三大范式</h3><ol>\n<li><strong>第一范式：属性原子性</strong></li>\n</ol>\n<p>最基本的范式，若数据库表中 <strong>所有字段值均为不可分解的原子值</strong>，则满足第一范式；</p>\n<ol>\n<li><strong>第二范式：记录唯一性，确保表中每列均与主键相关</strong></li>\n</ol>\n<p>在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 <strong>在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中</strong>；</p>\n<ol>\n<li><strong>第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖</strong></li>\n</ol>\n<p>在第二范式的基础上，确保数据表中的 <strong>每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生</strong>；</p>\n<h3 id=\"1-4-MySQL-中自带的权限表\"><a href=\"#1-4-MySQL-中自带的权限表\" class=\"headerlink\" title=\"1.4 MySQL 中自带的权限表\"></a>1.4 MySQL 中自带的权限表</h3><p>MySQL 通过权限表来控制用户对数据库的访问，一般是存放在 <code>mysql</code> 表中，由 <code>mysql_install_db</code> 脚本进行初始化，分别包括：</p>\n<ul>\n<li><strong>user</strong>：记录允许连接服务器的用户账号信息，权限是全局性的；</li>\n<li><strong>db</strong>：记录各个账号在不同数据库上的操作权限；</li>\n<li><strong>table_priv</strong>：记录数据表级别的操作权限；</li>\n<li><strong>columns_priv</strong>：记录数据列级别的操作权限；</li>\n<li><strong>host</strong>：配合 <strong>db</strong> 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 <strong>GRANT</strong> 和 <strong>REVOKE</strong> 的影响；</li>\n</ul>\n<h2 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h2><p>主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c514a82df9148a272a3b6e9bfcc7b328.png\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>分类</strong></th>\n<th><strong>类型名称</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>整数类型</strong></td>\n<td><code>tinyInt</code></td>\n<td>很小的整数(8位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>smallint</code></td>\n<td>小的整数(16位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>mediumint</code></td>\n<td>中等大小的整数(24位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>int(integer)</code></td>\n<td>普通大小的整数(32位二进制)</td>\n</tr>\n<tr>\n<td><strong>实数类型</strong></td>\n<td><code>float</code></td>\n<td>单精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>double</code></td>\n<td>双精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>decimal(m,d)</code></td>\n<td>压缩严格的定点数</td>\n</tr>\n<tr>\n<td><strong>枚举类型</strong></td>\n<td><code>enum</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>日期和时间类型</strong></td>\n<td><code>year</code></td>\n<td>YYYY 1901~2155</td>\n</tr>\n<tr>\n<td></td>\n<td><code>time</code></td>\n<td>HH:MM:SS -838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>date</code></td>\n<td>YYYY-MM-DD 1000-01-01~9999-12-3</td>\n</tr>\n<tr>\n<td></td>\n<td><code>datetime</code></td>\n<td>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>timestamp</code></td>\n<td>YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC</td>\n</tr>\n<tr>\n<td><strong>字符串类型</strong></td>\n<td><code>CHAR(M)</code></td>\n<td>M为0~255之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARCHAR(M)</code></td>\n<td>M为0~65535之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYBLOB</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BLOB</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMBLOB</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGBLOB</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYTEXT</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TEXT</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMTEXT</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGTEXT</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARBINARY(M)</code></td>\n<td>允许长度0~M个字节的变长字节字符串</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BINARY(M)</code></td>\n<td>允许长度0~M个字节的定长字节字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-存储引擎\"><a href=\"#3-存储引擎\" class=\"headerlink\" title=\"3. 存储引擎\"></a>3. 存储引擎</h2><p>要查看 MySQL 中所提供的引擎，可以通过如下命令：</p>\n<blockquote>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> engines<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b2a33e5e2de9b003ed77c8073af985f2.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"3-1-常用存储引擎\"><a href=\"#3-1-常用存储引擎\" class=\"headerlink\" title=\"3.1 常用存储引擎\"></a>3.1 常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>InnoDB</code></td>\n<td><strong>提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束</strong>，其设计目标是处理大数据</td>\n</tr>\n<tr>\n<td><code>MyIASM</code></td>\n<td><strong>默认引擎</strong>，<strong>不提供事务的支持，也不支持行级锁和外键</strong></td>\n</tr>\n<tr>\n<td><code>MEMORY</code></td>\n<td>所有数据均存于内存，存取速度快，但是安全性低</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-2-InnoDB-vs-MyISAM\"><a href=\"#3-2-InnoDB-vs-MyISAM\" class=\"headerlink\" title=\"3.2 InnoDB vs MyISAM\"></a>3.2 InnoDB vs MyISAM</h3><ul>\n<li>InnoDB 的 4 大特性</li>\n</ul>\n<ol>\n<li><strong>插入缓冲（Insert Buffer）</strong></li>\n<li><strong>二次写（Double Write）</strong></li>\n<li><strong>自适应哈希索引（Ahi）</strong></li>\n<li><strong>预读（Read Ahead）</strong></li>\n</ol>\n<ul>\n<li>两者区别</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>MyISAM</th>\n<th>Innodb</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储结构</td>\n<td>每张表被存放在三个文件：<br>1. <code>.frm</code>-表格定义<br>2. <code>.MYD</code>(MYData)-数据文件<br>3. <code>.MYI</code>(MYIndex)-索引文件</td>\n<td>所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB</td>\n</tr>\n<tr>\n<td>存储空间</td>\n<td>可被压缩，存储空间较小</td>\n<td>需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</td>\n</tr>\n<tr>\n<td>可移植性、备份及恢复</td>\n<td>数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作</td>\n<td>免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了</td>\n</tr>\n<tr>\n<td>文件格式</td>\n<td>数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code></td>\n<td>数据和索引是集中存储的，<code>.ibd</code></td>\n</tr>\n<tr>\n<td>记录存储顺序</td>\n<td>按记录插入顺序保存</td>\n<td>按主键大小有序插入</td>\n</tr>\n<tr>\n<td><strong>外键</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>事务</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持（默认 REPEATABLE-READ）</strong></td>\n</tr>\n<tr>\n<td><strong>锁支持</strong></td>\n<td><strong>表级锁定</strong></td>\n<td><strong>行级锁定、表级锁定，锁定力度小并发能力高</strong></td>\n</tr>\n<tr>\n<td><strong>MVVC 支持</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>崩溃修复</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>哈希索引</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>全文索引</strong></td>\n<td><strong>支持</strong></td>\n<td><strong>不支持</strong></td>\n</tr>\n<tr>\n<td>查询性能</td>\n<td>更佳</td>\n<td></td>\n</tr>\n<tr>\n<td>增删改性能</td>\n<td></td>\n<td>更佳</td>\n</tr>\n<tr>\n<td>统计数据量</td>\n<td>更快，内部维护了一个计数器，可以直接调取。</td>\n<td></td>\n</tr>\n<tr>\n<td>索引的实现方式</td>\n<td>B+ 树索引，myisam 是堆表</td>\n<td>B+ 树索引，Innodb 是索引组织表</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>两者主要区别如下：</p>\n<ol>\n<li>InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；</li>\n<li>InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；</li>\n<li>InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；</li>\n</ol>\n<h3 id=\"3-3-如何选择存储引擎\"><a href=\"#3-3-如何选择存储引擎\" class=\"headerlink\" title=\"3.3 如何选择存储引擎\"></a>3.3 如何选择存储引擎</h3><ul>\n<li><strong>MyISAM</strong>：默认的 MySQL 插件式存储引擎，适合 <strong>以读写插入为主</strong>，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；</li>\n<li><strong>InnoDB</strong>：用于事务处理应用程序，如果 <strong>更新删除等操作频率也高</strong>，或者要 <strong>保证数据完整性</strong>，支持 <strong>高并发、外键和事务等</strong>；</li>\n<li><strong>Memory</strong>：将所有数据保存在 <code>RAM</code> 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；</li>\n<li><strong>Merge</strong>：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；</li>\n</ul>\n<h2 id=\"4-存储过程\"><a href=\"#4-存储过程\" class=\"headerlink\" title=\"4. 存储过程\"></a>4. 存储过程</h2><h3 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h3><p>存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL  语句和一些特殊的控制结构组成。优点是 <strong>允许模块化设计，即一次创建，多次调用。</strong> 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。</p>\n<h3 id=\"4-2-优缺点\"><a href=\"#4-2-优缺点\" class=\"headerlink\" title=\"4.2 优缺点\"></a>4.2 优缺点</h3><ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>由于是预编译，所以执行效率高；</li>\n<li>存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；</li>\n<li>安全性高，执行存储过程需要有一定权限的用户；</li>\n<li>能够重复使用，提高开发效率；</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li>调试困难</li>\n<li>移植困难</li>\n<li>重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译</li>\n<li>若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高 </li>\n</ol>\n<h2 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5. 事务\"></a>5. 事务</h2><h3 id=\"5-1-事务定义\"><a href=\"#5-1-事务定义\" class=\"headerlink\" title=\"5.1 事务定义\"></a>5.1 事务定义</h3><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<h3 id=\"5-2-事务的-4-大特性\"><a href=\"#5-2-事务的-4-大特性\" class=\"headerlink\" title=\"5.2 事务的 4 大特性\"></a>5.2 事务的 4 大特性</h3><p>关系型数据库都需要遵循 ACID 规则：</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol>\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol>\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol>\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3 id=\"5-3-事务隔离级别\"><a href=\"#5-3-事务隔离级别\" class=\"headerlink\" title=\"5.3 事务隔离级别\"></a>5.3 事务隔离级别</h3><h4 id=\"5-3-1-脏读、幻读-amp-不可重复读\"><a href=\"#5-3-1-脏读、幻读-amp-不可重复读\" class=\"headerlink\" title=\"5.3.1 脏读、幻读 &amp; 不可重复读\"></a>5.3.1 脏读、幻读 &amp; 不可重复读</h4><p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol>\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol>\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p>  <strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h4 id=\"5-3-2-隔离级别\"><a href=\"#5-3-2-隔离级别\" class=\"headerlink\" title=\"5.3.2 隔离级别\"></a>5.3.2 隔离级别</h4><p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol>\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>、</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"6-锁\"><a href=\"#6-锁\" class=\"headerlink\" title=\"6. 锁\"></a>6. 锁</h2><h3 id=\"6-1-定义\"><a href=\"#6-1-定义\" class=\"headerlink\" title=\"6.1 定义\"></a>6.1 定义</h3><p>当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。</p>\n<p>锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；</p>\n<h3 id=\"6-2-事务隔离级别与锁的关系\"><a href=\"#6-2-事务隔离级别与锁的关系\" class=\"headerlink\" title=\"6.2 事务隔离级别与锁的关系\"></a>6.2 事务隔离级别与锁的关系</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>读取无需加共享锁</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>读操作需要加共享锁，语句执行完后释放</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>读操作需要加共享锁，事务执行完毕后释放</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td><strong>锁定整个范围的键</strong>，并一直持有锁，直到事务完成</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"6-3-数据库中死锁的定义及解决方法\"><a href=\"#6-3-数据库中死锁的定义及解决方法\" class=\"headerlink\" title=\"6.3 数据库中死锁的定义及解决方法\"></a>6.3 数据库中死锁的定义及解决方法</h3><ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>所谓死锁，<strong>指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象</strong>。</p>\n<ul>\n<li><strong>解决方法</strong></li>\n</ul>\n<ol>\n<li><strong>若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；</strong></li>\n<li><strong>同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；</strong></li>\n<li><strong>对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；</strong></li>\n</ol>\n<h3 id=\"6-4-乐观锁-amp-悲观锁\"><a href=\"#6-4-乐观锁-amp-悲观锁\" class=\"headerlink\" title=\"6.4 乐观锁 &amp; 悲观锁\"></a>6.4 乐观锁 &amp; 悲观锁</h3><ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。</p>\n<ol>\n<li><strong>乐观锁</strong></li>\n</ol>\n<p>假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 <code>version</code> 的方式来进行锁定，<strong>一般使用版本号机制或CAS算法来实现</strong> ；</p>\n<ol>\n<li><strong>悲观锁</strong></li>\n</ol>\n<p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，<strong>一般使用数据库中的锁机制来实现</strong>；</p>\n<ul>\n<li><strong>使用场景</strong></li>\n</ul>\n<p><strong>乐观锁</strong> 适合于 <strong>读操作频繁，但写操作较少</strong> 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；</p>\n<p><strong>悲观锁</strong>  适合于 <strong>写操作频繁，但读操作较少</strong> 的情况，即冲突频发的场景；</p>\n<h2 id=\"7-索引\"><a href=\"#7-索引\" class=\"headerlink\" title=\"7. 索引\"></a>7. 索引</h2><h3 id=\"7-1-定义\"><a href=\"#7-1-定义\" class=\"headerlink\" title=\"7.1 定义\"></a>7.1 定义</h3><p>所谓索引，就是一种特殊的文件，<strong>包含数据表中所有记录的引用指针</strong>。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。</p>\n<h3 id=\"7-2-基本原理\"><a href=\"#7-2-基本原理\" class=\"headerlink\" title=\"7.2 基本原理\"></a>7.2 基本原理</h3><p>使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。</p>\n<p>索引的原理也很简单，即 <strong>将无序数据变为有序的查询</strong>，根据索引查询数据的步骤如下：</p>\n<ol>\n<li><strong>将创建了索引的列的内容进行排序</strong></li>\n<li><strong>对排序结果生成倒排表</strong></li>\n<li><strong>在倒排内容上拼上数据地址链</strong></li>\n<li><strong>在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据</strong></li>\n</ol>\n<h3 id=\"7-3-索引优缺点\"><a href=\"#7-3-索引优缺点\" class=\"headerlink\" title=\"7.3 索引优缺点\"></a>7.3 索引优缺点</h3><ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>第一点毫无疑问是 <strong>加快数据的检索速度</strong>；</li>\n<li>第二点则是 <strong>通过使用索引，能够在查询过程中使用优化隐藏器，提高性能</strong>。</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li><strong>时间方面</strong>：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；</li>\n<li><strong>空间方面</strong>：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；</li>\n</ol>\n<h3 id=\"7-4-索引类型\"><a href=\"#7-4-索引类型\" class=\"headerlink\" title=\"7.4 索引类型\"></a>7.4 索引类型</h3><h4 id=\"7-4-1-逻辑角度\"><a href=\"#7-4-1-逻辑角度\" class=\"headerlink\" title=\"7.4.1 逻辑角度\"></a>7.4.1 逻辑角度</h4><p>索引从逻辑角度主要可分为 4 种索引，分别是：</p>\n<ol>\n<li><strong>主键索引</strong></li>\n</ol>\n<p>数据列不允许重复，不允许为 <code>NULL</code>，一个表中只能有一个主键；</p>\n<ol>\n<li><strong>唯一索引</strong></li>\n</ol>\n<p>数据列不允许重复，允许为 <code>NULL</code> 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：</p>\n<ul>\n<li><strong>创建唯一索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column)</code></li>\n<li><strong>创建唯一组合索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column1, column2)</code>；</li>\n</ul>\n<ol>\n<li><strong>普通索引</strong></li>\n</ol>\n<p>最基本的索引类型，没有唯一性的限制，允许为 <code>NULL</code> 值，通过如下两种方式来创建唯一索引：</p>\n<ul>\n<li><strong>创建普通索引</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column)</code>；</li>\n<li><strong>创建普通索引组合</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column1, column2)</code>；</li>\n</ul>\n<ol>\n<li><strong>全文索引</strong></li>\n</ol>\n<p>搜索引擎中也在使用的一种技术，通过 <code>ALTER TABLE table_name ADD FULLTEXT (column)</code> 来创建全文索引；</p>\n<ol>\n<li><strong>组合索引</strong></li>\n</ol>\n<p>多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；</p>\n<h4 id=\"7-4-2-物理存储角度\"><a href=\"#7-4-2-物理存储角度\" class=\"headerlink\" title=\"7.4.2 物理存储角度\"></a>7.4.2 物理存储角度</h4><ol>\n<li><strong>聚集索引（clustered index）</strong></li>\n<li><strong>非聚集索引（non-clustered index）</strong></li>\n</ol>\n<h4 id=\"7-4-3-数据结构角度\"><a href=\"#7-4-3-数据结构角度\" class=\"headerlink\" title=\"7.4.3 数据结构角度\"></a>7.4.3 数据结构角度</h4><ol>\n<li><strong>BTREE</strong></li>\n<li><strong>HASH</strong></li>\n<li><strong>FULLTEXT</strong></li>\n<li><strong>R-Tree</strong></li>\n</ol>\n<h3 id=\"7-5-索引算法\"><a href=\"#7-5-索引算法\" class=\"headerlink\" title=\"7.5 索引算法\"></a>7.5 索引算法</h3><p>常用的索引算法有 <strong>Hash 算法 和 B 树算法</strong>，分别多两个算法进行简单介绍：</p>\n<ol>\n<li><strong>B+ 树算法</strong></li>\n</ol>\n<p>最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（<code>=、&gt;、&lt;、between</code> 等），也能够用于 <code>like</code> 操作符，只要其查询条件是一个 <strong>不以通配符开头的常量</strong>。底层实现的是 <strong>多路平衡查找树</strong>，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。</p>\n<ol>\n<li><strong>Hash 算法</strong></li>\n</ol>\n<p>Hash 算法索引只能用于对等比较（<code>=、&gt;=、&lt;=</code>），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 <code>Hash</code> 函数就能获取相应键值，然后进行回表查询获得实际数据。</p>\n<ol>\n<li><strong>两者对比</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但是不能进行范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；</li>\n<li>Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；</li>\n<li>Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<h3 id=\"7-6-设计和创建索引的原则\"><a href=\"#7-6-设计和创建索引的原则\" class=\"headerlink\" title=\"7.6 设计和创建索引的原则\"></a>7.6 设计和创建索引的原则</h3><h4 id=\"7-6-1-设计原则\"><a href=\"#7-6-1-设计原则\" class=\"headerlink\" title=\"7.6.1 设计原则\"></a>7.6.1 设计原则</h4><ol>\n<li><strong>选择唯一性索引</strong></li>\n</ol>\n<p>唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；</p>\n<ol>\n<li><strong>为经常需要排序、分组和联合操作的字段建立索引</strong></li>\n</ol>\n<p>对于经常需要 <code>ORDER BY、GROUP BY、DISTINCT、UNION</code> 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；</p>\n<ol>\n<li><strong>为经常作为查询条件的字段建立索引</strong></li>\n</ol>\n<p>若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；</p>\n<ol>\n<li><strong>限制索引数目</strong></li>\n</ol>\n<p>索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；</p>\n<ol>\n<li><strong>尽量使用数据量少的索引</strong></li>\n</ol>\n<p>如果索引值较长，查询速度也会受到影响；</p>\n<ol>\n<li><strong>使用短索引，尽量使用前缀来索引</strong></li>\n</ol>\n<p>如果某索引字段值较长，最好使用值的前缀来进行索引；</p>\n<ol>\n<li><strong>删除不再使用或很少使用的索引</strong></li>\n</ol>\n<p>表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；</p>\n<h4 id=\"7-6-2-创建原则\"><a href=\"#7-6-2-创建原则\" class=\"headerlink\" title=\"7.6.2 创建原则\"></a>7.6.2 创建原则</h4><p>使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：</p>\n<ol>\n<li><strong>最左前缀匹配原则</strong></li>\n<li><strong>频繁查询的字段才创建索引</strong></li>\n<li><strong>更新频繁的字段不适合创建索引</strong></li>\n<li><strong>区分度不高的字段不适合做索引</strong></li>\n<li><strong>尽量扩展索引，而不用去创建新的索引</strong></li>\n<li><strong>定义有外键的数据列一定要建立索引</strong></li>\n<li><strong>对于查询中很少涉及，而且重复值较多的字段无需建立索引</strong></li>\n<li><strong>对于 <code>text、image、bit</code> 类型的字段不要建立索引</strong></li>\n</ol>\n<h3 id=\"7-7-B-树索引-和-Hash-索引底层实现\"><a href=\"#7-7-B-树索引-和-Hash-索引底层实现\" class=\"headerlink\" title=\"7.7 B+ 树索引 和 Hash 索引底层实现\"></a>7.7 B+ 树索引 和 Hash 索引底层实现</h3><ol>\n<li><strong>Hash 索引</strong></li>\n</ol>\n<p>Hash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；</p>\n<ol>\n<li><strong>B+ 树索引</strong></li>\n</ol>\n<p>B+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；</p>\n<ol>\n<li><strong>Hash 索引与 B+ 树的不同</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但无法进行范围查询。因为 <code>Hash</code> 索引中经过 <code>hash()</code> 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 <code>hash()</code> 函数的不可预测；</li>\n<li>Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；</li>\n<li>Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<p>鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；</p>\n<h2 id=\"8-视图\"><a href=\"#8-视图\" class=\"headerlink\" title=\"8. 视图\"></a>8. 视图</h2><h3 id=\"8-1-视图定义\"><a href=\"#8-1-视图定义\" class=\"headerlink\" title=\"8.1 视图定义\"></a>8.1 视图定义</h3><p>为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。</p>\n<p>视图的本质是 <strong>一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。</strong>  但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；</p>\n<p>视图的操作一般包括如下四部分：</p>\n<ul>\n<li><strong>创建视图</strong></li>\n<li><strong>查看视图</strong></li>\n<li><strong>删除视图</strong></li>\n<li><strong>修改视图</strong></li>\n</ul>\n<h3 id=\"8-2-视图特点\"><a href=\"#8-2-视图特点\" class=\"headerlink\" title=\"8.2 视图特点\"></a>8.2 视图特点</h3><ol>\n<li>视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；</li>\n<li>视图是有基本表（实表）产生的表（虚表）；</li>\n<li>视图的建立和删除不会对基本表造成影响；</li>\n<li>对视图内容的更新（添加、删除和修改）会直接影响到基本表；</li>\n<li>当视图来自多个基本表时，不允许添加和删除数据；</li>\n</ol>\n<h3 id=\"8-3-视图优缺点\"><a href=\"#8-3-视图优缺点\" class=\"headerlink\" title=\"8.3 视图优缺点\"></a>8.3 视图优缺点</h3><h4 id=\"8-3-1-优点\"><a href=\"#8-3-1-优点\" class=\"headerlink\" title=\"8.3.1 优点\"></a>8.3.1 优点</h4><ol>\n<li><strong>查询简单化</strong>，视图能够简化用户操作，数据所见即所得；</li>\n<li><strong>数据安全性</strong>，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；</li>\n<li><strong>逻辑数据独立性</strong>，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；</li>\n</ol>\n<h4 id=\"8-3-2-缺点\"><a href=\"#8-3-2-缺点\" class=\"headerlink\" title=\"8.3.2 缺点\"></a>8.3.2 缺点</h4><ol>\n<li><strong>性能相对较差</strong>，简单的查询也会变得很复杂；</li>\n<li><strong>修改限制</strong>，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；</li>\n</ol>\n<h2 id=\"9-优化\"><a href=\"#9-优化\" class=\"headerlink\" title=\"9. 优化\"></a>9. 优化</h2><h3 id=\"9-1-大表优化\"><a href=\"#9-1-大表优化\" class=\"headerlink\" title=\"9.1 大表优化\"></a>9.1 大表优化</h3><p>当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：</p>\n<ol>\n<li><strong>限定数据范围</strong></li>\n</ol>\n<p>务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；</p>\n<ol>\n<li><strong>读/写分离</strong></li>\n</ol>\n<p>最经典的数据库拆分方案，主库负责写，从库负责读；</p>\n<ol>\n<li><strong>垂直分区</strong></li>\n</ol>\n<p>即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 <strong>列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护</strong>。但是，垂直拆分也存在一定缺点。首先拆分将 <strong>导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。</strong></p>\n<ol>\n<li><strong>水平分区</strong></li>\n</ol>\n<p><strong>保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。</strong></p>\n<p>水平拆分是将数据表的行进行拆分，它能够 <strong>支撑非常大的数据量存储</strong>，应用端改造也少，但是 <strong>分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。</strong></p>\n<p>一般来讲数据库分片操作的两种常见方案如下：</p>\n<ul>\n<li><strong>客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。</strong></li>\n<li><strong>中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。</strong></li>\n</ul>\n<h2 id=\"10-其他\"><a href=\"#10-其他\" class=\"headerlink\" title=\"10. 其他\"></a>10. 其他</h2><h3 id=\"10-1-sql-注入\"><a href=\"#10-1-sql-注入\" class=\"headerlink\" title=\"10.1 sql 注入\"></a>10.1 sql 注入</h3><p>用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；</p>\n<h3 id=\"10-2-NULL-和空串\"><a href=\"#10-2-NULL-和空串\" class=\"headerlink\" title=\"10.2 NULL 和空串\"></a>10.2 NULL 和空串</h3><p><code>NULL</code> 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 <code>NOT NULL</code> 列是允许的，空串也是一个有效的值；</p>\n<p>要对 <code>NULL</code> 进行判断，则需要使用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code>；</p>\n<h3 id=\"10-3-如何创建用户并授权\"><a href=\"#10-3-如何创建用户并授权\" class=\"headerlink\" title=\"10.3 如何创建用户并授权\"></a>10.3 如何创建用户并授权</h3><ol>\n<li><strong>创建用户</strong></li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'host'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li><strong>授权</strong></li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">ON</span> databasename<span class=\"token punctuation\">.</span>tablename <span class=\"token keyword\">TO</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'host'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"10-4-如何删除表\"><a href=\"#10-4-如何删除表\" class=\"headerlink\" title=\"10.4 如何删除表\"></a>10.4 如何删除表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>delete</code></td>\n<td>仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢</td>\n<td><code>delete from table_name</code></td>\n</tr>\n<tr>\n<td><code>truncate</code></td>\n<td>仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 <code>delete</code></td>\n<td><code>truncate table table_name</code></td>\n</tr>\n<tr>\n<td><code>drop</code></td>\n<td>删除表数据同时删除表结构，将表所占空间均释放，删除效率最高</td>\n<td><code>drop table table_name</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-数据库基础\"><a href=\"#1-数据库基础\" class=\"headerlink\" title=\"1. 数据库基础\"></a>1. 数据库基础</h2><h3 id=\"1-1-使用数据库的优点\"><a href=\"#1-1-使用数据库的优点\" class=\"headerlink\" title=\"1.1 使用数据库的优点\"></a>1.1 使用数据库的优点</h3><p>最开始，我们是将数据保存在 <strong>内存</strong> 中，这能够保证我们十分 <strong>快速存取，但是一旦断电，数据就丢失了，无法永久保存。</strong> 于是我们将数据存放在 <strong>文件</strong> 中，这样一来我们就 <strong>能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。</strong> 于是，我们转移到了 <strong>数据库</strong> 存储，通过这种方式不但 <strong>能将永久保存数据，而且查询管理也更加高效方便</strong>。</p>\n<h3 id=\"1-2-什么是-MySQL\"><a href=\"#1-2-什么是-MySQL\" class=\"headerlink\" title=\"1.2 什么是 MySQL\"></a>1.2 什么是 MySQL</h3><p>MySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 <strong>3306</strong>。</p>\n<h3 id=\"1-3-数据库三大范式\"><a href=\"#1-3-数据库三大范式\" class=\"headerlink\" title=\"1.3 数据库三大范式\"></a>1.3 数据库三大范式</h3><ol>\n<li><strong>第一范式：属性原子性</strong></li>\n</ol>\n<p>最基本的范式，若数据库表中 <strong>所有字段值均为不可分解的原子值</strong>，则满足第一范式；</p>\n<ol>\n<li><strong>第二范式：记录唯一性，确保表中每列均与主键相关</strong></li>\n</ol>\n<p>在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 <strong>在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中</strong>；</p>\n<ol>\n<li><strong>第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖</strong></li>\n</ol>\n<p>在第二范式的基础上，确保数据表中的 <strong>每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生</strong>；</p>\n<h3 id=\"1-4-MySQL-中自带的权限表\"><a href=\"#1-4-MySQL-中自带的权限表\" class=\"headerlink\" title=\"1.4 MySQL 中自带的权限表\"></a>1.4 MySQL 中自带的权限表</h3><p>MySQL 通过权限表来控制用户对数据库的访问，一般是存放在 <code>mysql</code> 表中，由 <code>mysql_install_db</code> 脚本进行初始化，分别包括：</p>\n<ul>\n<li><strong>user</strong>：记录允许连接服务器的用户账号信息，权限是全局性的；</li>\n<li><strong>db</strong>：记录各个账号在不同数据库上的操作权限；</li>\n<li><strong>table_priv</strong>：记录数据表级别的操作权限；</li>\n<li><strong>columns_priv</strong>：记录数据列级别的操作权限；</li>\n<li><strong>host</strong>：配合 <strong>db</strong> 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 <strong>GRANT</strong> 和 <strong>REVOKE</strong> 的影响；</li>\n</ul>\n<h2 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h2><p>主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c514a82df9148a272a3b6e9bfcc7b328.png\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>分类</strong></th>\n<th><strong>类型名称</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>整数类型</strong></td>\n<td><code>tinyInt</code></td>\n<td>很小的整数(8位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>smallint</code></td>\n<td>小的整数(16位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>mediumint</code></td>\n<td>中等大小的整数(24位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>int(integer)</code></td>\n<td>普通大小的整数(32位二进制)</td>\n</tr>\n<tr>\n<td><strong>实数类型</strong></td>\n<td><code>float</code></td>\n<td>单精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>double</code></td>\n<td>双精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>decimal(m,d)</code></td>\n<td>压缩严格的定点数</td>\n</tr>\n<tr>\n<td><strong>枚举类型</strong></td>\n<td><code>enum</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>日期和时间类型</strong></td>\n<td><code>year</code></td>\n<td>YYYY 1901~2155</td>\n</tr>\n<tr>\n<td></td>\n<td><code>time</code></td>\n<td>HH:MM:SS -838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>date</code></td>\n<td>YYYY-MM-DD 1000-01-01~9999-12-3</td>\n</tr>\n<tr>\n<td></td>\n<td><code>datetime</code></td>\n<td>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>timestamp</code></td>\n<td>YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC</td>\n</tr>\n<tr>\n<td><strong>字符串类型</strong></td>\n<td><code>CHAR(M)</code></td>\n<td>M为0~255之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARCHAR(M)</code></td>\n<td>M为0~65535之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYBLOB</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BLOB</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMBLOB</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGBLOB</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYTEXT</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TEXT</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMTEXT</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGTEXT</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARBINARY(M)</code></td>\n<td>允许长度0~M个字节的变长字节字符串</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BINARY(M)</code></td>\n<td>允许长度0~M个字节的定长字节字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-存储引擎\"><a href=\"#3-存储引擎\" class=\"headerlink\" title=\"3. 存储引擎\"></a>3. 存储引擎</h2><p>要查看 MySQL 中所提供的引擎，可以通过如下命令：</p>\n<blockquote>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> engines<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b2a33e5e2de9b003ed77c8073af985f2.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"3-1-常用存储引擎\"><a href=\"#3-1-常用存储引擎\" class=\"headerlink\" title=\"3.1 常用存储引擎\"></a>3.1 常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>InnoDB</code></td>\n<td><strong>提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束</strong>，其设计目标是处理大数据</td>\n</tr>\n<tr>\n<td><code>MyIASM</code></td>\n<td><strong>默认引擎</strong>，<strong>不提供事务的支持，也不支持行级锁和外键</strong></td>\n</tr>\n<tr>\n<td><code>MEMORY</code></td>\n<td>所有数据均存于内存，存取速度快，但是安全性低</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-2-InnoDB-vs-MyISAM\"><a href=\"#3-2-InnoDB-vs-MyISAM\" class=\"headerlink\" title=\"3.2 InnoDB vs MyISAM\"></a>3.2 InnoDB vs MyISAM</h3><ul>\n<li>InnoDB 的 4 大特性</li>\n</ul>\n<ol>\n<li><strong>插入缓冲（Insert Buffer）</strong></li>\n<li><strong>二次写（Double Write）</strong></li>\n<li><strong>自适应哈希索引（Ahi）</strong></li>\n<li><strong>预读（Read Ahead）</strong></li>\n</ol>\n<ul>\n<li>两者区别</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>MyISAM</th>\n<th>Innodb</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储结构</td>\n<td>每张表被存放在三个文件：<br />1. <code>.frm</code>-表格定义<br />2. <code>.MYD</code>(MYData)-数据文件<br />3. <code>.MYI</code>(MYIndex)-索引文件</td>\n<td>所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB</td>\n</tr>\n<tr>\n<td>存储空间</td>\n<td>可被压缩，存储空间较小</td>\n<td>需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</td>\n</tr>\n<tr>\n<td>可移植性、备份及恢复</td>\n<td>数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作</td>\n<td>免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了</td>\n</tr>\n<tr>\n<td>文件格式</td>\n<td>数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code></td>\n<td>数据和索引是集中存储的，<code>.ibd</code></td>\n</tr>\n<tr>\n<td>记录存储顺序</td>\n<td>按记录插入顺序保存</td>\n<td>按主键大小有序插入</td>\n</tr>\n<tr>\n<td><strong>外键</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>事务</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持（默认 REPEATABLE-READ）</strong></td>\n</tr>\n<tr>\n<td><strong>锁支持</strong></td>\n<td><strong>表级锁定</strong></td>\n<td><strong>行级锁定、表级锁定，锁定力度小并发能力高</strong></td>\n</tr>\n<tr>\n<td><strong>MVVC 支持</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>崩溃修复</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>哈希索引</strong></td>\n<td><strong>不支持</strong></td>\n<td><strong>支持</strong></td>\n</tr>\n<tr>\n<td><strong>全文索引</strong></td>\n<td><strong>支持</strong></td>\n<td><strong>不支持</strong></td>\n</tr>\n<tr>\n<td>查询性能</td>\n<td>更佳</td>\n<td></td>\n</tr>\n<tr>\n<td>增删改性能</td>\n<td></td>\n<td>更佳</td>\n</tr>\n<tr>\n<td>统计数据量</td>\n<td>更快，内部维护了一个计数器，可以直接调取。</td>\n<td></td>\n</tr>\n<tr>\n<td>索引的实现方式</td>\n<td>B+ 树索引，myisam 是堆表</td>\n<td>B+ 树索引，Innodb 是索引组织表</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>两者主要区别如下：</p>\n<ol>\n<li>InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；</li>\n<li>InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；</li>\n<li>InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；</li>\n</ol>\n<h3 id=\"3-3-如何选择存储引擎\"><a href=\"#3-3-如何选择存储引擎\" class=\"headerlink\" title=\"3.3 如何选择存储引擎\"></a>3.3 如何选择存储引擎</h3><ul>\n<li><strong>MyISAM</strong>：默认的 MySQL 插件式存储引擎，适合 <strong>以读写插入为主</strong>，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；</li>\n<li><strong>InnoDB</strong>：用于事务处理应用程序，如果 <strong>更新删除等操作频率也高</strong>，或者要 <strong>保证数据完整性</strong>，支持 <strong>高并发、外键和事务等</strong>；</li>\n<li><strong>Memory</strong>：将所有数据保存在 <code>RAM</code> 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；</li>\n<li><strong>Merge</strong>：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；</li>\n</ul>\n<h2 id=\"4-存储过程\"><a href=\"#4-存储过程\" class=\"headerlink\" title=\"4. 存储过程\"></a>4. 存储过程</h2><h3 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h3><p>存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL  语句和一些特殊的控制结构组成。优点是 <strong>允许模块化设计，即一次创建，多次调用。</strong> 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。</p>\n<h3 id=\"4-2-优缺点\"><a href=\"#4-2-优缺点\" class=\"headerlink\" title=\"4.2 优缺点\"></a>4.2 优缺点</h3><ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>由于是预编译，所以执行效率高；</li>\n<li>存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；</li>\n<li>安全性高，执行存储过程需要有一定权限的用户；</li>\n<li>能够重复使用，提高开发效率；</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li>调试困难</li>\n<li>移植困难</li>\n<li>重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译</li>\n<li>若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高 </li>\n</ol>\n<h2 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5. 事务\"></a>5. 事务</h2><h3 id=\"5-1-事务定义\"><a href=\"#5-1-事务定义\" class=\"headerlink\" title=\"5.1 事务定义\"></a>5.1 事务定义</h3><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<h3 id=\"5-2-事务的-4-大特性\"><a href=\"#5-2-事务的-4-大特性\" class=\"headerlink\" title=\"5.2 事务的 4 大特性\"></a>5.2 事务的 4 大特性</h3><p>关系型数据库都需要遵循 ACID 规则：</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol>\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol>\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol>\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3 id=\"5-3-事务隔离级别\"><a href=\"#5-3-事务隔离级别\" class=\"headerlink\" title=\"5.3 事务隔离级别\"></a>5.3 事务隔离级别</h3><h4 id=\"5-3-1-脏读、幻读-amp-不可重复读\"><a href=\"#5-3-1-脏读、幻读-amp-不可重复读\" class=\"headerlink\" title=\"5.3.1 脏读、幻读 &amp; 不可重复读\"></a>5.3.1 脏读、幻读 &amp; 不可重复读</h4><p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol>\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol>\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p>  <strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h4 id=\"5-3-2-隔离级别\"><a href=\"#5-3-2-隔离级别\" class=\"headerlink\" title=\"5.3.2 隔离级别\"></a>5.3.2 隔离级别</h4><p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol>\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>、</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"6-锁\"><a href=\"#6-锁\" class=\"headerlink\" title=\"6. 锁\"></a>6. 锁</h2><h3 id=\"6-1-定义\"><a href=\"#6-1-定义\" class=\"headerlink\" title=\"6.1 定义\"></a>6.1 定义</h3><p>当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。</p>\n<p>锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；</p>\n<h3 id=\"6-2-事务隔离级别与锁的关系\"><a href=\"#6-2-事务隔离级别与锁的关系\" class=\"headerlink\" title=\"6.2 事务隔离级别与锁的关系\"></a>6.2 事务隔离级别与锁的关系</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>读取无需加共享锁</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>读操作需要加共享锁，语句执行完后释放</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>读操作需要加共享锁，事务执行完毕后释放</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td><strong>锁定整个范围的键</strong>，并一直持有锁，直到事务完成</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"6-3-数据库中死锁的定义及解决方法\"><a href=\"#6-3-数据库中死锁的定义及解决方法\" class=\"headerlink\" title=\"6.3 数据库中死锁的定义及解决方法\"></a>6.3 数据库中死锁的定义及解决方法</h3><ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>所谓死锁，<strong>指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象</strong>。</p>\n<ul>\n<li><strong>解决方法</strong></li>\n</ul>\n<ol>\n<li><strong>若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；</strong></li>\n<li><strong>同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；</strong></li>\n<li><strong>对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；</strong></li>\n</ol>\n<h3 id=\"6-4-乐观锁-amp-悲观锁\"><a href=\"#6-4-乐观锁-amp-悲观锁\" class=\"headerlink\" title=\"6.4 乐观锁 &amp; 悲观锁\"></a>6.4 乐观锁 &amp; 悲观锁</h3><ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。</p>\n<ol>\n<li><strong>乐观锁</strong></li>\n</ol>\n<p>假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 <code>version</code> 的方式来进行锁定，<strong>一般使用版本号机制或CAS算法来实现</strong> ；</p>\n<ol>\n<li><strong>悲观锁</strong></li>\n</ol>\n<p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，<strong>一般使用数据库中的锁机制来实现</strong>；</p>\n<ul>\n<li><strong>使用场景</strong></li>\n</ul>\n<p><strong>乐观锁</strong> 适合于 <strong>读操作频繁，但写操作较少</strong> 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；</p>\n<p><strong>悲观锁</strong>  适合于 <strong>写操作频繁，但读操作较少</strong> 的情况，即冲突频发的场景；</p>\n<h2 id=\"7-索引\"><a href=\"#7-索引\" class=\"headerlink\" title=\"7. 索引\"></a>7. 索引</h2><h3 id=\"7-1-定义\"><a href=\"#7-1-定义\" class=\"headerlink\" title=\"7.1 定义\"></a>7.1 定义</h3><p>所谓索引，就是一种特殊的文件，<strong>包含数据表中所有记录的引用指针</strong>。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。</p>\n<h3 id=\"7-2-基本原理\"><a href=\"#7-2-基本原理\" class=\"headerlink\" title=\"7.2 基本原理\"></a>7.2 基本原理</h3><p>使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。</p>\n<p>索引的原理也很简单，即 <strong>将无序数据变为有序的查询</strong>，根据索引查询数据的步骤如下：</p>\n<ol>\n<li><strong>将创建了索引的列的内容进行排序</strong></li>\n<li><strong>对排序结果生成倒排表</strong></li>\n<li><strong>在倒排内容上拼上数据地址链</strong></li>\n<li><strong>在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据</strong></li>\n</ol>\n<h3 id=\"7-3-索引优缺点\"><a href=\"#7-3-索引优缺点\" class=\"headerlink\" title=\"7.3 索引优缺点\"></a>7.3 索引优缺点</h3><ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>第一点毫无疑问是 <strong>加快数据的检索速度</strong>；</li>\n<li>第二点则是 <strong>通过使用索引，能够在查询过程中使用优化隐藏器，提高性能</strong>。</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li><strong>时间方面</strong>：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；</li>\n<li><strong>空间方面</strong>：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；</li>\n</ol>\n<h3 id=\"7-4-索引类型\"><a href=\"#7-4-索引类型\" class=\"headerlink\" title=\"7.4 索引类型\"></a>7.4 索引类型</h3><h4 id=\"7-4-1-逻辑角度\"><a href=\"#7-4-1-逻辑角度\" class=\"headerlink\" title=\"7.4.1 逻辑角度\"></a>7.4.1 逻辑角度</h4><p>索引从逻辑角度主要可分为 4 种索引，分别是：</p>\n<ol>\n<li><strong>主键索引</strong></li>\n</ol>\n<p>数据列不允许重复，不允许为 <code>NULL</code>，一个表中只能有一个主键；</p>\n<ol>\n<li><strong>唯一索引</strong></li>\n</ol>\n<p>数据列不允许重复，允许为 <code>NULL</code> 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：</p>\n<ul>\n<li><strong>创建唯一索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column)</code></li>\n<li><strong>创建唯一组合索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column1, column2)</code>；</li>\n</ul>\n<ol>\n<li><strong>普通索引</strong></li>\n</ol>\n<p>最基本的索引类型，没有唯一性的限制，允许为 <code>NULL</code> 值，通过如下两种方式来创建唯一索引：</p>\n<ul>\n<li><strong>创建普通索引</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column)</code>；</li>\n<li><strong>创建普通索引组合</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column1, column2)</code>；</li>\n</ul>\n<ol>\n<li><strong>全文索引</strong></li>\n</ol>\n<p>搜索引擎中也在使用的一种技术，通过 <code>ALTER TABLE table_name ADD FULLTEXT (column)</code> 来创建全文索引；</p>\n<ol>\n<li><strong>组合索引</strong></li>\n</ol>\n<p>多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；</p>\n<h4 id=\"7-4-2-物理存储角度\"><a href=\"#7-4-2-物理存储角度\" class=\"headerlink\" title=\"7.4.2 物理存储角度\"></a>7.4.2 物理存储角度</h4><ol>\n<li><strong>聚集索引（clustered index）</strong></li>\n<li><strong>非聚集索引（non-clustered index）</strong></li>\n</ol>\n<h4 id=\"7-4-3-数据结构角度\"><a href=\"#7-4-3-数据结构角度\" class=\"headerlink\" title=\"7.4.3 数据结构角度\"></a>7.4.3 数据结构角度</h4><ol>\n<li><strong>BTREE</strong></li>\n<li><strong>HASH</strong></li>\n<li><strong>FULLTEXT</strong></li>\n<li><strong>R-Tree</strong></li>\n</ol>\n<h3 id=\"7-5-索引算法\"><a href=\"#7-5-索引算法\" class=\"headerlink\" title=\"7.5 索引算法\"></a>7.5 索引算法</h3><p>常用的索引算法有 <strong>Hash 算法 和 B 树算法</strong>，分别多两个算法进行简单介绍：</p>\n<ol>\n<li><strong>B+ 树算法</strong></li>\n</ol>\n<p>最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（<code>=、&gt;、&lt;、between</code> 等），也能够用于 <code>like</code> 操作符，只要其查询条件是一个 <strong>不以通配符开头的常量</strong>。底层实现的是 <strong>多路平衡查找树</strong>，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。</p>\n<ol>\n<li><strong>Hash 算法</strong></li>\n</ol>\n<p>Hash 算法索引只能用于对等比较（<code>=、&gt;=、&lt;=</code>），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 <code>Hash</code> 函数就能获取相应键值，然后进行回表查询获得实际数据。</p>\n<ol>\n<li><strong>两者对比</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但是不能进行范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；</li>\n<li>Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；</li>\n<li>Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<h3 id=\"7-6-设计和创建索引的原则\"><a href=\"#7-6-设计和创建索引的原则\" class=\"headerlink\" title=\"7.6 设计和创建索引的原则\"></a>7.6 设计和创建索引的原则</h3><h4 id=\"7-6-1-设计原则\"><a href=\"#7-6-1-设计原则\" class=\"headerlink\" title=\"7.6.1 设计原则\"></a>7.6.1 设计原则</h4><ol>\n<li><strong>选择唯一性索引</strong></li>\n</ol>\n<p>唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；</p>\n<ol>\n<li><strong>为经常需要排序、分组和联合操作的字段建立索引</strong></li>\n</ol>\n<p>对于经常需要 <code>ORDER BY、GROUP BY、DISTINCT、UNION</code> 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；</p>\n<ol>\n<li><strong>为经常作为查询条件的字段建立索引</strong></li>\n</ol>\n<p>若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；</p>\n<ol>\n<li><strong>限制索引数目</strong></li>\n</ol>\n<p>索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；</p>\n<ol>\n<li><strong>尽量使用数据量少的索引</strong></li>\n</ol>\n<p>如果索引值较长，查询速度也会受到影响；</p>\n<ol>\n<li><strong>使用短索引，尽量使用前缀来索引</strong></li>\n</ol>\n<p>如果某索引字段值较长，最好使用值的前缀来进行索引；</p>\n<ol>\n<li><strong>删除不再使用或很少使用的索引</strong></li>\n</ol>\n<p>表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；</p>\n<h4 id=\"7-6-2-创建原则\"><a href=\"#7-6-2-创建原则\" class=\"headerlink\" title=\"7.6.2 创建原则\"></a>7.6.2 创建原则</h4><p>使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：</p>\n<ol>\n<li><strong>最左前缀匹配原则</strong></li>\n<li><strong>频繁查询的字段才创建索引</strong></li>\n<li><strong>更新频繁的字段不适合创建索引</strong></li>\n<li><strong>区分度不高的字段不适合做索引</strong></li>\n<li><strong>尽量扩展索引，而不用去创建新的索引</strong></li>\n<li><strong>定义有外键的数据列一定要建立索引</strong></li>\n<li><strong>对于查询中很少涉及，而且重复值较多的字段无需建立索引</strong></li>\n<li><strong>对于 <code>text、image、bit</code> 类型的字段不要建立索引</strong></li>\n</ol>\n<h3 id=\"7-7-B-树索引-和-Hash-索引底层实现\"><a href=\"#7-7-B-树索引-和-Hash-索引底层实现\" class=\"headerlink\" title=\"7.7 B+ 树索引 和 Hash 索引底层实现\"></a>7.7 B+ 树索引 和 Hash 索引底层实现</h3><ol>\n<li><strong>Hash 索引</strong></li>\n</ol>\n<p>Hash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；</p>\n<ol>\n<li><strong>B+ 树索引</strong></li>\n</ol>\n<p>B+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；</p>\n<ol>\n<li><strong>Hash 索引与 B+ 树的不同</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但无法进行范围查询。因为 <code>Hash</code> 索引中经过 <code>hash()</code> 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 <code>hash()</code> 函数的不可预测；</li>\n<li>Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；</li>\n<li>Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<p>鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；</p>\n<h2 id=\"8-视图\"><a href=\"#8-视图\" class=\"headerlink\" title=\"8. 视图\"></a>8. 视图</h2><h3 id=\"8-1-视图定义\"><a href=\"#8-1-视图定义\" class=\"headerlink\" title=\"8.1 视图定义\"></a>8.1 视图定义</h3><p>为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。</p>\n<p>视图的本质是 <strong>一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。</strong>  但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；</p>\n<p>视图的操作一般包括如下四部分：</p>\n<ul>\n<li><strong>创建视图</strong></li>\n<li><strong>查看视图</strong></li>\n<li><strong>删除视图</strong></li>\n<li><strong>修改视图</strong></li>\n</ul>\n<h3 id=\"8-2-视图特点\"><a href=\"#8-2-视图特点\" class=\"headerlink\" title=\"8.2 视图特点\"></a>8.2 视图特点</h3><ol>\n<li>视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；</li>\n<li>视图是有基本表（实表）产生的表（虚表）；</li>\n<li>视图的建立和删除不会对基本表造成影响；</li>\n<li>对视图内容的更新（添加、删除和修改）会直接影响到基本表；</li>\n<li>当视图来自多个基本表时，不允许添加和删除数据；</li>\n</ol>\n<h3 id=\"8-3-视图优缺点\"><a href=\"#8-3-视图优缺点\" class=\"headerlink\" title=\"8.3 视图优缺点\"></a>8.3 视图优缺点</h3><h4 id=\"8-3-1-优点\"><a href=\"#8-3-1-优点\" class=\"headerlink\" title=\"8.3.1 优点\"></a>8.3.1 优点</h4><ol>\n<li><strong>查询简单化</strong>，视图能够简化用户操作，数据所见即所得；</li>\n<li><strong>数据安全性</strong>，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；</li>\n<li><strong>逻辑数据独立性</strong>，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；</li>\n</ol>\n<h4 id=\"8-3-2-缺点\"><a href=\"#8-3-2-缺点\" class=\"headerlink\" title=\"8.3.2 缺点\"></a>8.3.2 缺点</h4><ol>\n<li><strong>性能相对较差</strong>，简单的查询也会变得很复杂；</li>\n<li><strong>修改限制</strong>，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；</li>\n</ol>\n<h2 id=\"9-优化\"><a href=\"#9-优化\" class=\"headerlink\" title=\"9. 优化\"></a>9. 优化</h2><h3 id=\"9-1-大表优化\"><a href=\"#9-1-大表优化\" class=\"headerlink\" title=\"9.1 大表优化\"></a>9.1 大表优化</h3><p>当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：</p>\n<ol>\n<li><strong>限定数据范围</strong></li>\n</ol>\n<p>务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；</p>\n<ol>\n<li><strong>读/写分离</strong></li>\n</ol>\n<p>最经典的数据库拆分方案，主库负责写，从库负责读；</p>\n<ol>\n<li><strong>垂直分区</strong></li>\n</ol>\n<p>即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 <strong>列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护</strong>。但是，垂直拆分也存在一定缺点。首先拆分将 <strong>导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。</strong></p>\n<ol>\n<li><strong>水平分区</strong></li>\n</ol>\n<p><strong>保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。</strong></p>\n<p>水平拆分是将数据表的行进行拆分，它能够 <strong>支撑非常大的数据量存储</strong>，应用端改造也少，但是 <strong>分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。</strong></p>\n<p>一般来讲数据库分片操作的两种常见方案如下：</p>\n<ul>\n<li><strong>客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。</strong></li>\n<li><strong>中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。</strong></li>\n</ul>\n<h2 id=\"10-其他\"><a href=\"#10-其他\" class=\"headerlink\" title=\"10. 其他\"></a>10. 其他</h2><h3 id=\"10-1-sql-注入\"><a href=\"#10-1-sql-注入\" class=\"headerlink\" title=\"10.1 sql 注入\"></a>10.1 sql 注入</h3><p>用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；</p>\n<h3 id=\"10-2-NULL-和空串\"><a href=\"#10-2-NULL-和空串\" class=\"headerlink\" title=\"10.2 NULL 和空串\"></a>10.2 NULL 和空串</h3><p><code>NULL</code> 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 <code>NOT NULL</code> 列是允许的，空串也是一个有效的值；</p>\n<p>要对 <code>NULL</code> 进行判断，则需要使用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code>；</p>\n<h3 id=\"10-3-如何创建用户并授权\"><a href=\"#10-3-如何创建用户并授权\" class=\"headerlink\" title=\"10.3 如何创建用户并授权\"></a>10.3 如何创建用户并授权</h3><ol>\n<li><strong>创建用户</strong></li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'host'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li><strong>授权</strong></li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">ON</span> databasename<span class=\"token punctuation\">.</span>tablename <span class=\"token keyword\">TO</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'host'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"10-4-如何删除表\"><a href=\"#10-4-如何删除表\" class=\"headerlink\" title=\"10.4 如何删除表\"></a>10.4 如何删除表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>delete</code></td>\n<td>仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢</td>\n<td><code>delete from table_name</code></td>\n</tr>\n<tr>\n<td><code>truncate</code></td>\n<td>仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 <code>delete</code></td>\n<td><code>truncate table table_name</code></td>\n</tr>\n<tr>\n<td><code>drop</code></td>\n<td>删除表数据同时删除表结构，将表所占空间均释放，删除效率最高</td>\n<td><code>drop table table_name</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n"},{"title":"【剑指 Java】第 4 弹：绝对硬货，Spring 面试知识点总结大全","abbrlink":"c97353d2","date":"2021-05-02T14:51:31.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. Spring 特点\n\nSpring 主要有如下特点：\n\n1.  **轻量级**：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；\n2.  **控制反转（IoC）**：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；\n3.  **面向切面（AOP）**：支持面向切面编程，将应用业务逻辑层和系统服务层分开；\n4.  **容器**：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；\n5.  **框架集合**：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；\n\n## 2. Spring 核心组件\n\n![](https://img-blog.csdnimg.cn/img_convert/f8f52f31e2b1e4a5c63e5668d064cd79.png)\nSpring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。\n\n1.  **Spring Core**：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。\n2.  **Spring Context**：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。\n3.  **Spring AOP** ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。\n4.  **Spring DAO**：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。\n5.  **Spring ORM**：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；\n6.  **Spring Web**：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。\n7.  **Spring MVC**：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。\n\n## 3. Spring 常用注解\n\n| 注解                 | 说明                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| `@Controller`        | 1. 用于标注控制层组件<br />2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br />3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 `@RequestMapping`<br />4. 能够将 `Request` 请求 `header` 部分的值绑定到方法的参数上 |\n| `@RestController`    | 相当于 `@Component` 与 `@ResponseBody` 的组合                |\n| `@Component`         | 泛指组件，当组件不好归类时进行注解                           |\n| `@Repository`        | 用于注解 `DAO` 层，在 `DaoImpl` 类中注解                     |\n| `@Service`           | 用于注解业务层组件                                           |\n| `@ResponseBody`      | 1. 异步请求<br />2. 用于将 `Controller` 的方法返回的对象，通过适当的 `HttpMessageConverter` 转换为指定格式后，写入到 `Response` 对象的 `body` 数据区<br />3. 返回的数据并非 `html` 的页面，而是其他某种格式的数据（json、xml）时使用 |\n| `@RequestMapping`    | 用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径 |\n| `@Autowired`         | 对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 `@Autowired` 的使用来消除 `get、set` 方法 |\n| `@PathVariable`      | 用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数 |\n| `@RequestParam`      | 用于在 Spring MVC 后台控制层获取参数，类似 `request.getParameter(\"name\")` |\n| `@RequestHeader`     | 将 `Request` 请求 `header` 部分的值绑定到方法的参数上        |\n| `@ModelAttribute`    | 在该 `Controller` 所有方法在调用前，先执行该注解，可用于注解和方法参数中 |\n| `@SessionAttributes` | 将值放到 `session` 作用域，写在 `Class` 上面                 |\n| `@Valid`             | 实体数据校验，结合 Hibernate Validator 一起使用              |\n| `@CookieValue`       | 获取 `cookie` 中的值                                         |\n\n## 4. IoC 原理\n\n### 4.1 定义\n\nSpring 通过一个配置文件来描述 `Bean` 之间的相互依赖关系，利用 Java 的反射功能来实例化 `Bean` 并建立 `Bean` 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 `Bean` 实例缓存、生命周期管理、`Bean` 实例代理、事件发布、资源装载等高级服务；\n\n总结而言：**IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期**；\n\n### 4.2 Spring 容器高层视图\n\n![](https://img-blog.csdnimg.cn/img_convert/38c318f0471c891948870b4aeb7ef42b.png)\n\n1.  Spring 启动时先读取 `Bean` 配置信息，并在 Spring 容器中生成一份对应的 `Bean` 配置注册表；\n2.  根据上一步中生成的 `Bean` 配置注册表来实例化 `Bean`，并装配好 `Bean` 之间的依赖关系；\n3.  将实例化后的 `Bean` 装载到 Spring 容器中的 `Bean` 缓存池中，供上层的应用程序使用；\n\n### 4.3 Spring Bean 的作用域及生命周期\n\n#### 4.3.1 作用域\n\nSpring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。\n\nBean 的作用域主要有如下几种：\n\n1.  **Singleton（单例）**\n\n作用域为 `Singleton`，**该模式在多线程下不安全**，表明 IoC  容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 `id` 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。`Singleton` 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 **每次获取到的对象都是同一对象**。\n\n2.  **Prototype（原型）：每次创建时使用**\n\n作用域为 `Prototype`，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 **每次对该 Bean 请求时均创建一个新的 Bean 实例**。`Prototype` 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。\n\n3.  **Request：一次 request 一个实例**\n\n作用域为 `Request`，**表明在一次 `HTTP` 请求中，容器返回该 Bean 的同一个实例**，即每个 `HTTP` 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 `HTTP` 请求处理结束时，该作用域中的 Bean 实例均被销毁。\n\n4.  **Session**\n\n作用域为 `Session` ，表明 **在一个 `HTTP Session` 中，容器返回该 Bean 的同一个实例，对不同的 `Session` 请求则创建新的实例，该 `Bean` 实例仅在当前 `Session` 内有效**，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 `HTTP Session` 被废弃时，在该作用域内的 Bean 也将失效。\n\n| 作用域类别  | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| `Singleton` | Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值 |\n| `Prototype` | 每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 `getBean()` 方法，相当于 `new` 一个新的对象 |\n| `Request`   | 每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境 |\n| `Session`   | 每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境 |\n\n#### 4.3.2 生命周期\n\n1.  Spring 对 Bean 进行实例化；\n2.  Spring 将值和 Bean 的引用注入到 Bean 对应属性中；\n3.  若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；\n4.  若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 `setBeanFactory()` 方法，将 Bean 所在应用引用传入进来；\n5.  若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 `setApplicationContext()` 方法，将 Bean 所在应用的引用传入进来；\n6.  若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 `post-ProcessBeforeInitalization()` 方法；\n7.  若 Bean 实现了 `InitializingBean` 接口，Spring 将调用他们的 `after-PropertiesSet()` 方法，类似地，如果 Bean 使用 `init-method` 声明了初始化方法，则该方法也会被调用；\n8.  若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 `post-ProcessAfterInitialization()` 方法；\n9.  此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；\n10.  若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 `destory()` 接口方法；同样，若 Bean 使用 `destroy-method` 声明了销毁方法，该方法也将被调用；\n\n### 4.4 Spring 依赖注入的四种方式\n\n1.  **构造器注入**\n\n```java\n// 带参，方便用构造器进行注入\npublic CatDaoImpl(String name){\n\tthis.name = name;\n}\n```\n\n```xml\n<bean id=\"CatDaoImpl\" class=\"com.cunyu.CatDaoImpl\">\n\t<constructor-arg value=\"name\"></constructor-arg>\n</bean>\n```\n\n2.  **setter 方法注入**\n\n```java\npublic class Id {\n    private int id;\n    \n    public int getId() { \n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n}\n```\n\n```xml\n<bean id=\"id\" class=\"com.cunyu.Id \"> \n    <property name=\"id\" value=\"1801333\"></property> \n</bean>\n```\n\n3.  **静态工厂注入**\n\n所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；\n\n```java\n// 静态工厂\npublic class DaoFactory {\n    public static final FactoryDao getStaticFactoryDaoImpl(){\n        return new StaticFacotryDaoImpl();\n    }\n}\npublic class SpringAction {\n    // 需要注入的对象\n    private FactoryDao staticFactoryDao; \n    // 注入对象的 set 方法\n    public void setStaticFactoryDao(FactoryDao staticFactoryDao) {\n        this.staticFactoryDao = staticFactoryDao;\n    }\n}\n```\n\n```xml\n<bean name=\"springAction\" class=\"com.cunyu.SpringAction\" >\n    <!--利用静态工厂的方法注入对象-->\n    <property name=\"staticFactoryDao\" ref=\"staticFactoryDao\"></property>\n</bean>\n<!--从工厂类获取静态方法-->\n<bean name=\"staticFactoryDao\" class=\"com.cunyu.DaoFactory\" factory-method=\"getStaticFactoryDaoImpl\"></bean>\n```\n\n4.  **实例工厂**\n\n实例工厂表示获取对象实例的方法不是静态的，所以需要先 `new` 工厂类，然后再调用普通的实例方法；\n\n```java\n// 实例工厂\npublic class DaoFactory { \n    public FactoryDao getFactoryDaoImpl(){\n        return new FactoryDaoImpl();\n    }\n}\npublic class SpringAction {\n    // 注入对象\n    private FactoryDao factoryDao; \n    public void setFactoryDao(FactoryDao factoryDao) {\n        this.factoryDao = factoryDao;\n    }\n}\n```\n\n```xml\n<bean name=\"springAction\" class=\"com.cunyu.SpringAction\">\n    <!--使用实例工厂的方法注入对象,对应下面的配置文件-->\n    <property name=\"factoryDao\" ref=\"factoryDao\"></property>\n</bean>\n\n<!--此处获取对象的方式是从工厂类中获取实例方法-->\n<bean name=\"daoFactory\" class=\"com.cunyu.DaoFactory\"></bean>\n<bean name=\"factoryDao\" factory-bean=\"daoFactory\" factory-method=\"getFactoryDaoImpl\"></bean>\n```\n\n### 4.5 Spring 自动装配方式\n\n要实现自动装配，主要从如下两个角度来进行实现：\n\n1.  **组件扫描（Component Scanning）**：Spring 会自动发现应用上下文中所创建的 Bean；\n2.  **自动装配（Autowiring）**：Spring 自动满足 Bean 之间的依赖；\n\nSpring 装配包括 **手动转配和自动装配**，**手动装配是通过 `XML` 装配、构造方法、`setter` 方法等方式；**\n\n而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；\n\n| 装配方式      | 说明                                                         |\n| ------------- | ------------------------------------------------------------ |\n| `no`          | 默认不进行自动装配，通过显式设置 `ref` 属性来进行装配        |\n| `byName`      | 通过参数名自动装配，Spring 容器在配置文件中发现 `Bean` 的 `autowire` 属性被设置为 `byName` 后试图匹配、装载和该 `Bean` 的属性具有相同名字的 `Bean` |\n| `byType`      | 通过参数类型自动装配，Spring 容器在配置文件中发现 `Bean` 的 `autowire` 属性被设置为 `byType` 后试图匹配、装载和该 `Bean` 的属性具有相同了类型的 `Bean`，若发现多个 `Bean` 符合条件，则抛出错误 |\n| `constructor` | 类似于 `byType`，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常 |\n| `autodetect`  | 首先尝试使用 `constructor` 来自动装配，若无法工作，则使用 `byType` 方式 |\n\n### 4.6 IoC 的优缺点\n\n1.  **优点**：组件之间的解耦，提高程序可维护性、灵活性；\n2.  **缺点**：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；\n\n## 5. AOP 原理\n\n### 5.1 定义\n\n即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 `Aspect`，**即切面**。所谓切面即 **与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性**。\n\n通过使用横切，AOP 将软件切分为：**核心关注点和横切关注点**。业务处理的主要流程是核心关注点，与横切关注点关系不大。**横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似**。AOP 的作用就在于 **分离系统中的各种关注点，将核心关注点和横切关注点分离开**。\n\n### 5.2 核心概念\n\n### 5.3 AOP 的两种代理方式\n\nSpring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，**默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理**；\n\n1.  **JDK 动态接口代理**\n\n主要涉及 `Proxy` 和 `InvocationHandler`，`InvocationHandler` 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 `Proxy` 则利用 `InvocationHandler` 动态创建一个符合某一接口的实例，生成目标类的代理对象；\n\n2.  **CGlib 动态代理**\n\n全称 `Code Generation Library`，**是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。** CGlib 封装了 ASM，能在运行期间动态生成新的类。\n\n3.  **JDK 动态代理和 CGlib 动态代理的区别**\n\nJDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；\n\n### 5.4 切面的通知类型\n\n1.  **前置通知（Before）**：目标方法在被调用前调用通知；\n2.  **后置通知（After）**：目标方法完成后调用通知；\n3.  **返回通知（After-returning）**：目标方法成功执行之后调用通知；\n4.  **异常通知（After-throwing）**：目标方法抛出异常后调用通知；\n5.  **环绕通知（Around）**：在被通知的方法调用之前和调用之后执行自定义的行为；\n\n## 6. Spring MVC\n\n### 6.1 什么是 MVC 框架？\n\nMVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；\n\n采用 MVC 设计模式主要有如下好处：\n\n1.  通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；\n2.  有利于系统的并行开发，提升开发效率；\n\n### 6.2 SpringMVC\n\n#### 6.2.1 定义\n\nSpring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；\n\n#### 6.2.2 组件\n\n1.  `DispatcherServlet`：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，**用于接收请求、响应结果，相当于转发器，有了 `DispatcherServlet` 就减少了其他组件之间的耦合度**；\n2.  `HandlerMapping`：处理器映射器，根据 URL 路径映射到不同的 `Handler`；\n3.  `HandlerAdapter`：处理器适配器，按照 `HandlerAdapter` 的规则来执行 `Handler`；\n4.  `Handler`：处理器，由我们自己根据业务进行开发；\n5.  `ViewResolver`：视图解析器，将逻辑视图解析成具体的视图；\n6.  `View`：一个接口，支持不同的视图类型；\n\n#### 6.2.3 MVC 工作流程\n\n1.  浏览器发送请求，前端控制区 `DispatcherServlet` 拦截该请求；\n2.  `DispatcherServlet` 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 `HandlerMapping` 后获取对应 `Handler`；\n3.  `DispatcherServlet` 拿到 `Handler` 之后，找到 `HandlerAdapter` ，通过它来访问 `Handler`，并执行处理器；\n4.  执行 `Handler` 的逻辑，返回一个 `ModelAndView` 对象给 `DispatcherServlet`；\n5.  然后 `DispatcherServlet` 请求 `ViewResolver` 解析视图，根据逻辑视图名解析真正的 `View`；\n6.  然后 `ViewResolver` 将解析后的 `View` 返回给 `DispatcherServlet`，然后对 `View` 进行渲染；\n7.  然后由 `DispatcherServlet` 响应视图给浏览器；\n\n#### 6.2.4 SpringMVC 的优点\n\n1.  具有 Spring 的特性；\n2.  支持多种视图；\n3.  配置方便，非侵入；\n4.  分层更加清晰，利于团队开发的代码维护，以及可读性好；\n\n### 6.3 注解\n\n#### 6.3.1 注解原理\n\n注解本质上是一个集成了 `Annotation` 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 `AnnotationInvocationHandler` 的 `invoke` 方法，然后该方法从 `memberValues` 的 `Map` 中索引出对应的值；\n\n#### 6.3.2 常用注解\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@RequestMapping` | 用于处理请求 `url` 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径 |\n| `@RequestBody`    | 实现接收 `HTTP` 请求的 `json `数据，将 `json `转换为 Java 对象 |\n| `@ResponseBody`   | 实现将 `controller` 方法返回对象转化为 Json 对象响应给客户   |\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","source":"_posts/【剑指-Java】第-4-弹：绝对硬货，Spring-面试知识点总结大全.md","raw":"---\ntitle: 【剑指 Java】第 4 弹：绝对硬货，Spring 面试知识点总结大全\ntags:\n  - 面试\n  - Spring\n  - SpringBoot\n  - SpringMVC\ncategories:\n  - 剑指 Java\nabbrlink: c97353d2\ndate: 2021-05-02 22:51:31\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 1. Spring 特点\n\nSpring 主要有如下特点：\n\n1.  **轻量级**：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；\n2.  **控制反转（IoC）**：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；\n3.  **面向切面（AOP）**：支持面向切面编程，将应用业务逻辑层和系统服务层分开；\n4.  **容器**：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；\n5.  **框架集合**：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；\n\n## 2. Spring 核心组件\n\n![](https://img-blog.csdnimg.cn/img_convert/f8f52f31e2b1e4a5c63e5668d064cd79.png)\nSpring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。\n\n1.  **Spring Core**：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。\n2.  **Spring Context**：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。\n3.  **Spring AOP** ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。\n4.  **Spring DAO**：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。\n5.  **Spring ORM**：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；\n6.  **Spring Web**：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。\n7.  **Spring MVC**：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。\n\n## 3. Spring 常用注解\n\n| 注解                 | 说明                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| `@Controller`        | 1. 用于标注控制层组件<br />2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br />3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 `@RequestMapping`<br />4. 能够将 `Request` 请求 `header` 部分的值绑定到方法的参数上 |\n| `@RestController`    | 相当于 `@Component` 与 `@ResponseBody` 的组合                |\n| `@Component`         | 泛指组件，当组件不好归类时进行注解                           |\n| `@Repository`        | 用于注解 `DAO` 层，在 `DaoImpl` 类中注解                     |\n| `@Service`           | 用于注解业务层组件                                           |\n| `@ResponseBody`      | 1. 异步请求<br />2. 用于将 `Controller` 的方法返回的对象，通过适当的 `HttpMessageConverter` 转换为指定格式后，写入到 `Response` 对象的 `body` 数据区<br />3. 返回的数据并非 `html` 的页面，而是其他某种格式的数据（json、xml）时使用 |\n| `@RequestMapping`    | 用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径 |\n| `@Autowired`         | 对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 `@Autowired` 的使用来消除 `get、set` 方法 |\n| `@PathVariable`      | 用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数 |\n| `@RequestParam`      | 用于在 Spring MVC 后台控制层获取参数，类似 `request.getParameter(\"name\")` |\n| `@RequestHeader`     | 将 `Request` 请求 `header` 部分的值绑定到方法的参数上        |\n| `@ModelAttribute`    | 在该 `Controller` 所有方法在调用前，先执行该注解，可用于注解和方法参数中 |\n| `@SessionAttributes` | 将值放到 `session` 作用域，写在 `Class` 上面                 |\n| `@Valid`             | 实体数据校验，结合 Hibernate Validator 一起使用              |\n| `@CookieValue`       | 获取 `cookie` 中的值                                         |\n\n## 4. IoC 原理\n\n### 4.1 定义\n\nSpring 通过一个配置文件来描述 `Bean` 之间的相互依赖关系，利用 Java 的反射功能来实例化 `Bean` 并建立 `Bean` 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 `Bean` 实例缓存、生命周期管理、`Bean` 实例代理、事件发布、资源装载等高级服务；\n\n总结而言：**IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期**；\n\n### 4.2 Spring 容器高层视图\n\n![](https://img-blog.csdnimg.cn/img_convert/38c318f0471c891948870b4aeb7ef42b.png)\n\n1.  Spring 启动时先读取 `Bean` 配置信息，并在 Spring 容器中生成一份对应的 `Bean` 配置注册表；\n2.  根据上一步中生成的 `Bean` 配置注册表来实例化 `Bean`，并装配好 `Bean` 之间的依赖关系；\n3.  将实例化后的 `Bean` 装载到 Spring 容器中的 `Bean` 缓存池中，供上层的应用程序使用；\n\n### 4.3 Spring Bean 的作用域及生命周期\n\n#### 4.3.1 作用域\n\nSpring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。\n\nBean 的作用域主要有如下几种：\n\n1.  **Singleton（单例）**\n\n作用域为 `Singleton`，**该模式在多线程下不安全**，表明 IoC  容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 `id` 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。`Singleton` 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 **每次获取到的对象都是同一对象**。\n\n2.  **Prototype（原型）：每次创建时使用**\n\n作用域为 `Prototype`，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 **每次对该 Bean 请求时均创建一个新的 Bean 实例**。`Prototype` 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。\n\n3.  **Request：一次 request 一个实例**\n\n作用域为 `Request`，**表明在一次 `HTTP` 请求中，容器返回该 Bean 的同一个实例**，即每个 `HTTP` 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 `HTTP` 请求处理结束时，该作用域中的 Bean 实例均被销毁。\n\n4.  **Session**\n\n作用域为 `Session` ，表明 **在一个 `HTTP Session` 中，容器返回该 Bean 的同一个实例，对不同的 `Session` 请求则创建新的实例，该 `Bean` 实例仅在当前 `Session` 内有效**，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 `HTTP Session` 被废弃时，在该作用域内的 Bean 也将失效。\n\n| 作用域类别  | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| `Singleton` | Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值 |\n| `Prototype` | 每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 `getBean()` 方法，相当于 `new` 一个新的对象 |\n| `Request`   | 每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境 |\n| `Session`   | 每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境 |\n\n#### 4.3.2 生命周期\n\n1.  Spring 对 Bean 进行实例化；\n2.  Spring 将值和 Bean 的引用注入到 Bean 对应属性中；\n3.  若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；\n4.  若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 `setBeanFactory()` 方法，将 Bean 所在应用引用传入进来；\n5.  若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 `setApplicationContext()` 方法，将 Bean 所在应用的引用传入进来；\n6.  若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 `post-ProcessBeforeInitalization()` 方法；\n7.  若 Bean 实现了 `InitializingBean` 接口，Spring 将调用他们的 `after-PropertiesSet()` 方法，类似地，如果 Bean 使用 `init-method` 声明了初始化方法，则该方法也会被调用；\n8.  若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 `post-ProcessAfterInitialization()` 方法；\n9.  此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；\n10.  若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 `destory()` 接口方法；同样，若 Bean 使用 `destroy-method` 声明了销毁方法，该方法也将被调用；\n\n### 4.4 Spring 依赖注入的四种方式\n\n1.  **构造器注入**\n\n```java\n// 带参，方便用构造器进行注入\npublic CatDaoImpl(String name){\n\tthis.name = name;\n}\n```\n\n```xml\n<bean id=\"CatDaoImpl\" class=\"com.cunyu.CatDaoImpl\">\n\t<constructor-arg value=\"name\"></constructor-arg>\n</bean>\n```\n\n2.  **setter 方法注入**\n\n```java\npublic class Id {\n    private int id;\n    \n    public int getId() { \n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n}\n```\n\n```xml\n<bean id=\"id\" class=\"com.cunyu.Id \"> \n    <property name=\"id\" value=\"1801333\"></property> \n</bean>\n```\n\n3.  **静态工厂注入**\n\n所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；\n\n```java\n// 静态工厂\npublic class DaoFactory {\n    public static final FactoryDao getStaticFactoryDaoImpl(){\n        return new StaticFacotryDaoImpl();\n    }\n}\npublic class SpringAction {\n    // 需要注入的对象\n    private FactoryDao staticFactoryDao; \n    // 注入对象的 set 方法\n    public void setStaticFactoryDao(FactoryDao staticFactoryDao) {\n        this.staticFactoryDao = staticFactoryDao;\n    }\n}\n```\n\n```xml\n<bean name=\"springAction\" class=\"com.cunyu.SpringAction\" >\n    <!--利用静态工厂的方法注入对象-->\n    <property name=\"staticFactoryDao\" ref=\"staticFactoryDao\"></property>\n</bean>\n<!--从工厂类获取静态方法-->\n<bean name=\"staticFactoryDao\" class=\"com.cunyu.DaoFactory\" factory-method=\"getStaticFactoryDaoImpl\"></bean>\n```\n\n4.  **实例工厂**\n\n实例工厂表示获取对象实例的方法不是静态的，所以需要先 `new` 工厂类，然后再调用普通的实例方法；\n\n```java\n// 实例工厂\npublic class DaoFactory { \n    public FactoryDao getFactoryDaoImpl(){\n        return new FactoryDaoImpl();\n    }\n}\npublic class SpringAction {\n    // 注入对象\n    private FactoryDao factoryDao; \n    public void setFactoryDao(FactoryDao factoryDao) {\n        this.factoryDao = factoryDao;\n    }\n}\n```\n\n```xml\n<bean name=\"springAction\" class=\"com.cunyu.SpringAction\">\n    <!--使用实例工厂的方法注入对象,对应下面的配置文件-->\n    <property name=\"factoryDao\" ref=\"factoryDao\"></property>\n</bean>\n\n<!--此处获取对象的方式是从工厂类中获取实例方法-->\n<bean name=\"daoFactory\" class=\"com.cunyu.DaoFactory\"></bean>\n<bean name=\"factoryDao\" factory-bean=\"daoFactory\" factory-method=\"getFactoryDaoImpl\"></bean>\n```\n\n### 4.5 Spring 自动装配方式\n\n要实现自动装配，主要从如下两个角度来进行实现：\n\n1.  **组件扫描（Component Scanning）**：Spring 会自动发现应用上下文中所创建的 Bean；\n2.  **自动装配（Autowiring）**：Spring 自动满足 Bean 之间的依赖；\n\nSpring 装配包括 **手动转配和自动装配**，**手动装配是通过 `XML` 装配、构造方法、`setter` 方法等方式；**\n\n而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；\n\n| 装配方式      | 说明                                                         |\n| ------------- | ------------------------------------------------------------ |\n| `no`          | 默认不进行自动装配，通过显式设置 `ref` 属性来进行装配        |\n| `byName`      | 通过参数名自动装配，Spring 容器在配置文件中发现 `Bean` 的 `autowire` 属性被设置为 `byName` 后试图匹配、装载和该 `Bean` 的属性具有相同名字的 `Bean` |\n| `byType`      | 通过参数类型自动装配，Spring 容器在配置文件中发现 `Bean` 的 `autowire` 属性被设置为 `byType` 后试图匹配、装载和该 `Bean` 的属性具有相同了类型的 `Bean`，若发现多个 `Bean` 符合条件，则抛出错误 |\n| `constructor` | 类似于 `byType`，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常 |\n| `autodetect`  | 首先尝试使用 `constructor` 来自动装配，若无法工作，则使用 `byType` 方式 |\n\n### 4.6 IoC 的优缺点\n\n1.  **优点**：组件之间的解耦，提高程序可维护性、灵活性；\n2.  **缺点**：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；\n\n## 5. AOP 原理\n\n### 5.1 定义\n\n即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 `Aspect`，**即切面**。所谓切面即 **与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性**。\n\n通过使用横切，AOP 将软件切分为：**核心关注点和横切关注点**。业务处理的主要流程是核心关注点，与横切关注点关系不大。**横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似**。AOP 的作用就在于 **分离系统中的各种关注点，将核心关注点和横切关注点分离开**。\n\n### 5.2 核心概念\n\n### 5.3 AOP 的两种代理方式\n\nSpring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，**默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理**；\n\n1.  **JDK 动态接口代理**\n\n主要涉及 `Proxy` 和 `InvocationHandler`，`InvocationHandler` 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 `Proxy` 则利用 `InvocationHandler` 动态创建一个符合某一接口的实例，生成目标类的代理对象；\n\n2.  **CGlib 动态代理**\n\n全称 `Code Generation Library`，**是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。** CGlib 封装了 ASM，能在运行期间动态生成新的类。\n\n3.  **JDK 动态代理和 CGlib 动态代理的区别**\n\nJDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；\n\n### 5.4 切面的通知类型\n\n1.  **前置通知（Before）**：目标方法在被调用前调用通知；\n2.  **后置通知（After）**：目标方法完成后调用通知；\n3.  **返回通知（After-returning）**：目标方法成功执行之后调用通知；\n4.  **异常通知（After-throwing）**：目标方法抛出异常后调用通知；\n5.  **环绕通知（Around）**：在被通知的方法调用之前和调用之后执行自定义的行为；\n\n## 6. Spring MVC\n\n### 6.1 什么是 MVC 框架？\n\nMVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；\n\n采用 MVC 设计模式主要有如下好处：\n\n1.  通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；\n2.  有利于系统的并行开发，提升开发效率；\n\n### 6.2 SpringMVC\n\n#### 6.2.1 定义\n\nSpring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；\n\n#### 6.2.2 组件\n\n1.  `DispatcherServlet`：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，**用于接收请求、响应结果，相当于转发器，有了 `DispatcherServlet` 就减少了其他组件之间的耦合度**；\n2.  `HandlerMapping`：处理器映射器，根据 URL 路径映射到不同的 `Handler`；\n3.  `HandlerAdapter`：处理器适配器，按照 `HandlerAdapter` 的规则来执行 `Handler`；\n4.  `Handler`：处理器，由我们自己根据业务进行开发；\n5.  `ViewResolver`：视图解析器，将逻辑视图解析成具体的视图；\n6.  `View`：一个接口，支持不同的视图类型；\n\n#### 6.2.3 MVC 工作流程\n\n1.  浏览器发送请求，前端控制区 `DispatcherServlet` 拦截该请求；\n2.  `DispatcherServlet` 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 `HandlerMapping` 后获取对应 `Handler`；\n3.  `DispatcherServlet` 拿到 `Handler` 之后，找到 `HandlerAdapter` ，通过它来访问 `Handler`，并执行处理器；\n4.  执行 `Handler` 的逻辑，返回一个 `ModelAndView` 对象给 `DispatcherServlet`；\n5.  然后 `DispatcherServlet` 请求 `ViewResolver` 解析视图，根据逻辑视图名解析真正的 `View`；\n6.  然后 `ViewResolver` 将解析后的 `View` 返回给 `DispatcherServlet`，然后对 `View` 进行渲染；\n7.  然后由 `DispatcherServlet` 响应视图给浏览器；\n\n#### 6.2.4 SpringMVC 的优点\n\n1.  具有 Spring 的特性；\n2.  支持多种视图；\n3.  配置方便，非侵入；\n4.  分层更加清晰，利于团队开发的代码维护，以及可读性好；\n\n### 6.3 注解\n\n#### 6.3.1 注解原理\n\n注解本质上是一个集成了 `Annotation` 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 `AnnotationInvocationHandler` 的 `invoke` 方法，然后该方法从 `memberValues` 的 `Map` 中索引出对应的值；\n\n#### 6.3.2 常用注解\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@RequestMapping` | 用于处理请求 `url` 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径 |\n| `@RequestBody`    | 实现接收 `HTTP` 请求的 `json `数据，将 `json `转换为 Java 对象 |\n| `@ResponseBody`   | 实现将 `controller` 方法返回对象转化为 Json 对象响应给客户   |\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","slug":"【剑指-Java】第-4-弹：绝对硬货，Spring-面试知识点总结大全","published":1,"updated":"2021-05-02T14:57:37.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw1s004zbw34ch51hiu3","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-Spring-特点\"><a href=\"#1-Spring-特点\" class=\"headerlink\" title=\"1. Spring 特点\"></a>1. Spring 特点</h2><p>Spring 主要有如下特点：</p>\n<ol>\n<li><strong>轻量级</strong>：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；</li>\n<li><strong>控制反转（IoC）</strong>：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；</li>\n<li><strong>面向切面（AOP）</strong>：支持面向切面编程，将应用业务逻辑层和系统服务层分开；</li>\n<li><strong>容器</strong>：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；</li>\n<li><strong>框架集合</strong>：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；</li>\n</ol>\n<h2 id=\"2-Spring-核心组件\"><a href=\"#2-Spring-核心组件\" class=\"headerlink\" title=\"2. Spring 核心组件\"></a>2. Spring 核心组件</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f8f52f31e2b1e4a5c63e5668d064cd79.png\" alt=\"\"><br>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>\n<ol>\n<li><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>\n<li><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</li>\n<li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</li>\n<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>\n<li><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</li>\n<li><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</li>\n<li><strong>Spring MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</li>\n</ol>\n<h2 id=\"3-Spring-常用注解\"><a href=\"#3-Spring-常用注解\" class=\"headerlink\" title=\"3. Spring 常用注解\"></a>3. Spring 常用注解</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Controller</code></td>\n<td>1. 用于标注控制层组件<br>2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br>3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 <code>@RequestMapping</code><br>4. 能够将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@RestController</code></td>\n<td>相当于 <code>@Component</code> 与 <code>@ResponseBody</code> 的组合</td>\n</tr>\n<tr>\n<td><code>@Component</code></td>\n<td>泛指组件，当组件不好归类时进行注解</td>\n</tr>\n<tr>\n<td><code>@Repository</code></td>\n<td>用于注解 <code>DAO</code> 层，在 <code>DaoImpl</code> 类中注解</td>\n</tr>\n<tr>\n<td><code>@Service</code></td>\n<td>用于注解业务层组件</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>1. 异步请求<br>2. 用于将 <code>Controller</code> 的方法返回的对象，通过适当的 <code>HttpMessageConverter</code> 转换为指定格式后，写入到 <code>Response</code> 对象的 <code>body</code> 数据区<br>3. 返回的数据并非 <code>html</code> 的页面，而是其他某种格式的数据（json、xml）时使用</td>\n</tr>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@Autowired</code></td>\n<td>对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 <code>@Autowired</code> 的使用来消除 <code>get、set</code> 方法</td>\n</tr>\n<tr>\n<td><code>@PathVariable</code></td>\n<td>用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数</td>\n</tr>\n<tr>\n<td><code>@RequestParam</code></td>\n<td>用于在 Spring MVC 后台控制层获取参数，类似 <code>request.getParameter(\"name\")</code></td>\n</tr>\n<tr>\n<td><code>@RequestHeader</code></td>\n<td>将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@ModelAttribute</code></td>\n<td>在该 <code>Controller</code> 所有方法在调用前，先执行该注解，可用于注解和方法参数中</td>\n</tr>\n<tr>\n<td><code>@SessionAttributes</code></td>\n<td>将值放到 <code>session</code> 作用域，写在 <code>Class</code> 上面</td>\n</tr>\n<tr>\n<td><code>@Valid</code></td>\n<td>实体数据校验，结合 Hibernate Validator 一起使用</td>\n</tr>\n<tr>\n<td><code>@CookieValue</code></td>\n<td>获取 <code>cookie</code> 中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"4-IoC-原理\"><a href=\"#4-IoC-原理\" class=\"headerlink\" title=\"4. IoC 原理\"></a>4. IoC 原理</h2><h3 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h3><p>Spring 通过一个配置文件来描述 <code>Bean</code> 之间的相互依赖关系，利用 Java 的反射功能来实例化 <code>Bean</code> 并建立 <code>Bean</code> 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 <code>Bean</code> 实例缓存、生命周期管理、<code>Bean</code> 实例代理、事件发布、资源装载等高级服务；</p>\n<p>总结而言：<strong>IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期</strong>；</p>\n<h3 id=\"4-2-Spring-容器高层视图\"><a href=\"#4-2-Spring-容器高层视图\" class=\"headerlink\" title=\"4.2 Spring 容器高层视图\"></a>4.2 Spring 容器高层视图</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/38c318f0471c891948870b4aeb7ef42b.png\" alt=\"\"></p>\n<ol>\n<li>Spring 启动时先读取 <code>Bean</code> 配置信息，并在 Spring 容器中生成一份对应的 <code>Bean</code> 配置注册表；</li>\n<li>根据上一步中生成的 <code>Bean</code> 配置注册表来实例化 <code>Bean</code>，并装配好 <code>Bean</code> 之间的依赖关系；</li>\n<li>将实例化后的 <code>Bean</code> 装载到 Spring 容器中的 <code>Bean</code> 缓存池中，供上层的应用程序使用；</li>\n</ol>\n<h3 id=\"4-3-Spring-Bean-的作用域及生命周期\"><a href=\"#4-3-Spring-Bean-的作用域及生命周期\" class=\"headerlink\" title=\"4.3 Spring Bean 的作用域及生命周期\"></a>4.3 Spring Bean 的作用域及生命周期</h3><h4 id=\"4-3-1-作用域\"><a href=\"#4-3-1-作用域\" class=\"headerlink\" title=\"4.3.1 作用域\"></a>4.3.1 作用域</h4><p>Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。</p>\n<p>Bean 的作用域主要有如下几种：</p>\n<ol>\n<li><strong>Singleton（单例）</strong></li>\n</ol>\n<p>作用域为 <code>Singleton</code>，<strong>该模式在多线程下不安全</strong>，表明 IoC  容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 <code>id</code> 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。<code>Singleton</code> 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 <strong>每次获取到的对象都是同一对象</strong>。</p>\n<ol>\n<li><strong>Prototype（原型）：每次创建时使用</strong></li>\n</ol>\n<p>作用域为 <code>Prototype</code>，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 <strong>每次对该 Bean 请求时均创建一个新的 Bean 实例</strong>。<code>Prototype</code> 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。</p>\n<ol>\n<li><strong>Request：一次 request 一个实例</strong></li>\n</ol>\n<p>作用域为 <code>Request</code>，<strong>表明在一次 <code>HTTP</code> 请求中，容器返回该 Bean 的同一个实例</strong>，即每个 <code>HTTP</code> 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 <code>HTTP</code> 请求处理结束时，该作用域中的 Bean 实例均被销毁。</p>\n<ol>\n<li><strong>Session</strong></li>\n</ol>\n<p>作用域为 <code>Session</code> ，表明 <strong>在一个 <code>HTTP Session</code> 中，容器返回该 Bean 的同一个实例，对不同的 <code>Session</code> 请求则创建新的实例，该 <code>Bean</code> 实例仅在当前 <code>Session</code> 内有效</strong>，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 <code>HTTP Session</code> 被废弃时，在该作用域内的 Bean 也将失效。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>作用域类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Singleton</code></td>\n<td>Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值</td>\n</tr>\n<tr>\n<td><code>Prototype</code></td>\n<td>每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 <code>getBean()</code> 方法，相当于 <code>new</code> 一个新的对象</td>\n</tr>\n<tr>\n<td><code>Request</code></td>\n<td>每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td><code>Session</code></td>\n<td>每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"4-3-2-生命周期\"><a href=\"#4-3-2-生命周期\" class=\"headerlink\" title=\"4.3.2 生命周期\"></a>4.3.2 生命周期</h4><ol>\n<li>Spring 对 Bean 进行实例化；</li>\n<li>Spring 将值和 Bean 的引用注入到 Bean 对应属性中；</li>\n<li>若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；</li>\n<li>若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 <code>setBeanFactory()</code> 方法，将 Bean 所在应用引用传入进来；</li>\n<li>若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 <code>setApplicationContext()</code> 方法，将 Bean 所在应用的引用传入进来；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 <code>post-ProcessBeforeInitalization()</code> 方法；</li>\n<li>若 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用他们的 <code>after-PropertiesSet()</code> 方法，类似地，如果 Bean 使用 <code>init-method</code> 声明了初始化方法，则该方法也会被调用；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 <code>post-ProcessAfterInitialization()</code> 方法；</li>\n<li>此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；</li>\n<li>若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 <code>destory()</code> 接口方法；同样，若 Bean 使用 <code>destroy-method</code> 声明了销毁方法，该方法也将被调用；</li>\n</ol>\n<h3 id=\"4-4-Spring-依赖注入的四种方式\"><a href=\"#4-4-Spring-依赖注入的四种方式\" class=\"headerlink\" title=\"4.4 Spring 依赖注入的四种方式\"></a>4.4 Spring 依赖注入的四种方式</h3><ol>\n<li><strong>构造器注入</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 带参，方便用构造器进行注入</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">CatDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CatDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.CatDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>setter 方法注入</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Id</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.Id <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1801333<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>静态工厂注入</strong></li>\n</ol>\n<p>所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 静态工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FactoryDao</span> <span class=\"token function\">getStaticFactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticFacotryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAction</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 需要注入的对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FactoryDao</span> staticFactoryDao<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 注入对象的 set 方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStaticFactoryDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FactoryDao</span> staticFactoryDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>staticFactoryDao <span class=\"token operator\">=</span> staticFactoryDao<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>springAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.SpringAction<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!--利用静态工厂的方法注入对象--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--从工厂类获取静态方法--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.DaoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getStaticFactoryDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>实例工厂</strong></li>\n</ol>\n<p>实例工厂表示获取对象实例的方法不是静态的，所以需要先 <code>new</code> 工厂类，然后再调用普通的实例方法；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 实例工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoFactory</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FactoryDao</span> <span class=\"token function\">getFactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAction</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 注入对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FactoryDao</span> factoryDao<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFactoryDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FactoryDao</span> factoryDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factoryDao <span class=\"token operator\">=</span> factoryDao<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>springAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.SpringAction<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!--使用实例工厂的方法注入对象,对应下面的配置文件--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!--此处获取对象的方式是从工厂类中获取实例方法--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>daoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.DaoFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>daoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getFactoryDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-5-Spring-自动装配方式\"><a href=\"#4-5-Spring-自动装配方式\" class=\"headerlink\" title=\"4.5 Spring 自动装配方式\"></a>4.5 Spring 自动装配方式</h3><p>要实现自动装配，主要从如下两个角度来进行实现：</p>\n<ol>\n<li><strong>组件扫描（Component Scanning）</strong>：Spring 会自动发现应用上下文中所创建的 Bean；</li>\n<li><strong>自动装配（Autowiring）</strong>：Spring 自动满足 Bean 之间的依赖；</li>\n</ol>\n<p>Spring 装配包括 <strong>手动转配和自动装配</strong>，<strong>手动装配是通过 <code>XML</code> 装配、构造方法、<code>setter</code> 方法等方式；</strong></p>\n<p>而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>装配方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>no</code></td>\n<td>默认不进行自动装配，通过显式设置 <code>ref</code> 属性来进行装配</td>\n</tr>\n<tr>\n<td><code>byName</code></td>\n<td>通过参数名自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byName</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同名字的 <code>Bean</code></td>\n</tr>\n<tr>\n<td><code>byType</code></td>\n<td>通过参数类型自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byType</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同了类型的 <code>Bean</code>，若发现多个 <code>Bean</code> 符合条件，则抛出错误</td>\n</tr>\n<tr>\n<td><code>constructor</code></td>\n<td>类似于 <code>byType</code>，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常</td>\n</tr>\n<tr>\n<td><code>autodetect</code></td>\n<td>首先尝试使用 <code>constructor</code> 来自动装配，若无法工作，则使用 <code>byType</code> 方式</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-6-IoC-的优缺点\"><a href=\"#4-6-IoC-的优缺点\" class=\"headerlink\" title=\"4.6 IoC 的优缺点\"></a>4.6 IoC 的优缺点</h3><ol>\n<li><strong>优点</strong>：组件之间的解耦，提高程序可维护性、灵活性；</li>\n<li><strong>缺点</strong>：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；</li>\n</ol>\n<h2 id=\"5-AOP-原理\"><a href=\"#5-AOP-原理\" class=\"headerlink\" title=\"5. AOP 原理\"></a>5. AOP 原理</h2><h3 id=\"5-1-定义\"><a href=\"#5-1-定义\" class=\"headerlink\" title=\"5.1 定义\"></a>5.1 定义</h3><p>即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 <code>Aspect</code>，<strong>即切面</strong>。所谓切面即 <strong>与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性</strong>。</p>\n<p>通过使用横切，AOP 将软件切分为：<strong>核心关注点和横切关注点</strong>。业务处理的主要流程是核心关注点，与横切关注点关系不大。<strong>横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似</strong>。AOP 的作用就在于 <strong>分离系统中的各种关注点，将核心关注点和横切关注点分离开</strong>。</p>\n<h3 id=\"5-2-核心概念\"><a href=\"#5-2-核心概念\" class=\"headerlink\" title=\"5.2 核心概念\"></a>5.2 核心概念</h3><h3 id=\"5-3-AOP-的两种代理方式\"><a href=\"#5-3-AOP-的两种代理方式\" class=\"headerlink\" title=\"5.3 AOP 的两种代理方式\"></a>5.3 AOP 的两种代理方式</h3><p>Spring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，<strong>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理</strong>；</p>\n<ol>\n<li><strong>JDK 动态接口代理</strong></li>\n</ol>\n<p>主要涉及 <code>Proxy</code> 和 <code>InvocationHandler</code>，<code>InvocationHandler</code> 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 <code>Proxy</code> 则利用 <code>InvocationHandler</code> 动态创建一个符合某一接口的实例，生成目标类的代理对象；</p>\n<ol>\n<li><strong>CGlib 动态代理</strong></li>\n</ol>\n<p>全称 <code>Code Generation Library</code>，<strong>是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。</strong> CGlib 封装了 ASM，能在运行期间动态生成新的类。</p>\n<ol>\n<li><strong>JDK 动态代理和 CGlib 动态代理的区别</strong></li>\n</ol>\n<p>JDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；</p>\n<h3 id=\"5-4-切面的通知类型\"><a href=\"#5-4-切面的通知类型\" class=\"headerlink\" title=\"5.4 切面的通知类型\"></a>5.4 切面的通知类型</h3><ol>\n<li><strong>前置通知（Before）</strong>：目标方法在被调用前调用通知；</li>\n<li><strong>后置通知（After）</strong>：目标方法完成后调用通知；</li>\n<li><strong>返回通知（After-returning）</strong>：目标方法成功执行之后调用通知；</li>\n<li><strong>异常通知（After-throwing）</strong>：目标方法抛出异常后调用通知；</li>\n<li><strong>环绕通知（Around）</strong>：在被通知的方法调用之前和调用之后执行自定义的行为；</li>\n</ol>\n<h2 id=\"6-Spring-MVC\"><a href=\"#6-Spring-MVC\" class=\"headerlink\" title=\"6. Spring MVC\"></a>6. Spring MVC</h2><h3 id=\"6-1-什么是-MVC-框架？\"><a href=\"#6-1-什么是-MVC-框架？\" class=\"headerlink\" title=\"6.1 什么是 MVC 框架？\"></a>6.1 什么是 MVC 框架？</h3><p>MVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；</p>\n<p>采用 MVC 设计模式主要有如下好处：</p>\n<ol>\n<li>通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；</li>\n<li>有利于系统的并行开发，提升开发效率；</li>\n</ol>\n<h3 id=\"6-2-SpringMVC\"><a href=\"#6-2-SpringMVC\" class=\"headerlink\" title=\"6.2 SpringMVC\"></a>6.2 SpringMVC</h3><h4 id=\"6-2-1-定义\"><a href=\"#6-2-1-定义\" class=\"headerlink\" title=\"6.2.1 定义\"></a>6.2.1 定义</h4><p>Spring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；</p>\n<h4 id=\"6-2-2-组件\"><a href=\"#6-2-2-组件\" class=\"headerlink\" title=\"6.2.2 组件\"></a>6.2.2 组件</h4><ol>\n<li><code>DispatcherServlet</code>：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，<strong>用于接收请求、响应结果，相当于转发器，有了 <code>DispatcherServlet</code> 就减少了其他组件之间的耦合度</strong>；</li>\n<li><code>HandlerMapping</code>：处理器映射器，根据 URL 路径映射到不同的 <code>Handler</code>；</li>\n<li><code>HandlerAdapter</code>：处理器适配器，按照 <code>HandlerAdapter</code> 的规则来执行 <code>Handler</code>；</li>\n<li><code>Handler</code>：处理器，由我们自己根据业务进行开发；</li>\n<li><code>ViewResolver</code>：视图解析器，将逻辑视图解析成具体的视图；</li>\n<li><code>View</code>：一个接口，支持不同的视图类型；</li>\n</ol>\n<h4 id=\"6-2-3-MVC-工作流程\"><a href=\"#6-2-3-MVC-工作流程\" class=\"headerlink\" title=\"6.2.3 MVC 工作流程\"></a>6.2.3 MVC 工作流程</h4><ol>\n<li>浏览器发送请求，前端控制区 <code>DispatcherServlet</code> 拦截该请求；</li>\n<li><code>DispatcherServlet</code> 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 <code>HandlerMapping</code> 后获取对应 <code>Handler</code>；</li>\n<li><code>DispatcherServlet</code> 拿到 <code>Handler</code> 之后，找到 <code>HandlerAdapter</code> ，通过它来访问 <code>Handler</code>，并执行处理器；</li>\n<li>执行 <code>Handler</code> 的逻辑，返回一个 <code>ModelAndView</code> 对象给 <code>DispatcherServlet</code>；</li>\n<li>然后 <code>DispatcherServlet</code> 请求 <code>ViewResolver</code> 解析视图，根据逻辑视图名解析真正的 <code>View</code>；</li>\n<li>然后 <code>ViewResolver</code> 将解析后的 <code>View</code> 返回给 <code>DispatcherServlet</code>，然后对 <code>View</code> 进行渲染；</li>\n<li>然后由 <code>DispatcherServlet</code> 响应视图给浏览器；</li>\n</ol>\n<h4 id=\"6-2-4-SpringMVC-的优点\"><a href=\"#6-2-4-SpringMVC-的优点\" class=\"headerlink\" title=\"6.2.4 SpringMVC 的优点\"></a>6.2.4 SpringMVC 的优点</h4><ol>\n<li>具有 Spring 的特性；</li>\n<li>支持多种视图；</li>\n<li>配置方便，非侵入；</li>\n<li>分层更加清晰，利于团队开发的代码维护，以及可读性好；</li>\n</ol>\n<h3 id=\"6-3-注解\"><a href=\"#6-3-注解\" class=\"headerlink\" title=\"6.3 注解\"></a>6.3 注解</h3><h4 id=\"6-3-1-注解原理\"><a href=\"#6-3-1-注解原理\" class=\"headerlink\" title=\"6.3.1 注解原理\"></a>6.3.1 注解原理</h4><p>注解本质上是一个集成了 <code>Annotation</code> 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法，然后该方法从 <code>memberValues</code> 的 <code>Map</code> 中索引出对应的值；</p>\n<h4 id=\"6-3-2-常用注解\"><a href=\"#6-3-2-常用注解\" class=\"headerlink\" title=\"6.3.2 常用注解\"></a>6.3.2 常用注解</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求 <code>url</code> 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@RequestBody</code></td>\n<td>实现接收 <code>HTTP</code> 请求的 <code>json</code>数据，将 <code>json</code>转换为 Java 对象</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>实现将 <code>controller</code> 方法返回对象转化为 Json 对象响应给客户</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"1-Spring-特点\"><a href=\"#1-Spring-特点\" class=\"headerlink\" title=\"1. Spring 特点\"></a>1. Spring 特点</h2><p>Spring 主要有如下特点：</p>\n<ol>\n<li><strong>轻量级</strong>：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；</li>\n<li><strong>控制反转（IoC）</strong>：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；</li>\n<li><strong>面向切面（AOP）</strong>：支持面向切面编程，将应用业务逻辑层和系统服务层分开；</li>\n<li><strong>容器</strong>：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；</li>\n<li><strong>框架集合</strong>：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；</li>\n</ol>\n<h2 id=\"2-Spring-核心组件\"><a href=\"#2-Spring-核心组件\" class=\"headerlink\" title=\"2. Spring 核心组件\"></a>2. Spring 核心组件</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f8f52f31e2b1e4a5c63e5668d064cd79.png\" alt=\"\"><br>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>\n<ol>\n<li><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>\n<li><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</li>\n<li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</li>\n<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>\n<li><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</li>\n<li><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</li>\n<li><strong>Spring MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</li>\n</ol>\n<h2 id=\"3-Spring-常用注解\"><a href=\"#3-Spring-常用注解\" class=\"headerlink\" title=\"3. Spring 常用注解\"></a>3. Spring 常用注解</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Controller</code></td>\n<td>1. 用于标注控制层组件<br />2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br />3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 <code>@RequestMapping</code><br />4. 能够将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@RestController</code></td>\n<td>相当于 <code>@Component</code> 与 <code>@ResponseBody</code> 的组合</td>\n</tr>\n<tr>\n<td><code>@Component</code></td>\n<td>泛指组件，当组件不好归类时进行注解</td>\n</tr>\n<tr>\n<td><code>@Repository</code></td>\n<td>用于注解 <code>DAO</code> 层，在 <code>DaoImpl</code> 类中注解</td>\n</tr>\n<tr>\n<td><code>@Service</code></td>\n<td>用于注解业务层组件</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>1. 异步请求<br />2. 用于将 <code>Controller</code> 的方法返回的对象，通过适当的 <code>HttpMessageConverter</code> 转换为指定格式后，写入到 <code>Response</code> 对象的 <code>body</code> 数据区<br />3. 返回的数据并非 <code>html</code> 的页面，而是其他某种格式的数据（json、xml）时使用</td>\n</tr>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@Autowired</code></td>\n<td>对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 <code>@Autowired</code> 的使用来消除 <code>get、set</code> 方法</td>\n</tr>\n<tr>\n<td><code>@PathVariable</code></td>\n<td>用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数</td>\n</tr>\n<tr>\n<td><code>@RequestParam</code></td>\n<td>用于在 Spring MVC 后台控制层获取参数，类似 <code>request.getParameter(&quot;name&quot;)</code></td>\n</tr>\n<tr>\n<td><code>@RequestHeader</code></td>\n<td>将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@ModelAttribute</code></td>\n<td>在该 <code>Controller</code> 所有方法在调用前，先执行该注解，可用于注解和方法参数中</td>\n</tr>\n<tr>\n<td><code>@SessionAttributes</code></td>\n<td>将值放到 <code>session</code> 作用域，写在 <code>Class</code> 上面</td>\n</tr>\n<tr>\n<td><code>@Valid</code></td>\n<td>实体数据校验，结合 Hibernate Validator 一起使用</td>\n</tr>\n<tr>\n<td><code>@CookieValue</code></td>\n<td>获取 <code>cookie</code> 中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"4-IoC-原理\"><a href=\"#4-IoC-原理\" class=\"headerlink\" title=\"4. IoC 原理\"></a>4. IoC 原理</h2><h3 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h3><p>Spring 通过一个配置文件来描述 <code>Bean</code> 之间的相互依赖关系，利用 Java 的反射功能来实例化 <code>Bean</code> 并建立 <code>Bean</code> 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 <code>Bean</code> 实例缓存、生命周期管理、<code>Bean</code> 实例代理、事件发布、资源装载等高级服务；</p>\n<p>总结而言：<strong>IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期</strong>；</p>\n<h3 id=\"4-2-Spring-容器高层视图\"><a href=\"#4-2-Spring-容器高层视图\" class=\"headerlink\" title=\"4.2 Spring 容器高层视图\"></a>4.2 Spring 容器高层视图</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/38c318f0471c891948870b4aeb7ef42b.png\" alt=\"\"></p>\n<ol>\n<li>Spring 启动时先读取 <code>Bean</code> 配置信息，并在 Spring 容器中生成一份对应的 <code>Bean</code> 配置注册表；</li>\n<li>根据上一步中生成的 <code>Bean</code> 配置注册表来实例化 <code>Bean</code>，并装配好 <code>Bean</code> 之间的依赖关系；</li>\n<li>将实例化后的 <code>Bean</code> 装载到 Spring 容器中的 <code>Bean</code> 缓存池中，供上层的应用程序使用；</li>\n</ol>\n<h3 id=\"4-3-Spring-Bean-的作用域及生命周期\"><a href=\"#4-3-Spring-Bean-的作用域及生命周期\" class=\"headerlink\" title=\"4.3 Spring Bean 的作用域及生命周期\"></a>4.3 Spring Bean 的作用域及生命周期</h3><h4 id=\"4-3-1-作用域\"><a href=\"#4-3-1-作用域\" class=\"headerlink\" title=\"4.3.1 作用域\"></a>4.3.1 作用域</h4><p>Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。</p>\n<p>Bean 的作用域主要有如下几种：</p>\n<ol>\n<li><strong>Singleton（单例）</strong></li>\n</ol>\n<p>作用域为 <code>Singleton</code>，<strong>该模式在多线程下不安全</strong>，表明 IoC  容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 <code>id</code> 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。<code>Singleton</code> 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 <strong>每次获取到的对象都是同一对象</strong>。</p>\n<ol>\n<li><strong>Prototype（原型）：每次创建时使用</strong></li>\n</ol>\n<p>作用域为 <code>Prototype</code>，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 <strong>每次对该 Bean 请求时均创建一个新的 Bean 实例</strong>。<code>Prototype</code> 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。</p>\n<ol>\n<li><strong>Request：一次 request 一个实例</strong></li>\n</ol>\n<p>作用域为 <code>Request</code>，<strong>表明在一次 <code>HTTP</code> 请求中，容器返回该 Bean 的同一个实例</strong>，即每个 <code>HTTP</code> 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 <code>HTTP</code> 请求处理结束时，该作用域中的 Bean 实例均被销毁。</p>\n<ol>\n<li><strong>Session</strong></li>\n</ol>\n<p>作用域为 <code>Session</code> ，表明 <strong>在一个 <code>HTTP Session</code> 中，容器返回该 Bean 的同一个实例，对不同的 <code>Session</code> 请求则创建新的实例，该 <code>Bean</code> 实例仅在当前 <code>Session</code> 内有效</strong>，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 <code>HTTP Session</code> 被废弃时，在该作用域内的 Bean 也将失效。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>作用域类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Singleton</code></td>\n<td>Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值</td>\n</tr>\n<tr>\n<td><code>Prototype</code></td>\n<td>每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 <code>getBean()</code> 方法，相当于 <code>new</code> 一个新的对象</td>\n</tr>\n<tr>\n<td><code>Request</code></td>\n<td>每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td><code>Session</code></td>\n<td>每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"4-3-2-生命周期\"><a href=\"#4-3-2-生命周期\" class=\"headerlink\" title=\"4.3.2 生命周期\"></a>4.3.2 生命周期</h4><ol>\n<li>Spring 对 Bean 进行实例化；</li>\n<li>Spring 将值和 Bean 的引用注入到 Bean 对应属性中；</li>\n<li>若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；</li>\n<li>若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 <code>setBeanFactory()</code> 方法，将 Bean 所在应用引用传入进来；</li>\n<li>若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 <code>setApplicationContext()</code> 方法，将 Bean 所在应用的引用传入进来；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 <code>post-ProcessBeforeInitalization()</code> 方法；</li>\n<li>若 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用他们的 <code>after-PropertiesSet()</code> 方法，类似地，如果 Bean 使用 <code>init-method</code> 声明了初始化方法，则该方法也会被调用；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 <code>post-ProcessAfterInitialization()</code> 方法；</li>\n<li>此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；</li>\n<li>若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 <code>destory()</code> 接口方法；同样，若 Bean 使用 <code>destroy-method</code> 声明了销毁方法，该方法也将被调用；</li>\n</ol>\n<h3 id=\"4-4-Spring-依赖注入的四种方式\"><a href=\"#4-4-Spring-依赖注入的四种方式\" class=\"headerlink\" title=\"4.4 Spring 依赖注入的四种方式\"></a>4.4 Spring 依赖注入的四种方式</h3><ol>\n<li><strong>构造器注入</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 带参，方便用构造器进行注入</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">CatDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CatDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.CatDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>setter 方法注入</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Id</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.Id <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1801333<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>静态工厂注入</strong></li>\n</ol>\n<p>所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 静态工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FactoryDao</span> <span class=\"token function\">getStaticFactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticFacotryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAction</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 需要注入的对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FactoryDao</span> staticFactoryDao<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 注入对象的 set 方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStaticFactoryDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FactoryDao</span> staticFactoryDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>staticFactoryDao <span class=\"token operator\">=</span> staticFactoryDao<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>springAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.SpringAction<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--利用静态工厂的方法注入对象--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--从工厂类获取静态方法--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staticFactoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.DaoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getStaticFactoryDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>实例工厂</strong></li>\n</ol>\n<p>实例工厂表示获取对象实例的方法不是静态的，所以需要先 <code>new</code> 工厂类，然后再调用普通的实例方法；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 实例工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoFactory</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FactoryDao</span> <span class=\"token function\">getFactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FactoryDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAction</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 注入对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FactoryDao</span> factoryDao<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFactoryDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FactoryDao</span> factoryDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factoryDao <span class=\"token operator\">=</span> factoryDao<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>springAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.SpringAction<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--使用实例工厂的方法注入对象,对应下面的配置文件--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--此处获取对象的方式是从工厂类中获取实例方法--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>daoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cunyu.DaoFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factoryDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>daoFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getFactoryDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-5-Spring-自动装配方式\"><a href=\"#4-5-Spring-自动装配方式\" class=\"headerlink\" title=\"4.5 Spring 自动装配方式\"></a>4.5 Spring 自动装配方式</h3><p>要实现自动装配，主要从如下两个角度来进行实现：</p>\n<ol>\n<li><strong>组件扫描（Component Scanning）</strong>：Spring 会自动发现应用上下文中所创建的 Bean；</li>\n<li><strong>自动装配（Autowiring）</strong>：Spring 自动满足 Bean 之间的依赖；</li>\n</ol>\n<p>Spring 装配包括 <strong>手动转配和自动装配</strong>，<strong>手动装配是通过 <code>XML</code> 装配、构造方法、<code>setter</code> 方法等方式；</strong></p>\n<p>而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>装配方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>no</code></td>\n<td>默认不进行自动装配，通过显式设置 <code>ref</code> 属性来进行装配</td>\n</tr>\n<tr>\n<td><code>byName</code></td>\n<td>通过参数名自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byName</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同名字的 <code>Bean</code></td>\n</tr>\n<tr>\n<td><code>byType</code></td>\n<td>通过参数类型自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byType</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同了类型的 <code>Bean</code>，若发现多个 <code>Bean</code> 符合条件，则抛出错误</td>\n</tr>\n<tr>\n<td><code>constructor</code></td>\n<td>类似于 <code>byType</code>，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常</td>\n</tr>\n<tr>\n<td><code>autodetect</code></td>\n<td>首先尝试使用 <code>constructor</code> 来自动装配，若无法工作，则使用 <code>byType</code> 方式</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-6-IoC-的优缺点\"><a href=\"#4-6-IoC-的优缺点\" class=\"headerlink\" title=\"4.6 IoC 的优缺点\"></a>4.6 IoC 的优缺点</h3><ol>\n<li><strong>优点</strong>：组件之间的解耦，提高程序可维护性、灵活性；</li>\n<li><strong>缺点</strong>：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；</li>\n</ol>\n<h2 id=\"5-AOP-原理\"><a href=\"#5-AOP-原理\" class=\"headerlink\" title=\"5. AOP 原理\"></a>5. AOP 原理</h2><h3 id=\"5-1-定义\"><a href=\"#5-1-定义\" class=\"headerlink\" title=\"5.1 定义\"></a>5.1 定义</h3><p>即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 <code>Aspect</code>，<strong>即切面</strong>。所谓切面即 <strong>与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性</strong>。</p>\n<p>通过使用横切，AOP 将软件切分为：<strong>核心关注点和横切关注点</strong>。业务处理的主要流程是核心关注点，与横切关注点关系不大。<strong>横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似</strong>。AOP 的作用就在于 <strong>分离系统中的各种关注点，将核心关注点和横切关注点分离开</strong>。</p>\n<h3 id=\"5-2-核心概念\"><a href=\"#5-2-核心概念\" class=\"headerlink\" title=\"5.2 核心概念\"></a>5.2 核心概念</h3><h3 id=\"5-3-AOP-的两种代理方式\"><a href=\"#5-3-AOP-的两种代理方式\" class=\"headerlink\" title=\"5.3 AOP 的两种代理方式\"></a>5.3 AOP 的两种代理方式</h3><p>Spring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，<strong>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理</strong>；</p>\n<ol>\n<li><strong>JDK 动态接口代理</strong></li>\n</ol>\n<p>主要涉及 <code>Proxy</code> 和 <code>InvocationHandler</code>，<code>InvocationHandler</code> 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 <code>Proxy</code> 则利用 <code>InvocationHandler</code> 动态创建一个符合某一接口的实例，生成目标类的代理对象；</p>\n<ol>\n<li><strong>CGlib 动态代理</strong></li>\n</ol>\n<p>全称 <code>Code Generation Library</code>，<strong>是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。</strong> CGlib 封装了 ASM，能在运行期间动态生成新的类。</p>\n<ol>\n<li><strong>JDK 动态代理和 CGlib 动态代理的区别</strong></li>\n</ol>\n<p>JDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；</p>\n<h3 id=\"5-4-切面的通知类型\"><a href=\"#5-4-切面的通知类型\" class=\"headerlink\" title=\"5.4 切面的通知类型\"></a>5.4 切面的通知类型</h3><ol>\n<li><strong>前置通知（Before）</strong>：目标方法在被调用前调用通知；</li>\n<li><strong>后置通知（After）</strong>：目标方法完成后调用通知；</li>\n<li><strong>返回通知（After-returning）</strong>：目标方法成功执行之后调用通知；</li>\n<li><strong>异常通知（After-throwing）</strong>：目标方法抛出异常后调用通知；</li>\n<li><strong>环绕通知（Around）</strong>：在被通知的方法调用之前和调用之后执行自定义的行为；</li>\n</ol>\n<h2 id=\"6-Spring-MVC\"><a href=\"#6-Spring-MVC\" class=\"headerlink\" title=\"6. Spring MVC\"></a>6. Spring MVC</h2><h3 id=\"6-1-什么是-MVC-框架？\"><a href=\"#6-1-什么是-MVC-框架？\" class=\"headerlink\" title=\"6.1 什么是 MVC 框架？\"></a>6.1 什么是 MVC 框架？</h3><p>MVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；</p>\n<p>采用 MVC 设计模式主要有如下好处：</p>\n<ol>\n<li>通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；</li>\n<li>有利于系统的并行开发，提升开发效率；</li>\n</ol>\n<h3 id=\"6-2-SpringMVC\"><a href=\"#6-2-SpringMVC\" class=\"headerlink\" title=\"6.2 SpringMVC\"></a>6.2 SpringMVC</h3><h4 id=\"6-2-1-定义\"><a href=\"#6-2-1-定义\" class=\"headerlink\" title=\"6.2.1 定义\"></a>6.2.1 定义</h4><p>Spring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；</p>\n<h4 id=\"6-2-2-组件\"><a href=\"#6-2-2-组件\" class=\"headerlink\" title=\"6.2.2 组件\"></a>6.2.2 组件</h4><ol>\n<li><code>DispatcherServlet</code>：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，<strong>用于接收请求、响应结果，相当于转发器，有了 <code>DispatcherServlet</code> 就减少了其他组件之间的耦合度</strong>；</li>\n<li><code>HandlerMapping</code>：处理器映射器，根据 URL 路径映射到不同的 <code>Handler</code>；</li>\n<li><code>HandlerAdapter</code>：处理器适配器，按照 <code>HandlerAdapter</code> 的规则来执行 <code>Handler</code>；</li>\n<li><code>Handler</code>：处理器，由我们自己根据业务进行开发；</li>\n<li><code>ViewResolver</code>：视图解析器，将逻辑视图解析成具体的视图；</li>\n<li><code>View</code>：一个接口，支持不同的视图类型；</li>\n</ol>\n<h4 id=\"6-2-3-MVC-工作流程\"><a href=\"#6-2-3-MVC-工作流程\" class=\"headerlink\" title=\"6.2.3 MVC 工作流程\"></a>6.2.3 MVC 工作流程</h4><ol>\n<li>浏览器发送请求，前端控制区 <code>DispatcherServlet</code> 拦截该请求；</li>\n<li><code>DispatcherServlet</code> 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 <code>HandlerMapping</code> 后获取对应 <code>Handler</code>；</li>\n<li><code>DispatcherServlet</code> 拿到 <code>Handler</code> 之后，找到 <code>HandlerAdapter</code> ，通过它来访问 <code>Handler</code>，并执行处理器；</li>\n<li>执行 <code>Handler</code> 的逻辑，返回一个 <code>ModelAndView</code> 对象给 <code>DispatcherServlet</code>；</li>\n<li>然后 <code>DispatcherServlet</code> 请求 <code>ViewResolver</code> 解析视图，根据逻辑视图名解析真正的 <code>View</code>；</li>\n<li>然后 <code>ViewResolver</code> 将解析后的 <code>View</code> 返回给 <code>DispatcherServlet</code>，然后对 <code>View</code> 进行渲染；</li>\n<li>然后由 <code>DispatcherServlet</code> 响应视图给浏览器；</li>\n</ol>\n<h4 id=\"6-2-4-SpringMVC-的优点\"><a href=\"#6-2-4-SpringMVC-的优点\" class=\"headerlink\" title=\"6.2.4 SpringMVC 的优点\"></a>6.2.4 SpringMVC 的优点</h4><ol>\n<li>具有 Spring 的特性；</li>\n<li>支持多种视图；</li>\n<li>配置方便，非侵入；</li>\n<li>分层更加清晰，利于团队开发的代码维护，以及可读性好；</li>\n</ol>\n<h3 id=\"6-3-注解\"><a href=\"#6-3-注解\" class=\"headerlink\" title=\"6.3 注解\"></a>6.3 注解</h3><h4 id=\"6-3-1-注解原理\"><a href=\"#6-3-1-注解原理\" class=\"headerlink\" title=\"6.3.1 注解原理\"></a>6.3.1 注解原理</h4><p>注解本质上是一个集成了 <code>Annotation</code> 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法，然后该方法从 <code>memberValues</code> 的 <code>Map</code> 中索引出对应的值；</p>\n<h4 id=\"6-3-2-常用注解\"><a href=\"#6-3-2-常用注解\" class=\"headerlink\" title=\"6.3.2 常用注解\"></a>6.3.2 常用注解</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求 <code>url</code> 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@RequestBody</code></td>\n<td>实现接收 <code>HTTP</code> 请求的 <code>json</code>数据，将 <code>json</code>转换为 Java 对象</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>实现将 <code>controller</code> 方法返回对象转化为 Json 对象响应给客户</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n"},{"title":"【Java 从入坑到放弃】JDBC 编程指北","mathjax":true,"toc":true,"abbrlink":"3e435af2","date":"2021-05-04T03:12:47.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：\n\n-   **JDBC 简介**\n-   **数据的增删改查**\n-   **事务**\n-   **连接池**\n\n## JDBC 简介\n\nJDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。\n\n本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。\n\n首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：https://downloads.mysql.com/archives/c-j/\n\n### 导入驱动包\n\n以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：\n\n1.  首先依次打开 `File -> Project Structure -> Modules -> Dependencies`；\n\n![](https://img-blog.csdnimg.cn/img_convert/6e3572b6c59db8be5744c0bd0c12a9d5.png)\n\n2.  然后点击 `+` 号，选择 `1 JARs or Directories`，找到你下载好的 jar 包导入；\n\n![](https://img-blog.csdnimg.cn/img_convert/8082a759f2591062d315d81fb94ee15d.png)\n\n3.  导入成功，点击 `OK` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/84303a0098eb65a69699508c25a23ce1.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/fe1d7566246ace5729f1388cb374b7dc.png)\n\n### 初始化并建立连接\n\n导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。\n\n首先，我们在数据库中建立一个表 `student`，建表语句如下，用于后续实践。\n\n```sql\n-- 创建数据库 javalearning\nCREATE DATABASE if not exists javalearning;\n-- 创建表 students\nUSE javalearning;\nCREATE TABLE students (\n  id BIGINT AUTO_INCREMENT NOT NULL, -- 学号\n  name VARCHAR(50) NOT NULL, -- 姓名\n  gender TINYINT(1) NOT NULL, -- 性别\n  grade INT NOT NULL, -- 年级\n  score INT NOT NULL, -- 分数\n  PRIMARY KEY(id) -- 主键\n) Engine=INNODB DEFAULT CHARSET=UTF8;\n\n-- 插入部分数据\nINSERT INTO students (id, name, gender, grade, score) VALUES (101,'小红', 0, 1, 100);\nINSERT INTO students (id, name, gender, grade, score) VALUES (102,'小橙', 0, 1, 89);\nINSERT INTO students (id, name, gender, grade, score) VALUES (201,'小黄', 1, 2, 97);\nINSERT INTO students (id, name, gender, grade, score) VALUES (301,'小绿', 1, 3, 99);\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/548cc956782f3cd2655b421012f1a432.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/3a8094b4b4dcbc3987678c6cc170ed06.png)\n\n创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：\n\n1.  首先需要加载驱动，主要是利用 `Class.forName()` 将驱动类加载到 JVM；\n2.  建立程序和数据库之间的连接，主要是创建 `Connection` 对象；\n3.  接着是创建用于执行 SQL 语句的 `Statement` 对象；\n4.  最后则是关闭连接从而释放资源，先关闭 `Statement` ，再关闭 `Connection` ；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC\n * @date : 2021/4/23 10:56\n * @description : 初始化并建立连接\n */\n\npublic class InitJDBC {\n    public static void main(String[] args) {\n        Connection connection = null;\n        Statement statement = null;\n        try {\n//            初始化，注册驱动\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n//            建立连接\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost/javalearning?characterEncoding=UTF-8\", \"root\", \"12345\");\n            System.out.println(\"连接成功！\");\n//            创建 Statement 用于执行 SQL 语句\n            statement = connection.createStatement();\n            System.out.println(\"Statement 对象：\" + statement);\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (statement != null) {\n                    statement.close();\n                }\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            try {\n\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/cd87bbdcfb84e1c58b733bf1a1b4c0fc.png)\n\n对于上述关闭 `Connection` 和 `Statement` 的方式，可能略显繁琐，为了进一步简化，可以使用 `try-with-source` 的方式自动关闭，简化后的代码如下；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC2\n * @date : 2021/4/23 13:53\n * @description : 初始化与连接\n */\n\npublic class InitJDBC2 {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\", \"root\", \"12345\"); Statement statement = connection.createStatement();) {\n            System.out.println(\"连接成功\");\n            System.out.println(\"State 对象：\" + statement);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n## JDBC 增删改查\n\n当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。\n\n在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。\n\n| SQL 中的数据类型   | 对应的 Java 数据类型          |\n| ------------------ | ----------------------------- |\n| `BIT`、`BOOL`      | `boolean`                     |\n| `INTEGER`          | `int`                         |\n| `BIGINT`           | `long`                        |\n| `REAL`             | `float`                       |\n| `FLOAT`、 `DOUBLE` | `double`                      |\n| `CHAR`、 `VARCHAR` | `String`                      |\n| `DECIMAL`          | `BigDecimal`                  |\n| `DATE`             | `java.sql.Date`、`LocalDate`  |\n| `TIME`             | `java.sql.Time`、 `LocalTime` |\n\n此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 `Statement` 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 `Statement` 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：\n\n1.  对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。\n2.  利用 `PreparedStatement`，它利用 `?` 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 `PreparedStatement`，我们就能够 **完全避免 SQL 注入 问题**。\n\n针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 `PreparedStatement` 而非 `Statement`. \n\n### 查询数据\n\n首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：\n\n1.  通过创建一个 `Connection` 对象从而建立连接；\n2.  然后利用 `prepareStatement()`  方法创建一个 `PreparedStatement` 对象并传入 SQL 语句，用于执行查询操作；\n3.  接着执行 `PreparedStatement`  对象所提供的 `executeQuery()` 方法，获取查询结果并返回到一个 `ResultSet` 结果集中；\n4.  最后则是利用  `ResultSet` 对象的 `next()` 方法去读取我们所查询返回的结果；\n\n>   需要注意的地方：\n>\n>   1.  如果你不是利用 `try-with-source` 的方式，那么一定要记得在使用完连接之后记得释放资源；\n>   2.  结果集 `ResultSet` 中，索引位置是从 `1` 开始的，而不是从 `0` 开始，这一点要特别注意！\n\n```java\nimport java.sql.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 14:01\n * @description : 查询\n */\n\npublic class QueryTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String queryString = \"SELECT * FROM students\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(queryString); ResultSet resultSet = preparedStatement.executeQuery();) {\n            System.out.println(\"连接成功\");\n\n            System.out.println(\"查询到的信息如下：\");\n            while (resultSet.next()) {\n//                查询到的结果索引从 1 开始\n                System.out.println(\"id：\" + resultSet.getLong(1) + \"\\tname：\" + resultSet.getString(2) + \"\\tgender：\" + resultSet.getInt(3) + \"\\tgrade：\" + resultSet.getLong(4) + \"\\tscore：\" + resultSet.getLong(5));\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/536701ccd3ab5e17e2cbe285d25bbf2d.png)\n\n### 增加数据\n\n即插入一条新记录，和查询语句很像，但是区别在于最后 `PreparedStatement` 对象执行的不是 `executeQuery()`，而是 `executeUpdate()`. 插入记录的步骤总结如下：\n\n1.  创建 `Connection` 对象从而建立连接；\n2.  利用 `prepareStatement()`  方法创建一个 `PreparedStatement` 对象并传入 SQL 语句，用于执行插入操作；\n3.  然后依次设置占位符所代表的值；\n4.  执行 `PreparedStatement`  对象所提供的 `executeUpdate()` 方法，此时返回的是一个 `int` 类型的数，表示插入记录的条数；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InsertTest\n * @date : 2021/4/23 15:04\n * @description : 新增数据\n */\n\npublic class InsertTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"110120\";\n        String insertString = \"INSERT INTO students VALUES (?,?,?,?,?)\";\n\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(insertString);) {\n            System.out.println(\"连接成功\");\n            //            依次插入数据\n            preparedStatement.setLong(1, 302);\n            preparedStatement.setString(2, \"小蓝\");\n            preparedStatement.setInt(3, 0);\n            preparedStatement.setLong(4, 3);\n            preparedStatement.setLong(5, 100);\n            System.out.println(\"插入数据成功\");\n            preparedStatement.executeUpdate();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！\n\n![](https://img-blog.csdnimg.cn/img_convert/1704ab74c66d3a0d9d04fabeb3fdffee.png)\n\n\n\n\n\n### 删除数据\n\n删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 `DELETE` 语句，能一次删除若干列。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : DeleteTest\n * @date : 2021/4/23 15:23\n * @description : 删除数据\n */\n\npublic class DeleteTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String deleteString = \"DELETE FROM students WHERE id = ?\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(deleteString);) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setLong(1, 101);\n            preparedStatement.executeUpdate();\n            System.out.println(\"删除成功\");\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n删除数据后，接着查询数据，得到如下结果，可以看到 `id = 101` 的数据列已经被删除了，说明我们删除数据成功了！\n\n![](https://img-blog.csdnimg.cn/img_convert/a16948c1b805f8e626c52ed8064ed5b0.png)\n\n### 修改数据\n\n修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 `UPDATE` 语句，能一次更新若干列。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : UpdateTest\n * @date : 2021/4/23 15:23\n * @description : 更新数据\n */\n\npublic class UpdateTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String updateString = \"UPDATE students SET name = ? WHERE id = ?\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(updateString);) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setString(1, \"村雨遥\");\n            preparedStatement.setLong(2, 201);\n            preparedStatement.executeUpdate();\n            System.out.println(\"更新成功\");\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n修改数据后，接着查询数据，得到如下结果，可以看到 `id = 201` 对应的数据列中，`name` 从小黄变成了村雨遥，说明数据更新成功。\n\n![](https://img-blog.csdnimg.cn/img_convert/38c64700683b351176eb8464b3bcf5ed.png)\n\n### 注意\n\n当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 `PreparedStatement` 时，指定一个标志位 `RETURN_GENERATED_KEYS`，用于表示 JDBC 驱动必须返回插入的自增主键。\n\n假设我们创建表时，设置了自增长的键：\n\n```sql\nCREATE TABLE students(\n\tid int(11) AUTO_INCREMENT,\n    …\n);\n```\n\n此时无论是 `executeQuery()` 还是 `execureUpdate()` 都不会返回这个自增长的 `id`，所以需要在创建 `PreparedStatement` 对象时加入 `Statement.RETURN_GENERATED_KEYS` 参数以确保会返回自增长 ID，然后通过 `getGeneratedKeys` 获取该字段；\n\n```java\nimport java.sql.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 18:01\n * @description : 自增主键查询\n */\n\npublic class QueryTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"12345\";\n        String queryString = \"INSET INTO students VALUES(null,?,……)\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS); ResultSet resultSet = preparedStatement.getGeneratedKeys();) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setString(1, \"村雨遥\");\n            ……\n            preparedStatement.executeUpdate();\n            System.out.println(\"查询到的信息如下：\");\n            while (resultSet.next()) {\n//                查询到的结果索引从 1 开始\n                System.out.println(\"id：\" + resultSet.getLong(1));\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n### JDBC 工具类\n\n观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。\n\n1.  首先在 `src` 目录下创建一个配置文件 `jdbc.properties`，并且填入数据库的相关信息；\n\n```properties\nurl=jdbc:mysql://localhost/demo?characterEncoding=UTF-8\nuser=root\npassword=\"12345\"\ndriver=com.mysql.jdbc.cj.Driver\n```\n\n2.  创建工具类\n\n```java\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : JDBCUtils\n * @date : 2021/4/24 15:10\n * @description : JDBC 工具类\n */\n\npublic class JDBCUtils {\n    //    配置文件中的各个参数\n    private static String url;\n    private static String user;\n    private static String password;\n    private static String driver;\n\n    //    静态代码块\n    static {\n        try {\n//        读取配置文件并获取参数值\n//        创建集合类\n            Properties properties = new Properties();\n\n//        获取配置文件所在位置\n            ClassLoader classLoader = JDBCUtils.class.getClassLoader();\n            URL resource = classLoader.getResource(\"jdbc.properties\");\n            String path = resource.getPath();\n            System.out.println(\"配置文件所在位置\");\n//        加载配置文件\n            properties.load(new FileReader(path));\n\n//            获取参数的值并赋值\n            url = properties.getProperty(\"url\");\n            user = properties.getProperty(\"user\");\n            password = properties.getProperty(\"password\");\n            driver = properties.getProperty(\"driver\");\n\n//            注册驱动\n            Class.forName(driver);\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @param\n     * @return 连接对象\n     * @description 获取连接\n     * @date 2021/4/24 15:24\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static Connection getConnection() {\n        try {\n            return DriverManager.getConnection(url, user, password);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * @param preparedStatement 预声明\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:27\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static void close(PreparedStatement preparedStatement, Connection connection) {\n        if (preparedStatement != null) {\n            try {\n                preparedStatement.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n\n\n    /**\n     * @param resultSet         结果集\n     * @param preparedStatement 预声明对象\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:28\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static void close(ResultSet resultSet, PreparedStatement preparedStatement, Connection connection) {\n        if (resultSet != null) {\n            try {\n                resultSet.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (preparedStatement != null) {\n            try {\n                preparedStatement.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n\n\n## JDBC 事务\n\n### 事务 4 大特性\n\n事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。**即事务是逻辑上的一组操作，要么都执行，要么都不执行**。\n\n1.  **原子性（Atomicity）**\n\n原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 **动作要么全部完成，要么完全不起作用。** **即事务是最小的执行单位，不允许分割**。\n\n2.  **一致性（Consistency）**\n\n指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。**在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同**。\n\n3.  **隔离性（Isolation）**\n\n并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；\n\n4.  **持久性（Durability）**\n\n表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；\n\n### 脏读、幻读 & 不可重复读\n\n了解事务隔离级别之前，先来看看这几个读的概念：\n\n1.  **脏读（Dirty Read）**\n\n表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。\n\n2.  **幻读（Phantom Read）**\n\n在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。\n\n3.  **不可重复读（Non-repeatable Read）**\n\n一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。\n\n**注意：不可重复读和幻读的区别在于：**\n\n>   **不可重复读的重点在于修改，** 比如多次读取一条记录发现其中某些列的值被修改，而 **幻读的重点在于新增或删除**，比如多次读取一条记录发现记录增多或减少了。\n\n### 隔离级别\n\nSQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：\n\n1.  **READ-UNCOMMITTED（读取未提交）**\n\n最低的隔离级别，允许读取尚未提交的数据变更，**可能导致脏读、幻读或不可重复读**。\n\n2.  **READ-COMMITTED（读取已提交）**\n\n允许读取并发事务已经提交的数据，**能够阻止脏读，但可能导致幻读或不可重复读**。\n\n3.  **REPEATABLE-READ（可重复读）**\n\n对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，**能够阻止脏读和不可重复读，但可能导致幻读**。\n\n4.  **SERIALIZABLE（可串行化）**\n\n最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，**能够防止脏读、幻读以及不可重复读**。\n\n以下是 SQL 隔离级别和各种读之间的关系：\n\n| 隔离级别           | 脏读 | 不可重复读 | 幻读 |\n| ------------------ | ---- | ---------- | ---- |\n| `READ-UNCOMMITTED` | ✔    | ✔          | ✔    |\n| `READ-COMMITTED`   | ❌    | ✔          | ✔    |\n| `REPEATABLE-READ`  | ❌    | ❌          | ✔    |\n| `SERIALIZABLE`     | ❌    | ❌          | ❌    |\n\n### 实例\n\n关于回滚，主要涉及 `Connection` 对象，常用的三个方法如下：\n\n| 返回值 | 方法                                | 描述                                                         |\n| ------ | ----------------------------------- | ------------------------------------------------------------ |\n| `void` | `setAutoCommit(boolean autoCommit)` | 设定连接的自动提交模式，`true` 表示自动提交，`false` 表示手动提交 |\n| `void` | `commit()`                          | 使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 `Connection` 对象当前持有的所有数据库锁 |\n| `void` | `rollback()`                        | 撤销当前十五中所做的所有更改，并释放此 `Connection` 对象当前持有的所有数据库锁 |\n\n以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : AffairTest\n * @date : 2021/4/23 22:35\n * @description : 事务\n */\n\npublic class AffairTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"12345\";       \n        String insertString = \"INSERT INTO students VALUES (?,?,?,?,?)\";\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        \n        try {\n            connection = DriverManager.getConnection(url, username, password);\n//            关闭自动提交\n            connection.setAutoCommit(false);\n            preparedStatement = connection.prepareStatement(insertString);\n            System.out.println(\"连接成功\");\n//            依次插入数据\n            preparedStatement.setLong(1, 401);\n            preparedStatement.setString(2, \"小紫\");\n            preparedStatement.setInt(3, 0);\n            preparedStatement.setLong(4, 4);\n            preparedStatement.setLong(5, 88);\n            preparedStatement.executeUpdate();\n//            如果没有出错，则提交事务\n            connection.commit();\n            System.out.println(\"插入数据成功\");\n\n        } catch (SQLException throwables) {\n//            一旦出错，则回滚事务\n            try {\n                connection.rollback();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } finally {\n//            最后关闭连接\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException throwables) {\n                    throwables.printStackTrace();\n                }\n            }\n            if (preparedStatement != null) {\n                try {\n                    preparedStatement.close();\n                } catch (SQLException throwables) {\n                    throwables.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n\n除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：\n\n-   `setSavepoint(String savePointName)`：创建新的保存点，返回一个 `SavePoint` 对象；\n-   `rollback(String savePointName)`：回滚到指定保存点；\n\n## 连接池\n\n### 简介\n\n当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。\n\n使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。\n\n### 常用数据库连接池\n\n#### C3P0\n\n1.  导包\n\n首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；\n\n![](https://img-blog.csdnimg.cn/img_convert/43da94c403dd6360ad04373672c46852.png)\n\n2.  定义配置文件\n\n创建 C3P0 对应的配置文件，注意：配置文件一般放在 `src` 路径下，而且文件的名称要必须为以下其中的一个：\n\n-   `c3p0.properties`\n-   `c3p0-config.xml`\n\n```xml\n<c3p0-config>\n    <!-- 使用默认的配置读取连接池对象 -->\n    <default-config>\n        <!--  连接参数 -->\n        <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n        <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8</property>\n        <property name=\"user\">root</property>\n        <property name=\"password\">0908</property>\n\n        <!-- 连接池参数 -->\n        <!--    初始化申请的连接数-->\n        <property name=\"initialPoolSize\">5</property>\n        <!--        最大连接数-->\n        <property name=\"maxPoolSize\">10</property>\n        <!--      超时时间-->\n        <property name=\"checkoutTimeout\">3000</property>\n    </default-config>\n</c3p0-config>\n```\n\n3.  创建连接池对象\n\n4.  获取连接对象\n\n```java\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : C3POTest\n * @date : 2021/4/24 16:01\n * @description : C3PO 连接池\n */\n\npublic class C3POTest {\n    public static void main(String[] args) {\n//        创建数据库连接池对象\n        DataSource dataSource = new ComboPooledDataSource();\n//        获取连接对象\n        try {\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/187f08661a4d619d80d2293c739efd8e.png)\n\n#### Druid\n\n1.  导包\n\n导入 Druid 的 jar 包，下载地址：https://repo1.maven.org/maven2/com/alibaba/druid/\n\n2.  定义配置文件\n\n配置文件名称无要求，但是后缀名为 `.properties`，而且可以存放在任意目录下；\n\n```properties\ndriver=com.mysql.cj.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\nusername=root\npassword=12345\ninitialSize=5\nmaxActive=10\nmaxWait=3000\n```\n\n3.  加载配置文件\n4.  创建连接池对象\n5.  获取连接对象\n\n```java\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\n\nimport javax.sql.DataSource;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : DruidTest\n * @date : 2021/4/24 19:56\n * @description : Druid 连接池\n */\n\npublic class DruidTest {\n    public static void main(String[] args) {\n        try {\n//            加载配置文件\n            Properties properties = new Properties();\n            InputStream resourceAsStream = DruidTest.class.getClassLoader().getResourceAsStream(\"druid.properties\");\n            properties.load(resourceAsStream);\n//            获取连接池对象\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n//            获取连接\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/888af90836674c37389c20993a2c9e73.png)\n\n## 总结\n\n今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。\n\n对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【Java-从入坑到放弃】JDBC-编程指北.md","raw":"---\ntitle: 【Java 从入坑到放弃】JDBC 编程指北\nmathjax: true\ntoc: true\ntags:\n  - Java\n  - JDBC\ncategories:\n  - Java 修炼之路\nabbrlink: 3e435af2\ndate: 2021-05-04 11:12:47\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：\n\n-   **JDBC 简介**\n-   **数据的增删改查**\n-   **事务**\n-   **连接池**\n\n## JDBC 简介\n\nJDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。\n\n本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。\n\n首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：https://downloads.mysql.com/archives/c-j/\n\n### 导入驱动包\n\n以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：\n\n1.  首先依次打开 `File -> Project Structure -> Modules -> Dependencies`；\n\n![](https://img-blog.csdnimg.cn/img_convert/6e3572b6c59db8be5744c0bd0c12a9d5.png)\n\n2.  然后点击 `+` 号，选择 `1 JARs or Directories`，找到你下载好的 jar 包导入；\n\n![](https://img-blog.csdnimg.cn/img_convert/8082a759f2591062d315d81fb94ee15d.png)\n\n3.  导入成功，点击 `OK` 即可；\n\n![](https://img-blog.csdnimg.cn/img_convert/84303a0098eb65a69699508c25a23ce1.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/fe1d7566246ace5729f1388cb374b7dc.png)\n\n### 初始化并建立连接\n\n导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。\n\n首先，我们在数据库中建立一个表 `student`，建表语句如下，用于后续实践。\n\n```sql\n-- 创建数据库 javalearning\nCREATE DATABASE if not exists javalearning;\n-- 创建表 students\nUSE javalearning;\nCREATE TABLE students (\n  id BIGINT AUTO_INCREMENT NOT NULL, -- 学号\n  name VARCHAR(50) NOT NULL, -- 姓名\n  gender TINYINT(1) NOT NULL, -- 性别\n  grade INT NOT NULL, -- 年级\n  score INT NOT NULL, -- 分数\n  PRIMARY KEY(id) -- 主键\n) Engine=INNODB DEFAULT CHARSET=UTF8;\n\n-- 插入部分数据\nINSERT INTO students (id, name, gender, grade, score) VALUES (101,'小红', 0, 1, 100);\nINSERT INTO students (id, name, gender, grade, score) VALUES (102,'小橙', 0, 1, 89);\nINSERT INTO students (id, name, gender, grade, score) VALUES (201,'小黄', 1, 2, 97);\nINSERT INTO students (id, name, gender, grade, score) VALUES (301,'小绿', 1, 3, 99);\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/548cc956782f3cd2655b421012f1a432.png)\n\n![](https://img-blog.csdnimg.cn/img_convert/3a8094b4b4dcbc3987678c6cc170ed06.png)\n\n创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：\n\n1.  首先需要加载驱动，主要是利用 `Class.forName()` 将驱动类加载到 JVM；\n2.  建立程序和数据库之间的连接，主要是创建 `Connection` 对象；\n3.  接着是创建用于执行 SQL 语句的 `Statement` 对象；\n4.  最后则是关闭连接从而释放资源，先关闭 `Statement` ，再关闭 `Connection` ；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC\n * @date : 2021/4/23 10:56\n * @description : 初始化并建立连接\n */\n\npublic class InitJDBC {\n    public static void main(String[] args) {\n        Connection connection = null;\n        Statement statement = null;\n        try {\n//            初始化，注册驱动\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n//            建立连接\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost/javalearning?characterEncoding=UTF-8\", \"root\", \"12345\");\n            System.out.println(\"连接成功！\");\n//            创建 Statement 用于执行 SQL 语句\n            statement = connection.createStatement();\n            System.out.println(\"Statement 对象：\" + statement);\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (statement != null) {\n                    statement.close();\n                }\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            try {\n\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/cd87bbdcfb84e1c58b733bf1a1b4c0fc.png)\n\n对于上述关闭 `Connection` 和 `Statement` 的方式，可能略显繁琐，为了进一步简化，可以使用 `try-with-source` 的方式自动关闭，简化后的代码如下；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC2\n * @date : 2021/4/23 13:53\n * @description : 初始化与连接\n */\n\npublic class InitJDBC2 {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\", \"root\", \"12345\"); Statement statement = connection.createStatement();) {\n            System.out.println(\"连接成功\");\n            System.out.println(\"State 对象：\" + statement);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n## JDBC 增删改查\n\n当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。\n\n在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。\n\n| SQL 中的数据类型   | 对应的 Java 数据类型          |\n| ------------------ | ----------------------------- |\n| `BIT`、`BOOL`      | `boolean`                     |\n| `INTEGER`          | `int`                         |\n| `BIGINT`           | `long`                        |\n| `REAL`             | `float`                       |\n| `FLOAT`、 `DOUBLE` | `double`                      |\n| `CHAR`、 `VARCHAR` | `String`                      |\n| `DECIMAL`          | `BigDecimal`                  |\n| `DATE`             | `java.sql.Date`、`LocalDate`  |\n| `TIME`             | `java.sql.Time`、 `LocalTime` |\n\n此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 `Statement` 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 `Statement` 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：\n\n1.  对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。\n2.  利用 `PreparedStatement`，它利用 `?` 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 `PreparedStatement`，我们就能够 **完全避免 SQL 注入 问题**。\n\n针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 `PreparedStatement` 而非 `Statement`. \n\n### 查询数据\n\n首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：\n\n1.  通过创建一个 `Connection` 对象从而建立连接；\n2.  然后利用 `prepareStatement()`  方法创建一个 `PreparedStatement` 对象并传入 SQL 语句，用于执行查询操作；\n3.  接着执行 `PreparedStatement`  对象所提供的 `executeQuery()` 方法，获取查询结果并返回到一个 `ResultSet` 结果集中；\n4.  最后则是利用  `ResultSet` 对象的 `next()` 方法去读取我们所查询返回的结果；\n\n>   需要注意的地方：\n>\n>   1.  如果你不是利用 `try-with-source` 的方式，那么一定要记得在使用完连接之后记得释放资源；\n>   2.  结果集 `ResultSet` 中，索引位置是从 `1` 开始的，而不是从 `0` 开始，这一点要特别注意！\n\n```java\nimport java.sql.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 14:01\n * @description : 查询\n */\n\npublic class QueryTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String queryString = \"SELECT * FROM students\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(queryString); ResultSet resultSet = preparedStatement.executeQuery();) {\n            System.out.println(\"连接成功\");\n\n            System.out.println(\"查询到的信息如下：\");\n            while (resultSet.next()) {\n//                查询到的结果索引从 1 开始\n                System.out.println(\"id：\" + resultSet.getLong(1) + \"\\tname：\" + resultSet.getString(2) + \"\\tgender：\" + resultSet.getInt(3) + \"\\tgrade：\" + resultSet.getLong(4) + \"\\tscore：\" + resultSet.getLong(5));\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/536701ccd3ab5e17e2cbe285d25bbf2d.png)\n\n### 增加数据\n\n即插入一条新记录，和查询语句很像，但是区别在于最后 `PreparedStatement` 对象执行的不是 `executeQuery()`，而是 `executeUpdate()`. 插入记录的步骤总结如下：\n\n1.  创建 `Connection` 对象从而建立连接；\n2.  利用 `prepareStatement()`  方法创建一个 `PreparedStatement` 对象并传入 SQL 语句，用于执行插入操作；\n3.  然后依次设置占位符所代表的值；\n4.  执行 `PreparedStatement`  对象所提供的 `executeUpdate()` 方法，此时返回的是一个 `int` 类型的数，表示插入记录的条数；\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : InsertTest\n * @date : 2021/4/23 15:04\n * @description : 新增数据\n */\n\npublic class InsertTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"110120\";\n        String insertString = \"INSERT INTO students VALUES (?,?,?,?,?)\";\n\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(insertString);) {\n            System.out.println(\"连接成功\");\n            //            依次插入数据\n            preparedStatement.setLong(1, 302);\n            preparedStatement.setString(2, \"小蓝\");\n            preparedStatement.setInt(3, 0);\n            preparedStatement.setLong(4, 3);\n            preparedStatement.setLong(5, 100);\n            System.out.println(\"插入数据成功\");\n            preparedStatement.executeUpdate();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！\n\n![](https://img-blog.csdnimg.cn/img_convert/1704ab74c66d3a0d9d04fabeb3fdffee.png)\n\n\n\n\n\n### 删除数据\n\n删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 `DELETE` 语句，能一次删除若干列。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : DeleteTest\n * @date : 2021/4/23 15:23\n * @description : 删除数据\n */\n\npublic class DeleteTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String deleteString = \"DELETE FROM students WHERE id = ?\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(deleteString);) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setLong(1, 101);\n            preparedStatement.executeUpdate();\n            System.out.println(\"删除成功\");\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n删除数据后，接着查询数据，得到如下结果，可以看到 `id = 101` 的数据列已经被删除了，说明我们删除数据成功了！\n\n![](https://img-blog.csdnimg.cn/img_convert/a16948c1b805f8e626c52ed8064ed5b0.png)\n\n### 修改数据\n\n修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 `UPDATE` 语句，能一次更新若干列。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : UpdateTest\n * @date : 2021/4/23 15:23\n * @description : 更新数据\n */\n\npublic class UpdateTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"0908\";\n        String updateString = \"UPDATE students SET name = ? WHERE id = ?\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(updateString);) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setString(1, \"村雨遥\");\n            preparedStatement.setLong(2, 201);\n            preparedStatement.executeUpdate();\n            System.out.println(\"更新成功\");\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n修改数据后，接着查询数据，得到如下结果，可以看到 `id = 201` 对应的数据列中，`name` 从小黄变成了村雨遥，说明数据更新成功。\n\n![](https://img-blog.csdnimg.cn/img_convert/38c64700683b351176eb8464b3bcf5ed.png)\n\n### 注意\n\n当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 `PreparedStatement` 时，指定一个标志位 `RETURN_GENERATED_KEYS`，用于表示 JDBC 驱动必须返回插入的自增主键。\n\n假设我们创建表时，设置了自增长的键：\n\n```sql\nCREATE TABLE students(\n\tid int(11) AUTO_INCREMENT,\n    …\n);\n```\n\n此时无论是 `executeQuery()` 还是 `execureUpdate()` 都不会返回这个自增长的 `id`，所以需要在创建 `PreparedStatement` 对象时加入 `Statement.RETURN_GENERATED_KEYS` 参数以确保会返回自增长 ID，然后通过 `getGeneratedKeys` 获取该字段；\n\n```java\nimport java.sql.*;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 18:01\n * @description : 自增主键查询\n */\n\npublic class QueryTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"12345\";\n        String queryString = \"INSET INTO students VALUES(null,?,……)\";\n        try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS); ResultSet resultSet = preparedStatement.getGeneratedKeys();) {\n            System.out.println(\"连接成功\");\n            preparedStatement.setString(1, \"村雨遥\");\n            ……\n            preparedStatement.executeUpdate();\n            System.out.println(\"查询到的信息如下：\");\n            while (resultSet.next()) {\n//                查询到的结果索引从 1 开始\n                System.out.println(\"id：\" + resultSet.getLong(1));\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n### JDBC 工具类\n\n观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。\n\n1.  首先在 `src` 目录下创建一个配置文件 `jdbc.properties`，并且填入数据库的相关信息；\n\n```properties\nurl=jdbc:mysql://localhost/demo?characterEncoding=UTF-8\nuser=root\npassword=\"12345\"\ndriver=com.mysql.jdbc.cj.Driver\n```\n\n2.  创建工具类\n\n```java\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : JDBCUtils\n * @date : 2021/4/24 15:10\n * @description : JDBC 工具类\n */\n\npublic class JDBCUtils {\n    //    配置文件中的各个参数\n    private static String url;\n    private static String user;\n    private static String password;\n    private static String driver;\n\n    //    静态代码块\n    static {\n        try {\n//        读取配置文件并获取参数值\n//        创建集合类\n            Properties properties = new Properties();\n\n//        获取配置文件所在位置\n            ClassLoader classLoader = JDBCUtils.class.getClassLoader();\n            URL resource = classLoader.getResource(\"jdbc.properties\");\n            String path = resource.getPath();\n            System.out.println(\"配置文件所在位置\");\n//        加载配置文件\n            properties.load(new FileReader(path));\n\n//            获取参数的值并赋值\n            url = properties.getProperty(\"url\");\n            user = properties.getProperty(\"user\");\n            password = properties.getProperty(\"password\");\n            driver = properties.getProperty(\"driver\");\n\n//            注册驱动\n            Class.forName(driver);\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @param\n     * @return 连接对象\n     * @description 获取连接\n     * @date 2021/4/24 15:24\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static Connection getConnection() {\n        try {\n            return DriverManager.getConnection(url, user, password);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * @param preparedStatement 预声明\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:27\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static void close(PreparedStatement preparedStatement, Connection connection) {\n        if (preparedStatement != null) {\n            try {\n                preparedStatement.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n\n\n    /**\n     * @param resultSet         结果集\n     * @param preparedStatement 预声明对象\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:28\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public static void close(ResultSet resultSet, PreparedStatement preparedStatement, Connection connection) {\n        if (resultSet != null) {\n            try {\n                resultSet.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (preparedStatement != null) {\n            try {\n                preparedStatement.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n\n\n## JDBC 事务\n\n### 事务 4 大特性\n\n事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。**即事务是逻辑上的一组操作，要么都执行，要么都不执行**。\n\n1.  **原子性（Atomicity）**\n\n原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 **动作要么全部完成，要么完全不起作用。** **即事务是最小的执行单位，不允许分割**。\n\n2.  **一致性（Consistency）**\n\n指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。**在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同**。\n\n3.  **隔离性（Isolation）**\n\n并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；\n\n4.  **持久性（Durability）**\n\n表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；\n\n### 脏读、幻读 & 不可重复读\n\n了解事务隔离级别之前，先来看看这几个读的概念：\n\n1.  **脏读（Dirty Read）**\n\n表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。\n\n2.  **幻读（Phantom Read）**\n\n在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。\n\n3.  **不可重复读（Non-repeatable Read）**\n\n一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。\n\n**注意：不可重复读和幻读的区别在于：**\n\n>   **不可重复读的重点在于修改，** 比如多次读取一条记录发现其中某些列的值被修改，而 **幻读的重点在于新增或删除**，比如多次读取一条记录发现记录增多或减少了。\n\n### 隔离级别\n\nSQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：\n\n1.  **READ-UNCOMMITTED（读取未提交）**\n\n最低的隔离级别，允许读取尚未提交的数据变更，**可能导致脏读、幻读或不可重复读**。\n\n2.  **READ-COMMITTED（读取已提交）**\n\n允许读取并发事务已经提交的数据，**能够阻止脏读，但可能导致幻读或不可重复读**。\n\n3.  **REPEATABLE-READ（可重复读）**\n\n对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，**能够阻止脏读和不可重复读，但可能导致幻读**。\n\n4.  **SERIALIZABLE（可串行化）**\n\n最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，**能够防止脏读、幻读以及不可重复读**。\n\n以下是 SQL 隔离级别和各种读之间的关系：\n\n| 隔离级别           | 脏读 | 不可重复读 | 幻读 |\n| ------------------ | ---- | ---------- | ---- |\n| `READ-UNCOMMITTED` | ✔    | ✔          | ✔    |\n| `READ-COMMITTED`   | ❌    | ✔          | ✔    |\n| `REPEATABLE-READ`  | ❌    | ❌          | ✔    |\n| `SERIALIZABLE`     | ❌    | ❌          | ❌    |\n\n### 实例\n\n关于回滚，主要涉及 `Connection` 对象，常用的三个方法如下：\n\n| 返回值 | 方法                                | 描述                                                         |\n| ------ | ----------------------------------- | ------------------------------------------------------------ |\n| `void` | `setAutoCommit(boolean autoCommit)` | 设定连接的自动提交模式，`true` 表示自动提交，`false` 表示手动提交 |\n| `void` | `commit()`                          | 使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 `Connection` 对象当前持有的所有数据库锁 |\n| `void` | `rollback()`                        | 撤销当前十五中所做的所有更改，并释放此 `Connection` 对象当前持有的所有数据库锁 |\n\n以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : AffairTest\n * @date : 2021/4/23 22:35\n * @description : 事务\n */\n\npublic class AffairTest {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        String url = \"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\";\n        String username = \"root\";\n        String password = \"12345\";       \n        String insertString = \"INSERT INTO students VALUES (?,?,?,?,?)\";\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        \n        try {\n            connection = DriverManager.getConnection(url, username, password);\n//            关闭自动提交\n            connection.setAutoCommit(false);\n            preparedStatement = connection.prepareStatement(insertString);\n            System.out.println(\"连接成功\");\n//            依次插入数据\n            preparedStatement.setLong(1, 401);\n            preparedStatement.setString(2, \"小紫\");\n            preparedStatement.setInt(3, 0);\n            preparedStatement.setLong(4, 4);\n            preparedStatement.setLong(5, 88);\n            preparedStatement.executeUpdate();\n//            如果没有出错，则提交事务\n            connection.commit();\n            System.out.println(\"插入数据成功\");\n\n        } catch (SQLException throwables) {\n//            一旦出错，则回滚事务\n            try {\n                connection.rollback();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } finally {\n//            最后关闭连接\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException throwables) {\n                    throwables.printStackTrace();\n                }\n            }\n            if (preparedStatement != null) {\n                try {\n                    preparedStatement.close();\n                } catch (SQLException throwables) {\n                    throwables.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n\n除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：\n\n-   `setSavepoint(String savePointName)`：创建新的保存点，返回一个 `SavePoint` 对象；\n-   `rollback(String savePointName)`：回滚到指定保存点；\n\n## 连接池\n\n### 简介\n\n当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。\n\n使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。\n\n### 常用数据库连接池\n\n#### C3P0\n\n1.  导包\n\n首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；\n\n![](https://img-blog.csdnimg.cn/img_convert/43da94c403dd6360ad04373672c46852.png)\n\n2.  定义配置文件\n\n创建 C3P0 对应的配置文件，注意：配置文件一般放在 `src` 路径下，而且文件的名称要必须为以下其中的一个：\n\n-   `c3p0.properties`\n-   `c3p0-config.xml`\n\n```xml\n<c3p0-config>\n    <!-- 使用默认的配置读取连接池对象 -->\n    <default-config>\n        <!--  连接参数 -->\n        <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n        <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8</property>\n        <property name=\"user\">root</property>\n        <property name=\"password\">0908</property>\n\n        <!-- 连接池参数 -->\n        <!--    初始化申请的连接数-->\n        <property name=\"initialPoolSize\">5</property>\n        <!--        最大连接数-->\n        <property name=\"maxPoolSize\">10</property>\n        <!--      超时时间-->\n        <property name=\"checkoutTimeout\">3000</property>\n    </default-config>\n</c3p0-config>\n```\n\n3.  创建连接池对象\n\n4.  获取连接对象\n\n```java\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : C3POTest\n * @date : 2021/4/24 16:01\n * @description : C3PO 连接池\n */\n\npublic class C3POTest {\n    public static void main(String[] args) {\n//        创建数据库连接池对象\n        DataSource dataSource = new ComboPooledDataSource();\n//        获取连接对象\n        try {\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/187f08661a4d619d80d2293c739efd8e.png)\n\n#### Druid\n\n1.  导包\n\n导入 Druid 的 jar 包，下载地址：https://repo1.maven.org/maven2/com/alibaba/druid/\n\n2.  定义配置文件\n\n配置文件名称无要求，但是后缀名为 `.properties`，而且可以存放在任意目录下；\n\n```properties\ndriver=com.mysql.cj.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\nusername=root\npassword=12345\ninitialSize=5\nmaxActive=10\nmaxWait=3000\n```\n\n3.  加载配置文件\n4.  创建连接池对象\n5.  获取连接对象\n\n```java\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\n\nimport javax.sql.DataSource;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.util.Properties;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : DruidTest\n * @date : 2021/4/24 19:56\n * @description : Druid 连接池\n */\n\npublic class DruidTest {\n    public static void main(String[] args) {\n        try {\n//            加载配置文件\n            Properties properties = new Properties();\n            InputStream resourceAsStream = DruidTest.class.getClassLoader().getResourceAsStream(\"druid.properties\");\n            properties.load(resourceAsStream);\n//            获取连接池对象\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n//            获取连接\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/888af90836674c37389c20993a2c9e73.png)\n\n## 总结\n\n今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。\n\n对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【Java-从入坑到放弃】JDBC-编程指北","published":1,"updated":"2021-05-04T03:23:09.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw2b0060bw34f5rn0tdt","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>\n<ul>\n<li><strong>JDBC 简介</strong></li>\n<li><strong>数据的增删改查</strong></li>\n<li><strong>事务</strong></li>\n<li><strong>连接池</strong></li>\n</ul>\n<h2 id=\"JDBC-简介\"><a href=\"#JDBC-简介\" class=\"headerlink\" title=\"JDBC 简介\"></a>JDBC 简介</h2><p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>\n<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>\n<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href=\"https://downloads.mysql.com/archives/c-j/\">https://downloads.mysql.com/archives/c-j/</a></p>\n<h3 id=\"导入驱动包\"><a href=\"#导入驱动包\" class=\"headerlink\" title=\"导入驱动包\"></a>导入驱动包</h3><p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>\n<ol>\n<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6e3572b6c59db8be5744c0bd0c12a9d5.png\" alt=\"\"></p>\n<ol>\n<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8082a759f2591062d315d81fb94ee15d.png\" alt=\"\"></p>\n<ol>\n<li>导入成功，点击 <code>OK</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/84303a0098eb65a69699508c25a23ce1.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fe1d7566246ace5729f1388cb374b7dc.png\" alt=\"\"></p>\n<h3 id=\"初始化并建立连接\"><a href=\"#初始化并建立连接\" class=\"headerlink\" title=\"初始化并建立连接\"></a>初始化并建立连接</h3><p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>\n<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建数据库 javalearning</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> javalearning<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 创建表 students</span>\n<span class=\"token keyword\">USE</span> javalearning<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> students <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">BIGINT</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 学号</span>\n  name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 姓名</span>\n  gender <span class=\"token keyword\">TINYINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 性别</span>\n  grade <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 年级</span>\n  score <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 分数</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 主键</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">Engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>UTF8<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 插入部分数据</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小橙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小黄'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小绿'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/548cc956782f3cd2655b421012f1a432.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3a8094b4b4dcbc3987678c6cc170ed06.png\" alt=\"\"></p>\n<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>\n<ol>\n<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>\n<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>\n<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>\n<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC\n * @date : 2021/4/23 10:56\n * @description : 初始化并建立连接\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitJDBC</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//            初始化，注册驱动</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            建立连接</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            创建 Statement 用于执行 SQL 语句</span>\n            statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Statement 对象：\"</span> <span class=\"token operator\">+</span> statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cd87bbdcfb84e1c58b733bf1a1b4c0fc.png\" alt=\"\"></p>\n<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC2\n * @date : 2021/4/23 13:53\n * @description : 初始化与连接\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitJDBC2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State 对象：\"</span> <span class=\"token operator\">+</span> statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"JDBC-增删改查\"><a href=\"#JDBC-增删改查\" class=\"headerlink\" title=\"JDBC 增删改查\"></a>JDBC 增删改查</h2><p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>\n<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL 中的数据类型</th>\n<th>对应的 Java 数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BIT</code>、<code>BOOL</code></td>\n<td><code>boolean</code></td>\n</tr>\n<tr>\n<td><code>INTEGER</code></td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>BIGINT</code></td>\n<td><code>long</code></td>\n</tr>\n<tr>\n<td><code>REAL</code></td>\n<td><code>float</code></td>\n</tr>\n<tr>\n<td><code>FLOAT</code>、 <code>DOUBLE</code></td>\n<td><code>double</code></td>\n</tr>\n<tr>\n<td><code>CHAR</code>、 <code>VARCHAR</code></td>\n<td><code>String</code></td>\n</tr>\n<tr>\n<td><code>DECIMAL</code></td>\n<td><code>BigDecimal</code></td>\n</tr>\n<tr>\n<td><code>DATE</code></td>\n<td><code>java.sql.Date</code>、<code>LocalDate</code></td>\n</tr>\n<tr>\n<td><code>TIME</code></td>\n<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>\n<ol>\n<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>\n<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>\n</ol>\n<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>. </p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>\n<ol>\n<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>\n<li>然后利用 <code>prepareStatement()</code>  方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>\n<li>接着执行 <code>PreparedStatement</code>  对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>\n<li>最后则是利用  <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>\n</ol>\n<blockquote>\n<p>  需要注意的地方：</p>\n<ol>\n<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>\n<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 14:01\n * @description : 查询\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM students\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询到的信息如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//                查询到的结果索引从 1 开始</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tname：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tgender：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tgrade：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tscore：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/536701ccd3ab5e17e2cbe285d25bbf2d.png\" alt=\"\"></p>\n<h3 id=\"增加数据\"><a href=\"#增加数据\" class=\"headerlink\" title=\"增加数据\"></a>增加数据</h3><p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>\n<ol>\n<li>创建 <code>Connection</code> 对象从而建立连接；</li>\n<li>利用 <code>prepareStatement()</code>  方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>\n<li>然后依次设置占位符所代表的值；</li>\n<li>执行 <code>PreparedStatement</code>  对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InsertTest\n * @date : 2021/4/23 15:04\n * @description : 新增数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"110120\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> insertString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO students VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>insertString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//            依次插入数据</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">302</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小蓝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1704ab74c66d3a0d9d04fabeb3fdffee.png\" alt=\"\"></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : DeleteTest\n * @date : 2021/4/23 15:23\n * @description : 删除数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeleteTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> deleteString <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM students WHERE id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>deleteString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a16948c1b805f8e626c52ed8064ed5b0.png\" alt=\"\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : UpdateTest\n * @date : 2021/4/23 15:23\n * @description : 更新数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> updateString <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE students SET name = ? WHERE id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>updateString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/38c64700683b351176eb8464b3bcf5ed.png\" alt=\"\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>\n<p>假设我们创建表时，设置了自增长的键：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> students<span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    …\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 18:01\n * @description : 自增主键查询\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSET INTO students VALUES(null,?,……)\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Statement</span><span class=\"token punctuation\">.</span>RETURN_GENERATED_KEYS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getGeneratedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ……\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询到的信息如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//                查询到的结果索引从 1 开始</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"JDBC-工具类\"><a href=\"#JDBC-工具类\" class=\"headerlink\" title=\"JDBC 工具类\"></a>JDBC 工具类</h3><p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>\n<ol>\n<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>\n</ol>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost/demo?characterEncoding=UTF-8</span>\n<span class=\"token attr-name\">user</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span>\n<span class=\"token attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\"12345\"</span>\n<span class=\"token attr-name\">driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.jdbc.cj.Driver</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>创建工具类</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : JDBCUtils\n * @date : 2021/4/24 15:10\n * @description : JDBC 工具类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCUtils</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//    配置文件中的各个参数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//    静态代码块</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        读取配置文件并获取参数值</span>\n<span class=\"token comment\">//        创建集合类</span>\n            <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件所在位置</span>\n            <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">JDBCUtils</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">URL</span> resource <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"配置文件所在位置\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n            properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            获取参数的值并赋值</span>\n            url <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            user <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            password <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            driver <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            注册驱动</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param\n     * @return 连接对象\n     * @description 获取连接\n     * @date 2021/4/24 15:24\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param preparedStatement 预声明\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:27\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> preparedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * @param resultSet         结果集\n     * @param preparedStatement 预声明对象\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultSet <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"JDBC-事务\"><a href=\"#JDBC-事务\" class=\"headerlink\" title=\"JDBC 事务\"></a>JDBC 事务</h2><h3 id=\"事务-4-大特性\"><a href=\"#事务-4-大特性\" class=\"headerlink\" title=\"事务 4 大特性\"></a>事务 4 大特性</h3><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol>\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol>\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol>\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3 id=\"脏读、幻读-amp-不可重复读\"><a href=\"#脏读、幻读-amp-不可重复读\" class=\"headerlink\" title=\"脏读、幻读 &amp; 不可重复读\"></a>脏读、幻读 &amp; 不可重复读</h3><p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol>\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol>\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p>  <strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol>\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>\n<p>以下是 SQL 隔离级别和各种读之间的关系：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>setAutoCommit(boolean autoCommit)</code></td>\n<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>commit()</code></td>\n<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>rollback()</code></td>\n<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : AffairTest\n * @date : 2021/4/23 22:35\n * @description : 事务\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AffairTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span>       \n        <span class=\"token class-name\">String</span> insertString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO students VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            关闭自动提交</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>insertString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            依次插入数据</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小紫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            如果没有出错，则提交事务</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//            一旦出错，则回滚事务</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//            最后关闭连接</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>\n<ul>\n<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>\n<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>\n</ul>\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>\n<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>\n<h3 id=\"常用数据库连接池\"><a href=\"#常用数据库连接池\" class=\"headerlink\" title=\"常用数据库连接池\"></a>常用数据库连接池</h3><h4 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h4><ol>\n<li>导包</li>\n</ol>\n<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href=\"https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；\">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/43da94c403dd6360ad04373672c46852.png\" alt=\"\"></p>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>\n<ul>\n<li><code>c3p0.properties</code></li>\n<li><code>c3p0-config.xml</code></li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>c3p0-config</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>default-config</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--  连接参数 --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>com.mysql.cj.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcUrl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>0908<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token comment\">&lt;!-- 连接池参数 --&gt;</span>\n        <span class=\"token comment\">&lt;!--    初始化申请的连接数--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initialPoolSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--        最大连接数--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxPoolSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--      超时时间--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkoutTimeout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>3000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>default-config</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>c3p0-config</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><p>创建连接池对象</p>\n</li>\n<li><p>获取连接对象</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mchange<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">.</span>c3p0<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComboPooledDataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : C3POTest\n * @date : 2021/4/24 16:01\n * @description : C3PO 连接池\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C3POTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        创建数据库连接池对象</span>\n        <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComboPooledDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        获取连接对象</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/187f08661a4d619d80d2293c739efd8e.png\" alt=\"\"></p>\n<h4 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h4><ol>\n<li>导包</li>\n</ol>\n<p>导入 Druid 的 jar 包，下载地址：<a href=\"https://repo1.maven.org/maven2/com/alibaba/druid/\">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8</span>\n<span class=\"token attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span>\n<span class=\"token attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">12345</span>\n<span class=\"token attr-name\">initialSize</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span>\n<span class=\"token attr-name\">maxActive</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">10</span>\n<span class=\"token attr-name\">maxWait</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">3000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>加载配置文件</li>\n<li>创建连接池对象</li>\n<li>获取连接对象</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSourceFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : DruidTest\n * @date : 2021/4/24 19:56\n * @description : Druid 连接池\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DruidTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//            加载配置文件</span>\n            <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">InputStream</span> resourceAsStream <span class=\"token operator\">=</span> <span class=\"token class-name\">DruidTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"druid.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>resourceAsStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            获取连接池对象</span>\n            <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token class-name\">DruidDataSourceFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            获取连接</span>\n            <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/888af90836674c37389c20993a2c9e73.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>\n<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>\n<ul>\n<li><strong>JDBC 简介</strong></li>\n<li><strong>数据的增删改查</strong></li>\n<li><strong>事务</strong></li>\n<li><strong>连接池</strong></li>\n</ul>\n<h2 id=\"JDBC-简介\"><a href=\"#JDBC-简介\" class=\"headerlink\" title=\"JDBC 简介\"></a>JDBC 简介</h2><p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>\n<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>\n<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href=\"https://downloads.mysql.com/archives/c-j/\">https://downloads.mysql.com/archives/c-j/</a></p>\n<h3 id=\"导入驱动包\"><a href=\"#导入驱动包\" class=\"headerlink\" title=\"导入驱动包\"></a>导入驱动包</h3><p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>\n<ol>\n<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6e3572b6c59db8be5744c0bd0c12a9d5.png\" alt=\"\"></p>\n<ol>\n<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8082a759f2591062d315d81fb94ee15d.png\" alt=\"\"></p>\n<ol>\n<li>导入成功，点击 <code>OK</code> 即可；</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/84303a0098eb65a69699508c25a23ce1.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fe1d7566246ace5729f1388cb374b7dc.png\" alt=\"\"></p>\n<h3 id=\"初始化并建立连接\"><a href=\"#初始化并建立连接\" class=\"headerlink\" title=\"初始化并建立连接\"></a>初始化并建立连接</h3><p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>\n<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建数据库 javalearning</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> javalearning<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 创建表 students</span>\n<span class=\"token keyword\">USE</span> javalearning<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> students <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">BIGINT</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 学号</span>\n  name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 姓名</span>\n  gender <span class=\"token keyword\">TINYINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 性别</span>\n  grade <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 年级</span>\n  score <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 分数</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 主键</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">Engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>UTF8<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 插入部分数据</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小橙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小黄'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> students <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小绿'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/548cc956782f3cd2655b421012f1a432.png\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3a8094b4b4dcbc3987678c6cc170ed06.png\" alt=\"\"></p>\n<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>\n<ol>\n<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>\n<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>\n<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>\n<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC\n * @date : 2021/4/23 10:56\n * @description : 初始化并建立连接\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitJDBC</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//            初始化，注册驱动</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            建立连接</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            创建 Statement 用于执行 SQL 语句</span>\n            statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Statement 对象：\"</span> <span class=\"token operator\">+</span> statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cd87bbdcfb84e1c58b733bf1a1b4c0fc.png\" alt=\"\"></p>\n<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InitJDBC2\n * @date : 2021/4/23 13:53\n * @description : 初始化与连接\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitJDBC2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State 对象：\"</span> <span class=\"token operator\">+</span> statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"JDBC-增删改查\"><a href=\"#JDBC-增删改查\" class=\"headerlink\" title=\"JDBC 增删改查\"></a>JDBC 增删改查</h2><p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>\n<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL 中的数据类型</th>\n<th>对应的 Java 数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BIT</code>、<code>BOOL</code></td>\n<td><code>boolean</code></td>\n</tr>\n<tr>\n<td><code>INTEGER</code></td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>BIGINT</code></td>\n<td><code>long</code></td>\n</tr>\n<tr>\n<td><code>REAL</code></td>\n<td><code>float</code></td>\n</tr>\n<tr>\n<td><code>FLOAT</code>、 <code>DOUBLE</code></td>\n<td><code>double</code></td>\n</tr>\n<tr>\n<td><code>CHAR</code>、 <code>VARCHAR</code></td>\n<td><code>String</code></td>\n</tr>\n<tr>\n<td><code>DECIMAL</code></td>\n<td><code>BigDecimal</code></td>\n</tr>\n<tr>\n<td><code>DATE</code></td>\n<td><code>java.sql.Date</code>、<code>LocalDate</code></td>\n</tr>\n<tr>\n<td><code>TIME</code></td>\n<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>\n<ol>\n<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>\n<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>\n</ol>\n<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>. </p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>\n<ol>\n<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>\n<li>然后利用 <code>prepareStatement()</code>  方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>\n<li>接着执行 <code>PreparedStatement</code>  对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>\n<li>最后则是利用  <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>\n</ol>\n<blockquote>\n<p>  需要注意的地方：</p>\n<ol>\n<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>\n<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 14:01\n * @description : 查询\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM students\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询到的信息如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//                查询到的结果索引从 1 开始</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tname：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tgender：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tgrade：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\tscore：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/536701ccd3ab5e17e2cbe285d25bbf2d.png\" alt=\"\"></p>\n<h3 id=\"增加数据\"><a href=\"#增加数据\" class=\"headerlink\" title=\"增加数据\"></a>增加数据</h3><p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>\n<ol>\n<li>创建 <code>Connection</code> 对象从而建立连接；</li>\n<li>利用 <code>prepareStatement()</code>  方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>\n<li>然后依次设置占位符所代表的值；</li>\n<li>执行 <code>PreparedStatement</code>  对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : InsertTest\n * @date : 2021/4/23 15:04\n * @description : 新增数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"110120\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> insertString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO students VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>insertString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//            依次插入数据</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">302</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小蓝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1704ab74c66d3a0d9d04fabeb3fdffee.png\" alt=\"\"></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : DeleteTest\n * @date : 2021/4/23 15:23\n * @description : 删除数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeleteTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> deleteString <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM students WHERE id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>deleteString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a16948c1b805f8e626c52ed8064ed5b0.png\" alt=\"\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : UpdateTest\n * @date : 2021/4/23 15:23\n * @description : 更新数据\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?charactersetEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"0908\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> updateString <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE students SET name = ? WHERE id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>updateString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/38c64700683b351176eb8464b3bcf5ed.png\" alt=\"\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>\n<p>假设我们创建表时，设置了自增长的键：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> students<span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    …\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : QueryTest\n * @date : 2021/4/23 18:01\n * @description : 自增主键查询\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSET INTO students VALUES(null,?,……)\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Statement</span><span class=\"token punctuation\">.</span>RETURN_GENERATED_KEYS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getGeneratedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ……\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询到的信息如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//                查询到的结果索引从 1 开始</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id：\"</span> <span class=\"token operator\">+</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"JDBC-工具类\"><a href=\"#JDBC-工具类\" class=\"headerlink\" title=\"JDBC 工具类\"></a>JDBC 工具类</h3><p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>\n<ol>\n<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>\n</ol>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost/demo?characterEncoding=UTF-8</span>\n<span class=\"token attr-name\">user</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span>\n<span class=\"token attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\"12345\"</span>\n<span class=\"token attr-name\">driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.jdbc.cj.Driver</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>创建工具类</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : JDBCUtils\n * @date : 2021/4/24 15:10\n * @description : JDBC 工具类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCUtils</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//    配置文件中的各个参数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> driver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//    静态代码块</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        读取配置文件并获取参数值</span>\n<span class=\"token comment\">//        创建集合类</span>\n            <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        获取配置文件所在位置</span>\n            <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">JDBCUtils</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">URL</span> resource <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"配置文件所在位置\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        加载配置文件</span>\n            properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            获取参数的值并赋值</span>\n            url <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            user <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            password <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            driver <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//            注册驱动</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param\n     * @return 连接对象\n     * @description 获取连接\n     * @date 2021/4/24 15:24\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param preparedStatement 预声明\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:27\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> preparedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * @param resultSet         结果集\n     * @param preparedStatement 预声明对象\n     * @param connection        连接对象\n     * @return\n     * @description 关闭连接\n     * @date 2021/4/24 15:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PreparedStatement</span> preparedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultSet <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"JDBC-事务\"><a href=\"#JDBC-事务\" class=\"headerlink\" title=\"JDBC 事务\"></a>JDBC 事务</h2><h3 id=\"事务-4-大特性\"><a href=\"#事务-4-大特性\" class=\"headerlink\" title=\"事务 4 大特性\"></a>事务 4 大特性</h3><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol>\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol>\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol>\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3 id=\"脏读、幻读-amp-不可重复读\"><a href=\"#脏读、幻读-amp-不可重复读\" class=\"headerlink\" title=\"脏读、幻读 &amp; 不可重复读\"></a>脏读、幻读 &amp; 不可重复读</h3><p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol>\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol>\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p>  <strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol>\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol>\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>\n<p>以下是 SQL 隔离级别和各种读之间的关系：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>setAutoCommit(boolean autoCommit)</code></td>\n<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>commit()</code></td>\n<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>rollback()</code></td>\n<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : AffairTest\n * @date : 2021/4/23 22:35\n * @description : 事务\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AffairTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span>       \n        <span class=\"token class-name\">String</span> insertString <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO students VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            关闭自动提交</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>insertString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            依次插入数据</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小紫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            如果没有出错，则提交事务</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//            一旦出错，则回滚事务</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//            最后关闭连接</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preparedStatement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>\n<ul>\n<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>\n<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>\n</ul>\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>\n<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>\n<h3 id=\"常用数据库连接池\"><a href=\"#常用数据库连接池\" class=\"headerlink\" title=\"常用数据库连接池\"></a>常用数据库连接池</h3><h4 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h4><ol>\n<li>导包</li>\n</ol>\n<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href=\"https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；\">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/43da94c403dd6360ad04373672c46852.png\" alt=\"\"></p>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>\n<ul>\n<li><code>c3p0.properties</code></li>\n<li><code>c3p0-config.xml</code></li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>c3p0-config</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 使用默认的配置读取连接池对象 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>default-config</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--  连接参数 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>com.mysql.cj.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcUrl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>0908<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token comment\">&lt;!-- 连接池参数 --></span>\n        <span class=\"token comment\">&lt;!--    初始化申请的连接数--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initialPoolSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--        最大连接数--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxPoolSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--      超时时间--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkoutTimeout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>3000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>default-config</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>c3p0-config</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><p>创建连接池对象</p>\n</li>\n<li><p>获取连接对象</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mchange<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">.</span>c3p0<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComboPooledDataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : C3POTest\n * @date : 2021/4/24 16:01\n * @description : C3PO 连接池\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C3POTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        创建数据库连接池对象</span>\n        <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComboPooledDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        获取连接对象</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> throwables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwables<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/187f08661a4d619d80d2293c739efd8e.png\" alt=\"\"></p>\n<h4 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h4><ol>\n<li>导包</li>\n</ol>\n<p>导入 Druid 的 jar 包，下载地址：<a href=\"https://repo1.maven.org/maven2/com/alibaba/druid/\">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>\n<ol>\n<li>定义配置文件</li>\n</ol>\n<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/javalearning?characterEncoding=UTF-8</span>\n<span class=\"token attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span>\n<span class=\"token attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">12345</span>\n<span class=\"token attr-name\">initialSize</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span>\n<span class=\"token attr-name\">maxActive</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">10</span>\n<span class=\"token attr-name\">maxWait</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">3000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>加载配置文件</li>\n<li>创建连接池对象</li>\n<li>获取连接对象</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSourceFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : DruidTest\n * @date : 2021/4/24 19:56\n * @description : Druid 连接池\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DruidTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//            加载配置文件</span>\n            <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">InputStream</span> resourceAsStream <span class=\"token operator\">=</span> <span class=\"token class-name\">DruidTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"druid.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            properties<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>resourceAsStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            获取连接池对象</span>\n            <span class=\"token class-name\">DataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token class-name\">DruidDataSourceFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            获取连接</span>\n            <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/888af90836674c37389c20993a2c9e73.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>\n<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【剑指 Java】第 1 弹：靠这份 Java 基础知识总结，我拿到了满意的 Offer","abbrlink":"6bac5157","date":"2021-05-02T14:47:05.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n因为博主是 2021 届毕业生，当时为了准备秋招，特意总结的 Java 基础知识面试高频题，最后也算找到了挺满意的工作。因此回馈给大家，希望能对大家起到一定的帮助。\n\n## 入门常识\n\n### Java 特点\n\n1.  简单易学\n2.  面向对象（封装、继承、多态）\n3.  平台独立\n4.  安全可靠\n5.  支持多线程\n6.  解释和编译共存\n7.  安全性\n8.  健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）\n9.  …\n\n###  Java 和 C++\n\n-   **相同点**：两者均为 OOP 语言，均支持 OOP 的三大特性（封装、继承、多态）；\n-   **不同点**：\n    -   Java 不存在指针的概念，所以内存更加安全；\n    -   Java 类是单继承（但是接口可以多继承），C++ 的类是多继承；\n    -   Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存；\n    -   C/C++ 中，字符串和字符数组最后均有一个额外的 `\\0` 标志来表示结束，但 Java 中不存在这一概念；\n\n### JRE  和 JDK\n\n-   JRE（Java Runtime Environment），即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序；\n-   JDK（Java Development Kit），即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它；\n\n![两者关系](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5MjRmMDU2YzVlMGY4ZDkucG5n?x-oss-process=image/format,png)\n\n### Java 程序编译过程\n\n![](https://img-blog.csdnimg.cn/img_convert/79663a1d48126d9d28b2c8c567926ddb.png)\n\n我们编译的源代码（`xxx.java`）经 JDK 中的 `javac` 命令编译后，成为 JVM 能够理解的 Java 字节码（`xxx.class`），然后经由 JVM 加载，通过解释器 **逐行解释执行**，这就是为什么能经常听见说 **Java 是一门编译和解释共存的语言**。\n\n其中 JVM 是解释 Java 字节码（`xxx.class`） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；\n\n##  数据类型\n\n### 基本数据类型\n\n| 数据类型  | bit    | 字节   | 封装类      | 数据范围                             | 默认值  |\n| --------- | ------ | ------ | ----------- | ------------------------------------ | ------- |\n| `byte`    | 8      | 1      | `Byte`      | $-2^7$ ~ $2^7-1$                     | `0`     |\n| `short`   | 16     | 2      | `Short`     | $-2^{15}$ ~ $2^{15}-1$               | `0`     |\n| `char`    | 16     | 2      | `Character` | `\\u0000` ~ `\\uffff`（$0$ ~ $65535$） | `u0000` |\n| `int`     | 32     | 4      | `Integer`   | $-2^{31}$ ~ $2^{31}-1$               | `0`     |\n| `long`    | 64     | 8      | `Long`      | $-2^{63}$ ~ $2^{63}-1$               | `0L`    |\n| `float`   | 32     | 4      | `Float`     | $3.4e^{-45}$ ~ $1.4e^{38}$           | `0.0f`  |\n| `double`  | 64     | 8      | `Double`    | $4.9e^{-324}$ ~ $1.8e^{308}$         | `0.0D`  |\n| `boolean` | 不确定 | 不确定 | `Boolean`   | `true` 或 `false`                    | `false` |\n\n**注意：** \n\n1.  `boolean` 一般用 1 `bit` 来存储，但是具体大小并未规定，JVM 在编译期将 `boolean` 类型转换为 `int`，此时 1 代表 `true`，`0` 代表 `false`。此外，JVM 还指出 `boolean` 数组，但底层是通过 `byte` 数组来实现;\n2.  使用 `long` 类型时，需要在后边加上 `L`，否则将其作为整型解析，可能会导致越界；\n3.  浮点数如果没有明确指定 `float` 还是 `double`，统一按 `double` 处理；\n4.  `char` 是用 **单引号 `‘’`** 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 `String` 是用 **双引号 `“”`** 将内容括起来，代表的是一个地址值；\n\n### 引用类型\n\n| 数据类型 | 默认值 |\n| -------- | ------ |\n| 数组     | `null` |\n| 类       | `null` |\n| 接口     | `null` |\n\n### 封装类\n\n基本数据类型都有其对应的封装类，两者之间的赋值通过 **自动装箱** 和 **自动拆箱** 来完成；\n\n-   **自动装箱**：将基本数据类型装箱为封装类；\n\n```java\n// 实际调用 Integer.valueOf(12)\nInteger x = 12;\n```\n\n-   **自动拆箱**：将封装类拆箱为基本数据类型；\n\n```java\nInteger x = 12;\n// 实际调用 x.intValue()\nint y = x;\n```\n\n-   **基本类型与对应封装类的不同**\n    1.  基本类型只能按值传递，封装类按引用传递；\n    2.  **基本类型** 会在 **栈** 中创建，效率较高，但可能存在内存泄露问题；**封装类对象会在堆中创建**，其 **引用在栈中创建；**\n\n### 缓存池\n\n以 `new Integer(123)` 和 `Integer.valueOf(123)` 为例：\n\n-   通过 `new` 的方式每次都会创建一个新的对象；\n-   通过 `valueOf()` 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；\n\n```java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\n// false，通过 new 的方式，每次都会创建一个新对象，指向不同对象\nSystem.out.println(x == y);    \nInteger m = Integer.valueOf(123);\nInteger n = Integer.valueOf(123);\n// true，通过 valueOf（） 的方式，先到缓存池中查找，存在时则多次调用也是指向同一对象\nSystem.out.println(m == n);   \n```\n\n| 数据类型    | 默认缓存池          |\n| ----------- | ------------------- |\n| `Byte`      | $-2^7$ ~ $2^7-1$    |\n| `Character` | `\\u0000` ~ `\\u007F` |\n| `Short`     | $-2^7$ ~ $2^7-1$    |\n| `Integer`   | $-2^7$ ~ $2^7-1$    |\n| `Boolean`   | `true` & `false`    |\n\n## 字符串 String\n\n### 定义\n\n```java\npublic final class String implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n上述代码为 Java 8 中 String 的定义，其底层实际上使用的是字符（`char`）数组，而且由于被声明为 `final`，代表着它 **不能被继承**。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 `String` 的不可变性，也因此 String 是线程安全的。\n\n### 不可变性的优点\n\n1.  **用于缓存 `hash` 值**\n\n由于 `String` 的 `hash` 值被频繁使用，它的不可变性使得 `hash` 值也不可变，此时只需要进行一次计算；\n\n2.  **字符串常量池（String Pool）的需要**\n\n如果一个 `String` 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 `String` 对象；\n\n3.  **安全性**\n\n我们经常用 `String` 作为我们方法的参数，其不变性能够保证参数不可变；\n\n4.  **线程安全**\n\n`String` 的不可变性让它天生 **具备线程安全**，能够在多个线程中方便使用而不用考虑线程安全问题。\n\n### String vs StringBuffer vs StringBuffer\n\n主要从三个方面对三者进行对比：\n\n|                 | 可变性 | 线程安全                               | 适用场景                                                     |\n| --------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `String`        | 不可变 | 安全                                   | 操作少量的数据                                               |\n| `StringBuffer`  | 可变   | 安全，内部使用 `synchronized` 进行同步 | 多线程操作字符串缓冲区下操作大量数据                         |\n| `StringBuilder` | 可变   | 不安全                                 | 单线程操作字符串缓冲区下操作大量数据，性能高于 `StringBuffer` |\n\n### 字符串常量池（String Pool）\n\nString Pool 位于 **方法区**，通常保存着所有 [字符串字面量（literal strings）](https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F)，在编译期间就被确定。此外，还可以用 `String` 中的 `intern()` 方法在运行过程中添加到 String Pool 中。当一个字符串调用 `intern()` 时，如果 String Pool 中已经存在字面量相同的字符串，则会返回 String Pool 中的引用；如果不存在，则向 String Pool 中添加一个新的字符串，同时返回新字符串的引用；\n\n```java\nString s1 = new String(\"aaa\");\nString s2 = new String(\"aaa\");\n// false 两个字符串指向不同对象\nSystem.out.println(s1 == s2);   \n\nString s3 = s1.intern();\nString s4 = s1.intern();\n// true，常量池中存在字面量相同的字符串，直接取出\nSystem.out.println(s3 == s4);\n```\n\n在下面的代码中，内存分析如下图：\n\n```java\nString str1 = \"村雨遥\";\nString str2 = \"村雨遥\";\nString str3 = new String(\"村雨遥\");\nString str4 = new String(\"村雨遥\");\n\n// true，两个引用指向常量池中的同一对象\nSystem.out.println(str1 == str2);\n// false，两个引用指向堆中不同对象\nSystem.out.println(str3 == str4);\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/52dc7d534f68b5d1910f1a417ac0b3a0.png)\n\n### new String(“xxx”)\n\n使用 `new` 的方式创建字符串对象，会有两种不同的情况：\n\n1.  **String Pool 中不存在 “xxx”**\n\n此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 `new` 会在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/20201024102754231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n2.  **String Pool 中存在 “xxx”**\n\n此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/17b38c5e7cfe2e3290481684640cf70f.png)\n\n## 基础语法\n\n### 注释\n\n-   **单行注释**\n\n```java\n// 这是单行注释\nString name = \"村雨遥\";\n```\n\n-   **多行注释**\n\n```java\n/*\n* 这是多行注释\n* name，公众号\n*/\nString name = \"村雨遥\";\n```\n\n-   **文档注释**\n\n```java\n/**\n* @author : 村雨遥\n* @param : name，公众号\n*/\nString name = \"村雨遥\";\n```\n\n### 常见关键字\n\n![关注公众号，获取思维导图原件](https://img-blog.csdnimg.cn/img_convert/019a2373741e18f47f98f777460522cb.png)\n\n### 标识符和关键字\n\n-   **标识符**：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；\n-   **关键字**：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；\n-   **标识符命名规则**（可以参考《阿里巴巴开发手册》，关注公众号【**村雨遥**】回复【资源下载】下载 PDF）\n    1.  标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（`_`）和美元符号（`$`）组成；\n    2.  不能以数字开头，不能是关键字；\n    3.  严格区分大小写；\n    4.  包名：多个单词组成是所有单词均小写；\n    5.  类名和接口：大写驼峰命名法；\n    6.  变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；\n    7.  常量名：字母全部大写，单词之间用下划线（`_`）分割； \n\n### 访问控制符\n\n| 作用域      | 当前类 | 同一 `package`  的类 | 子类 | 其他 `package` 的类 |\n| ----------- | ------ | -------------------- | ---- | ------------------- |\n| `public`    | 😀      | 😀                    | 😀    | 😀                   |\n| `protected` | 😀      | 😀                    | 😀    | 😡                   |\n| `default`   | 😀      | 😀                    | 😡    | 😡                   |\n| `private`   | 😀      | 😡                    | 😡    | 😡                   |\n\n### static、final、this、super\n\n1.  **static**\n\n`static` 主要有如下 4 中使用场景：\n\n-   **修饰成员变量和成员方法**：被 `static` 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 **方法区**，不属于单个对象，被所有对象共享，而且最好通过 `类名.静态成员名/静态方法名()` 调用；\n-   **静态代码块**：定义在类中方法外，先于非静态代码块之前执行（**静态代码块 -> 非静态代码块 -> 构造方法**） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；\n-   **静态内部类**：**`static` 要修饰类时，只有修饰内部类这一种用法。** 非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即 **内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 `static` 成员变量和方法；**\n-   **静态导包**：用于导入静态资源，`import static` 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；\n-   **注意：**\n    -   `abstract` 方法不能同时是 `static` 的，因为 `abstract` 方法需要被重写，但 `static` 方法不可以；\n    -   不能从 `static` 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；\n    -   `static` 不能用于修饰局部变量；\n    -   内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 `new` 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。\n\n2.  **final**\n\n-   修饰类时，**被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 `final` 方法**；\n-   修饰方法时，**表明该方法无法被重写**；\n-   修饰变量时，说明该 **变量是一个常量**。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象；\n\n3.  **this**\n\n用于引用类的当前实例，比如我们最常用的构造方法中，**注意不能用在 `static` 方法中**；\n\n```java\npublic class User{\n    int age;\n    \n    public User(int age){\n        this.age = age;\n    }\n}\n```\n\n其中 `this.age` 说明访问的是 `User` 类中的成员变量，而后面的 `age` 则代表传入的形参；\n\n4.  **super**\n\n用于从子类访问父类中的变量和方法，**注意不能用在 `static` 方法中**；\n\n```java\npublic class Father{\n    String name;\n    \n    public Father(String name){\n        this.name = name;\n    }\n    \n    public Father(){\n    }\n}\n```\n\n```java\npublic class Son extends Father{\n    public Son(String name){\n        super();\n        this.name = name + \".jr\";\n    }\n}\n```\n\n\n\n### continue、break 和 return\n\n| 关键字     | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| `continue` | 用于循环结构，指跳出当前循环，进入下一次循环                 |\n| `break`    | 用于循环结构，指跳出整个循环体，继续执行循环下面的语句       |\n| `return`   | 1. `return ;` ：直接用 `return` 结束方法执行，用于没有返回值函数的方法；<br />2. `return value;` ：`return ` 一个特定值，用于有返回值函数的方法 |\n\n### while 循环与 do 循环\n\n`while` 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行；\n\n`do……while` 会在循环的结果来判断是否继续下一轮迭代，**至少会执行一次循环体**；\n\n###  final、finally、finalize\n\n1.  **final**\n\n`final` 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样；\n\n-   **修饰类：** 表示该类无法被继承；\n-   **修饰变量**：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的；\n-   **修饰方法**：表示方法无法被重写，但是允许重载，`private` 方法会隐式指定为 `final` 方法；\n\n2.  **finally**\n\n-   `finally` 是一个关键字，在异常处理时提供 `finally` 块来执行任何清除操作，无论是否有异常被抛出或捕获，`finally` 块均会被执行，通常用于释放资源；\n-   `finally` 正常情况下一定会被执行，但是在如下两种情况下不会执行：\n    -   对应的 `try` 未执行，则该 `try` 块的 `finally` 块并不会被执行；\n    -   若 `try` 块中 JVM 关机，则 `finally` 块也不会执行；\n-   `finally` 中如果有 `return` 语句，则会覆盖 `try` 或 `catch` 中的 `return` 语句，导致两者无法 `return`，所以建议 `finally` 中不要存在 `return` 关键字；\n\n3.  **finallize**\n\n`finallize()` 是 `Object` 类的 `protected` 方法，子类能够覆盖该方法以实现资源清理工作；\n\nGC 在回收前均会调用该方法，但是 `finalize()` 方法存在如下问题：\n\n-   Java 语言规范不保证 `finalize()` 方法会被及时执行，也不保证他们一定被执行；\n-   `finalize()` 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 `finalize` 的执行；\n-   `finalize()` 方法中，可将待回收对象赋值给 `GC Roots` 可达的对象引用，从而达到对象再生的目的；\n-   `finalize()` 方法最多由 GC 执行一次（但是可以手动调用对象的 `finalize` 方法）；\n\n## 运算符\n\n### 算术运算\n\n| 操作符 | 描述                              | 例子               |\n| :----- | :-------------------------------- | :----------------- |\n| `+`    | 加法 - 相加运算符两侧的值         | A + B 等于 30      |\n| `-`    | 减法 - 左操作数减去右操作数       | A – B 等于 -10     |\n| `*`    | 乘法 - 相乘操作符两侧的值         | A * B等于200       |\n| `/`    | 除法 - 左操作数除以右操作数       | B / A等于2         |\n| `％`   | 取余 - 左操作数除以右操作数的余数 | B%A等于0           |\n| `++`   | 自增: 操作数的值增加1             | B++ 或 ++B 等于 21 |\n| `--`   | 自减: 操作数的值减少1             | B-- 或 --B 等于 19 |\n\n**注意**：`++` 和 `--` 可以放在操作数之前，也可以放在操作数之后；**位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减**；总结起来就是 **符号在前就先加/减，符号在后就后加/减**。\n\n### 关系运算符\n\n| 运算符 | 描述                                                         | 例子             |\n| :----- | :----------------------------------------------------------- | :--------------- |\n| `==`   | 检查如果两个操作数的值是否相等，如果相等则条件为真。         | （A == B）为假。 |\n| `!=`   | 检查如果两个操作数的值是否相等，如果值不相等则条件为真。     | (A != B) 为真。  |\n| `> `   | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。   | （A> B）为假。   |\n| `< `   | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。   | （A <B）为真。   |\n| `>=`   | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 | （A> = B）为假。 |\n| `<=`   | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 | （A <= B）为真。 |\n\n### 位运算符\n\n| 操作符 | 描述                                                         | 例子                                     |\n| ------ | ------------------------------------------------------------ | ---------------------------------------- |\n| `＆`   | 如果相对应位都是1，则结果为1，否则为0                        | （A＆B），得到12，即0000 1100            |\n| `|`    | 如果相对应位都是 0，则结果为 0，否则为 1                     | 如果相对应位都是 0，则结果为 0，否则为 1 |\n| `^`    | 如果相对应位值相同，则结果为0，否则为1                       | （A ^ B）得到49，即 0011 0001            |\n| `〜`   | 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。         | （〜A）得到-61，即1100 0011              |\n| `<<`   | 按位左移运算符。左操作数按位左移右操作数指定的位数。         | A << 2得到240，即 1111 0000              |\n| `>>`   | 按位右移运算符。左操作数按位右移右操作数指定的位数。         | A >> 2得到15即 1111                      |\n| `>>>`  | 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 | A>>>2得到15即0000 1111                   |\n\n### 逻辑运算符\n\n| 操作符 | 描述                                                         | 例子               |\n| :----- | :----------------------------------------------------------- | :----------------- |\n| `&&`   | 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。     | `（A && B）`为假。 |\n| `||`   | 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 | `（A || B）`为真。 |\n| `!`    | 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 | `!(A && B)`为真。  |\n\n### 赋值运算符\n\n| 操作符 | 描述                                                         | 例子                                     |\n| :----- | :----------------------------------------------------------- | :--------------------------------------- |\n| `=`    | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B将把A + B得到的值赋给C          |\n| `+=`   | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C + = A等价于C = C + A                   |\n| `-=`   | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C - = A等价于C = C - A                   |\n| `*=`   | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C * = A等价于C = C * A                   |\n| `/=`   | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C / = A，C 与 A 同类型时等价于 C = C / A |\n| `％=`  | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C％= A等价于C = C％A                     |\n| `<< =` | 左移位赋值运算符                                             | C << = 2等价于C = C << 2                 |\n| `>>=`  | 右移位赋值运算符                                             | C >> = 2等价于C = C >> 2                 |\n| `＆=`  | 按位与赋值运算符                                             | C＆= 2等价于C = C＆2                     |\n| `^=`   | 按位异或赋值操作符                                           | C ^ = 2等价于C = C ^ 2                   |\n| `|=`   | 按位或赋值操作符                                             | C \\| = 2等价于C = C \\| 2                 |\n\n### 条件运算符（? :）\n\n也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；\n\n```java\nvariable x = (expression) ? value if true : value if false\n```\n\n### instanceof\n\n用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；\n\n```java\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n### equals() 和 ==\n\n-   `==`\n\n基本数据类型用 `==` 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；\n\n>   本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；\n\n-   `equals()`\n\n作用也是判断两个对象是否相等，但是 **不能用于基本数据类型变量的比较**。存在于 `Object()` 类中，所以所有类都具有 `equals()` 方法存在两种使用情况：\n\n1.  **类未覆盖 `equals()` 方法**：此时通过 `equals()` 比较该类的两个对象时，等价于 `==` 比较这两个对象，默认使用  `Object` 类中的 `equals()` 方法；\n2.  **类覆盖了 `equals()` 方法**：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 `String、BitSet、Data、File` 就覆盖了 `equals()` 方法；\n\n## 方法\n\n### 方法的类型\n\n1.  无参无返回值；\n2.  无参有返回值；\n3.  有参无返回值；\n4.  有参有返回值；\n\n### 重载和重写\n\n1.  **重载（Overload）**\n\n重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 **编译期**，而且在同一个类中，**方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。** 总的而言：**重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。**\n\n2.  **重写（Override）**\n\n重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 **运行期**，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 `private/final/static` 修饰，则子类无法重写父类方法，但 `static` 修饰的方法能被再次声明。**构造方法是个特例，不能被重写**。总结起来就是：**重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑**。\n\n3.  **重载 vs 重写**\n\n| 不同点     | 重载     | 重写                                         |\n| ---------- | -------- | -------------------------------------------- |\n| 参数列表   | 必须不同 | 必须相同                                     |\n| 返回类型   | 可不同   | 必须相同                                     |\n| 访问修饰符 | 可不同   | 不能比父类更严格                             |\n| 发生范围   | 同一类中 | 父子类                                       |\n| 异常范围   | 可修改   | 可以减少或删除，不能抛新异常或范围更广的异常 |\n| 发生阶段   | 编译期   | 运行期                                       |\n\n### 深/浅拷贝\n\n1.  **浅拷贝**\n\n浅拷贝是 **按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。** 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；\n\n![](https://img-blog.csdnimg.cn/img_convert/1cc4a245021761cbff809afd3105169e.png)\n\n2.  **深拷贝**\n\n深拷贝会 **拷贝所有属性，同时拷贝属性指向的动态分配的内存**。当对象和它引用的对象一起拷贝是即发生深拷贝，**相比于浅拷贝，深拷贝速度较慢同时花销更大**。\n\n![](https://img-blog.csdnimg.cn/img_convert/2047bfceaaf483f47dc86a0d623457b5.png)\n\n3.  **总结**\n\n浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；\n\n### 值传递\n\n推荐阅读：https://juejin.im/post/5bce68226fb9a05ce46a0476\n\n#### 形参和实参\n\n1.  **形参**：方法被调用时需要传递进来的参数，如 `func(String name)` 中的 `name` 就是一个形参，只有在 `func` 被调用时 `name` 才被分配内存空间，当方法执行完后，`name` 将自动销毁释放空间；\n2.  **实参**：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；\n\n```java\npublic static void func(String name){\n    System.out.println(name);\n}\n\npublic static void main(String[] args) {\n    //实参\n    String name = \"村雨遥\";\n    func(name);\n}\n```\n\n#### 值传递和引用传递\n\n1.  **值传递**\n\n方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 **值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。**\n\n```java\npublic static void valueCrossTest(int age,float weight){\n    System.out.println(\"传入的age：\"+age);\n    System.out.println(\"传入的weight：\"+weight);\n    age=33;\n    weight=89.5f;\n    System.out.println(\"方法内重新赋值后的age：\"+age);\n    System.out.println(\"方法内重新赋值后的weight：\"+weight); \n}\n\npublic static void main(String[] args) {\n    int a=25;\n    float w=77.5f;\n    valueCrossTest(a,w);\n\n    // a = 25，原始值不收影响\n    System.out.println(\"方法执行后的age：\"+a);\n    // w = 77.5，原始值不收影响\n    System.out.println(\"方法执行后的weight：\"+w)\n}\n```\n\n2.  **引用传递**\n\n引用即指向真实内容的地址值，在方法调用时，**实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。**\n\n但 Java 中并 **不存在引用传递**，因为 **无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身**。\n\n3.  **总结** \n\n**如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。**\n\n**如果是对引用类型的数据进行操作，分两种情况，**\n\n-   **一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。**\n\n```java\npublic static void PersonCrossTest(Person person){\n    System.out.println(\"传入的person的name：\" + person.getName());\n    person.setName(\"我是张小龙\");\n    System.out.println(\"方法内重新赋值后的name：\" + person.getName());\n}\n```\n\n-   **另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。**\n\n```java\npublic static void PersonCrossTest(Person person){\n    System.out.println(\"传入的person的name：\" + person.getName());\n    person=new Person();\n    person.setName(\"我是张小龙\");\n    System.out.println(\"方法内重新赋值后的name：\" + person.getName());\n}\n```\n\n## 面向对象\n\n### 面向对象 vs 面向过程\n\n推荐阅读：https://www.zhihu.com/question/27468564/answer/757537214\n\n-   **面向对象（Object Oriented）**\n\n面向过程是一种 **对现实世界理解和抽象的方法**，**更容易维护、复用、扩展**。最主要的特点就是 **继承、封装、多态**，所以 设计出的系统耦合性较低，但比起面向过程性能要低。\n\n-   **面向过程（Procedure Oriented）**\n\n面向过程是一种 **以过程为中心** 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 **封装、继承、多态**，其性能比面向对象更高。\n\n-   **总结**\n\n面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。\n\n### 封装、继承、多态\n\n1.  **封装**\n\n将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。\n\n通过 封装，实现了 **专业分工**，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 **隐藏了信息以及实现细节**，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。\n\n2.  **继承**\n\n可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 **子类/派生类**，被继承的类叫做 **父类/基类/超类**，具有如下特点：\n\n-   **子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的**；\n-   子类可以对父类进行扩展；\n-   子类可以用自己的方式来实现父类的方法；\n\n3.  **多态**\n\n多态是允许 **将父对象设置为和一个或多个其子对象相等的技术**，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 **父类引用指向子类对象实例**，有 **重载和重写** 两种实现方式。具有如下特点：\n\n-   对象类型不可变，但引用类型可变；\n-   对象类型和引用类型之间有继承（类）/实现（接口）的关系；\n-   方法具有多态性，但属性不具有；\n-   若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。\n\n### 成员变量 vs 局部变量 vs 静态变量\n\n| 不同     | 语法                                                         | 存储位置 | 生命周期     | 初始化值                                          | 调用方式                   | 别名     |\n| -------- | ------------------------------------------------------------ | -------- | ------------ | ------------------------------------------------- | -------------------------- | -------- |\n| 成员变量 | 1、 属于类<br />2、能被访问控制符、`static、final` 等修饰    | 堆       | 与对象共存亡 | 有，基本数据类型为对应默认值，而对象统一为 `null` | 对象调用                   | 实例变量 |\n| 局部变量 | 1、属于方法（方法中的变量或参数）<br />2、不能被访问控制符及 `static` 修饰，但可以被 `final` 修饰 | 栈       | 与方法共存亡 | 无，必须定义赋值后使用                            |                            |          |\n| 静态变量 | 1、属于类<br />2、被 `static` 修饰，被所有类对象共用         | 方法区   | 与类共存亡   | 同成员变量初始化值                                | 类名调用（推荐）、对象调用 | 类变量   |\n\n### 构造方法的特点\n\n1.  方法名与类名同名；\n2.  无返回值，但不能用 `void` 关键字声明；\n3.  生成类对象时自动执行，无需显式调用；\n\n### 抽象类 & 接口\n\n1.  **接口**\n\n-   接口中所有方法默认是 `public`，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；\n\n-   接口中所有变量均为 `static、final`，不能有其他变量；\n-   一个类可以实现多个接口（通过 `implements` 关键字），而且接口自身可以通过 `extends` 来扩展多个接口；\n-   接口是对行为的抽象，属于行为规范；\n\n2.  **抽象类**\n\n-   抽象类中既可以有抽象方法，也可以有非抽象的方法；\n-   一个类只能实现一个抽象类；\n-   抽象方法可以被 `public、protected、default` 修饰，但不能用 `private`，否则不能被重写；\n-   抽象是对类的抽象，是一种模板设计；\n\n### Object 类中常见方法\n\n| 方法                                                         | 说明                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `public final native Class<?> getClass()`                    | 用于返回当前运行时对象的 Class 对象，使用了final 关键字修饰，故不允许子类重写 |\n| `public native int hashCode()`                               | 用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap |\n| `public boolean equals(Object obj)`                          | 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等 |\n| `protected native Object clone() throws CloneNotSupportedException` | 用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException 异常 |\n| `public String toString()`                                   | 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法 |\n| `public final native void notify()`                          | 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个 |\n| `public final native void notifyAll()`                       | 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程 |\n| `public final native void wait(long timeout) throws InterruptedException` | 不能重写。暂停线程的执行注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：<br />1. 其他线程调用该对象的 `notify()/notifyAll()` 方法；<br />2. 时间间隔到了；<br />3. 其他线程调用了 `interrupt()` 中断该线程； |\n| `public final void wait(long timeout, int nanos) throws InterruptedException` | 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒 |\n| `public final void wait() throws InterruptedException`       | 跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念 |\n| `protected void finalize() throws Throwable { }`             | 实例被垃圾回收器回收的时候触发的操作                         |\n\n### hashCode & equals\n\n推荐阅读：https://juejin.im/post/5a4379d4f265da432003874c\n\n#### equals\n\n1.  重写 `equals()` 方法的准则：\n\n| 准则       | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| **自反性** | 对任意非空引用值 `x`，`x.equals(x)` 应该返回 `true`          |\n| **对称性** | 对于任何非空引用值 `x `和 `y`，当 `y.equals(x)` 返回 `true `时，`x.equals(y)`  也应返回 `true` |\n| **传递性** | 对于任何非空引用值` x、y` 和 `z`，如果 `x.equals(y)` 返回 `true`， 并且 `y.equals(z)` 返回 `true`，那么 `x.equals(z) ` 也应返回 `true` |\n| **一致性** | 对于任何非空引用值 `x ` 和  `y`，多次调用 `x.equals(y)` 始终返回 `true` 或始终返回 `false`， 前提是对象上 `equals `比较中所用的信息没有被修改 |\n| **非空性** | 对于任何非空引用值 `x`，`x.equals(null)` 都应返回 `false`    |\n\n#### hashCode\n\n`hashCode` 用于返回对象 `hash` 值，主要是为了加快查找的快捷性，因为 `hashCode()` 是 `Object` 类中的方法，所以所有 Java 类均有 `hashCode()`，在 `HashTable` 和 `HashMap` 这类的散列结构中，均是通过 `hashCode()` 来查找在散列表中位置，通过 `hashCode` 能够较快的茶道小内存块。\n\n#### 为什么重写 `equals()` 必须重写 `hashCode()`\n\n1.  若两个对象相等，则 `hashCode()` 一定也相同，因为 `equals()` 是绝对可靠的；\n2.  两个对象相等，则两个对象分别调用 `equals()` 方法也返回 `true`；\n3.  两个对象有相同的 `hashCode()`，他们不一定相等，因为 `hashCode()` 不是绝对可靠的；\n4.  如果重写了 `equals()`，但保留 `hashCode()` 的实现不变，则可能出现两者相等，但 `hashCode` 却不一样；\n5.  因此，一旦重写了 `equals()` 方法，则必须重写 `hashCode()`，`hashCode() ` 的默认行为是对堆上的对象产生独特值。如果没有重写 `hashCode()`，则该 `class` 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。\n\n### 序列化与反序列化\n\n#### 定义\n\n-   **序列化**：指将对象转换为字节序列的过程；\n-   **反序列化**：指将字节序列转换为目标对象的过程；\n\n#### 需要序列化的场景\n\n当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；\n\n#### 如何实现序列化\n\n要实现序列化，只需要让类实现 `Serializable` 接口即可，此时就标注该类对象能够被序列化；\n\n针对类中某些数据不想序列化时，可以使用 `transient` 关键字来实现，例如：\n\n```java\n// 通过关键字 transient 修饰，表明不参与序列化\ntransient private String telephone;\n```\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","source":"_posts/【剑指-Java】第-1-弹：靠这份-Java-基础知识总结，我拿到了满意的-Offer.md","raw":"---\ntitle: 【剑指 Java】第 1 弹：靠这份 Java 基础知识总结，我拿到了满意的 Offer\ntags:\n  - Java\n  - 面试\ncategories:\n  - 剑指 Java\nabbrlink: 6bac5157\ndate: 2021-05-02 22:47:05\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n因为博主是 2021 届毕业生，当时为了准备秋招，特意总结的 Java 基础知识面试高频题，最后也算找到了挺满意的工作。因此回馈给大家，希望能对大家起到一定的帮助。\n\n## 入门常识\n\n### Java 特点\n\n1.  简单易学\n2.  面向对象（封装、继承、多态）\n3.  平台独立\n4.  安全可靠\n5.  支持多线程\n6.  解释和编译共存\n7.  安全性\n8.  健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）\n9.  …\n\n###  Java 和 C++\n\n-   **相同点**：两者均为 OOP 语言，均支持 OOP 的三大特性（封装、继承、多态）；\n-   **不同点**：\n    -   Java 不存在指针的概念，所以内存更加安全；\n    -   Java 类是单继承（但是接口可以多继承），C++ 的类是多继承；\n    -   Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存；\n    -   C/C++ 中，字符串和字符数组最后均有一个额外的 `\\0` 标志来表示结束，但 Java 中不存在这一概念；\n\n### JRE  和 JDK\n\n-   JRE（Java Runtime Environment），即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序；\n-   JDK（Java Development Kit），即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它；\n\n![两者关系](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5MjRmMDU2YzVlMGY4ZDkucG5n?x-oss-process=image/format,png)\n\n### Java 程序编译过程\n\n![](https://img-blog.csdnimg.cn/img_convert/79663a1d48126d9d28b2c8c567926ddb.png)\n\n我们编译的源代码（`xxx.java`）经 JDK 中的 `javac` 命令编译后，成为 JVM 能够理解的 Java 字节码（`xxx.class`），然后经由 JVM 加载，通过解释器 **逐行解释执行**，这就是为什么能经常听见说 **Java 是一门编译和解释共存的语言**。\n\n其中 JVM 是解释 Java 字节码（`xxx.class`） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；\n\n##  数据类型\n\n### 基本数据类型\n\n| 数据类型  | bit    | 字节   | 封装类      | 数据范围                             | 默认值  |\n| --------- | ------ | ------ | ----------- | ------------------------------------ | ------- |\n| `byte`    | 8      | 1      | `Byte`      | $-2^7$ ~ $2^7-1$                     | `0`     |\n| `short`   | 16     | 2      | `Short`     | $-2^{15}$ ~ $2^{15}-1$               | `0`     |\n| `char`    | 16     | 2      | `Character` | `\\u0000` ~ `\\uffff`（$0$ ~ $65535$） | `u0000` |\n| `int`     | 32     | 4      | `Integer`   | $-2^{31}$ ~ $2^{31}-1$               | `0`     |\n| `long`    | 64     | 8      | `Long`      | $-2^{63}$ ~ $2^{63}-1$               | `0L`    |\n| `float`   | 32     | 4      | `Float`     | $3.4e^{-45}$ ~ $1.4e^{38}$           | `0.0f`  |\n| `double`  | 64     | 8      | `Double`    | $4.9e^{-324}$ ~ $1.8e^{308}$         | `0.0D`  |\n| `boolean` | 不确定 | 不确定 | `Boolean`   | `true` 或 `false`                    | `false` |\n\n**注意：** \n\n1.  `boolean` 一般用 1 `bit` 来存储，但是具体大小并未规定，JVM 在编译期将 `boolean` 类型转换为 `int`，此时 1 代表 `true`，`0` 代表 `false`。此外，JVM 还指出 `boolean` 数组，但底层是通过 `byte` 数组来实现;\n2.  使用 `long` 类型时，需要在后边加上 `L`，否则将其作为整型解析，可能会导致越界；\n3.  浮点数如果没有明确指定 `float` 还是 `double`，统一按 `double` 处理；\n4.  `char` 是用 **单引号 `‘’`** 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 `String` 是用 **双引号 `“”`** 将内容括起来，代表的是一个地址值；\n\n### 引用类型\n\n| 数据类型 | 默认值 |\n| -------- | ------ |\n| 数组     | `null` |\n| 类       | `null` |\n| 接口     | `null` |\n\n### 封装类\n\n基本数据类型都有其对应的封装类，两者之间的赋值通过 **自动装箱** 和 **自动拆箱** 来完成；\n\n-   **自动装箱**：将基本数据类型装箱为封装类；\n\n```java\n// 实际调用 Integer.valueOf(12)\nInteger x = 12;\n```\n\n-   **自动拆箱**：将封装类拆箱为基本数据类型；\n\n```java\nInteger x = 12;\n// 实际调用 x.intValue()\nint y = x;\n```\n\n-   **基本类型与对应封装类的不同**\n    1.  基本类型只能按值传递，封装类按引用传递；\n    2.  **基本类型** 会在 **栈** 中创建，效率较高，但可能存在内存泄露问题；**封装类对象会在堆中创建**，其 **引用在栈中创建；**\n\n### 缓存池\n\n以 `new Integer(123)` 和 `Integer.valueOf(123)` 为例：\n\n-   通过 `new` 的方式每次都会创建一个新的对象；\n-   通过 `valueOf()` 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；\n\n```java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\n// false，通过 new 的方式，每次都会创建一个新对象，指向不同对象\nSystem.out.println(x == y);    \nInteger m = Integer.valueOf(123);\nInteger n = Integer.valueOf(123);\n// true，通过 valueOf（） 的方式，先到缓存池中查找，存在时则多次调用也是指向同一对象\nSystem.out.println(m == n);   \n```\n\n| 数据类型    | 默认缓存池          |\n| ----------- | ------------------- |\n| `Byte`      | $-2^7$ ~ $2^7-1$    |\n| `Character` | `\\u0000` ~ `\\u007F` |\n| `Short`     | $-2^7$ ~ $2^7-1$    |\n| `Integer`   | $-2^7$ ~ $2^7-1$    |\n| `Boolean`   | `true` & `false`    |\n\n## 字符串 String\n\n### 定义\n\n```java\npublic final class String implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n上述代码为 Java 8 中 String 的定义，其底层实际上使用的是字符（`char`）数组，而且由于被声明为 `final`，代表着它 **不能被继承**。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 `String` 的不可变性，也因此 String 是线程安全的。\n\n### 不可变性的优点\n\n1.  **用于缓存 `hash` 值**\n\n由于 `String` 的 `hash` 值被频繁使用，它的不可变性使得 `hash` 值也不可变，此时只需要进行一次计算；\n\n2.  **字符串常量池（String Pool）的需要**\n\n如果一个 `String` 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 `String` 对象；\n\n3.  **安全性**\n\n我们经常用 `String` 作为我们方法的参数，其不变性能够保证参数不可变；\n\n4.  **线程安全**\n\n`String` 的不可变性让它天生 **具备线程安全**，能够在多个线程中方便使用而不用考虑线程安全问题。\n\n### String vs StringBuffer vs StringBuffer\n\n主要从三个方面对三者进行对比：\n\n|                 | 可变性 | 线程安全                               | 适用场景                                                     |\n| --------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `String`        | 不可变 | 安全                                   | 操作少量的数据                                               |\n| `StringBuffer`  | 可变   | 安全，内部使用 `synchronized` 进行同步 | 多线程操作字符串缓冲区下操作大量数据                         |\n| `StringBuilder` | 可变   | 不安全                                 | 单线程操作字符串缓冲区下操作大量数据，性能高于 `StringBuffer` |\n\n### 字符串常量池（String Pool）\n\nString Pool 位于 **方法区**，通常保存着所有 [字符串字面量（literal strings）](https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F)，在编译期间就被确定。此外，还可以用 `String` 中的 `intern()` 方法在运行过程中添加到 String Pool 中。当一个字符串调用 `intern()` 时，如果 String Pool 中已经存在字面量相同的字符串，则会返回 String Pool 中的引用；如果不存在，则向 String Pool 中添加一个新的字符串，同时返回新字符串的引用；\n\n```java\nString s1 = new String(\"aaa\");\nString s2 = new String(\"aaa\");\n// false 两个字符串指向不同对象\nSystem.out.println(s1 == s2);   \n\nString s3 = s1.intern();\nString s4 = s1.intern();\n// true，常量池中存在字面量相同的字符串，直接取出\nSystem.out.println(s3 == s4);\n```\n\n在下面的代码中，内存分析如下图：\n\n```java\nString str1 = \"村雨遥\";\nString str2 = \"村雨遥\";\nString str3 = new String(\"村雨遥\");\nString str4 = new String(\"村雨遥\");\n\n// true，两个引用指向常量池中的同一对象\nSystem.out.println(str1 == str2);\n// false，两个引用指向堆中不同对象\nSystem.out.println(str3 == str4);\n```\n\n![](https://img-blog.csdnimg.cn/img_convert/52dc7d534f68b5d1910f1a417ac0b3a0.png)\n\n### new String(“xxx”)\n\n使用 `new` 的方式创建字符串对象，会有两种不同的情况：\n\n1.  **String Pool 中不存在 “xxx”**\n\n此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 `new` 会在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/20201024102754231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n2.  **String Pool 中存在 “xxx”**\n\n此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；\n\n![](https://img-blog.csdnimg.cn/img_convert/17b38c5e7cfe2e3290481684640cf70f.png)\n\n## 基础语法\n\n### 注释\n\n-   **单行注释**\n\n```java\n// 这是单行注释\nString name = \"村雨遥\";\n```\n\n-   **多行注释**\n\n```java\n/*\n* 这是多行注释\n* name，公众号\n*/\nString name = \"村雨遥\";\n```\n\n-   **文档注释**\n\n```java\n/**\n* @author : 村雨遥\n* @param : name，公众号\n*/\nString name = \"村雨遥\";\n```\n\n### 常见关键字\n\n![关注公众号，获取思维导图原件](https://img-blog.csdnimg.cn/img_convert/019a2373741e18f47f98f777460522cb.png)\n\n### 标识符和关键字\n\n-   **标识符**：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；\n-   **关键字**：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；\n-   **标识符命名规则**（可以参考《阿里巴巴开发手册》，关注公众号【**村雨遥**】回复【资源下载】下载 PDF）\n    1.  标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（`_`）和美元符号（`$`）组成；\n    2.  不能以数字开头，不能是关键字；\n    3.  严格区分大小写；\n    4.  包名：多个单词组成是所有单词均小写；\n    5.  类名和接口：大写驼峰命名法；\n    6.  变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；\n    7.  常量名：字母全部大写，单词之间用下划线（`_`）分割； \n\n### 访问控制符\n\n| 作用域      | 当前类 | 同一 `package`  的类 | 子类 | 其他 `package` 的类 |\n| ----------- | ------ | -------------------- | ---- | ------------------- |\n| `public`    | 😀      | 😀                    | 😀    | 😀                   |\n| `protected` | 😀      | 😀                    | 😀    | 😡                   |\n| `default`   | 😀      | 😀                    | 😡    | 😡                   |\n| `private`   | 😀      | 😡                    | 😡    | 😡                   |\n\n### static、final、this、super\n\n1.  **static**\n\n`static` 主要有如下 4 中使用场景：\n\n-   **修饰成员变量和成员方法**：被 `static` 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 **方法区**，不属于单个对象，被所有对象共享，而且最好通过 `类名.静态成员名/静态方法名()` 调用；\n-   **静态代码块**：定义在类中方法外，先于非静态代码块之前执行（**静态代码块 -> 非静态代码块 -> 构造方法**） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；\n-   **静态内部类**：**`static` 要修饰类时，只有修饰内部类这一种用法。** 非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即 **内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 `static` 成员变量和方法；**\n-   **静态导包**：用于导入静态资源，`import static` 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；\n-   **注意：**\n    -   `abstract` 方法不能同时是 `static` 的，因为 `abstract` 方法需要被重写，但 `static` 方法不可以；\n    -   不能从 `static` 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；\n    -   `static` 不能用于修饰局部变量；\n    -   内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 `new` 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。\n\n2.  **final**\n\n-   修饰类时，**被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 `final` 方法**；\n-   修饰方法时，**表明该方法无法被重写**；\n-   修饰变量时，说明该 **变量是一个常量**。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象；\n\n3.  **this**\n\n用于引用类的当前实例，比如我们最常用的构造方法中，**注意不能用在 `static` 方法中**；\n\n```java\npublic class User{\n    int age;\n    \n    public User(int age){\n        this.age = age;\n    }\n}\n```\n\n其中 `this.age` 说明访问的是 `User` 类中的成员变量，而后面的 `age` 则代表传入的形参；\n\n4.  **super**\n\n用于从子类访问父类中的变量和方法，**注意不能用在 `static` 方法中**；\n\n```java\npublic class Father{\n    String name;\n    \n    public Father(String name){\n        this.name = name;\n    }\n    \n    public Father(){\n    }\n}\n```\n\n```java\npublic class Son extends Father{\n    public Son(String name){\n        super();\n        this.name = name + \".jr\";\n    }\n}\n```\n\n\n\n### continue、break 和 return\n\n| 关键字     | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| `continue` | 用于循环结构，指跳出当前循环，进入下一次循环                 |\n| `break`    | 用于循环结构，指跳出整个循环体，继续执行循环下面的语句       |\n| `return`   | 1. `return ;` ：直接用 `return` 结束方法执行，用于没有返回值函数的方法；<br />2. `return value;` ：`return ` 一个特定值，用于有返回值函数的方法 |\n\n### while 循环与 do 循环\n\n`while` 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行；\n\n`do……while` 会在循环的结果来判断是否继续下一轮迭代，**至少会执行一次循环体**；\n\n###  final、finally、finalize\n\n1.  **final**\n\n`final` 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样；\n\n-   **修饰类：** 表示该类无法被继承；\n-   **修饰变量**：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的；\n-   **修饰方法**：表示方法无法被重写，但是允许重载，`private` 方法会隐式指定为 `final` 方法；\n\n2.  **finally**\n\n-   `finally` 是一个关键字，在异常处理时提供 `finally` 块来执行任何清除操作，无论是否有异常被抛出或捕获，`finally` 块均会被执行，通常用于释放资源；\n-   `finally` 正常情况下一定会被执行，但是在如下两种情况下不会执行：\n    -   对应的 `try` 未执行，则该 `try` 块的 `finally` 块并不会被执行；\n    -   若 `try` 块中 JVM 关机，则 `finally` 块也不会执行；\n-   `finally` 中如果有 `return` 语句，则会覆盖 `try` 或 `catch` 中的 `return` 语句，导致两者无法 `return`，所以建议 `finally` 中不要存在 `return` 关键字；\n\n3.  **finallize**\n\n`finallize()` 是 `Object` 类的 `protected` 方法，子类能够覆盖该方法以实现资源清理工作；\n\nGC 在回收前均会调用该方法，但是 `finalize()` 方法存在如下问题：\n\n-   Java 语言规范不保证 `finalize()` 方法会被及时执行，也不保证他们一定被执行；\n-   `finalize()` 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 `finalize` 的执行；\n-   `finalize()` 方法中，可将待回收对象赋值给 `GC Roots` 可达的对象引用，从而达到对象再生的目的；\n-   `finalize()` 方法最多由 GC 执行一次（但是可以手动调用对象的 `finalize` 方法）；\n\n## 运算符\n\n### 算术运算\n\n| 操作符 | 描述                              | 例子               |\n| :----- | :-------------------------------- | :----------------- |\n| `+`    | 加法 - 相加运算符两侧的值         | A + B 等于 30      |\n| `-`    | 减法 - 左操作数减去右操作数       | A – B 等于 -10     |\n| `*`    | 乘法 - 相乘操作符两侧的值         | A * B等于200       |\n| `/`    | 除法 - 左操作数除以右操作数       | B / A等于2         |\n| `％`   | 取余 - 左操作数除以右操作数的余数 | B%A等于0           |\n| `++`   | 自增: 操作数的值增加1             | B++ 或 ++B 等于 21 |\n| `--`   | 自减: 操作数的值减少1             | B-- 或 --B 等于 19 |\n\n**注意**：`++` 和 `--` 可以放在操作数之前，也可以放在操作数之后；**位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减**；总结起来就是 **符号在前就先加/减，符号在后就后加/减**。\n\n### 关系运算符\n\n| 运算符 | 描述                                                         | 例子             |\n| :----- | :----------------------------------------------------------- | :--------------- |\n| `==`   | 检查如果两个操作数的值是否相等，如果相等则条件为真。         | （A == B）为假。 |\n| `!=`   | 检查如果两个操作数的值是否相等，如果值不相等则条件为真。     | (A != B) 为真。  |\n| `> `   | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。   | （A> B）为假。   |\n| `< `   | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。   | （A <B）为真。   |\n| `>=`   | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 | （A> = B）为假。 |\n| `<=`   | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 | （A <= B）为真。 |\n\n### 位运算符\n\n| 操作符 | 描述                                                         | 例子                                     |\n| ------ | ------------------------------------------------------------ | ---------------------------------------- |\n| `＆`   | 如果相对应位都是1，则结果为1，否则为0                        | （A＆B），得到12，即0000 1100            |\n| `|`    | 如果相对应位都是 0，则结果为 0，否则为 1                     | 如果相对应位都是 0，则结果为 0，否则为 1 |\n| `^`    | 如果相对应位值相同，则结果为0，否则为1                       | （A ^ B）得到49，即 0011 0001            |\n| `〜`   | 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。         | （〜A）得到-61，即1100 0011              |\n| `<<`   | 按位左移运算符。左操作数按位左移右操作数指定的位数。         | A << 2得到240，即 1111 0000              |\n| `>>`   | 按位右移运算符。左操作数按位右移右操作数指定的位数。         | A >> 2得到15即 1111                      |\n| `>>>`  | 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 | A>>>2得到15即0000 1111                   |\n\n### 逻辑运算符\n\n| 操作符 | 描述                                                         | 例子               |\n| :----- | :----------------------------------------------------------- | :----------------- |\n| `&&`   | 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。     | `（A && B）`为假。 |\n| `||`   | 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 | `（A || B）`为真。 |\n| `!`    | 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 | `!(A && B)`为真。  |\n\n### 赋值运算符\n\n| 操作符 | 描述                                                         | 例子                                     |\n| :----- | :----------------------------------------------------------- | :--------------------------------------- |\n| `=`    | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B将把A + B得到的值赋给C          |\n| `+=`   | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C + = A等价于C = C + A                   |\n| `-=`   | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C - = A等价于C = C - A                   |\n| `*=`   | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C * = A等价于C = C * A                   |\n| `/=`   | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C / = A，C 与 A 同类型时等价于 C = C / A |\n| `％=`  | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C％= A等价于C = C％A                     |\n| `<< =` | 左移位赋值运算符                                             | C << = 2等价于C = C << 2                 |\n| `>>=`  | 右移位赋值运算符                                             | C >> = 2等价于C = C >> 2                 |\n| `＆=`  | 按位与赋值运算符                                             | C＆= 2等价于C = C＆2                     |\n| `^=`   | 按位异或赋值操作符                                           | C ^ = 2等价于C = C ^ 2                   |\n| `|=`   | 按位或赋值操作符                                             | C \\| = 2等价于C = C \\| 2                 |\n\n### 条件运算符（? :）\n\n也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；\n\n```java\nvariable x = (expression) ? value if true : value if false\n```\n\n### instanceof\n\n用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；\n\n```java\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n### equals() 和 ==\n\n-   `==`\n\n基本数据类型用 `==` 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；\n\n>   本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；\n\n-   `equals()`\n\n作用也是判断两个对象是否相等，但是 **不能用于基本数据类型变量的比较**。存在于 `Object()` 类中，所以所有类都具有 `equals()` 方法存在两种使用情况：\n\n1.  **类未覆盖 `equals()` 方法**：此时通过 `equals()` 比较该类的两个对象时，等价于 `==` 比较这两个对象，默认使用  `Object` 类中的 `equals()` 方法；\n2.  **类覆盖了 `equals()` 方法**：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 `String、BitSet、Data、File` 就覆盖了 `equals()` 方法；\n\n## 方法\n\n### 方法的类型\n\n1.  无参无返回值；\n2.  无参有返回值；\n3.  有参无返回值；\n4.  有参有返回值；\n\n### 重载和重写\n\n1.  **重载（Overload）**\n\n重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 **编译期**，而且在同一个类中，**方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。** 总的而言：**重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。**\n\n2.  **重写（Override）**\n\n重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 **运行期**，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 `private/final/static` 修饰，则子类无法重写父类方法，但 `static` 修饰的方法能被再次声明。**构造方法是个特例，不能被重写**。总结起来就是：**重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑**。\n\n3.  **重载 vs 重写**\n\n| 不同点     | 重载     | 重写                                         |\n| ---------- | -------- | -------------------------------------------- |\n| 参数列表   | 必须不同 | 必须相同                                     |\n| 返回类型   | 可不同   | 必须相同                                     |\n| 访问修饰符 | 可不同   | 不能比父类更严格                             |\n| 发生范围   | 同一类中 | 父子类                                       |\n| 异常范围   | 可修改   | 可以减少或删除，不能抛新异常或范围更广的异常 |\n| 发生阶段   | 编译期   | 运行期                                       |\n\n### 深/浅拷贝\n\n1.  **浅拷贝**\n\n浅拷贝是 **按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。** 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；\n\n![](https://img-blog.csdnimg.cn/img_convert/1cc4a245021761cbff809afd3105169e.png)\n\n2.  **深拷贝**\n\n深拷贝会 **拷贝所有属性，同时拷贝属性指向的动态分配的内存**。当对象和它引用的对象一起拷贝是即发生深拷贝，**相比于浅拷贝，深拷贝速度较慢同时花销更大**。\n\n![](https://img-blog.csdnimg.cn/img_convert/2047bfceaaf483f47dc86a0d623457b5.png)\n\n3.  **总结**\n\n浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；\n\n### 值传递\n\n推荐阅读：https://juejin.im/post/5bce68226fb9a05ce46a0476\n\n#### 形参和实参\n\n1.  **形参**：方法被调用时需要传递进来的参数，如 `func(String name)` 中的 `name` 就是一个形参，只有在 `func` 被调用时 `name` 才被分配内存空间，当方法执行完后，`name` 将自动销毁释放空间；\n2.  **实参**：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；\n\n```java\npublic static void func(String name){\n    System.out.println(name);\n}\n\npublic static void main(String[] args) {\n    //实参\n    String name = \"村雨遥\";\n    func(name);\n}\n```\n\n#### 值传递和引用传递\n\n1.  **值传递**\n\n方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 **值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。**\n\n```java\npublic static void valueCrossTest(int age,float weight){\n    System.out.println(\"传入的age：\"+age);\n    System.out.println(\"传入的weight：\"+weight);\n    age=33;\n    weight=89.5f;\n    System.out.println(\"方法内重新赋值后的age：\"+age);\n    System.out.println(\"方法内重新赋值后的weight：\"+weight); \n}\n\npublic static void main(String[] args) {\n    int a=25;\n    float w=77.5f;\n    valueCrossTest(a,w);\n\n    // a = 25，原始值不收影响\n    System.out.println(\"方法执行后的age：\"+a);\n    // w = 77.5，原始值不收影响\n    System.out.println(\"方法执行后的weight：\"+w)\n}\n```\n\n2.  **引用传递**\n\n引用即指向真实内容的地址值，在方法调用时，**实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。**\n\n但 Java 中并 **不存在引用传递**，因为 **无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身**。\n\n3.  **总结** \n\n**如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。**\n\n**如果是对引用类型的数据进行操作，分两种情况，**\n\n-   **一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。**\n\n```java\npublic static void PersonCrossTest(Person person){\n    System.out.println(\"传入的person的name：\" + person.getName());\n    person.setName(\"我是张小龙\");\n    System.out.println(\"方法内重新赋值后的name：\" + person.getName());\n}\n```\n\n-   **另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。**\n\n```java\npublic static void PersonCrossTest(Person person){\n    System.out.println(\"传入的person的name：\" + person.getName());\n    person=new Person();\n    person.setName(\"我是张小龙\");\n    System.out.println(\"方法内重新赋值后的name：\" + person.getName());\n}\n```\n\n## 面向对象\n\n### 面向对象 vs 面向过程\n\n推荐阅读：https://www.zhihu.com/question/27468564/answer/757537214\n\n-   **面向对象（Object Oriented）**\n\n面向过程是一种 **对现实世界理解和抽象的方法**，**更容易维护、复用、扩展**。最主要的特点就是 **继承、封装、多态**，所以 设计出的系统耦合性较低，但比起面向过程性能要低。\n\n-   **面向过程（Procedure Oriented）**\n\n面向过程是一种 **以过程为中心** 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 **封装、继承、多态**，其性能比面向对象更高。\n\n-   **总结**\n\n面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。\n\n### 封装、继承、多态\n\n1.  **封装**\n\n将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。\n\n通过 封装，实现了 **专业分工**，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 **隐藏了信息以及实现细节**，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。\n\n2.  **继承**\n\n可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 **子类/派生类**，被继承的类叫做 **父类/基类/超类**，具有如下特点：\n\n-   **子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的**；\n-   子类可以对父类进行扩展；\n-   子类可以用自己的方式来实现父类的方法；\n\n3.  **多态**\n\n多态是允许 **将父对象设置为和一个或多个其子对象相等的技术**，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 **父类引用指向子类对象实例**，有 **重载和重写** 两种实现方式。具有如下特点：\n\n-   对象类型不可变，但引用类型可变；\n-   对象类型和引用类型之间有继承（类）/实现（接口）的关系；\n-   方法具有多态性，但属性不具有；\n-   若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。\n\n### 成员变量 vs 局部变量 vs 静态变量\n\n| 不同     | 语法                                                         | 存储位置 | 生命周期     | 初始化值                                          | 调用方式                   | 别名     |\n| -------- | ------------------------------------------------------------ | -------- | ------------ | ------------------------------------------------- | -------------------------- | -------- |\n| 成员变量 | 1、 属于类<br />2、能被访问控制符、`static、final` 等修饰    | 堆       | 与对象共存亡 | 有，基本数据类型为对应默认值，而对象统一为 `null` | 对象调用                   | 实例变量 |\n| 局部变量 | 1、属于方法（方法中的变量或参数）<br />2、不能被访问控制符及 `static` 修饰，但可以被 `final` 修饰 | 栈       | 与方法共存亡 | 无，必须定义赋值后使用                            |                            |          |\n| 静态变量 | 1、属于类<br />2、被 `static` 修饰，被所有类对象共用         | 方法区   | 与类共存亡   | 同成员变量初始化值                                | 类名调用（推荐）、对象调用 | 类变量   |\n\n### 构造方法的特点\n\n1.  方法名与类名同名；\n2.  无返回值，但不能用 `void` 关键字声明；\n3.  生成类对象时自动执行，无需显式调用；\n\n### 抽象类 & 接口\n\n1.  **接口**\n\n-   接口中所有方法默认是 `public`，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；\n\n-   接口中所有变量均为 `static、final`，不能有其他变量；\n-   一个类可以实现多个接口（通过 `implements` 关键字），而且接口自身可以通过 `extends` 来扩展多个接口；\n-   接口是对行为的抽象，属于行为规范；\n\n2.  **抽象类**\n\n-   抽象类中既可以有抽象方法，也可以有非抽象的方法；\n-   一个类只能实现一个抽象类；\n-   抽象方法可以被 `public、protected、default` 修饰，但不能用 `private`，否则不能被重写；\n-   抽象是对类的抽象，是一种模板设计；\n\n### Object 类中常见方法\n\n| 方法                                                         | 说明                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `public final native Class<?> getClass()`                    | 用于返回当前运行时对象的 Class 对象，使用了final 关键字修饰，故不允许子类重写 |\n| `public native int hashCode()`                               | 用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap |\n| `public boolean equals(Object obj)`                          | 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等 |\n| `protected native Object clone() throws CloneNotSupportedException` | 用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException 异常 |\n| `public String toString()`                                   | 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法 |\n| `public final native void notify()`                          | 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个 |\n| `public final native void notifyAll()`                       | 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程 |\n| `public final native void wait(long timeout) throws InterruptedException` | 不能重写。暂停线程的执行注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：<br />1. 其他线程调用该对象的 `notify()/notifyAll()` 方法；<br />2. 时间间隔到了；<br />3. 其他线程调用了 `interrupt()` 中断该线程； |\n| `public final void wait(long timeout, int nanos) throws InterruptedException` | 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒 |\n| `public final void wait() throws InterruptedException`       | 跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念 |\n| `protected void finalize() throws Throwable { }`             | 实例被垃圾回收器回收的时候触发的操作                         |\n\n### hashCode & equals\n\n推荐阅读：https://juejin.im/post/5a4379d4f265da432003874c\n\n#### equals\n\n1.  重写 `equals()` 方法的准则：\n\n| 准则       | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| **自反性** | 对任意非空引用值 `x`，`x.equals(x)` 应该返回 `true`          |\n| **对称性** | 对于任何非空引用值 `x `和 `y`，当 `y.equals(x)` 返回 `true `时，`x.equals(y)`  也应返回 `true` |\n| **传递性** | 对于任何非空引用值` x、y` 和 `z`，如果 `x.equals(y)` 返回 `true`， 并且 `y.equals(z)` 返回 `true`，那么 `x.equals(z) ` 也应返回 `true` |\n| **一致性** | 对于任何非空引用值 `x ` 和  `y`，多次调用 `x.equals(y)` 始终返回 `true` 或始终返回 `false`， 前提是对象上 `equals `比较中所用的信息没有被修改 |\n| **非空性** | 对于任何非空引用值 `x`，`x.equals(null)` 都应返回 `false`    |\n\n#### hashCode\n\n`hashCode` 用于返回对象 `hash` 值，主要是为了加快查找的快捷性，因为 `hashCode()` 是 `Object` 类中的方法，所以所有 Java 类均有 `hashCode()`，在 `HashTable` 和 `HashMap` 这类的散列结构中，均是通过 `hashCode()` 来查找在散列表中位置，通过 `hashCode` 能够较快的茶道小内存块。\n\n#### 为什么重写 `equals()` 必须重写 `hashCode()`\n\n1.  若两个对象相等，则 `hashCode()` 一定也相同，因为 `equals()` 是绝对可靠的；\n2.  两个对象相等，则两个对象分别调用 `equals()` 方法也返回 `true`；\n3.  两个对象有相同的 `hashCode()`，他们不一定相等，因为 `hashCode()` 不是绝对可靠的；\n4.  如果重写了 `equals()`，但保留 `hashCode()` 的实现不变，则可能出现两者相等，但 `hashCode` 却不一样；\n5.  因此，一旦重写了 `equals()` 方法，则必须重写 `hashCode()`，`hashCode() ` 的默认行为是对堆上的对象产生独特值。如果没有重写 `hashCode()`，则该 `class` 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。\n\n### 序列化与反序列化\n\n#### 定义\n\n-   **序列化**：指将对象转换为字节序列的过程；\n-   **反序列化**：指将字节序列转换为目标对象的过程；\n\n#### 需要序列化的场景\n\n当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；\n\n#### 如何实现序列化\n\n要实现序列化，只需要让类实现 `Serializable` 接口即可，此时就标注该类对象能够被序列化；\n\n针对类中某些数据不想序列化时，可以使用 `transient` 关键字来实现，例如：\n\n```java\n// 通过关键字 transient 修饰，表明不参与序列化\ntransient private String telephone;\n```\n\n>   建议关注公众号 【**村雨遥**】，以便及时获取最新文章及资源 ~\n\n","slug":"【剑指-Java】第-1-弹：靠这份-Java-基础知识总结，我拿到了满意的-Offer","published":1,"updated":"2021-05-04T01:40:54.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw2c0061bw345rg7091x","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为博主是 2021 届毕业生，当时为了准备秋招，特意总结的 Java 基础知识面试高频题，最后也算找到了挺满意的工作。因此回馈给大家，希望能对大家起到一定的帮助。</p>\n<h2 id=\"入门常识\"><a href=\"#入门常识\" class=\"headerlink\" title=\"入门常识\"></a>入门常识</h2><h3 id=\"Java-特点\"><a href=\"#Java-特点\" class=\"headerlink\" title=\"Java 特点\"></a>Java 特点</h3><ol>\n<li>简单易学</li>\n<li>面向对象（封装、继承、多态）</li>\n<li>平台独立</li>\n<li>安全可靠</li>\n<li>支持多线程</li>\n<li>解释和编译共存</li>\n<li>安全性</li>\n<li>健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）</li>\n<li>…</li>\n</ol>\n<h3 id=\"Java-和-C\"><a href=\"#Java-和-C\" class=\"headerlink\" title=\"Java 和 C++\"></a>Java 和 C++</h3><ul>\n<li><strong>相同点</strong>：两者均为 OOP 语言，均支持 OOP 的三大特性（封装、继承、多态）；</li>\n<li><strong>不同点</strong>：<ul>\n<li>Java 不存在指针的概念，所以内存更加安全；</li>\n<li>Java 类是单继承（但是接口可以多继承），C++ 的类是多继承；</li>\n<li>Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存；</li>\n<li>C/C++ 中，字符串和字符数组最后均有一个额外的 <code>\\0</code> 标志来表示结束，但 Java 中不存在这一概念；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JRE-和-JDK\"><a href=\"#JRE-和-JDK\" class=\"headerlink\" title=\"JRE  和 JDK\"></a>JRE  和 JDK</h3><ul>\n<li>JRE（Java Runtime Environment），即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序；</li>\n<li>JDK（Java Development Kit），即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5MjRmMDU2YzVlMGY4ZDkucG5n?x-oss-process=image/format,png\" alt=\"两者关系\"></p>\n<h3 id=\"Java-程序编译过程\"><a href=\"#Java-程序编译过程\" class=\"headerlink\" title=\"Java 程序编译过程\"></a>Java 程序编译过程</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/79663a1d48126d9d28b2c8c567926ddb.png\" alt=\"\"></p>\n<p>我们编译的源代码（<code>xxx.java</code>）经 JDK 中的 <code>javac</code> 命令编译后，成为 JVM 能够理解的 Java 字节码（<code>xxx.class</code>），然后经由 JVM 加载，通过解释器 <strong>逐行解释执行</strong>，这就是为什么能经常听见说 <strong>Java 是一门编译和解释共存的语言</strong>。</p>\n<p>其中 JVM 是解释 Java 字节码（<code>xxx.class</code>） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td>$-2^{15}$ ~ $2^{15}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code>（$0$ ~ $65535$）</td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td>$-2^{31}$ ~ $2^{31}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td>$-2^{63}$ ~ $2^{63}-1$</td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td>$3.4e^{-45}$ ~ $1.4e^{38}$</td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td>$4.9e^{-324}$ ~ $1.8e^{308}$</td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>不确定</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code> 或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意：</strong> </p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>\n<li><code>char</code> 是用 <strong>单引号 <code>‘’</code></strong> 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>“”</code></strong> 将内容括起来，代表的是一个地址值；</li>\n</ol>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"封装类\"><a href=\"#封装类\" class=\"headerlink\" title=\"封装类\"></a>封装类</h3><p>基本数据类型都有其对应的封装类，两者之间的赋值通过 <strong>自动装箱</strong> 和 <strong>自动拆箱</strong> 来完成；</p>\n<ul>\n<li><strong>自动装箱</strong>：将基本数据类型装箱为封装类；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 实际调用 Integer.valueOf(12)</span>\n<span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>自动拆箱</strong>：将封装类拆箱为基本数据类型；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 实际调用 x.intValue()</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>基本类型与对应封装类的不同</strong><ol>\n<li>基本类型只能按值传递，封装类按引用传递；</li>\n<li><strong>基本类型</strong> 会在 <strong>栈</strong> 中创建，效率较高，但可能存在内存泄露问题；<strong>封装类对象会在堆中创建</strong>，其 <strong>引用在栈中创建；</strong></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"缓存池\"><a href=\"#缓存池\" class=\"headerlink\" title=\"缓存池\"></a>缓存池</h3><p>以 <code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 为例：</p>\n<ul>\n<li>通过 <code>new</code> 的方式每次都会创建一个新的对象；</li>\n<li>通过 <code>valueOf()</code> 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false，通过 new 的方式，每次都会创建一个新对象，指向不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token class-name\">Integer</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true，通过 valueOf（） 的方式，先到缓存池中查找，存在时则多次调用也是指向同一对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认缓存池</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\u007F</code></td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td><code>true</code> &amp; <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"字符串 String\"></a>字符串 String</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** The value is used for character storage. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码为 Java 8 中 String 的定义，其底层实际上使用的是字符（<code>char</code>）数组，而且由于被声明为 <code>final</code>，代表着它 <strong>不能被继承</strong>。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 <code>String</code> 的不可变性，也因此 String 是线程安全的。</p>\n<h3 id=\"不可变性的优点\"><a href=\"#不可变性的优点\" class=\"headerlink\" title=\"不可变性的优点\"></a>不可变性的优点</h3><ol>\n<li><strong>用于缓存 <code>hash</code> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol>\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol>\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<h3 id=\"String-vs-StringBuffer-vs-StringBuffer\"><a href=\"#String-vs-StringBuffer-vs-StringBuffer\" class=\"headerlink\" title=\"String vs StringBuffer vs StringBuffer\"></a>String vs StringBuffer vs StringBuffer</h3><p>主要从三个方面对三者进行对比：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"字符串常量池（String-Pool）\"><a href=\"#字符串常量池（String-Pool）\" class=\"headerlink\" title=\"字符串常量池（String Pool）\"></a>字符串常量池（String Pool）</h3><p>String Pool 位于 <strong>方法区</strong>，通常保存着所有 <a href=\"https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F\">字符串字面量（literal strings）</a>，在编译期间就被确定。此外，还可以用 <code>String</code> 中的 <code>intern()</code> 方法在运行过程中添加到 String Pool 中。当一个字符串调用 <code>intern()</code> 时，如果 String Pool 中已经存在字面量相同的字符串，则会返回 String Pool 中的引用；如果不存在，则向 String Pool 中添加一个新的字符串，同时返回新字符串的引用；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false 两个字符串指向不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n<span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true，常量池中存在字面量相同的字符串，直接取出</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在下面的代码中，内存分析如下图：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true，两个引用指向常量池中的同一对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false，两个引用指向堆中不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/52dc7d534f68b5d1910f1a417ac0b3a0.png\" alt=\"\"></p>\n<h3 id=\"new-String-“xxx”\"><a href=\"#new-String-“xxx”\" class=\"headerlink\" title=\"new String(“xxx”)\"></a>new String(“xxx”)</h3><p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201024102754231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<ol>\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/17b38c5e7cfe2e3290481684640cf70f.png\" alt=\"\"></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><strong>单行注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 这是单行注释</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>多行注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 这是多行注释\n* name，公众号\n*/</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>文档注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @author : 村雨遥\n* @param : name，公众号\n*/</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"常见关键字\"><a href=\"#常见关键字\" class=\"headerlink\" title=\"常见关键字\"></a>常见关键字</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/019a2373741e18f47f98f777460522cb.png\" alt=\"关注公众号，获取思维导图原件\"></p>\n<h3 id=\"标识符和关键字\"><a href=\"#标识符和关键字\" class=\"headerlink\" title=\"标识符和关键字\"></a>标识符和关键字</h3><ul>\n<li><strong>标识符</strong>：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；</li>\n<li><strong>关键字</strong>：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；</li>\n<li><strong>标识符命名规则</strong>（可以参考《阿里巴巴开发手册》，关注公众号【<strong>村雨遥</strong>】回复【资源下载】下载 PDF）<ol>\n<li>标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（<code>_</code>）和美元符号（<code>$</code>）组成；</li>\n<li>不能以数字开头，不能是关键字；</li>\n<li>严格区分大小写；</li>\n<li>包名：多个单词组成是所有单词均小写；</li>\n<li>类名和接口：大写驼峰命名法；</li>\n<li>变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；</li>\n<li>常量名：字母全部大写，单词之间用下划线（<code>_</code>）分割； </li>\n</ol>\n</li>\n</ul>\n<h3 id=\"访问控制符\"><a href=\"#访问控制符\" class=\"headerlink\" title=\"访问控制符\"></a>访问控制符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>当前类</th>\n<th>同一 <code>package</code>  的类</th>\n<th>子类</th>\n<th>其他 <code>package</code> 的类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>😀</td>\n<td>😡</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"static、final、this、super\"><a href=\"#static、final、this、super\" class=\"headerlink\" title=\"static、final、this、super\"></a>static、final、this、super</h3><ol>\n<li><strong>static</strong></li>\n</ol>\n<p><code>static</code> 主要有如下 4 中使用场景：</p>\n<ul>\n<li><strong>修饰成员变量和成员方法</strong>：被 <code>static</code> 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 <strong>方法区</strong>，不属于单个对象，被所有对象共享，而且最好通过 <code>类名.静态成员名/静态方法名()</code> 调用；</li>\n<li><strong>静态代码块</strong>：定义在类中方法外，先于非静态代码块之前执行（<strong>静态代码块 -&gt; 非静态代码块 -&gt; 构造方法</strong>） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；</li>\n<li><strong>静态内部类</strong>：<strong><code>static</code> 要修饰类时，只有修饰内部类这一种用法。</strong> 非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即 <strong>内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 <code>static</code> 成员变量和方法；</strong></li>\n<li><strong>静态导包</strong>：用于导入静态资源，<code>import static</code> 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；</li>\n<li><strong>注意：</strong><ul>\n<li><code>abstract</code> 方法不能同时是 <code>static</code> 的，因为 <code>abstract</code> 方法需要被重写，但 <code>static</code> 方法不可以；</li>\n<li>不能从 <code>static</code> 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；</li>\n<li><code>static</code> 不能用于修饰局部变量；</li>\n<li>内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 <code>new</code> 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><strong>final</strong></li>\n</ol>\n<ul>\n<li>修饰类时，<strong>被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 <code>final</code> 方法</strong>；</li>\n<li>修饰方法时，<strong>表明该方法无法被重写</strong>；</li>\n<li>修饰变量时，说明该 <strong>变量是一个常量</strong>。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象；</li>\n</ul>\n<ol>\n<li><strong>this</strong></li>\n</ol>\n<p>用于引用类的当前实例，比如我们最常用的构造方法中，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中 <code>this.age</code> 说明访问的是 <code>User</code> 类中的成员变量，而后面的 <code>age</code> 则代表传入的形参；</p>\n<ol>\n<li><strong>super</strong></li>\n</ol>\n<p>用于从子类访问父类中的变量和方法，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".jr\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"continue、break-和-return\"><a href=\"#continue、break-和-return\" class=\"headerlink\" title=\"continue、break 和 return\"></a>continue、break 和 return</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>continue</code></td>\n<td>用于循环结构，指跳出当前循环，进入下一次循环</td>\n</tr>\n<tr>\n<td><code>break</code></td>\n<td>用于循环结构，指跳出整个循环体，继续执行循环下面的语句</td>\n</tr>\n<tr>\n<td><code>return</code></td>\n<td>1. <code>return ;</code> ：直接用 <code>return</code> 结束方法执行，用于没有返回值函数的方法；<br>2. <code>return value;</code> ：<code>return</code> 一个特定值，用于有返回值函数的方法</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"while-循环与-do-循环\"><a href=\"#while-循环与-do-循环\" class=\"headerlink\" title=\"while 循环与 do 循环\"></a>while 循环与 do 循环</h3><p><code>while</code> 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行；</p>\n<p><code>do……while</code> 会在循环的结果来判断是否继续下一轮迭代，<strong>至少会执行一次循环体</strong>；</p>\n<h3 id=\"final、finally、finalize\"><a href=\"#final、finally、finalize\" class=\"headerlink\" title=\"final、finally、finalize\"></a>final、finally、finalize</h3><ol>\n<li><strong>final</strong></li>\n</ol>\n<p><code>final</code> 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样；</p>\n<ul>\n<li><strong>修饰类：</strong> 表示该类无法被继承；</li>\n<li><strong>修饰变量</strong>：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的；</li>\n<li><strong>修饰方法</strong>：表示方法无法被重写，但是允许重载，<code>private</code> 方法会隐式指定为 <code>final</code> 方法；</li>\n</ul>\n<ol>\n<li><strong>finally</strong></li>\n</ol>\n<ul>\n<li><code>finally</code> 是一个关键字，在异常处理时提供 <code>finally</code> 块来执行任何清除操作，无论是否有异常被抛出或捕获，<code>finally</code> 块均会被执行，通常用于释放资源；</li>\n<li><code>finally</code> 正常情况下一定会被执行，但是在如下两种情况下不会执行：<ul>\n<li>对应的 <code>try</code> 未执行，则该 <code>try</code> 块的 <code>finally</code> 块并不会被执行；</li>\n<li>若 <code>try</code> 块中 JVM 关机，则 <code>finally</code> 块也不会执行；</li>\n</ul>\n</li>\n<li><code>finally</code> 中如果有 <code>return</code> 语句，则会覆盖 <code>try</code> 或 <code>catch</code> 中的 <code>return</code> 语句，导致两者无法 <code>return</code>，所以建议 <code>finally</code> 中不要存在 <code>return</code> 关键字；</li>\n</ul>\n<ol>\n<li><strong>finallize</strong></li>\n</ol>\n<p><code>finallize()</code> 是 <code>Object</code> 类的 <code>protected</code> 方法，子类能够覆盖该方法以实现资源清理工作；</p>\n<p>GC 在回收前均会调用该方法，但是 <code>finalize()</code> 方法存在如下问题：</p>\n<ul>\n<li>Java 语言规范不保证 <code>finalize()</code> 方法会被及时执行，也不保证他们一定被执行；</li>\n<li><code>finalize()</code> 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 <code>finalize</code> 的执行；</li>\n<li><code>finalize()</code> 方法中，可将待回收对象赋值给 <code>GC Roots</code> 可达的对象引用，从而达到对象再生的目的；</li>\n<li><code>finalize()</code> 方法最多由 GC 执行一次（但是可以手动调用对象的 <code>finalize</code> 方法）；</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n<td style=\"text-align:left\">A + B 等于 30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n<td style=\"text-align:left\">A – B 等于 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n<td style=\"text-align:left\">A * B等于200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n<td style=\"text-align:left\">B / A等于2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％</code></td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n<td style=\"text-align:left\">B%A等于0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增: 操作数的值增加1</td>\n<td style=\"text-align:left\">B++ 或 ++B 等于 21</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减: 操作数的值减少1</td>\n<td style=\"text-align:left\">B— 或 —B 等于 19</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td style=\"text-align:left\">（A == B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td style=\"text-align:left\">(A != B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A&gt; B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A &lt;B）为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A&gt; = B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A &lt;= B）为真。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是1，则结果为1，否则为0</td>\n<td>（A＆B），得到12，即0000 1100</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为0，否则为1</td>\n<td>（A ^ B）得到49，即 0011 0001</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>\n<td>（〜A）得到-61，即1100 0011</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td>A &lt;&lt; 2得到240，即 1111 0000</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td>A &gt;&gt; 2得到15即 1111</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td>A&gt;&gt;&gt;2得到15即0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td style=\"text-align:left\"><code>（A &amp;&amp; B）</code>为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">`</td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n<td>`（A</td>\n<td></td>\n<td>B）`为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!</code></td>\n<td style=\"text-align:left\">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>\n<td style=\"text-align:left\"><code>!(A &amp;&amp; B)</code>为真。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td style=\"text-align:left\">C = A + B将把A + B得到的值赋给C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td style=\"text-align:left\">C + = A等价于C = C + A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td style=\"text-align:left\">C - = A等价于C = C - A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td style=\"text-align:left\">C <em> = A等价于C = C </em> A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td style=\"text-align:left\">C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％=</code></td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td style=\"text-align:left\">C％= A等价于C = C％A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt; =</code></td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n<td style=\"text-align:left\">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n<td style=\"text-align:left\">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>＆=</code></td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n<td style=\"text-align:left\">C＆= 2等价于C = C＆2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^=</code></td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n<td style=\"text-align:left\">C ^ = 2等价于C = C ^ 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">=`</td>\n<td style=\"text-align:left\">按位或赋值操作符</td>\n<td>C \\</td>\n<td>= 2等价于C = C \\</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"条件运算符（-）\"><a href=\"#条件运算符（-）\" class=\"headerlink\" title=\"条件运算符（? :）\"></a>条件运算符（? :）</h3><p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">variable x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span> reference variable <span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token operator\">/</span><span class=\"token keyword\">interface</span> type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals() 和 ==\"></a>equals() 和 ==</h3><ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>  本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"方法的类型\"><a href=\"#方法的类型\" class=\"headerlink\" title=\"方法的类型\"></a>方法的类型</h3><ol>\n<li>无参无返回值；</li>\n<li>无参有返回值；</li>\n<li>有参无返回值；</li>\n<li>有参有返回值；</li>\n</ol>\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><ol>\n<li><strong>重载（Overload）</strong></li>\n</ol>\n<p>重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 <strong>编译期</strong>，而且在同一个类中，<strong>方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。</strong> 总的而言：<strong>重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。</strong></p>\n<ol>\n<li><strong>重写（Override）</strong></li>\n</ol>\n<p>重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 <strong>运行期</strong>，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 <code>private/final/static</code> 修饰，则子类无法重写父类方法，但 <code>static</code> 修饰的方法能被再次声明。<strong>构造方法是个特例，不能被重写</strong>。总结起来就是：<strong>重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑</strong>。</p>\n<ol>\n<li><strong>重载 vs 重写</strong></li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>不同点</th>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数列表</td>\n<td>必须不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>返回类型</td>\n<td>可不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>访问修饰符</td>\n<td>可不同</td>\n<td>不能比父类更严格</td>\n</tr>\n<tr>\n<td>发生范围</td>\n<td>同一类中</td>\n<td>父子类</td>\n</tr>\n<tr>\n<td>异常范围</td>\n<td>可修改</td>\n<td>可以减少或删除，不能抛新异常或范围更广的异常</td>\n</tr>\n<tr>\n<td>发生阶段</td>\n<td>编译期</td>\n<td>运行期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"深-浅拷贝\"><a href=\"#深-浅拷贝\" class=\"headerlink\" title=\"深/浅拷贝\"></a>深/浅拷贝</h3><ol>\n<li><strong>浅拷贝</strong></li>\n</ol>\n<p>浅拷贝是 <strong>按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。</strong> 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1cc4a245021761cbff809afd3105169e.png\" alt=\"\"></p>\n<ol>\n<li><strong>深拷贝</strong></li>\n</ol>\n<p>深拷贝会 <strong>拷贝所有属性，同时拷贝属性指向的动态分配的内存</strong>。当对象和它引用的对象一起拷贝是即发生深拷贝，<strong>相比于浅拷贝，深拷贝速度较慢同时花销更大</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2047bfceaaf483f47dc86a0d623457b5.png\" alt=\"\"></p>\n<ol>\n<li><strong>总结</strong></li>\n</ol>\n<p>浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p>推荐阅读：<a href=\"https://juejin.im/post/5bce68226fb9a05ce46a0476\">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>\n<h4 id=\"形参和实参\"><a href=\"#形参和实参\" class=\"headerlink\" title=\"形参和实参\"></a>形参和实参</h4><ol>\n<li><strong>形参</strong>：方法被调用时需要传递进来的参数，如 <code>func(String name)</code> 中的 <code>name</code> 就是一个形参，只有在 <code>func</code> 被调用时 <code>name</code> 才被分配内存空间，当方法执行完后，<code>name</code> 将自动销毁释放空间；</li>\n<li><strong>实参</strong>：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//实参</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h4><ol>\n<li><strong>值传递</strong></li>\n</ol>\n<p>方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 <strong>值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">valueCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的age：\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的weight：\"</span><span class=\"token operator\">+</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n    weight<span class=\"token operator\">=</span><span class=\"token number\">89.5f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的age：\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的weight：\"</span><span class=\"token operator\">+</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> w<span class=\"token operator\">=</span><span class=\"token number\">77.5f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">valueCrossTest</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// a = 25，原始值不收影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法执行后的age：\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// w = 77.5，原始值不收影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法执行后的weight：\"</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>引用传递</strong></li>\n</ol>\n<p>引用即指向真实内容的地址值，在方法调用时，<strong>实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。</strong></p>\n<p>但 Java 中并 <strong>不存在引用传递</strong>，因为 <strong>无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身</strong>。</p>\n<ol>\n<li><strong>总结</strong> </li>\n</ol>\n<p><strong>如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。</strong></p>\n<p><strong>如果是对引用类型的数据进行操作，分两种情况，</strong></p>\n<ul>\n<li><strong>一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">PersonCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的person的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是张小龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">PersonCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的person的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是张小龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"面向对象-vs-面向过程\"><a href=\"#面向对象-vs-面向过程\" class=\"headerlink\" title=\"面向对象 vs 面向过程\"></a>面向对象 vs 面向过程</h3><p>推荐阅读：<a href=\"https://www.zhihu.com/question/27468564/answer/757537214\">https://www.zhihu.com/question/27468564/answer/757537214</a></p>\n<ul>\n<li><strong>面向对象（Object Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>对现实世界理解和抽象的方法</strong>，<strong>更容易维护、复用、扩展</strong>。最主要的特点就是 <strong>继承、封装、多态</strong>，所以 设计出的系统耦合性较低，但比起面向过程性能要低。</p>\n<ul>\n<li><strong>面向过程（Procedure Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>以过程为中心</strong> 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 <strong>封装、继承、多态</strong>，其性能比面向对象更高。</p>\n<ul>\n<li><strong>总结</strong></li>\n</ul>\n<p>面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。</p>\n<h3 id=\"封装、继承、多态\"><a href=\"#封装、继承、多态\" class=\"headerlink\" title=\"封装、继承、多态\"></a>封装、继承、多态</h3><ol>\n<li><strong>封装</strong></li>\n</ol>\n<p>将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。</p>\n<p>通过 封装，实现了 <strong>专业分工</strong>，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 <strong>隐藏了信息以及实现细节</strong>，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。</p>\n<ol>\n<li><strong>继承</strong></li>\n</ol>\n<p>可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 <strong>子类/派生类</strong>，被继承的类叫做 <strong>父类/基类/超类</strong>，具有如下特点：</p>\n<ul>\n<li><strong>子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的</strong>；</li>\n<li>子类可以对父类进行扩展；</li>\n<li>子类可以用自己的方式来实现父类的方法；</li>\n</ul>\n<ol>\n<li><strong>多态</strong></li>\n</ol>\n<p>多态是允许 <strong>将父对象设置为和一个或多个其子对象相等的技术</strong>，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 <strong>父类引用指向子类对象实例</strong>，有 <strong>重载和重写</strong> 两种实现方式。具有如下特点：</p>\n<ul>\n<li>对象类型不可变，但引用类型可变；</li>\n<li>对象类型和引用类型之间有继承（类）/实现（接口）的关系；</li>\n<li>方法具有多态性，但属性不具有；</li>\n<li>若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。</li>\n</ul>\n<h3 id=\"成员变量-vs-局部变量-vs-静态变量\"><a href=\"#成员变量-vs-局部变量-vs-静态变量\" class=\"headerlink\" title=\"成员变量 vs 局部变量 vs 静态变量\"></a>成员变量 vs 局部变量 vs 静态变量</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>不同</th>\n<th>语法</th>\n<th>存储位置</th>\n<th>生命周期</th>\n<th>初始化值</th>\n<th>调用方式</th>\n<th>别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成员变量</td>\n<td>1、 属于类<br>2、能被访问控制符、<code>static、final</code> 等修饰</td>\n<td>堆</td>\n<td>与对象共存亡</td>\n<td>有，基本数据类型为对应默认值，而对象统一为 <code>null</code></td>\n<td>对象调用</td>\n<td>实例变量</td>\n</tr>\n<tr>\n<td>局部变量</td>\n<td>1、属于方法（方法中的变量或参数）<br>2、不能被访问控制符及 <code>static</code> 修饰，但可以被 <code>final</code> 修饰</td>\n<td>栈</td>\n<td>与方法共存亡</td>\n<td>无，必须定义赋值后使用</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td>1、属于类<br>2、被 <code>static</code> 修饰，被所有类对象共用</td>\n<td>方法区</td>\n<td>与类共存亡</td>\n<td>同成员变量初始化值</td>\n<td>类名调用（推荐）、对象调用</td>\n<td>类变量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"构造方法的特点\"><a href=\"#构造方法的特点\" class=\"headerlink\" title=\"构造方法的特点\"></a>构造方法的特点</h3><ol>\n<li>方法名与类名同名；</li>\n<li>无返回值，但不能用 <code>void</code> 关键字声明；</li>\n<li>生成类对象时自动执行，无需显式调用；</li>\n</ol>\n<h3 id=\"抽象类-amp-接口\"><a href=\"#抽象类-amp-接口\" class=\"headerlink\" title=\"抽象类 &amp; 接口\"></a>抽象类 &amp; 接口</h3><ol>\n<li><strong>接口</strong></li>\n</ol>\n<ul>\n<li><p>接口中所有方法默认是 <code>public</code>，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；</p>\n</li>\n<li><p>接口中所有变量均为 <code>static、final</code>，不能有其他变量；</p>\n</li>\n<li>一个类可以实现多个接口（通过 <code>implements</code> 关键字），而且接口自身可以通过 <code>extends</code> 来扩展多个接口；</li>\n<li>接口是对行为的抽象，属于行为规范；</li>\n</ul>\n<ol>\n<li><strong>抽象类</strong></li>\n</ol>\n<ul>\n<li>抽象类中既可以有抽象方法，也可以有非抽象的方法；</li>\n<li>一个类只能实现一个抽象类；</li>\n<li>抽象方法可以被 <code>public、protected、default</code> 修饰，但不能用 <code>private</code>，否则不能被重写；</li>\n<li>抽象是对类的抽象，是一种模板设计；</li>\n</ul>\n<h3 id=\"Object-类中常见方法\"><a href=\"#Object-类中常见方法\" class=\"headerlink\" title=\"Object 类中常见方法\"></a>Object 类中常见方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public final native Class&lt;?&gt; getClass()</code></td>\n<td>用于返回当前运行时对象的 Class 对象，使用了final 关键字修饰，故不允许子类重写</td>\n</tr>\n<tr>\n<td><code>public native int hashCode()</code></td>\n<td>用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap</td>\n</tr>\n<tr>\n<td><code>public boolean equals(Object obj)</code></td>\n<td>用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等</td>\n</tr>\n<tr>\n<td><code>protected native Object clone() throws CloneNotSupportedException</code></td>\n<td>用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException 异常</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法</td>\n</tr>\n<tr>\n<td><code>public final native void notify()</code></td>\n<td>不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个</td>\n</tr>\n<tr>\n<td><code>public final native void notifyAll()</code></td>\n<td>不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程</td>\n</tr>\n<tr>\n<td><code>public final native void wait(long timeout) throws InterruptedException</code></td>\n<td>不能重写。暂停线程的执行注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：<br>1. 其他线程调用该对象的 <code>notify()/notifyAll()</code> 方法；<br>2. 时间间隔到了；<br>3. 其他线程调用了 <code>interrupt()</code> 中断该线程；</td>\n</tr>\n<tr>\n<td><code>public final void wait(long timeout, int nanos) throws InterruptedException</code></td>\n<td>多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒</td>\n</tr>\n<tr>\n<td><code>public final void wait() throws InterruptedException</code></td>\n<td>跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</td>\n</tr>\n<tr>\n<td><code>protected void finalize() throws Throwable { }</code></td>\n<td>实例被垃圾回收器回收的时候触发的操作</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"hashCode-amp-equals\"><a href=\"#hashCode-amp-equals\" class=\"headerlink\" title=\"hashCode &amp; equals\"></a>hashCode &amp; equals</h3><p>推荐阅读：<a href=\"https://juejin.im/post/5a4379d4f265da432003874c\">https://juejin.im/post/5a4379d4f265da432003874c</a></p>\n<h4 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a>equals</h4><ol>\n<li>重写 <code>equals()</code> 方法的准则：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>准则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>自反性</strong></td>\n<td>对任意非空引用值 <code>x</code>，<code>x.equals(x)</code> 应该返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>对称性</strong></td>\n<td>对于任何非空引用值 <code>x</code>和 <code>y</code>，当 <code>y.equals(x)</code> 返回 <code>true</code>时，<code>x.equals(y)</code>  也应返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>传递性</strong></td>\n<td>对于任何非空引用值<code>x、y</code> 和 <code>z</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>， 并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 也应返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>一致性</strong></td>\n<td>对于任何非空引用值 <code>x</code> 和  <code>y</code>，多次调用 <code>x.equals(y)</code> 始终返回 <code>true</code> 或始终返回 <code>false</code>， 前提是对象上 <code>equals</code>比较中所用的信息没有被修改</td>\n</tr>\n<tr>\n<td><strong>非空性</strong></td>\n<td>对于任何非空引用值 <code>x</code>，<code>x.equals(null)</code> 都应返回 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"hashCode\"><a href=\"#hashCode\" class=\"headerlink\" title=\"hashCode\"></a>hashCode</h4><p><code>hashCode</code> 用于返回对象 <code>hash</code> 值，主要是为了加快查找的快捷性，因为 <code>hashCode()</code> 是 <code>Object</code> 类中的方法，所以所有 Java 类均有 <code>hashCode()</code>，在 <code>HashTable</code> 和 <code>HashMap</code> 这类的散列结构中，均是通过 <code>hashCode()</code> 来查找在散列表中位置，通过 <code>hashCode</code> 能够较快的茶道小内存块。</p>\n<h4 id=\"为什么重写-equals-必须重写-hashCode\"><a href=\"#为什么重写-equals-必须重写-hashCode\" class=\"headerlink\" title=\"为什么重写 equals() 必须重写 hashCode()\"></a>为什么重写 <code>equals()</code> 必须重写 <code>hashCode()</code></h4><ol>\n<li>若两个对象相等，则 <code>hashCode()</code> 一定也相同，因为 <code>equals()</code> 是绝对可靠的；</li>\n<li>两个对象相等，则两个对象分别调用 <code>equals()</code> 方法也返回 <code>true</code>；</li>\n<li>两个对象有相同的 <code>hashCode()</code>，他们不一定相等，因为 <code>hashCode()</code> 不是绝对可靠的；</li>\n<li>如果重写了 <code>equals()</code>，但保留 <code>hashCode()</code> 的实现不变，则可能出现两者相等，但 <code>hashCode</code> 却不一样；</li>\n<li>因此，一旦重写了 <code>equals()</code> 方法，则必须重写 <code>hashCode()</code>，<code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 <code>class</code> 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>\n</ol>\n<h3 id=\"序列化与反序列化\"><a href=\"#序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li><strong>序列化</strong>：指将对象转换为字节序列的过程；</li>\n<li><strong>反序列化</strong>：指将字节序列转换为目标对象的过程；</li>\n</ul>\n<h4 id=\"需要序列化的场景\"><a href=\"#需要序列化的场景\" class=\"headerlink\" title=\"需要序列化的场景\"></a>需要序列化的场景</h4><p>当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；</p>\n<h4 id=\"如何实现序列化\"><a href=\"#如何实现序列化\" class=\"headerlink\" title=\"如何实现序列化\"></a>如何实现序列化</h4><p>要实现序列化，只需要让类实现 <code>Serializable</code> 接口即可，此时就标注该类对象能够被序列化；</p>\n<p>针对类中某些数据不想序列化时，可以使用 <code>transient</code> 关键字来实现，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 通过关键字 transient 修饰，表明不参与序列化</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> telephone<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为博主是 2021 届毕业生，当时为了准备秋招，特意总结的 Java 基础知识面试高频题，最后也算找到了挺满意的工作。因此回馈给大家，希望能对大家起到一定的帮助。</p>\n<h2 id=\"入门常识\"><a href=\"#入门常识\" class=\"headerlink\" title=\"入门常识\"></a>入门常识</h2><h3 id=\"Java-特点\"><a href=\"#Java-特点\" class=\"headerlink\" title=\"Java 特点\"></a>Java 特点</h3><ol>\n<li>简单易学</li>\n<li>面向对象（封装、继承、多态）</li>\n<li>平台独立</li>\n<li>安全可靠</li>\n<li>支持多线程</li>\n<li>解释和编译共存</li>\n<li>安全性</li>\n<li>健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）</li>\n<li>…</li>\n</ol>\n<h3 id=\"Java-和-C\"><a href=\"#Java-和-C\" class=\"headerlink\" title=\"Java 和 C++\"></a>Java 和 C++</h3><ul>\n<li><strong>相同点</strong>：两者均为 OOP 语言，均支持 OOP 的三大特性（封装、继承、多态）；</li>\n<li><strong>不同点</strong>：<ul>\n<li>Java 不存在指针的概念，所以内存更加安全；</li>\n<li>Java 类是单继承（但是接口可以多继承），C++ 的类是多继承；</li>\n<li>Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存；</li>\n<li>C/C++ 中，字符串和字符数组最后均有一个额外的 <code>\\0</code> 标志来表示结束，但 Java 中不存在这一概念；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JRE-和-JDK\"><a href=\"#JRE-和-JDK\" class=\"headerlink\" title=\"JRE  和 JDK\"></a>JRE  和 JDK</h3><ul>\n<li>JRE（Java Runtime Environment），即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序；</li>\n<li>JDK（Java Development Kit），即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它；</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5MjRmMDU2YzVlMGY4ZDkucG5n?x-oss-process=image/format,png\" alt=\"两者关系\"></p>\n<h3 id=\"Java-程序编译过程\"><a href=\"#Java-程序编译过程\" class=\"headerlink\" title=\"Java 程序编译过程\"></a>Java 程序编译过程</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/79663a1d48126d9d28b2c8c567926ddb.png\" alt=\"\"></p>\n<p>我们编译的源代码（<code>xxx.java</code>）经 JDK 中的 <code>javac</code> 命令编译后，成为 JVM 能够理解的 Java 字节码（<code>xxx.class</code>），然后经由 JVM 加载，通过解释器 <strong>逐行解释执行</strong>，这就是为什么能经常听见说 <strong>Java 是一门编译和解释共存的语言</strong>。</p>\n<p>其中 JVM 是解释 Java 字节码（<code>xxx.class</code>） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td>$-2^{15}$ ~ $2^{15}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code>（$0$ ~ $65535$）</td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td>$-2^{31}$ ~ $2^{31}-1$</td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td>$-2^{63}$ ~ $2^{63}-1$</td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td>$3.4e^{-45}$ ~ $1.4e^{38}$</td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td>$4.9e^{-324}$ ~ $1.8e^{308}$</td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>不确定</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code> 或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意：</strong> </p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>\n<li><code>char</code> 是用 <strong>单引号 <code>‘’</code></strong> 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>“”</code></strong> 将内容括起来，代表的是一个地址值；</li>\n</ol>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"封装类\"><a href=\"#封装类\" class=\"headerlink\" title=\"封装类\"></a>封装类</h3><p>基本数据类型都有其对应的封装类，两者之间的赋值通过 <strong>自动装箱</strong> 和 <strong>自动拆箱</strong> 来完成；</p>\n<ul>\n<li><strong>自动装箱</strong>：将基本数据类型装箱为封装类；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 实际调用 Integer.valueOf(12)</span>\n<span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>自动拆箱</strong>：将封装类拆箱为基本数据类型；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 实际调用 x.intValue()</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>基本类型与对应封装类的不同</strong><ol>\n<li>基本类型只能按值传递，封装类按引用传递；</li>\n<li><strong>基本类型</strong> 会在 <strong>栈</strong> 中创建，效率较高，但可能存在内存泄露问题；<strong>封装类对象会在堆中创建</strong>，其 <strong>引用在栈中创建；</strong></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"缓存池\"><a href=\"#缓存池\" class=\"headerlink\" title=\"缓存池\"></a>缓存池</h3><p>以 <code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 为例：</p>\n<ul>\n<li>通过 <code>new</code> 的方式每次都会创建一个新的对象；</li>\n<li>通过 <code>valueOf()</code> 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false，通过 new 的方式，每次都会创建一个新对象，指向不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token class-name\">Integer</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true，通过 valueOf（） 的方式，先到缓存池中查找，存在时则多次调用也是指向同一对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认缓存池</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Byte</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\u007F</code></td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td><code>true</code> &amp; <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"字符串 String\"></a>字符串 String</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value is used for character storage. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码为 Java 8 中 String 的定义，其底层实际上使用的是字符（<code>char</code>）数组，而且由于被声明为 <code>final</code>，代表着它 <strong>不能被继承</strong>。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 <code>String</code> 的不可变性，也因此 String 是线程安全的。</p>\n<h3 id=\"不可变性的优点\"><a href=\"#不可变性的优点\" class=\"headerlink\" title=\"不可变性的优点\"></a>不可变性的优点</h3><ol>\n<li><strong>用于缓存 <code>hash</code> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol>\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol>\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol>\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<h3 id=\"String-vs-StringBuffer-vs-StringBuffer\"><a href=\"#String-vs-StringBuffer-vs-StringBuffer\" class=\"headerlink\" title=\"String vs StringBuffer vs StringBuffer\"></a>String vs StringBuffer vs StringBuffer</h3><p>主要从三个方面对三者进行对比：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"字符串常量池（String-Pool）\"><a href=\"#字符串常量池（String-Pool）\" class=\"headerlink\" title=\"字符串常量池（String Pool）\"></a>字符串常量池（String Pool）</h3><p>String Pool 位于 <strong>方法区</strong>，通常保存着所有 <a href=\"https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F\">字符串字面量（literal strings）</a>，在编译期间就被确定。此外，还可以用 <code>String</code> 中的 <code>intern()</code> 方法在运行过程中添加到 String Pool 中。当一个字符串调用 <code>intern()</code> 时，如果 String Pool 中已经存在字面量相同的字符串，则会返回 String Pool 中的引用；如果不存在，则向 String Pool 中添加一个新的字符串，同时返回新字符串的引用；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false 两个字符串指向不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n<span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true，常量池中存在字面量相同的字符串，直接取出</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在下面的代码中，内存分析如下图：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true，两个引用指向常量池中的同一对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false，两个引用指向堆中不同对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/52dc7d534f68b5d1910f1a417ac0b3a0.png\" alt=\"\"></p>\n<h3 id=\"new-String-“xxx”\"><a href=\"#new-String-“xxx”\" class=\"headerlink\" title=\"new String(“xxx”)\"></a>new String(“xxx”)</h3><p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201024102754231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<ol>\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/17b38c5e7cfe2e3290481684640cf70f.png\" alt=\"\"></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><strong>单行注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 这是单行注释</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>多行注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 这是多行注释\n* name，公众号\n*/</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>文档注释</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @author : 村雨遥\n* @param : name，公众号\n*/</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"常见关键字\"><a href=\"#常见关键字\" class=\"headerlink\" title=\"常见关键字\"></a>常见关键字</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/019a2373741e18f47f98f777460522cb.png\" alt=\"关注公众号，获取思维导图原件\"></p>\n<h3 id=\"标识符和关键字\"><a href=\"#标识符和关键字\" class=\"headerlink\" title=\"标识符和关键字\"></a>标识符和关键字</h3><ul>\n<li><strong>标识符</strong>：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；</li>\n<li><strong>关键字</strong>：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；</li>\n<li><strong>标识符命名规则</strong>（可以参考《阿里巴巴开发手册》，关注公众号【<strong>村雨遥</strong>】回复【资源下载】下载 PDF）<ol>\n<li>标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（<code>_</code>）和美元符号（<code>$</code>）组成；</li>\n<li>不能以数字开头，不能是关键字；</li>\n<li>严格区分大小写；</li>\n<li>包名：多个单词组成是所有单词均小写；</li>\n<li>类名和接口：大写驼峰命名法；</li>\n<li>变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；</li>\n<li>常量名：字母全部大写，单词之间用下划线（<code>_</code>）分割； </li>\n</ol>\n</li>\n</ul>\n<h3 id=\"访问控制符\"><a href=\"#访问控制符\" class=\"headerlink\" title=\"访问控制符\"></a>访问控制符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>当前类</th>\n<th>同一 <code>package</code>  的类</th>\n<th>子类</th>\n<th>其他 <code>package</code> 的类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😀</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>😀</td>\n<td>😀</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>😀</td>\n<td>😡</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"static、final、this、super\"><a href=\"#static、final、this、super\" class=\"headerlink\" title=\"static、final、this、super\"></a>static、final、this、super</h3><ol>\n<li><strong>static</strong></li>\n</ol>\n<p><code>static</code> 主要有如下 4 中使用场景：</p>\n<ul>\n<li><strong>修饰成员变量和成员方法</strong>：被 <code>static</code> 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 <strong>方法区</strong>，不属于单个对象，被所有对象共享，而且最好通过 <code>类名.静态成员名/静态方法名()</code> 调用；</li>\n<li><strong>静态代码块</strong>：定义在类中方法外，先于非静态代码块之前执行（<strong>静态代码块 -&gt; 非静态代码块 -&gt; 构造方法</strong>） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；</li>\n<li><strong>静态内部类</strong>：<strong><code>static</code> 要修饰类时，只有修饰内部类这一种用法。</strong> 非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即 <strong>内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 <code>static</code> 成员变量和方法；</strong></li>\n<li><strong>静态导包</strong>：用于导入静态资源，<code>import static</code> 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；</li>\n<li><strong>注意：</strong><ul>\n<li><code>abstract</code> 方法不能同时是 <code>static</code> 的，因为 <code>abstract</code> 方法需要被重写，但 <code>static</code> 方法不可以；</li>\n<li>不能从 <code>static</code> 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；</li>\n<li><code>static</code> 不能用于修饰局部变量；</li>\n<li>内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 <code>new</code> 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><strong>final</strong></li>\n</ol>\n<ul>\n<li>修饰类时，<strong>被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 <code>final</code> 方法</strong>；</li>\n<li>修饰方法时，<strong>表明该方法无法被重写</strong>；</li>\n<li>修饰变量时，说明该 <strong>变量是一个常量</strong>。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象；</li>\n</ul>\n<ol>\n<li><strong>this</strong></li>\n</ol>\n<p>用于引用类的当前实例，比如我们最常用的构造方法中，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中 <code>this.age</code> 说明访问的是 <code>User</code> 类中的成员变量，而后面的 <code>age</code> 则代表传入的形参；</p>\n<ol>\n<li><strong>super</strong></li>\n</ol>\n<p>用于从子类访问父类中的变量和方法，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".jr\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"continue、break-和-return\"><a href=\"#continue、break-和-return\" class=\"headerlink\" title=\"continue、break 和 return\"></a>continue、break 和 return</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>continue</code></td>\n<td>用于循环结构，指跳出当前循环，进入下一次循环</td>\n</tr>\n<tr>\n<td><code>break</code></td>\n<td>用于循环结构，指跳出整个循环体，继续执行循环下面的语句</td>\n</tr>\n<tr>\n<td><code>return</code></td>\n<td>1. <code>return ;</code> ：直接用 <code>return</code> 结束方法执行，用于没有返回值函数的方法；<br />2. <code>return value;</code> ：<code>return</code> 一个特定值，用于有返回值函数的方法</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"while-循环与-do-循环\"><a href=\"#while-循环与-do-循环\" class=\"headerlink\" title=\"while 循环与 do 循环\"></a>while 循环与 do 循环</h3><p><code>while</code> 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行；</p>\n<p><code>do……while</code> 会在循环的结果来判断是否继续下一轮迭代，<strong>至少会执行一次循环体</strong>；</p>\n<h3 id=\"final、finally、finalize\"><a href=\"#final、finally、finalize\" class=\"headerlink\" title=\"final、finally、finalize\"></a>final、finally、finalize</h3><ol>\n<li><strong>final</strong></li>\n</ol>\n<p><code>final</code> 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样；</p>\n<ul>\n<li><strong>修饰类：</strong> 表示该类无法被继承；</li>\n<li><strong>修饰变量</strong>：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的；</li>\n<li><strong>修饰方法</strong>：表示方法无法被重写，但是允许重载，<code>private</code> 方法会隐式指定为 <code>final</code> 方法；</li>\n</ul>\n<ol>\n<li><strong>finally</strong></li>\n</ol>\n<ul>\n<li><code>finally</code> 是一个关键字，在异常处理时提供 <code>finally</code> 块来执行任何清除操作，无论是否有异常被抛出或捕获，<code>finally</code> 块均会被执行，通常用于释放资源；</li>\n<li><code>finally</code> 正常情况下一定会被执行，但是在如下两种情况下不会执行：<ul>\n<li>对应的 <code>try</code> 未执行，则该 <code>try</code> 块的 <code>finally</code> 块并不会被执行；</li>\n<li>若 <code>try</code> 块中 JVM 关机，则 <code>finally</code> 块也不会执行；</li>\n</ul>\n</li>\n<li><code>finally</code> 中如果有 <code>return</code> 语句，则会覆盖 <code>try</code> 或 <code>catch</code> 中的 <code>return</code> 语句，导致两者无法 <code>return</code>，所以建议 <code>finally</code> 中不要存在 <code>return</code> 关键字；</li>\n</ul>\n<ol>\n<li><strong>finallize</strong></li>\n</ol>\n<p><code>finallize()</code> 是 <code>Object</code> 类的 <code>protected</code> 方法，子类能够覆盖该方法以实现资源清理工作；</p>\n<p>GC 在回收前均会调用该方法，但是 <code>finalize()</code> 方法存在如下问题：</p>\n<ul>\n<li>Java 语言规范不保证 <code>finalize()</code> 方法会被及时执行，也不保证他们一定被执行；</li>\n<li><code>finalize()</code> 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 <code>finalize</code> 的执行；</li>\n<li><code>finalize()</code> 方法中，可将待回收对象赋值给 <code>GC Roots</code> 可达的对象引用，从而达到对象再生的目的；</li>\n<li><code>finalize()</code> 方法最多由 GC 执行一次（但是可以手动调用对象的 <code>finalize</code> 方法）；</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n<td style=\"text-align:left\">A + B 等于 30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n<td style=\"text-align:left\">A – B 等于 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n<td style=\"text-align:left\">A * B等于200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n<td style=\"text-align:left\">B / A等于2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％</code></td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n<td style=\"text-align:left\">B%A等于0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增: 操作数的值增加1</td>\n<td style=\"text-align:left\">B++ 或 ++B 等于 21</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减: 操作数的值减少1</td>\n<td style=\"text-align:left\">B— 或 —B 等于 19</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td style=\"text-align:left\">（A == B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td style=\"text-align:left\">(A != B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A&gt; B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A &lt;B）为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A&gt; = B）为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td style=\"text-align:left\">（A &lt;= B）为真。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是1，则结果为1，否则为0</td>\n<td>（A＆B），得到12，即0000 1100</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为0，否则为1</td>\n<td>（A ^ B）得到49，即 0011 0001</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>\n<td>（〜A）得到-61，即1100 0011</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td>A &lt;&lt; 2得到240，即 1111 0000</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td>A &gt;&gt; 2得到15即 1111</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td>A&gt;&gt;&gt;2得到15即0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td style=\"text-align:left\"><code>（A &amp;&amp; B）</code>为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">`</td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n<td>`（A</td>\n<td></td>\n<td>B）`为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!</code></td>\n<td style=\"text-align:left\">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>\n<td style=\"text-align:left\"><code>!(A &amp;&amp; B)</code>为真。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td style=\"text-align:left\">C = A + B将把A + B得到的值赋给C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td style=\"text-align:left\">C + = A等价于C = C + A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td style=\"text-align:left\">C - = A等价于C = C - A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td style=\"text-align:left\">C <em> = A等价于C = C </em> A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td style=\"text-align:left\">C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％=</code></td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td style=\"text-align:left\">C％= A等价于C = C％A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt; =</code></td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n<td style=\"text-align:left\">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n<td style=\"text-align:left\">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>＆=</code></td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n<td style=\"text-align:left\">C＆= 2等价于C = C＆2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^=</code></td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n<td style=\"text-align:left\">C ^ = 2等价于C = C ^ 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">=`</td>\n<td style=\"text-align:left\">按位或赋值操作符</td>\n<td>C \\</td>\n<td>= 2等价于C = C \\</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"条件运算符（-）\"><a href=\"#条件运算符（-）\" class=\"headerlink\" title=\"条件运算符（? :）\"></a>条件运算符（? :）</h3><p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">variable x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> value <span class=\"token keyword\">if</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span> reference variable <span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token operator\">/</span><span class=\"token keyword\">interface</span> type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals() 和 ==\"></a>equals() 和 ==</h3><ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>  本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"方法的类型\"><a href=\"#方法的类型\" class=\"headerlink\" title=\"方法的类型\"></a>方法的类型</h3><ol>\n<li>无参无返回值；</li>\n<li>无参有返回值；</li>\n<li>有参无返回值；</li>\n<li>有参有返回值；</li>\n</ol>\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><ol>\n<li><strong>重载（Overload）</strong></li>\n</ol>\n<p>重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 <strong>编译期</strong>，而且在同一个类中，<strong>方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。</strong> 总的而言：<strong>重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。</strong></p>\n<ol>\n<li><strong>重写（Override）</strong></li>\n</ol>\n<p>重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 <strong>运行期</strong>，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 <code>private/final/static</code> 修饰，则子类无法重写父类方法，但 <code>static</code> 修饰的方法能被再次声明。<strong>构造方法是个特例，不能被重写</strong>。总结起来就是：<strong>重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑</strong>。</p>\n<ol>\n<li><strong>重载 vs 重写</strong></li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>不同点</th>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数列表</td>\n<td>必须不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>返回类型</td>\n<td>可不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>访问修饰符</td>\n<td>可不同</td>\n<td>不能比父类更严格</td>\n</tr>\n<tr>\n<td>发生范围</td>\n<td>同一类中</td>\n<td>父子类</td>\n</tr>\n<tr>\n<td>异常范围</td>\n<td>可修改</td>\n<td>可以减少或删除，不能抛新异常或范围更广的异常</td>\n</tr>\n<tr>\n<td>发生阶段</td>\n<td>编译期</td>\n<td>运行期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"深-浅拷贝\"><a href=\"#深-浅拷贝\" class=\"headerlink\" title=\"深/浅拷贝\"></a>深/浅拷贝</h3><ol>\n<li><strong>浅拷贝</strong></li>\n</ol>\n<p>浅拷贝是 <strong>按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。</strong> 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1cc4a245021761cbff809afd3105169e.png\" alt=\"\"></p>\n<ol>\n<li><strong>深拷贝</strong></li>\n</ol>\n<p>深拷贝会 <strong>拷贝所有属性，同时拷贝属性指向的动态分配的内存</strong>。当对象和它引用的对象一起拷贝是即发生深拷贝，<strong>相比于浅拷贝，深拷贝速度较慢同时花销更大</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2047bfceaaf483f47dc86a0d623457b5.png\" alt=\"\"></p>\n<ol>\n<li><strong>总结</strong></li>\n</ol>\n<p>浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p>推荐阅读：<a href=\"https://juejin.im/post/5bce68226fb9a05ce46a0476\">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>\n<h4 id=\"形参和实参\"><a href=\"#形参和实参\" class=\"headerlink\" title=\"形参和实参\"></a>形参和实参</h4><ol>\n<li><strong>形参</strong>：方法被调用时需要传递进来的参数，如 <code>func(String name)</code> 中的 <code>name</code> 就是一个形参，只有在 <code>func</code> 被调用时 <code>name</code> 才被分配内存空间，当方法执行完后，<code>name</code> 将自动销毁释放空间；</li>\n<li><strong>实参</strong>：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//实参</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"村雨遥\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h4><ol>\n<li><strong>值传递</strong></li>\n</ol>\n<p>方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 <strong>值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">valueCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的age：\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的weight：\"</span><span class=\"token operator\">+</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n    weight<span class=\"token operator\">=</span><span class=\"token number\">89.5f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的age：\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的weight：\"</span><span class=\"token operator\">+</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> w<span class=\"token operator\">=</span><span class=\"token number\">77.5f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">valueCrossTest</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// a = 25，原始值不收影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法执行后的age：\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// w = 77.5，原始值不收影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法执行后的weight：\"</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>引用传递</strong></li>\n</ol>\n<p>引用即指向真实内容的地址值，在方法调用时，<strong>实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。</strong></p>\n<p>但 Java 中并 <strong>不存在引用传递</strong>，因为 <strong>无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身</strong>。</p>\n<ol>\n<li><strong>总结</strong> </li>\n</ol>\n<p><strong>如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。</strong></p>\n<p><strong>如果是对引用类型的数据进行操作，分两种情况，</strong></p>\n<ul>\n<li><strong>一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">PersonCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的person的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是张小龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">PersonCrossTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的person的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是张小龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法内重新赋值后的name：\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"面向对象-vs-面向过程\"><a href=\"#面向对象-vs-面向过程\" class=\"headerlink\" title=\"面向对象 vs 面向过程\"></a>面向对象 vs 面向过程</h3><p>推荐阅读：<a href=\"https://www.zhihu.com/question/27468564/answer/757537214\">https://www.zhihu.com/question/27468564/answer/757537214</a></p>\n<ul>\n<li><strong>面向对象（Object Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>对现实世界理解和抽象的方法</strong>，<strong>更容易维护、复用、扩展</strong>。最主要的特点就是 <strong>继承、封装、多态</strong>，所以 设计出的系统耦合性较低，但比起面向过程性能要低。</p>\n<ul>\n<li><strong>面向过程（Procedure Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>以过程为中心</strong> 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 <strong>封装、继承、多态</strong>，其性能比面向对象更高。</p>\n<ul>\n<li><strong>总结</strong></li>\n</ul>\n<p>面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。</p>\n<h3 id=\"封装、继承、多态\"><a href=\"#封装、继承、多态\" class=\"headerlink\" title=\"封装、继承、多态\"></a>封装、继承、多态</h3><ol>\n<li><strong>封装</strong></li>\n</ol>\n<p>将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。</p>\n<p>通过 封装，实现了 <strong>专业分工</strong>，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 <strong>隐藏了信息以及实现细节</strong>，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。</p>\n<ol>\n<li><strong>继承</strong></li>\n</ol>\n<p>可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 <strong>子类/派生类</strong>，被继承的类叫做 <strong>父类/基类/超类</strong>，具有如下特点：</p>\n<ul>\n<li><strong>子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的</strong>；</li>\n<li>子类可以对父类进行扩展；</li>\n<li>子类可以用自己的方式来实现父类的方法；</li>\n</ul>\n<ol>\n<li><strong>多态</strong></li>\n</ol>\n<p>多态是允许 <strong>将父对象设置为和一个或多个其子对象相等的技术</strong>，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 <strong>父类引用指向子类对象实例</strong>，有 <strong>重载和重写</strong> 两种实现方式。具有如下特点：</p>\n<ul>\n<li>对象类型不可变，但引用类型可变；</li>\n<li>对象类型和引用类型之间有继承（类）/实现（接口）的关系；</li>\n<li>方法具有多态性，但属性不具有；</li>\n<li>若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。</li>\n</ul>\n<h3 id=\"成员变量-vs-局部变量-vs-静态变量\"><a href=\"#成员变量-vs-局部变量-vs-静态变量\" class=\"headerlink\" title=\"成员变量 vs 局部变量 vs 静态变量\"></a>成员变量 vs 局部变量 vs 静态变量</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>不同</th>\n<th>语法</th>\n<th>存储位置</th>\n<th>生命周期</th>\n<th>初始化值</th>\n<th>调用方式</th>\n<th>别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成员变量</td>\n<td>1、 属于类<br />2、能被访问控制符、<code>static、final</code> 等修饰</td>\n<td>堆</td>\n<td>与对象共存亡</td>\n<td>有，基本数据类型为对应默认值，而对象统一为 <code>null</code></td>\n<td>对象调用</td>\n<td>实例变量</td>\n</tr>\n<tr>\n<td>局部变量</td>\n<td>1、属于方法（方法中的变量或参数）<br />2、不能被访问控制符及 <code>static</code> 修饰，但可以被 <code>final</code> 修饰</td>\n<td>栈</td>\n<td>与方法共存亡</td>\n<td>无，必须定义赋值后使用</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td>1、属于类<br />2、被 <code>static</code> 修饰，被所有类对象共用</td>\n<td>方法区</td>\n<td>与类共存亡</td>\n<td>同成员变量初始化值</td>\n<td>类名调用（推荐）、对象调用</td>\n<td>类变量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"构造方法的特点\"><a href=\"#构造方法的特点\" class=\"headerlink\" title=\"构造方法的特点\"></a>构造方法的特点</h3><ol>\n<li>方法名与类名同名；</li>\n<li>无返回值，但不能用 <code>void</code> 关键字声明；</li>\n<li>生成类对象时自动执行，无需显式调用；</li>\n</ol>\n<h3 id=\"抽象类-amp-接口\"><a href=\"#抽象类-amp-接口\" class=\"headerlink\" title=\"抽象类 &amp; 接口\"></a>抽象类 &amp; 接口</h3><ol>\n<li><strong>接口</strong></li>\n</ol>\n<ul>\n<li><p>接口中所有方法默认是 <code>public</code>，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；</p>\n</li>\n<li><p>接口中所有变量均为 <code>static、final</code>，不能有其他变量；</p>\n</li>\n<li>一个类可以实现多个接口（通过 <code>implements</code> 关键字），而且接口自身可以通过 <code>extends</code> 来扩展多个接口；</li>\n<li>接口是对行为的抽象，属于行为规范；</li>\n</ul>\n<ol>\n<li><strong>抽象类</strong></li>\n</ol>\n<ul>\n<li>抽象类中既可以有抽象方法，也可以有非抽象的方法；</li>\n<li>一个类只能实现一个抽象类；</li>\n<li>抽象方法可以被 <code>public、protected、default</code> 修饰，但不能用 <code>private</code>，否则不能被重写；</li>\n<li>抽象是对类的抽象，是一种模板设计；</li>\n</ul>\n<h3 id=\"Object-类中常见方法\"><a href=\"#Object-类中常见方法\" class=\"headerlink\" title=\"Object 类中常见方法\"></a>Object 类中常见方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public final native Class&lt;?&gt; getClass()</code></td>\n<td>用于返回当前运行时对象的 Class 对象，使用了final 关键字修饰，故不允许子类重写</td>\n</tr>\n<tr>\n<td><code>public native int hashCode()</code></td>\n<td>用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap</td>\n</tr>\n<tr>\n<td><code>public boolean equals(Object obj)</code></td>\n<td>用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等</td>\n</tr>\n<tr>\n<td><code>protected native Object clone() throws CloneNotSupportedException</code></td>\n<td>用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException 异常</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法</td>\n</tr>\n<tr>\n<td><code>public final native void notify()</code></td>\n<td>不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个</td>\n</tr>\n<tr>\n<td><code>public final native void notifyAll()</code></td>\n<td>不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程</td>\n</tr>\n<tr>\n<td><code>public final native void wait(long timeout) throws InterruptedException</code></td>\n<td>不能重写。暂停线程的执行注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：<br />1. 其他线程调用该对象的 <code>notify()/notifyAll()</code> 方法；<br />2. 时间间隔到了；<br />3. 其他线程调用了 <code>interrupt()</code> 中断该线程；</td>\n</tr>\n<tr>\n<td><code>public final void wait(long timeout, int nanos) throws InterruptedException</code></td>\n<td>多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒</td>\n</tr>\n<tr>\n<td><code>public final void wait() throws InterruptedException</code></td>\n<td>跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</td>\n</tr>\n<tr>\n<td><code>protected void finalize() throws Throwable &#123; &#125;</code></td>\n<td>实例被垃圾回收器回收的时候触发的操作</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"hashCode-amp-equals\"><a href=\"#hashCode-amp-equals\" class=\"headerlink\" title=\"hashCode &amp; equals\"></a>hashCode &amp; equals</h3><p>推荐阅读：<a href=\"https://juejin.im/post/5a4379d4f265da432003874c\">https://juejin.im/post/5a4379d4f265da432003874c</a></p>\n<h4 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a>equals</h4><ol>\n<li>重写 <code>equals()</code> 方法的准则：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>准则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>自反性</strong></td>\n<td>对任意非空引用值 <code>x</code>，<code>x.equals(x)</code> 应该返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>对称性</strong></td>\n<td>对于任何非空引用值 <code>x</code>和 <code>y</code>，当 <code>y.equals(x)</code> 返回 <code>true</code>时，<code>x.equals(y)</code>  也应返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>传递性</strong></td>\n<td>对于任何非空引用值<code>x、y</code> 和 <code>z</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>， 并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 也应返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>一致性</strong></td>\n<td>对于任何非空引用值 <code>x</code> 和  <code>y</code>，多次调用 <code>x.equals(y)</code> 始终返回 <code>true</code> 或始终返回 <code>false</code>， 前提是对象上 <code>equals</code>比较中所用的信息没有被修改</td>\n</tr>\n<tr>\n<td><strong>非空性</strong></td>\n<td>对于任何非空引用值 <code>x</code>，<code>x.equals(null)</code> 都应返回 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"hashCode\"><a href=\"#hashCode\" class=\"headerlink\" title=\"hashCode\"></a>hashCode</h4><p><code>hashCode</code> 用于返回对象 <code>hash</code> 值，主要是为了加快查找的快捷性，因为 <code>hashCode()</code> 是 <code>Object</code> 类中的方法，所以所有 Java 类均有 <code>hashCode()</code>，在 <code>HashTable</code> 和 <code>HashMap</code> 这类的散列结构中，均是通过 <code>hashCode()</code> 来查找在散列表中位置，通过 <code>hashCode</code> 能够较快的茶道小内存块。</p>\n<h4 id=\"为什么重写-equals-必须重写-hashCode\"><a href=\"#为什么重写-equals-必须重写-hashCode\" class=\"headerlink\" title=\"为什么重写 equals() 必须重写 hashCode()\"></a>为什么重写 <code>equals()</code> 必须重写 <code>hashCode()</code></h4><ol>\n<li>若两个对象相等，则 <code>hashCode()</code> 一定也相同，因为 <code>equals()</code> 是绝对可靠的；</li>\n<li>两个对象相等，则两个对象分别调用 <code>equals()</code> 方法也返回 <code>true</code>；</li>\n<li>两个对象有相同的 <code>hashCode()</code>，他们不一定相等，因为 <code>hashCode()</code> 不是绝对可靠的；</li>\n<li>如果重写了 <code>equals()</code>，但保留 <code>hashCode()</code> 的实现不变，则可能出现两者相等，但 <code>hashCode</code> 却不一样；</li>\n<li>因此，一旦重写了 <code>equals()</code> 方法，则必须重写 <code>hashCode()</code>，<code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 <code>class</code> 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>\n</ol>\n<h3 id=\"序列化与反序列化\"><a href=\"#序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li><strong>序列化</strong>：指将对象转换为字节序列的过程；</li>\n<li><strong>反序列化</strong>：指将字节序列转换为目标对象的过程；</li>\n</ul>\n<h4 id=\"需要序列化的场景\"><a href=\"#需要序列化的场景\" class=\"headerlink\" title=\"需要序列化的场景\"></a>需要序列化的场景</h4><p>当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；</p>\n<h4 id=\"如何实现序列化\"><a href=\"#如何实现序列化\" class=\"headerlink\" title=\"如何实现序列化\"></a>如何实现序列化</h4><p>要实现序列化，只需要让类实现 <code>Serializable</code> 接口即可，此时就标注该类对象能够被序列化；</p>\n<p>针对类中某些数据不想序列化时，可以使用 <code>transient</code> 关键字来实现，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 通过关键字 transient 修饰，表明不参与序列化</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> telephone<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 【<strong>村雨遥</strong>】，以便及时获取最新文章及资源 ~</p>\n</blockquote>\n"},{"title":"【实战演练场】Java 学生成绩管理系统，附源码！","mathjax":true,"toc":true,"abbrlink":"67ecb459","date":"2021-05-04T03:16:45.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。\n\n今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。\n\n虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整😂，我们只关注功能实现🤣）。\n\n对于学生成绩管理系统，主要可以分为如下几个功能：\n\n1.  录入学生成绩\n2.  统计学生成绩\n3.  查找学生成绩\n4.  修改学生成绩\n5.  删除学生成绩\n6.  按平均分排序\n7.  显示所有成绩\n8.  退出管理系统\n\n![](https://img-blog.csdnimg.cn/img_convert/6e6f850a07b165e07cdd3301de62ec03.png)\n\n进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。\n\n![](https://img-blog.csdnimg.cn/img_convert/8df8f15688e8e60a2f37408e5e1b991e.png)\n\n-   **录入学生成绩**\n\n该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/ee773f66ab26c72d1e055c2a34726b80.png)\n\n-   **统计学生成绩**\n\n主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；\n\n![image-20210405133413661](https://img-blog.csdnimg.cn/img_convert/ba9ba8e22d47559ff28a711ffeb7fdf6.png)\n\n-   **查找学生成绩**\n\n根据输入的学号来查找对应学生的相关成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/4dc976ae64d0adcfc74643dd228c2972.png)\n\n-   **修改学生成绩**\n\n根据输入的学号来对对应学生的成绩进行修改；\n\n![](https://img-blog.csdnimg.cn/img_convert/93a7e09af9d90a599bdb79b5de7c7c63.png)\n\n-   **删除学生成绩**\n\n根据输入的学生学号，删除对应学生的成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/4ba351b052ca1ea1abf42eda0f51811e.png)\n\n-   **按平均分排序**\n\n按照平均分降序排序；\n\n![image-20210405135553488](https://img-blog.csdnimg.cn/img_convert/f9b068d8d724f20ca54af69b5048245f.png)\n\n-   **显示所有成绩**\n\n便利所有学生成绩，然后打印出来；\n\n![](https://img-blog.csdnimg.cn/img_convert/776112ffa9b118db618a91e11030ce7f.png)\n\n-   **退出管理系统**\n\n退出菜单；\n\n![](https://img-blog.csdnimg.cn/img_convert/b079f26a81bdb5bb01132dff8c11cd72.png)\n\n## 功能设计与实现\n\n### 主界面\n\n主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */\n\npublic class Manager {\n    public static Scanner scanner = new Scanner(System.in);\n    public static ArrayList<Student> students = new ArrayList<>();\n\n    public static void main(String[] args) {\n        while (true) {\n            System.out.println(\"----------欢迎使用学生成绩管理系统-----------\");\n            System.out.println(\"-------------【1】录入学生成绩-------------\");\n            System.out.println(\"-------------【2】显示统计数据-------------\");\n            System.out.println(\"-------------【3】查找学生成绩-------------\");\n            System.out.println(\"-------------【4】修改学生成绩-------------\");\n            System.out.println(\"-------------【5】删除学生成绩-------------\");\n            System.out.println(\"-------------【6】按平均分排列-------------\");\n            System.out.println(\"-------------【7】显示所有成绩-------------\");\n            System.out.println(\"-------------【0】退出管理系统-------------\");\n\n            Student student = new Student();\n\n            System.out.println(\"输入你的选择【0-7】\");\n            String choice = scanner.next();\n            switch (choice) {\n                case \"1\":\n                    // 录入成绩\n                    student.addScore(students);\n                    break;\n                case \"2\":\n                    // 统计信息\n                    student.showAvg(students);\n                    break;\n                case \"3\":\n                    // 查找成绩\n                    student.lookupStudent(students);\n                    break;\n                case \"4\":\n                    // 修改成绩\n                    student.modifyStudent(students);\n                    break;\n                case \"5\":\n                    // 删除成绩\n                    student.deleteStudent(students);\n                    break;\n                case \"6\":\n                    // 按照平均分排序\n                    student.sortStudent(students);\n                    break;\n                case \"7\":\n                    // 显示所有成绩\n                    student.showAllStudent(students);\n                    break;\n                case \"0\":\n                    System.exit(0);\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n```\n\n### 主类设计\n\n系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；\n\n```java\npackage com.cunyu;\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */\n\npublic class Student {\n    //    班级\n    private String grade;\n    //    学号\n    private long id;\n    //    姓名\n    private String name;\n    //    高数\n    private float math;\n    //    英语\n    private float english;\n    //    体育\n    private float sport;\n    //    Java\n    private float java;\n    //    C++\n    private float cPlusPlus;\n    //    政治\n    private float polity;\n    //    算法\n    private float algorithm;\n    //    平均分\n    private double average;\n    \n    // 各种 setter/getter 以及构造函数\n}\n```\n\n### 录入学生成绩\n\n首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；\n\n然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。\n\n```java\n/**\n* @param students 学生对象列表\n* @return\n* @description 录入学生信息\n* @date 2021/4/5 9:14\n* @author cunyu1943\n* @version 1.0\n*/\npublic void addScore(ArrayList<Student> students) {\n    System.out.println(\"----------录入学生数据----------\");\n    System.out.println(\"请依次输入如下数据：\");\n    long id;\n    while (true) {\n        System.out.println(\"学号\");\n        id = scanner.nextInt();\n        if (isValid(students, id)) {\n            System.out.println(\"学号重复，请重新输入\");\n        } else {\n            break;\n        }\n    }\n\n    System.out.println(\"年级\");\n    String grade = scanner.next();\n    System.out.println(\"姓名\");\n    String name = scanner.next();\n    System.out.println(\"数学\");\n    float math = scanner.nextFloat();\n    System.out.println(\"英语\");\n    float english = scanner.nextFloat();\n    System.out.println(\"体育\");\n    float sport = scanner.nextFloat();\n    System.out.println(\"Java\");\n    float java = scanner.nextFloat();\n    System.out.println(\"C++\");\n    float cPlusPlus = scanner.nextFloat();\n    System.out.println(\"政治\");\n    float polity = scanner.nextFloat();\n    System.out.println(\"算法\");\n    float algorithm = scanner.nextFloat();\n\n    //        创建对象，并设置属性，然后将其加入学生对象集合\n    Student student = new Student();\n    student.setId(id);\n    student.setGrade(grade);\n    student.setName(name);\n    student.setMath(math);\n    student.setAlgorithm(algorithm);\n    student.setEnglish(english);\n    student.setcPlusPlus(cPlusPlus);\n    student.setJava(java);\n    student.setSport(sport);\n    student.setPolity(polity);\n    //        获取平均分\n    double avg = getAvg(student);\n    student.setAverage(avg);\n    //        添加到集合\n    students.add(student);\n    //        提示信息\n    System.out.println(\"添加成功\");\n}\n```\n\n### 统计学生成绩\n\n主要实现对于各学生平均成绩的统计，然后打印出信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 显示简单统计数据\n* @date 2021/4/5 10:08\n* @author cunyu1943\n* @version 1.0\n*/\npublic void showAvg(ArrayList<Student> students) {\n    System.out.println(\"----------输出学生统计数据----------\");\n    if (students.size() == 0) {\n        System.out.println(\"当前无数据，请先添加数据！\");\n    } else {\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\");\n        System.out.println(\"---------------------------------\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getAvg(student));\n        }\n    }\n}\n```\n\n### 查找学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 查找对应学号学生的成绩信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/\npublic void lookupStudent(ArrayList<Student> students) {\n    System.out.println(\"----------查找学生成绩----------\");\n    if (students.size() == 0) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"请输入要查找学生的学号：\");\n        long id = scanner.nextLong();\n        int flag = -1;\n        Student student = new Student();\n        //        查找对应学号，找到就退出\n        for (int i = 0; i < students.size(); i++) {\n            student = students.get(i);\n            if (student.getId() == id) {\n                flag = i;\n                break;\n            }\n        }\n\n        if (flag == -1) {\n            System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n        } else {\n            System.out.println(\"对应学号的学生成绩如下：\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            System.out.format(\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            System.out.println(\"查找信息成功！\");\n        }\n    }\n\n}\n```\n\n\n\n### 修改学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 修改对应学号学生的信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/\npublic void modifyStudent(ArrayList<Student> students) {\n    System.out.println(\"----------修改学生成绩----------\");\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"请输入要修改学生的学号：\");\n        long id = scanner.nextLong();\n\n        for (Student student : students) {\n            if (id == student.getId()) {\n                System.out.println(\"请重新输入该学生的成绩\");\n                System.out.println(\"数学\");\n                float math = scanner.nextFloat();\n                System.out.println(\"英语\");\n                float english = scanner.nextFloat();\n                System.out.println(\"体育\");\n                float sport = scanner.nextFloat();\n                System.out.println(\"Java\");\n                float java = scanner.nextFloat();\n                System.out.println(\"C++\");\n                float cPlusPlus = scanner.nextFloat();\n                System.out.println(\"政治\");\n                float polity = scanner.nextFloat();\n                System.out.println(\"算法\");\n                float algorithm = scanner.nextFloat();\n\n                student.setMath(math);\n                student.setAlgorithm(algorithm);\n                student.setEnglish(english);\n                student.setcPlusPlus(cPlusPlus);\n                student.setJava(java);\n                student.setSport(sport);\n                student.setPolity(polity);\n                //                获取平均分\n                double avg = getAvg(student);\n                student.setAverage(avg);\n                System.out.println(\"修改成功！\");\n            } else {\n                System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n            }\n            break;\n        }\n    }\n}\n```\n\n### 删除学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；\n\n```java\n/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */\npublic void deleteStudent(ArrayList<Student> students) {\n    System.out.println(\"----------删除学生成绩----------\");\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"输入要删除学生成绩的学号\");\n        long id = scanner.nextLong();\n\n        int index = -1;\n        for (int i = 0; i < students.size(); i++) {\n            Student student = students.get(i);\n            if (student.getId() == id) {\n                index = i;\n                break;\n            }\n        }\n        if (index == -1) {\n            System.out.println(\"未找到对应学号学生信息，请确认后再删除！\");\n        } else {\n            students.remove(index);\n            System.out.println(\"----------删除成功----------\");\n        }\n    }\n}\n```\n\n### 按平均分排序\n\n先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 按照平均分排序\n* @date 2021/4/5 14:29\n* @author cunyu1943\n* @version 1.0\n*/\npublic void sortStudent(ArrayList<Student> students) {\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        for (int i = 0; i < students.size() - 1; i++) {\n            if (students.get(i).getAvg(students.get(i)) < students.get(i + 1).getAvg(students.get(i + 1))) {\n                Student tmp = students.get(i);\n                students.set(i, students.get(i + 1));\n                students.set(i + 1, tmp);\n            }\n        }\n\n        System.out.println(\"排序后的学生成绩\");\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n        }\n    }\n}\n```\n\n\n\n### 显示所有成绩\n\n先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 显示所有学生成绩\n* @date 2021/4/5 14:30\n* @author cunyu1943\n* @version 1.0\n*/\npublic void showAllStudent(ArrayList<Student> students) {\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请先添加数据\");\n    } else {\n        System.out.println(\"----------所有学生成绩如下----------\");\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n        }\n    }\n}\n```\n\n## 总程序\n\n将上述所有模块整合之后，我们得到最终的程序；\n\n1.  **Manager.java**\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */\n\npublic class Manager {\n    public static Scanner scanner = new Scanner(System.in);\n    public static ArrayList<Student> students = new ArrayList<>();\n\n    public static void main(String[] args) {\n        while (true) {\n            System.out.println(\"----------欢迎使用学生成绩管理系统-----------\");\n            System.out.println(\"-------------【1】录入学生成绩-------------\");\n            System.out.println(\"-------------【2】显示统计数据-------------\");\n            System.out.println(\"-------------【3】查找学生成绩-------------\");\n            System.out.println(\"-------------【4】修改学生成绩-------------\");\n            System.out.println(\"-------------【5】删除学生成绩-------------\");\n            System.out.println(\"-------------【6】按平均分排列-------------\");\n            System.out.println(\"-------------【7】显示所有成绩-------------\");\n            System.out.println(\"-------------【0】退出管理系统-------------\");\n\n            Student student = new Student();\n\n            System.out.println(\"输入你的选择\");\n            String choice = scanner.next();\n            switch (choice) {\n                case \"1\":\n                    student.addScore(students);\n                    break;\n                case \"2\":\n                    student.showAvg(students);\n                    break;\n                case \"3\":\n                    student.lookupStudent(students);\n                    break;\n                case \"4\":\n                    student.modifyStudent(students);\n                    break;\n                case \"5\":\n                    student.deleteStudent(students);\n                    break;\n                case \"6\":\n                    student.sortStudent(students);\n                    break;\n                case \"7\":\n                    student.showAllStudent(students);\n                    break;\n                case \"0\":\n                    System.exit(0);\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n```\n\n2.  **Student.java**\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */\n\npublic class Student {\n    public static Scanner scanner = new Scanner(System.in);\n    //    班级\n    private String grade;\n    //    学号\n    private long id;\n    //    姓名\n    private String name;\n    //    高数\n    private float math;\n    //    英语\n    private float english;\n    //    体育\n    private float sport;\n    //    Java\n    private float java;\n    //    C++\n    private float cPlusPlus;\n    //    政治\n    private float polity;\n    //    算法\n    private float algorithm;\n    //    平均分\n    private double average;\n\n    public Student() {\n    }\n\n    public Student(String grade, long id, String name, float math, float english, float sport, float java, float cPlusPlus, float polity, float algorithm, double average) {\n        this.grade = grade;\n        this.id = id;\n        this.name = name;\n        this.math = math;\n        this.english = english;\n        this.sport = sport;\n        this.java = java;\n        this.cPlusPlus = cPlusPlus;\n        this.polity = polity;\n        this.algorithm = algorithm;\n        this.average = average;\n    }\n\n    public String getGrade() {\n        return grade;\n    }\n\n    public void setGrade(String grade) {\n        this.grade = grade;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public float getMath() {\n        return math;\n    }\n\n    public void setMath(float math) {\n        this.math = math;\n    }\n\n    public float getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(float english) {\n        this.english = english;\n    }\n\n    public float getSport() {\n        return sport;\n    }\n\n    public void setSport(float sport) {\n        this.sport = sport;\n    }\n\n    public float getJava() {\n        return java;\n    }\n\n    public void setJava(float java) {\n        this.java = java;\n    }\n\n    public float getcPlusPlus() {\n        return cPlusPlus;\n    }\n\n    public void setcPlusPlus(float cPlusPlus) {\n        this.cPlusPlus = cPlusPlus;\n    }\n\n    public float getPolity() {\n        return polity;\n    }\n\n    public void setPolity(float polity) {\n        this.polity = polity;\n    }\n\n    public float getAlgorithm() {\n        return algorithm;\n    }\n\n    public void setAlgorithm(float algorithm) {\n        this.algorithm = algorithm;\n    }\n\n    public double getAvg(Student student) {\n        return (student.getAlgorithm() + student.getcPlusPlus() + student.getEnglish() + student.getSport() + student.getJava() + student.getPolity() + student.getMath()) / 7;\n    }\n\n    public void setAverage(double average) {\n        this.average = average;\n    }\n\n\n    /**\n     * @param students 学生对象列表\n     * @return\n     * @description 录入学生信息\n     * @date 2021/4/5 9:14\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void addScore(ArrayList<Student> students) {\n        System.out.println(\"----------录入学生数据----------\");\n        System.out.println(\"请依次输入如下数据：\");\n        long id;\n        while (true) {\n            System.out.println(\"学号\");\n            id = scanner.nextInt();\n            if (isValid(students, id)) {\n                System.out.println(\"学号重复，请重新输入\");\n            } else {\n                break;\n            }\n        }\n\n        System.out.println(\"年级\");\n        String grade = scanner.next();\n        System.out.println(\"姓名\");\n        String name = scanner.next();\n        System.out.println(\"数学\");\n        float math = scanner.nextFloat();\n        System.out.println(\"英语\");\n        float english = scanner.nextFloat();\n        System.out.println(\"体育\");\n        float sport = scanner.nextFloat();\n        System.out.println(\"Java\");\n        float java = scanner.nextFloat();\n        System.out.println(\"C++\");\n        float cPlusPlus = scanner.nextFloat();\n        System.out.println(\"政治\");\n        float polity = scanner.nextFloat();\n        System.out.println(\"算法\");\n        float algorithm = scanner.nextFloat();\n\n        //        创建对象，并设置属性，然后将其加入学生对象集合\n        Student student = new Student();\n        student.setId(id);\n        student.setGrade(grade);\n        student.setName(name);\n        student.setMath(math);\n        student.setAlgorithm(algorithm);\n        student.setEnglish(english);\n        student.setcPlusPlus(cPlusPlus);\n        student.setJava(java);\n        student.setSport(sport);\n        student.setPolity(polity);\n        //        获取平均分\n        double avg = getAvg(student);\n        student.setAverage(avg);\n        //        添加到集合\n        students.add(student);\n        //        提示信息\n        System.out.println(\"添加成功\");\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @param id       学号\n     * @return true，学号重复；false 学号可用\n     * @description 判断学号是否可用\n     * @date 2021/4/5 9:19\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public boolean isValid(ArrayList<Student> students, long id) {\n        for (Student student : students) {\n            if (student.getId() == id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示简单统计数据\n     * @date 2021/4/5 10:08\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void showAvg(ArrayList<Student> students) {\n        System.out.println(\"----------输出学生统计数据----------\");\n        if (students.size() == 0) {\n            System.out.println(\"当前无数据，请先添加数据！\");\n        } else {\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\");\n            System.out.println(\"---------------------------------\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getAvg(student));\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 查找对应学号学生的成绩信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void lookupStudent(ArrayList<Student> students) {\n        System.out.println(\"----------查找学生成绩----------\");\n        if (students.size() == 0) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"请输入要查找学生的学号：\");\n            long id = scanner.nextLong();\n            int flag = -1;\n            Student student = new Student();\n            //        查找对应学号，找到就退出\n            for (int i = 0; i < students.size(); i++) {\n                student = students.get(i);\n                if (student.getId() == id) {\n                    flag = i;\n                    break;\n                }\n            }\n\n            if (flag == -1) {\n                System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n            } else {\n                System.out.println(\"对应学号的学生成绩如下：\");\n                System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n                System.out.format(\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n                System.out.println(\"查找信息成功！\");\n            }\n        }\n\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 修改对应学号学生的信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void modifyStudent(ArrayList<Student> students) {\n        System.out.println(\"----------修改学生成绩----------\");\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"请输入要修改学生的学号：\");\n            long id = scanner.nextLong();\n\n            for (Student student : students) {\n                if (id == student.getId()) {\n                    System.out.println(\"请重新输入该学生的成绩\");\n                    System.out.println(\"数学\");\n                    float math = scanner.nextFloat();\n                    System.out.println(\"英语\");\n                    float english = scanner.nextFloat();\n                    System.out.println(\"体育\");\n                    float sport = scanner.nextFloat();\n                    System.out.println(\"Java\");\n                    float java = scanner.nextFloat();\n                    System.out.println(\"C++\");\n                    float cPlusPlus = scanner.nextFloat();\n                    System.out.println(\"政治\");\n                    float polity = scanner.nextFloat();\n                    System.out.println(\"算法\");\n                    float algorithm = scanner.nextFloat();\n\n                    student.setMath(math);\n                    student.setAlgorithm(algorithm);\n                    student.setEnglish(english);\n                    student.setcPlusPlus(cPlusPlus);\n                    student.setJava(java);\n                    student.setSport(sport);\n                    student.setPolity(polity);\n                    //                获取平均分\n                    double avg = getAvg(student);\n                    student.setAverage(avg);\n                    System.out.println(\"修改成功！\");\n                } else {\n                    System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n                }\n                break;\n            }\n        }\n    }\n\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void deleteStudent(ArrayList<Student> students) {\n        System.out.println(\"----------删除学生成绩----------\");\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"输入要删除学生成绩的学号\");\n            long id = scanner.nextLong();\n\n            int index = -1;\n            for (int i = 0; i < students.size(); i++) {\n                Student student = students.get(i);\n                if (student.getId() == id) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index == -1) {\n                System.out.println(\"未找到对应学号学生信息，请确认后再删除！\");\n            } else {\n                students.remove(index);\n                System.out.println(\"----------删除成功----------\");\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示所有学生成绩\n     * @date 2021/4/5 14:30\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void showAllStudent(ArrayList<Student> students) {\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请先添加数据\");\n        } else {\n            System.out.println(\"----------所有学生成绩如下----------\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 按照平均分排序\n     * @date 2021/4/5 14:29\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void sortStudent(ArrayList<Student> students) {\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            for (int i = 0; i < students.size() - 1; i++) {\n                if (students.get(i).getAvg(students.get(i)) < students.get(i + 1).getAvg(students.get(i + 1))) {\n                    Student tmp = students.get(i);\n                    students.set(i, students.get(i + 1));\n                    students.set(i + 1, tmp);\n                }\n            }\n\n            System.out.println(\"排序后的学生成绩\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            }\n        }\n    }\n\n}\n\n```\n\n## 总结\n\n虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【实战演练场】Java-学生成绩管理系统，附源码！.md","raw":"---\ntitle: 【实战演练场】Java 学生成绩管理系统，附源码！\nmathjax: true\ntoc: true\ntags:\n  - Java\n  - 项目\ncategories:\n  - 实战演练场\nabbrlink: 67ecb459\ndate: 2021-05-04 11:16:45\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 前言\n\n对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。\n\n今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。\n\n虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整😂，我们只关注功能实现🤣）。\n\n对于学生成绩管理系统，主要可以分为如下几个功能：\n\n1.  录入学生成绩\n2.  统计学生成绩\n3.  查找学生成绩\n4.  修改学生成绩\n5.  删除学生成绩\n6.  按平均分排序\n7.  显示所有成绩\n8.  退出管理系统\n\n![](https://img-blog.csdnimg.cn/img_convert/6e6f850a07b165e07cdd3301de62ec03.png)\n\n进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。\n\n![](https://img-blog.csdnimg.cn/img_convert/8df8f15688e8e60a2f37408e5e1b991e.png)\n\n-   **录入学生成绩**\n\n该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/ee773f66ab26c72d1e055c2a34726b80.png)\n\n-   **统计学生成绩**\n\n主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；\n\n![image-20210405133413661](https://img-blog.csdnimg.cn/img_convert/ba9ba8e22d47559ff28a711ffeb7fdf6.png)\n\n-   **查找学生成绩**\n\n根据输入的学号来查找对应学生的相关成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/4dc976ae64d0adcfc74643dd228c2972.png)\n\n-   **修改学生成绩**\n\n根据输入的学号来对对应学生的成绩进行修改；\n\n![](https://img-blog.csdnimg.cn/img_convert/93a7e09af9d90a599bdb79b5de7c7c63.png)\n\n-   **删除学生成绩**\n\n根据输入的学生学号，删除对应学生的成绩信息；\n\n![](https://img-blog.csdnimg.cn/img_convert/4ba351b052ca1ea1abf42eda0f51811e.png)\n\n-   **按平均分排序**\n\n按照平均分降序排序；\n\n![image-20210405135553488](https://img-blog.csdnimg.cn/img_convert/f9b068d8d724f20ca54af69b5048245f.png)\n\n-   **显示所有成绩**\n\n便利所有学生成绩，然后打印出来；\n\n![](https://img-blog.csdnimg.cn/img_convert/776112ffa9b118db618a91e11030ce7f.png)\n\n-   **退出管理系统**\n\n退出菜单；\n\n![](https://img-blog.csdnimg.cn/img_convert/b079f26a81bdb5bb01132dff8c11cd72.png)\n\n## 功能设计与实现\n\n### 主界面\n\n主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */\n\npublic class Manager {\n    public static Scanner scanner = new Scanner(System.in);\n    public static ArrayList<Student> students = new ArrayList<>();\n\n    public static void main(String[] args) {\n        while (true) {\n            System.out.println(\"----------欢迎使用学生成绩管理系统-----------\");\n            System.out.println(\"-------------【1】录入学生成绩-------------\");\n            System.out.println(\"-------------【2】显示统计数据-------------\");\n            System.out.println(\"-------------【3】查找学生成绩-------------\");\n            System.out.println(\"-------------【4】修改学生成绩-------------\");\n            System.out.println(\"-------------【5】删除学生成绩-------------\");\n            System.out.println(\"-------------【6】按平均分排列-------------\");\n            System.out.println(\"-------------【7】显示所有成绩-------------\");\n            System.out.println(\"-------------【0】退出管理系统-------------\");\n\n            Student student = new Student();\n\n            System.out.println(\"输入你的选择【0-7】\");\n            String choice = scanner.next();\n            switch (choice) {\n                case \"1\":\n                    // 录入成绩\n                    student.addScore(students);\n                    break;\n                case \"2\":\n                    // 统计信息\n                    student.showAvg(students);\n                    break;\n                case \"3\":\n                    // 查找成绩\n                    student.lookupStudent(students);\n                    break;\n                case \"4\":\n                    // 修改成绩\n                    student.modifyStudent(students);\n                    break;\n                case \"5\":\n                    // 删除成绩\n                    student.deleteStudent(students);\n                    break;\n                case \"6\":\n                    // 按照平均分排序\n                    student.sortStudent(students);\n                    break;\n                case \"7\":\n                    // 显示所有成绩\n                    student.showAllStudent(students);\n                    break;\n                case \"0\":\n                    System.exit(0);\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n```\n\n### 主类设计\n\n系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；\n\n```java\npackage com.cunyu;\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */\n\npublic class Student {\n    //    班级\n    private String grade;\n    //    学号\n    private long id;\n    //    姓名\n    private String name;\n    //    高数\n    private float math;\n    //    英语\n    private float english;\n    //    体育\n    private float sport;\n    //    Java\n    private float java;\n    //    C++\n    private float cPlusPlus;\n    //    政治\n    private float polity;\n    //    算法\n    private float algorithm;\n    //    平均分\n    private double average;\n    \n    // 各种 setter/getter 以及构造函数\n}\n```\n\n### 录入学生成绩\n\n首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；\n\n然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。\n\n```java\n/**\n* @param students 学生对象列表\n* @return\n* @description 录入学生信息\n* @date 2021/4/5 9:14\n* @author cunyu1943\n* @version 1.0\n*/\npublic void addScore(ArrayList<Student> students) {\n    System.out.println(\"----------录入学生数据----------\");\n    System.out.println(\"请依次输入如下数据：\");\n    long id;\n    while (true) {\n        System.out.println(\"学号\");\n        id = scanner.nextInt();\n        if (isValid(students, id)) {\n            System.out.println(\"学号重复，请重新输入\");\n        } else {\n            break;\n        }\n    }\n\n    System.out.println(\"年级\");\n    String grade = scanner.next();\n    System.out.println(\"姓名\");\n    String name = scanner.next();\n    System.out.println(\"数学\");\n    float math = scanner.nextFloat();\n    System.out.println(\"英语\");\n    float english = scanner.nextFloat();\n    System.out.println(\"体育\");\n    float sport = scanner.nextFloat();\n    System.out.println(\"Java\");\n    float java = scanner.nextFloat();\n    System.out.println(\"C++\");\n    float cPlusPlus = scanner.nextFloat();\n    System.out.println(\"政治\");\n    float polity = scanner.nextFloat();\n    System.out.println(\"算法\");\n    float algorithm = scanner.nextFloat();\n\n    //        创建对象，并设置属性，然后将其加入学生对象集合\n    Student student = new Student();\n    student.setId(id);\n    student.setGrade(grade);\n    student.setName(name);\n    student.setMath(math);\n    student.setAlgorithm(algorithm);\n    student.setEnglish(english);\n    student.setcPlusPlus(cPlusPlus);\n    student.setJava(java);\n    student.setSport(sport);\n    student.setPolity(polity);\n    //        获取平均分\n    double avg = getAvg(student);\n    student.setAverage(avg);\n    //        添加到集合\n    students.add(student);\n    //        提示信息\n    System.out.println(\"添加成功\");\n}\n```\n\n### 统计学生成绩\n\n主要实现对于各学生平均成绩的统计，然后打印出信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 显示简单统计数据\n* @date 2021/4/5 10:08\n* @author cunyu1943\n* @version 1.0\n*/\npublic void showAvg(ArrayList<Student> students) {\n    System.out.println(\"----------输出学生统计数据----------\");\n    if (students.size() == 0) {\n        System.out.println(\"当前无数据，请先添加数据！\");\n    } else {\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\");\n        System.out.println(\"---------------------------------\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getAvg(student));\n        }\n    }\n}\n```\n\n### 查找学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 查找对应学号学生的成绩信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/\npublic void lookupStudent(ArrayList<Student> students) {\n    System.out.println(\"----------查找学生成绩----------\");\n    if (students.size() == 0) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"请输入要查找学生的学号：\");\n        long id = scanner.nextLong();\n        int flag = -1;\n        Student student = new Student();\n        //        查找对应学号，找到就退出\n        for (int i = 0; i < students.size(); i++) {\n            student = students.get(i);\n            if (student.getId() == id) {\n                flag = i;\n                break;\n            }\n        }\n\n        if (flag == -1) {\n            System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n        } else {\n            System.out.println(\"对应学号的学生成绩如下：\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            System.out.format(\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            System.out.println(\"查找信息成功！\");\n        }\n    }\n\n}\n```\n\n\n\n### 修改学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 修改对应学号学生的信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/\npublic void modifyStudent(ArrayList<Student> students) {\n    System.out.println(\"----------修改学生成绩----------\");\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"请输入要修改学生的学号：\");\n        long id = scanner.nextLong();\n\n        for (Student student : students) {\n            if (id == student.getId()) {\n                System.out.println(\"请重新输入该学生的成绩\");\n                System.out.println(\"数学\");\n                float math = scanner.nextFloat();\n                System.out.println(\"英语\");\n                float english = scanner.nextFloat();\n                System.out.println(\"体育\");\n                float sport = scanner.nextFloat();\n                System.out.println(\"Java\");\n                float java = scanner.nextFloat();\n                System.out.println(\"C++\");\n                float cPlusPlus = scanner.nextFloat();\n                System.out.println(\"政治\");\n                float polity = scanner.nextFloat();\n                System.out.println(\"算法\");\n                float algorithm = scanner.nextFloat();\n\n                student.setMath(math);\n                student.setAlgorithm(algorithm);\n                student.setEnglish(english);\n                student.setcPlusPlus(cPlusPlus);\n                student.setJava(java);\n                student.setSport(sport);\n                student.setPolity(polity);\n                //                获取平均分\n                double avg = getAvg(student);\n                student.setAverage(avg);\n                System.out.println(\"修改成功！\");\n            } else {\n                System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n            }\n            break;\n        }\n    }\n}\n```\n\n### 删除学生成绩\n\n先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；\n\n```java\n/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */\npublic void deleteStudent(ArrayList<Student> students) {\n    System.out.println(\"----------删除学生成绩----------\");\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        System.out.println(\"输入要删除学生成绩的学号\");\n        long id = scanner.nextLong();\n\n        int index = -1;\n        for (int i = 0; i < students.size(); i++) {\n            Student student = students.get(i);\n            if (student.getId() == id) {\n                index = i;\n                break;\n            }\n        }\n        if (index == -1) {\n            System.out.println(\"未找到对应学号学生信息，请确认后再删除！\");\n        } else {\n            students.remove(index);\n            System.out.println(\"----------删除成功----------\");\n        }\n    }\n}\n```\n\n### 按平均分排序\n\n先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 按照平均分排序\n* @date 2021/4/5 14:29\n* @author cunyu1943\n* @version 1.0\n*/\npublic void sortStudent(ArrayList<Student> students) {\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请添加后重试\");\n    } else {\n        for (int i = 0; i < students.size() - 1; i++) {\n            if (students.get(i).getAvg(students.get(i)) < students.get(i + 1).getAvg(students.get(i + 1))) {\n                Student tmp = students.get(i);\n                students.set(i, students.get(i + 1));\n                students.set(i + 1, tmp);\n            }\n        }\n\n        System.out.println(\"排序后的学生成绩\");\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n        }\n    }\n}\n```\n\n\n\n### 显示所有成绩\n\n先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。\n\n```java\n/**\n* @param students 学生对象集合\n* @return\n* @description 显示所有学生成绩\n* @date 2021/4/5 14:30\n* @author cunyu1943\n* @version 1.0\n*/\npublic void showAllStudent(ArrayList<Student> students) {\n    if (students.isEmpty()) {\n        System.out.println(\"当前无数据，请先添加数据\");\n    } else {\n        System.out.println(\"----------所有学生成绩如下----------\");\n        System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n        for (Student student : students) {\n            System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n        }\n    }\n}\n```\n\n## 总程序\n\n将上述所有模块整合之后，我们得到最终的程序；\n\n1.  **Manager.java**\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */\n\npublic class Manager {\n    public static Scanner scanner = new Scanner(System.in);\n    public static ArrayList<Student> students = new ArrayList<>();\n\n    public static void main(String[] args) {\n        while (true) {\n            System.out.println(\"----------欢迎使用学生成绩管理系统-----------\");\n            System.out.println(\"-------------【1】录入学生成绩-------------\");\n            System.out.println(\"-------------【2】显示统计数据-------------\");\n            System.out.println(\"-------------【3】查找学生成绩-------------\");\n            System.out.println(\"-------------【4】修改学生成绩-------------\");\n            System.out.println(\"-------------【5】删除学生成绩-------------\");\n            System.out.println(\"-------------【6】按平均分排列-------------\");\n            System.out.println(\"-------------【7】显示所有成绩-------------\");\n            System.out.println(\"-------------【0】退出管理系统-------------\");\n\n            Student student = new Student();\n\n            System.out.println(\"输入你的选择\");\n            String choice = scanner.next();\n            switch (choice) {\n                case \"1\":\n                    student.addScore(students);\n                    break;\n                case \"2\":\n                    student.showAvg(students);\n                    break;\n                case \"3\":\n                    student.lookupStudent(students);\n                    break;\n                case \"4\":\n                    student.modifyStudent(students);\n                    break;\n                case \"5\":\n                    student.deleteStudent(students);\n                    break;\n                case \"6\":\n                    student.sortStudent(students);\n                    break;\n                case \"7\":\n                    student.showAllStudent(students);\n                    break;\n                case \"0\":\n                    System.exit(0);\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n```\n\n2.  **Student.java**\n\n```java\npackage com.cunyu;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */\n\npublic class Student {\n    public static Scanner scanner = new Scanner(System.in);\n    //    班级\n    private String grade;\n    //    学号\n    private long id;\n    //    姓名\n    private String name;\n    //    高数\n    private float math;\n    //    英语\n    private float english;\n    //    体育\n    private float sport;\n    //    Java\n    private float java;\n    //    C++\n    private float cPlusPlus;\n    //    政治\n    private float polity;\n    //    算法\n    private float algorithm;\n    //    平均分\n    private double average;\n\n    public Student() {\n    }\n\n    public Student(String grade, long id, String name, float math, float english, float sport, float java, float cPlusPlus, float polity, float algorithm, double average) {\n        this.grade = grade;\n        this.id = id;\n        this.name = name;\n        this.math = math;\n        this.english = english;\n        this.sport = sport;\n        this.java = java;\n        this.cPlusPlus = cPlusPlus;\n        this.polity = polity;\n        this.algorithm = algorithm;\n        this.average = average;\n    }\n\n    public String getGrade() {\n        return grade;\n    }\n\n    public void setGrade(String grade) {\n        this.grade = grade;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public float getMath() {\n        return math;\n    }\n\n    public void setMath(float math) {\n        this.math = math;\n    }\n\n    public float getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(float english) {\n        this.english = english;\n    }\n\n    public float getSport() {\n        return sport;\n    }\n\n    public void setSport(float sport) {\n        this.sport = sport;\n    }\n\n    public float getJava() {\n        return java;\n    }\n\n    public void setJava(float java) {\n        this.java = java;\n    }\n\n    public float getcPlusPlus() {\n        return cPlusPlus;\n    }\n\n    public void setcPlusPlus(float cPlusPlus) {\n        this.cPlusPlus = cPlusPlus;\n    }\n\n    public float getPolity() {\n        return polity;\n    }\n\n    public void setPolity(float polity) {\n        this.polity = polity;\n    }\n\n    public float getAlgorithm() {\n        return algorithm;\n    }\n\n    public void setAlgorithm(float algorithm) {\n        this.algorithm = algorithm;\n    }\n\n    public double getAvg(Student student) {\n        return (student.getAlgorithm() + student.getcPlusPlus() + student.getEnglish() + student.getSport() + student.getJava() + student.getPolity() + student.getMath()) / 7;\n    }\n\n    public void setAverage(double average) {\n        this.average = average;\n    }\n\n\n    /**\n     * @param students 学生对象列表\n     * @return\n     * @description 录入学生信息\n     * @date 2021/4/5 9:14\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void addScore(ArrayList<Student> students) {\n        System.out.println(\"----------录入学生数据----------\");\n        System.out.println(\"请依次输入如下数据：\");\n        long id;\n        while (true) {\n            System.out.println(\"学号\");\n            id = scanner.nextInt();\n            if (isValid(students, id)) {\n                System.out.println(\"学号重复，请重新输入\");\n            } else {\n                break;\n            }\n        }\n\n        System.out.println(\"年级\");\n        String grade = scanner.next();\n        System.out.println(\"姓名\");\n        String name = scanner.next();\n        System.out.println(\"数学\");\n        float math = scanner.nextFloat();\n        System.out.println(\"英语\");\n        float english = scanner.nextFloat();\n        System.out.println(\"体育\");\n        float sport = scanner.nextFloat();\n        System.out.println(\"Java\");\n        float java = scanner.nextFloat();\n        System.out.println(\"C++\");\n        float cPlusPlus = scanner.nextFloat();\n        System.out.println(\"政治\");\n        float polity = scanner.nextFloat();\n        System.out.println(\"算法\");\n        float algorithm = scanner.nextFloat();\n\n        //        创建对象，并设置属性，然后将其加入学生对象集合\n        Student student = new Student();\n        student.setId(id);\n        student.setGrade(grade);\n        student.setName(name);\n        student.setMath(math);\n        student.setAlgorithm(algorithm);\n        student.setEnglish(english);\n        student.setcPlusPlus(cPlusPlus);\n        student.setJava(java);\n        student.setSport(sport);\n        student.setPolity(polity);\n        //        获取平均分\n        double avg = getAvg(student);\n        student.setAverage(avg);\n        //        添加到集合\n        students.add(student);\n        //        提示信息\n        System.out.println(\"添加成功\");\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @param id       学号\n     * @return true，学号重复；false 学号可用\n     * @description 判断学号是否可用\n     * @date 2021/4/5 9:19\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public boolean isValid(ArrayList<Student> students, long id) {\n        for (Student student : students) {\n            if (student.getId() == id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示简单统计数据\n     * @date 2021/4/5 10:08\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void showAvg(ArrayList<Student> students) {\n        System.out.println(\"----------输出学生统计数据----------\");\n        if (students.size() == 0) {\n            System.out.println(\"当前无数据，请先添加数据！\");\n        } else {\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\");\n            System.out.println(\"---------------------------------\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getAvg(student));\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 查找对应学号学生的成绩信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void lookupStudent(ArrayList<Student> students) {\n        System.out.println(\"----------查找学生成绩----------\");\n        if (students.size() == 0) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"请输入要查找学生的学号：\");\n            long id = scanner.nextLong();\n            int flag = -1;\n            Student student = new Student();\n            //        查找对应学号，找到就退出\n            for (int i = 0; i < students.size(); i++) {\n                student = students.get(i);\n                if (student.getId() == id) {\n                    flag = i;\n                    break;\n                }\n            }\n\n            if (flag == -1) {\n                System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n            } else {\n                System.out.println(\"对应学号的学生成绩如下：\");\n                System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n                System.out.format(\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n                System.out.println(\"查找信息成功！\");\n            }\n        }\n\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 修改对应学号学生的信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void modifyStudent(ArrayList<Student> students) {\n        System.out.println(\"----------修改学生成绩----------\");\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"请输入要修改学生的学号：\");\n            long id = scanner.nextLong();\n\n            for (Student student : students) {\n                if (id == student.getId()) {\n                    System.out.println(\"请重新输入该学生的成绩\");\n                    System.out.println(\"数学\");\n                    float math = scanner.nextFloat();\n                    System.out.println(\"英语\");\n                    float english = scanner.nextFloat();\n                    System.out.println(\"体育\");\n                    float sport = scanner.nextFloat();\n                    System.out.println(\"Java\");\n                    float java = scanner.nextFloat();\n                    System.out.println(\"C++\");\n                    float cPlusPlus = scanner.nextFloat();\n                    System.out.println(\"政治\");\n                    float polity = scanner.nextFloat();\n                    System.out.println(\"算法\");\n                    float algorithm = scanner.nextFloat();\n\n                    student.setMath(math);\n                    student.setAlgorithm(algorithm);\n                    student.setEnglish(english);\n                    student.setcPlusPlus(cPlusPlus);\n                    student.setJava(java);\n                    student.setSport(sport);\n                    student.setPolity(polity);\n                    //                获取平均分\n                    double avg = getAvg(student);\n                    student.setAverage(avg);\n                    System.out.println(\"修改成功！\");\n                } else {\n                    System.out.println(\"未找到对应学号的学生，请确认后重新输入！\");\n                }\n                break;\n            }\n        }\n    }\n\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void deleteStudent(ArrayList<Student> students) {\n        System.out.println(\"----------删除学生成绩----------\");\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            System.out.println(\"输入要删除学生成绩的学号\");\n            long id = scanner.nextLong();\n\n            int index = -1;\n            for (int i = 0; i < students.size(); i++) {\n                Student student = students.get(i);\n                if (student.getId() == id) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index == -1) {\n                System.out.println(\"未找到对应学号学生信息，请确认后再删除！\");\n            } else {\n                students.remove(index);\n                System.out.println(\"----------删除成功----------\");\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示所有学生成绩\n     * @date 2021/4/5 14:30\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void showAllStudent(ArrayList<Student> students) {\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请先添加数据\");\n        } else {\n            System.out.println(\"----------所有学生成绩如下----------\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            }\n        }\n    }\n\n    /**\n     * @param students 学生对象集合\n     * @return\n     * @description 按照平均分排序\n     * @date 2021/4/5 14:29\n     * @author cunyu1943\n     * @version 1.0\n     */\n    public void sortStudent(ArrayList<Student> students) {\n        if (students.isEmpty()) {\n            System.out.println(\"当前无数据，请添加后重试\");\n        } else {\n            for (int i = 0; i < students.size() - 1; i++) {\n                if (students.get(i).getAvg(students.get(i)) < students.get(i + 1).getAvg(students.get(i + 1))) {\n                    Student tmp = students.get(i);\n                    students.set(i, students.get(i + 1));\n                    students.set(i + 1, tmp);\n                }\n            }\n\n            System.out.println(\"排序后的学生成绩\");\n            System.out.println(\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\");\n            for (Student student : students) {\n                System.out.format(\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\", student.getGrade(), student.getId(), student.getName(), student.getMath(), student.getEnglish(), student.getSport(), student.getJava(), student.getcPlusPlus(), student.getPolity(), student.getAlgorithm(), student.getAvg(student));\n            }\n        }\n    }\n\n}\n\n```\n\n## 总结\n\n虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【实战演练场】Java-学生成绩管理系统，附源码！","published":1,"updated":"2021-05-04T03:23:09.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9sdw2e0063bw342e2i8lqd","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。</p>\n<p>今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</p>\n<p>虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整😂，我们只关注功能实现🤣）。</p>\n<p>对于学生成绩管理系统，主要可以分为如下几个功能：</p>\n<ol>\n<li>录入学生成绩</li>\n<li>统计学生成绩</li>\n<li>查找学生成绩</li>\n<li>修改学生成绩</li>\n<li>删除学生成绩</li>\n<li>按平均分排序</li>\n<li>显示所有成绩</li>\n<li>退出管理系统</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6e6f850a07b165e07cdd3301de62ec03.png\" alt=\"\"></p>\n<p>进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8df8f15688e8e60a2f37408e5e1b991e.png\" alt=\"\"></p>\n<ul>\n<li><strong>录入学生成绩</strong></li>\n</ul>\n<p>该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ee773f66ab26c72d1e055c2a34726b80.png\" alt=\"\"></p>\n<ul>\n<li><strong>统计学生成绩</strong></li>\n</ul>\n<p>主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ba9ba8e22d47559ff28a711ffeb7fdf6.png\" alt=\"image-20210405133413661\"></p>\n<ul>\n<li><strong>查找学生成绩</strong></li>\n</ul>\n<p>根据输入的学号来查找对应学生的相关成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4dc976ae64d0adcfc74643dd228c2972.png\" alt=\"\"></p>\n<ul>\n<li><strong>修改学生成绩</strong></li>\n</ul>\n<p>根据输入的学号来对对应学生的成绩进行修改；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/93a7e09af9d90a599bdb79b5de7c7c63.png\" alt=\"\"></p>\n<ul>\n<li><strong>删除学生成绩</strong></li>\n</ul>\n<p>根据输入的学生学号，删除对应学生的成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ba351b052ca1ea1abf42eda0f51811e.png\" alt=\"\"></p>\n<ul>\n<li><strong>按平均分排序</strong></li>\n</ul>\n<p>按照平均分降序排序；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f9b068d8d724f20ca54af69b5048245f.png\" alt=\"image-20210405135553488\"></p>\n<ul>\n<li><strong>显示所有成绩</strong></li>\n</ul>\n<p>便利所有学生成绩，然后打印出来；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/776112ffa9b118db618a91e11030ce7f.png\" alt=\"\"></p>\n<ul>\n<li><strong>退出管理系统</strong></li>\n</ul>\n<p>退出菜单；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b079f26a81bdb5bb01132dff8c11cd72.png\" alt=\"\"></p>\n<h2 id=\"功能设计与实现\"><a href=\"#功能设计与实现\" class=\"headerlink\" title=\"功能设计与实现\"></a>功能设计与实现</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------欢迎使用学生成绩管理系统-----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【1】录入学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【2】显示统计数据-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【3】查找学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【4】修改学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【5】删除学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【6】按平均分排列-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【7】显示所有成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【0】退出管理系统-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入你的选择【0-7】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> choice <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 录入成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 统计信息</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 查找成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 修改成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"5\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 删除成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"6\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 按照平均分排序</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"7\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 显示所有成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主类设计\"><a href=\"#主类设计\" class=\"headerlink\" title=\"主类设计\"></a>主类设计</h3><p>系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//    班级</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    学号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    高数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    英语</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    体育</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    Java</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    C++</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    政治</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    算法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    平均分</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 各种 setter/getter 以及构造函数</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"录入学生成绩\"><a href=\"#录入学生成绩\" class=\"headerlink\" title=\"录入学生成绩\"></a>录入学生成绩</h3><p>首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；</p>\n<p>然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象列表\n* @return\n* @description 录入学生信息\n* @date 2021/4/5 9:14\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------录入学生数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请依次输入如下数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号重复，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年级\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> grade <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//        创建对象，并设置属性，然后将其加入学生对象集合</span>\n    <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        获取平均分</span>\n    <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        添加到集合</span>\n    students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        提示信息</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"统计学生成绩\"><a href=\"#统计学生成绩\" class=\"headerlink\" title=\"统计学生成绩\"></a>统计学生成绩</h3><p>主要实现对于各学生平均成绩的统计，然后打印出信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 显示简单统计数据\n* @date 2021/4/5 10:08\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------输出学生统计数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查找学生成绩\"><a href=\"#查找学生成绩\" class=\"headerlink\" title=\"查找学生成绩\"></a>查找学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 查找对应学号学生的成绩信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------查找学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        查找对应学号，找到就退出</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                flag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对应学号的学生成绩如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找信息成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改学生成绩\"><a href=\"#修改学生成绩\" class=\"headerlink\" title=\"修改学生成绩\"></a>修改学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 修改对应学号学生的信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------修改学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要修改学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请重新输入该学生的成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//                获取平均分</span>\n                <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除学生成绩\"><a href=\"#删除学生成绩\" class=\"headerlink\" title=\"删除学生成绩\"></a>删除学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要删除学生成绩的学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号学生信息，请确认后再删除！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            students<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除成功----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"按平均分排序\"><a href=\"#按平均分排序\" class=\"headerlink\" title=\"按平均分排序\"></a>按平均分排序</h3><p>先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 按照平均分排序\n* @date 2021/4/5 14:29\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Student</span> tmp <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的学生成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"显示所有成绩\"><a href=\"#显示所有成绩\" class=\"headerlink\" title=\"显示所有成绩\"></a>显示所有成绩</h3><p>先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 显示所有学生成绩\n* @date 2021/4/5 14:30\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------所有学生成绩如下----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总程序\"><a href=\"#总程序\" class=\"headerlink\" title=\"总程序\"></a>总程序</h2><p>将上述所有模块整合之后，我们得到最终的程序；</p>\n<ol>\n<li><strong>Manager.java</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------欢迎使用学生成绩管理系统-----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【1】录入学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【2】显示统计数据-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【3】查找学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【4】修改学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【5】删除学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【6】按平均分排列-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【7】显示所有成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【0】退出管理系统-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入你的选择\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> choice <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"5\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"6\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"7\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>Student.java</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    班级</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    学号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    高数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    英语</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    体育</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    Java</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    C++</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    政治</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    算法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    平均分</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> math<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>english <span class=\"token operator\">=</span> english<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sport <span class=\"token operator\">=</span> sport<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">=</span> java<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cPlusPlus <span class=\"token operator\">=</span> cPlusPlus<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>polity <span class=\"token operator\">=</span> polity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>average <span class=\"token operator\">=</span> average<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> math<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> english<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>english <span class=\"token operator\">=</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sport <span class=\"token operator\">=</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> java<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">=</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cPlusPlus <span class=\"token operator\">=</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>polity <span class=\"token operator\">=</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> average<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>average <span class=\"token operator\">=</span> average<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象列表\n     * @return\n     * @description 录入学生信息\n     * @date 2021/4/5 9:14\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------录入学生数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请依次输入如下数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号重复，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年级\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> grade <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        创建对象，并设置属性，然后将其加入学生对象集合</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        获取平均分</span>\n        <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        添加到集合</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        提示信息</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @param id       学号\n     * @return true，学号重复；false 学号可用\n     * @description 判断学号是否可用\n     * @date 2021/4/5 9:19\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示简单统计数据\n     * @date 2021/4/5 10:08\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------输出学生统计数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 查找对应学号学生的成绩信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------查找学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//        查找对应学号，找到就退出</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    flag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对应学号的学生成绩如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找信息成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 修改对应学号学生的信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------修改学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要修改学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请重新输入该学生的成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//                获取平均分</span>\n                    <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要删除学生成绩的学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号学生信息，请确认后再删除！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除成功----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示所有学生成绩\n     * @date 2021/4/5 14:30\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------所有学生成绩如下----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 按照平均分排序\n     * @date 2021/4/5 14:29\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Student</span> tmp <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的学生成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。</p>\n<p>今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</p>\n<p>虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整😂，我们只关注功能实现🤣）。</p>\n<p>对于学生成绩管理系统，主要可以分为如下几个功能：</p>\n<ol>\n<li>录入学生成绩</li>\n<li>统计学生成绩</li>\n<li>查找学生成绩</li>\n<li>修改学生成绩</li>\n<li>删除学生成绩</li>\n<li>按平均分排序</li>\n<li>显示所有成绩</li>\n<li>退出管理系统</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6e6f850a07b165e07cdd3301de62ec03.png\" alt=\"\"></p>\n<p>进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8df8f15688e8e60a2f37408e5e1b991e.png\" alt=\"\"></p>\n<ul>\n<li><strong>录入学生成绩</strong></li>\n</ul>\n<p>该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ee773f66ab26c72d1e055c2a34726b80.png\" alt=\"\"></p>\n<ul>\n<li><strong>统计学生成绩</strong></li>\n</ul>\n<p>主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ba9ba8e22d47559ff28a711ffeb7fdf6.png\" alt=\"image-20210405133413661\"></p>\n<ul>\n<li><strong>查找学生成绩</strong></li>\n</ul>\n<p>根据输入的学号来查找对应学生的相关成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4dc976ae64d0adcfc74643dd228c2972.png\" alt=\"\"></p>\n<ul>\n<li><strong>修改学生成绩</strong></li>\n</ul>\n<p>根据输入的学号来对对应学生的成绩进行修改；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/93a7e09af9d90a599bdb79b5de7c7c63.png\" alt=\"\"></p>\n<ul>\n<li><strong>删除学生成绩</strong></li>\n</ul>\n<p>根据输入的学生学号，删除对应学生的成绩信息；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ba351b052ca1ea1abf42eda0f51811e.png\" alt=\"\"></p>\n<ul>\n<li><strong>按平均分排序</strong></li>\n</ul>\n<p>按照平均分降序排序；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f9b068d8d724f20ca54af69b5048245f.png\" alt=\"image-20210405135553488\"></p>\n<ul>\n<li><strong>显示所有成绩</strong></li>\n</ul>\n<p>便利所有学生成绩，然后打印出来；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/776112ffa9b118db618a91e11030ce7f.png\" alt=\"\"></p>\n<ul>\n<li><strong>退出管理系统</strong></li>\n</ul>\n<p>退出菜单；</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b079f26a81bdb5bb01132dff8c11cd72.png\" alt=\"\"></p>\n<h2 id=\"功能设计与实现\"><a href=\"#功能设计与实现\" class=\"headerlink\" title=\"功能设计与实现\"></a>功能设计与实现</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------欢迎使用学生成绩管理系统-----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【1】录入学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【2】显示统计数据-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【3】查找学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【4】修改学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【5】删除学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【6】按平均分排列-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【7】显示所有成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【0】退出管理系统-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入你的选择【0-7】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> choice <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 录入成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 统计信息</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 查找成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 修改成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"5\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 删除成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"6\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 按照平均分排序</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"7\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// 显示所有成绩</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主类设计\"><a href=\"#主类设计\" class=\"headerlink\" title=\"主类设计\"></a>主类设计</h3><p>系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//    班级</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    学号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    高数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    英语</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    体育</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    Java</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    C++</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    政治</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    算法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    平均分</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 各种 setter/getter 以及构造函数</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"录入学生成绩\"><a href=\"#录入学生成绩\" class=\"headerlink\" title=\"录入学生成绩\"></a>录入学生成绩</h3><p>首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；</p>\n<p>然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象列表\n* @return\n* @description 录入学生信息\n* @date 2021/4/5 9:14\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------录入学生数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请依次输入如下数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号重复，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年级\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> grade <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//        创建对象，并设置属性，然后将其加入学生对象集合</span>\n    <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        获取平均分</span>\n    <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        添加到集合</span>\n    students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        提示信息</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"统计学生成绩\"><a href=\"#统计学生成绩\" class=\"headerlink\" title=\"统计学生成绩\"></a>统计学生成绩</h3><p>主要实现对于各学生平均成绩的统计，然后打印出信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 显示简单统计数据\n* @date 2021/4/5 10:08\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------输出学生统计数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查找学生成绩\"><a href=\"#查找学生成绩\" class=\"headerlink\" title=\"查找学生成绩\"></a>查找学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 查找对应学号学生的成绩信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------查找学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        查找对应学号，找到就退出</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                flag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对应学号的学生成绩如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找信息成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改学生成绩\"><a href=\"#修改学生成绩\" class=\"headerlink\" title=\"修改学生成绩\"></a>修改学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 修改对应学号学生的信息\n* @date 2021/4/5 12:59\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------修改学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要修改学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请重新输入该学生的成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//                获取平均分</span>\n                <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除学生成绩\"><a href=\"#删除学生成绩\" class=\"headerlink\" title=\"删除学生成绩\"></a>删除学生成绩</h3><p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要删除学生成绩的学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号学生信息，请确认后再删除！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            students<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除成功----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"按平均分排序\"><a href=\"#按平均分排序\" class=\"headerlink\" title=\"按平均分排序\"></a>按平均分排序</h3><p>先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 按照平均分排序\n* @date 2021/4/5 14:29\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Student</span> tmp <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的学生成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"显示所有成绩\"><a href=\"#显示所有成绩\" class=\"headerlink\" title=\"显示所有成绩\"></a>显示所有成绩</h3><p>先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* @param students 学生对象集合\n* @return\n* @description 显示所有学生成绩\n* @date 2021/4/5 14:30\n* @author cunyu1943\n* @version 1.0\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------所有学生成绩如下----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总程序\"><a href=\"#总程序\" class=\"headerlink\" title=\"总程序\"></a>总程序</h2><p>将上述所有模块整合之后，我们得到最终的程序；</p>\n<ol>\n<li><strong>Manager.java</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Manager\n * @date : 2021/4/4 23:54\n * @description : 管理系统\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------欢迎使用学生成绩管理系统-----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【1】录入学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【2】显示统计数据-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【3】查找学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【4】修改学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【5】删除学生成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【6】按平均分排列-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【7】显示所有成绩-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------【0】退出管理系统-------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入你的选择\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> choice <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"5\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"6\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"7\"</span><span class=\"token operator\">:</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>Student.java</strong></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cunyu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author : cunyu\n * @version : 1.0\n * @className : Student\n * @date : 2021/4/4 23:31\n * @description : 学生类\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    班级</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    学号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    高数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    英语</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    体育</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    Java</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    C++</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    政治</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    算法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//    平均分</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> math<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> english<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> java<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> math<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>english <span class=\"token operator\">=</span> english<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sport <span class=\"token operator\">=</span> sport<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">=</span> java<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cPlusPlus <span class=\"token operator\">=</span> cPlusPlus<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>polity <span class=\"token operator\">=</span> polity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>average <span class=\"token operator\">=</span> average<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> math<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> english<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>english <span class=\"token operator\">=</span> english<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> sport<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sport <span class=\"token operator\">=</span> sport<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> java<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">=</span> java<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cPlusPlus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cPlusPlus <span class=\"token operator\">=</span> cPlusPlus<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> polity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>polity <span class=\"token operator\">=</span> polity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> algorithm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>algorithm <span class=\"token operator\">=</span> algorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> average<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>average <span class=\"token operator\">=</span> average<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象列表\n     * @return\n     * @description 录入学生信息\n     * @date 2021/4/5 9:14\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------录入学生数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请依次输入如下数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学号重复，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年级\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> grade <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//        创建对象，并设置属性，然后将其加入学生对象集合</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setGrade</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        获取平均分</span>\n        <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        添加到集合</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//        提示信息</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @param id       学号\n     * @return true，学号重复；false 学号可用\n     * @description 判断学号是否可用\n     * @date 2021/4/5 9:19\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示简单统计数据\n     * @date 2021/4/5 10:08\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------输出学生统计数据----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t%d\\t\\t%s\\t\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 查找对应学号学生的成绩信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lookupStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------查找学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//        查找对应学号，找到就退出</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    flag <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对应学号的学生成绩如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t\\t%s\\t\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找信息成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 修改对应学号学生的信息\n     * @date 2021/4/5 12:59\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modifyStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------修改学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要修改学生的学号：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请重新输入该学生的成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> math <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> english <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"体育\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> sport <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> java <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> cPlusPlus <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"政治\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> polity <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"算法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> algorithm <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setMath</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setEnglish</span><span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setcPlusPlus</span><span class=\"token punctuation\">(</span>cPlusPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setJava</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setSport</span><span class=\"token punctuation\">(</span>sport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setPolity</span><span class=\"token punctuation\">(</span>polity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//                获取平均分</span>\n                    <span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    student<span class=\"token punctuation\">.</span><span class=\"token function\">setAverage</span><span class=\"token punctuation\">(</span>avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号的学生，请确认后重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 删除学生成绩\n     * @date 2021/4/5 14:28\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除学生成绩----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要删除学生成绩的学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到对应学号学生信息，请确认后再删除！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                students<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------删除成功----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 显示所有学生成绩\n     * @date 2021/4/5 14:30\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请先添加数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------所有学生成绩如下----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @param students 学生对象集合\n     * @return\n     * @description 按照平均分排序\n     * @date 2021/4/5 14:29\n     * @author cunyu1943\n     * @version 1.0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前无数据，请添加后重试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Student</span> tmp <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    students<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的学生成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班级\\t\\t学号\\t\\t姓名\\t\\t数学\\t\\t英语\\t\\t体育\\t\\tJava\\t\\tC++\\t\\t政治\\t\\t算法\\t\\t平均分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\t%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getSport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getcPlusPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getPolity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getAvg</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"【LeetCode】1720. 解码异或后的数组","mathjax":true,"toc":true,"abbrlink":"8955af0c","date":"2021-05-06T14:03:01.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [1720. 解码异或后的数组](https://leetcode-cn.com/problems/decode-xored-array/)\n-   难度：简单\n\n## 描述\n\n>   **未知** 整数数组 `arr` 由 `n` 个非负整数组成。\n>\n>   经编码后变为长度为 `n - 1` 的另一个整数数组 `encoded` ，其中 `encoded[i] = arr[i] XOR arr[i + 1]` 。例如，`arr = [1,0,2,1]` 经编码后得到 `encoded = [1,2,3]` 。\n>\n>   给你编码后的数组 `encoded` 和原数组 `arr` 的第一个元素 `first`（`arr[0]`）。\n>\n>   请解码返回原数组 `arr` 。可以证明答案存在并且是唯一的。\n>\n>   **示例 1：**\n>\n>   **输入：** encoded = \\[1,2,3\\], first = 1\n>   **输出：** [1,0,2,1\\]\n>   **解释：** 若 arr = \\[1,0,2,1\\] ，那么 first = 1 且 encoded = \\[1 XOR 0, 0 XOR 2, 2 XOR 1\\] = \\[1,2,3\\]\n>\n>   **示例 2：**\n>\n>   **输入：** encoded = \\[6,2,7,3\\], first = 4\n>   **输出：** [4,2,0,7,4\\]\n>\n>   **提示：**\n>\n>   - $2 <= n <= 10^4$\n>   - `encoded.length == n - 1`\n>   - 0 <= encoded[i] <= 10<sup>5</sup>\n>   - 0 <= first <= 10<sup>5</sup>\n\n## 方法\n\n### 思路\n\n-   因为 `a ^ b = c`，`a ^ b ^ b = a`，所以得知 `c ^ b = a`\n\n-   观察题目，可以发现 `arr[0] ^ arr[1] = encode[0]`、`arr[1] ^ arr[2] = encode[1]`……，已知 `encode` 数组和 `arr[0]`，运用上面的式子可以知道 `arr[1] = arr[0] ^ encode[0]`、`arr[2] = arr[1] ^ encode[1]`……\n-   因为主要是遍历了一趟数组，所以时间复杂度为 `O(n)`；\n\n### 实现\n\n```java\nclass Solution {\n    public int[] decode(int[] encoded, int first) {\n        // 编码前的数组\n        int[] arr = new int[encoded.length + 1];\n        // 编码前数组的第一个元素\n        arr[0] = first;\n        // arr[i] ^ arr[i + 1] = encode[i]，反过来 arr[i + 1] = encode[i] ^ arr[i]\n        for(int i = 0; i < arr.length - 1; i++){\n            arr[i + 1] = arr[i] ^ encoded[i];\n        }\n        return arr;\n    }\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/【LeetCode】1720-解码异或后的数组.md","raw":"---\ntitle: 【LeetCode】1720. 解码异或后的数组\nmathjax: true\ntoc: true\ntags:\n  - LeetCode\n  - 位运算\ncategories:\n  - Online Judge\nabbrlink: 8955af0c\ndate: 2021-05-06 22:03:01\ntop:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 题目\n\n-   [1720. 解码异或后的数组](https://leetcode-cn.com/problems/decode-xored-array/)\n-   难度：简单\n\n## 描述\n\n>   **未知** 整数数组 `arr` 由 `n` 个非负整数组成。\n>\n>   经编码后变为长度为 `n - 1` 的另一个整数数组 `encoded` ，其中 `encoded[i] = arr[i] XOR arr[i + 1]` 。例如，`arr = [1,0,2,1]` 经编码后得到 `encoded = [1,2,3]` 。\n>\n>   给你编码后的数组 `encoded` 和原数组 `arr` 的第一个元素 `first`（`arr[0]`）。\n>\n>   请解码返回原数组 `arr` 。可以证明答案存在并且是唯一的。\n>\n>   **示例 1：**\n>\n>   **输入：** encoded = \\[1,2,3\\], first = 1\n>   **输出：** [1,0,2,1\\]\n>   **解释：** 若 arr = \\[1,0,2,1\\] ，那么 first = 1 且 encoded = \\[1 XOR 0, 0 XOR 2, 2 XOR 1\\] = \\[1,2,3\\]\n>\n>   **示例 2：**\n>\n>   **输入：** encoded = \\[6,2,7,3\\], first = 4\n>   **输出：** [4,2,0,7,4\\]\n>\n>   **提示：**\n>\n>   - $2 <= n <= 10^4$\n>   - `encoded.length == n - 1`\n>   - 0 <= encoded[i] <= 10<sup>5</sup>\n>   - 0 <= first <= 10<sup>5</sup>\n\n## 方法\n\n### 思路\n\n-   因为 `a ^ b = c`，`a ^ b ^ b = a`，所以得知 `c ^ b = a`\n\n-   观察题目，可以发现 `arr[0] ^ arr[1] = encode[0]`、`arr[1] ^ arr[2] = encode[1]`……，已知 `encode` 数组和 `arr[0]`，运用上面的式子可以知道 `arr[1] = arr[0] ^ encode[0]`、`arr[2] = arr[1] ^ encode[1]`……\n-   因为主要是遍历了一趟数组，所以时间复杂度为 `O(n)`；\n\n### 实现\n\n```java\nclass Solution {\n    public int[] decode(int[] encoded, int first) {\n        // 编码前的数组\n        int[] arr = new int[encoded.length + 1];\n        // 编码前数组的第一个元素\n        arr[0] = first;\n        // arr[i] ^ arr[i + 1] = encode[i]，反过来 arr[i + 1] = encode[i] ^ arr[i]\n        for(int i = 0; i < arr.length - 1; i++){\n            arr[i + 1] = arr[i] ^ encoded[i];\n        }\n        return arr;\n    }\n}\n```\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"【LeetCode】1720-解码异或后的数组","published":1,"updated":"2021-05-06T14:20:57.945Z","_id":"ckocz2h6t0000ag34g12j5ohz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/decode-xored-array/\">1720. 解码异或后的数组</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  <strong>未知</strong> 整数数组 <code>arr</code> 由 <code>n</code> 个非负整数组成。</p>\n<p>  经编码后变为长度为 <code>n - 1</code> 的另一个整数数组 <code>encoded</code> ，其中 <code>encoded[i] = arr[i] XOR arr[i + 1]</code> 。例如，<code>arr = [1,0,2,1]</code> 经编码后得到 <code>encoded = [1,2,3]</code> 。</p>\n<p>  给你编码后的数组 <code>encoded</code> 和原数组 <code>arr</code> 的第一个元素 <code>first</code>（<code>arr[0]</code>）。</p>\n<p>  请解码返回原数组 <code>arr</code> 。可以证明答案存在并且是唯一的。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> encoded = [1,2,3], first = 1<br>  <strong>输出：</strong> [1,0,2,1]<br>  <strong>解释：</strong> 若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong> encoded = [6,2,7,3], first = 4<br>  <strong>输出：</strong> [4,2,0,7,4]</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li>$2 &lt;= n &lt;= 10^4$</li>\n<li><code>encoded.length == n - 1</code></li>\n<li>0 &lt;= encoded[i] &lt;= 10<sup>5</sup></li>\n<li>0 &lt;= first &lt;= 10<sup>5</sup></li>\n</ul>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>因为 <code>a ^ b = c</code>，<code>a ^ b ^ b = a</code>，所以得知 <code>c ^ b = a</code></p>\n</li>\n<li><p>观察题目，可以发现 <code>arr[0] ^ arr[1] = encode[0]</code>、<code>arr[1] ^ arr[2] = encode[1]</code>……，已知 <code>encode</code> 数组和 <code>arr[0]</code>，运用上面的式子可以知道 <code>arr[1] = arr[0] ^ encode[0]</code>、<code>arr[2] = arr[1] ^ encode[1]</code>……</p>\n</li>\n<li>因为主要是遍历了一趟数组，所以时间复杂度为 <code>O(n)</code>；</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 编码前的数组</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>encoded<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 编码前数组的第一个元素</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// arr[i] ^ arr[i + 1] = encode[i]，反过来 arr[i + 1] = encode[i] ^ arr[i]</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><ul>\n<li><a href=\"https://leetcode-cn.com/problems/decode-xored-array/\">1720. 解码异或后的数组</a></li>\n<li>难度：简单</li>\n</ul>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>  <strong>未知</strong> 整数数组 <code>arr</code> 由 <code>n</code> 个非负整数组成。</p>\n<p>  经编码后变为长度为 <code>n - 1</code> 的另一个整数数组 <code>encoded</code> ，其中 <code>encoded[i] = arr[i] XOR arr[i + 1]</code> 。例如，<code>arr = [1,0,2,1]</code> 经编码后得到 <code>encoded = [1,2,3]</code> 。</p>\n<p>  给你编码后的数组 <code>encoded</code> 和原数组 <code>arr</code> 的第一个元素 <code>first</code>（<code>arr[0]</code>）。</p>\n<p>  请解码返回原数组 <code>arr</code> 。可以证明答案存在并且是唯一的。</p>\n<p>  <strong>示例 1：</strong></p>\n<p>  <strong>输入：</strong> encoded = [1,2,3], first = 1<br>  <strong>输出：</strong> [1,0,2,1]<br>  <strong>解释：</strong> 若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]</p>\n<p>  <strong>示例 2：</strong></p>\n<p>  <strong>输入：</strong> encoded = [6,2,7,3], first = 4<br>  <strong>输出：</strong> [4,2,0,7,4]</p>\n<p>  <strong>提示：</strong></p>\n<ul>\n<li>$2 &lt;= n &lt;= 10^4$</li>\n<li><code>encoded.length == n - 1</code></li>\n<li>0 &lt;= encoded[i] &lt;= 10<sup>5</sup></li>\n<li>0 &lt;= first &lt;= 10<sup>5</sup></li>\n</ul>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>因为 <code>a ^ b = c</code>，<code>a ^ b ^ b = a</code>，所以得知 <code>c ^ b = a</code></p>\n</li>\n<li><p>观察题目，可以发现 <code>arr[0] ^ arr[1] = encode[0]</code>、<code>arr[1] ^ arr[2] = encode[1]</code>……，已知 <code>encode</code> 数组和 <code>arr[0]</code>，运用上面的式子可以知道 <code>arr[1] = arr[0] ^ encode[0]</code>、<code>arr[2] = arr[1] ^ encode[1]</code>……</p>\n</li>\n<li>因为主要是遍历了一趟数组，所以时间复杂度为 <code>O(n)</code>；</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 编码前的数组</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>encoded<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 编码前数组的第一个元素</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// arr[i] ^ arr[i + 1] = encode[i]，反过来 arr[i + 1] = encode[i] ^ arr[i]</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"},{"title":"demo","mathjax":true,"toc":true,"abbrlink":"d642dfa0","date":"2021-05-07T01:09:30.000Z","top":null,"_content":"\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 测试文章\n\n这是一篇测试文章\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","source":"_posts/demo.md","raw":"---\ntitle: demo\nmathjax: true\ntoc: true\nabbrlink: d642dfa0\ndate: 2021-05-07 09:09:30\ntop:\ntags:\ncategories:\n---\n\n>   **本文已收录至个人 Github仓库**：[cs-docs](https://github.com/cunyu1943/cs-docs)，欢迎各位 **Star、Fork** ~\n\n## 测试文章\n\n这是一篇测试文章\n\n>   建议关注公众号 「**村雨遥**」，最新干货文章不容错过 ~\n\n","slug":"demo","published":1,"updated":"2021-05-07T01:12:46.909Z","_id":"ckodmj7rh0000vo341rmgacq5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h2><p>这是一篇测试文章</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好","url":"https://blinkfox.github.io/","title":"Go"},{"avatar":"https://yirenliu.cn/avatar","name":"Roy's Blog","introduction":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年","url":"https://yirenliu.cn/","title":"Go"}],"link":[{"class_name":"个人专属","class_desc":null,"link_list":[{"name":"村雨遥の杂货铺","link":"https://cunyu1943.site","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"知乎","link":"https://www.zhihu.com/people/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"CSDN","link":"https://blog.csdn.net/github_39655029","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"Github","link":"https://github.com/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"掘金","link":"https://juejin.cn/user/747323637904519","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"牛客","link":"https://www.nowcoder.com/profile/806383223","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"开源中国","link":"https://my.oschina.net/cunyu1943","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"},{"name":"云+社区","link":"https://cloud.tencent.com/developer/user/6209990/articles","avatar":"https://gitee.com/cunyu1943/images/raw/master/blogpic/avatar.png","descr":"吾生也有涯，而知也无涯"}]},{"class_name":"同行者","class_desc":null,"link_list":[{"name":"Roy's Blog","link":"https://yirenliu.cn/","avatar":"https://yirenliu.cn/avatar","descr":"鸡起犬眠，豕餐牛作。苏才郭福，姬子彭年"}]},{"class_name":"特别致谢","class_desc":null,"link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"}]}]}},"excerpt":"","more":"<blockquote>\n<p>  <strong>本文已收录至个人 Github仓库</strong>：<a href=\"https://github.com/cunyu1943/cs-docs\">cs-docs</a>，欢迎各位 <strong>Star、Fork</strong> ~</p>\n</blockquote>\n<h2 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h2><p>这是一篇测试文章</p>\n<blockquote>\n<p>  建议关注公众号 「<strong>村雨遥</strong>」，最新干货文章不容错过 ~</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cko9sdvz30009bw341yfqex2p","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdvze000jbw340ixd1pb9"},{"post_id":"cko9sdvyo0001bw34cakb5jjc","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdvzi000obw343j363396"},{"post_id":"cko9sdvyt0003bw34hlk9bcmc","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdvzk000tbw34ck42891n"},{"post_id":"cko9sdvz00007bw34ftjgar60","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdvzo000zbw34f07x3qsf"},{"post_id":"cko9sdvz5000bbw34cel0ahc6","category_id":"cko9sdvzk000sbw34c9n78kof","_id":"cko9sdvzs0016bw348287gj2f"},{"post_id":"cko9sdvza000gbw342ir5fyy5","category_id":"cko9sdvzk000sbw34c9n78kof","_id":"cko9sdvzu001abw34e80aesc9"},{"post_id":"cko9sdvzt0018bw34hzgx6xxa","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdvzy001gbw34470j82o9"},{"post_id":"cko9sdvzd000ibw34f3q6d1cd","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw00001lbw34e5hqgkku"},{"post_id":"cko9sdvzu0019bw348xhg4xt5","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw01001obw34f9ij270r"},{"post_id":"cko9sdvzv001dbw348l586y2s","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw03001rbw34cl47hsmi"},{"post_id":"cko9sdvzh000nbw34ggtzfzla","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw04001vbw34dyizbro2"},{"post_id":"cko9sdvzj000rbw34fd7ldzkz","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw08001ybw34axwqajj1"},{"post_id":"cko9sdvzm000wbw34963uaht5","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw0b0023bw34eyuu91ul"},{"post_id":"cko9sdvzn000ybw343xt19nnp","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw0f0028bw34cmsdef5n"},{"post_id":"cko9sdvzp0012bw34fh043rqs","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw0h002cbw341psd6j7y"},{"post_id":"cko9sdvzr0014bw344eon9yys","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"cko9sdw0h002fbw34d6xd9mqf"},{"post_id":"cko9sdvzw001fbw34ez9jhq7l","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0j002kbw34dv846h16"},{"post_id":"cko9sdvzz001kbw344jf6cl2s","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0k002obw3417h26teu"},{"post_id":"cko9sdw00001nbw34gvi97qi7","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0l002sbw346ezl91z2"},{"post_id":"cko9sdw02001qbw344hc8evbk","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0m002wbw3493lr50nt"},{"post_id":"cko9sdw03001ubw346xf57dye","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0n0030bw34bolg1o2k"},{"post_id":"cko9sdw05001xbw348zxqf4cc","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0o0033bw341mkq4iew"},{"post_id":"cko9sdw090021bw341s6o5u3h","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0p0035bw343jrzgidr"},{"post_id":"cko9sdw0b0024bw348nmid1ys","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw0p0037bw34db3q3y2e"},{"post_id":"cko9sdw150044bw34am014mh7","category_id":"cko9sdw0g002bbw34bjcnd424","_id":"cko9sdw1b004bbw345krzcypb"},{"post_id":"cko9sdw1b004cbw34270icxf6","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdw1j004kbw347kx65t35"},{"post_id":"cko9sdw160045bw344vkyhes3","category_id":"cko9sdw180048bw34a7k23wx8","_id":"cko9sdw1m004pbw34e69te8ki"},{"post_id":"cko9sdw1d004dbw3484072vu8","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdw1n004sbw34cwsfgiia"},{"post_id":"cko9sdw1f004hbw3446e86662","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdw1r004wbw34bjsfhbfl"},{"post_id":"cko9sdw170047bw346zvu1fxf","category_id":"cko9sdw180048bw34a7k23wx8","_id":"cko9sdw1u0050bw3466jme0ly"},{"post_id":"cko9sdw1i004jbw34fcki41z0","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdw1v0053bw341xb17ewh"},{"post_id":"cko9sdw1l004obw3463noentl","category_id":"cko9sdvzk000sbw34c9n78kof","_id":"cko9sdw1w0056bw34e9h99xgu"},{"post_id":"cko9sdw19004abw34az1h4bqf","category_id":"cko9sdw180048bw34a7k23wx8","_id":"cko9sdw1w0059bw34h90i7m2b"},{"post_id":"cko9sdw1m004rbw346wm4bxci","category_id":"cko9sdw1s004xbw341yz1hz8z","_id":"cko9sdw1x005cbw34fuxcgovn"},{"post_id":"cko9sdw1q004vbw343szweb64","category_id":"cko9sdw1s004xbw341yz1hz8z","_id":"cko9sdw1y005gbw349h5x11m2"},{"post_id":"cko9sdw1s004zbw34ch51hiu3","category_id":"cko9sdw1s004xbw341yz1hz8z","_id":"cko9sdw1y005jbw34azb13jot"},{"post_id":"cko9sdw2b0060bw34f5rn0tdt","category_id":"cko9sdvyw0004bw34fumugnj3","_id":"cko9sdw2i0065bw34he7l2n5j"},{"post_id":"cko9sdw2c0061bw345rg7091x","category_id":"cko9sdw1s004xbw341yz1hz8z","_id":"cko9sdw2i0068bw341yo3bil4"},{"post_id":"cko9sdw2e0063bw342e2i8lqd","category_id":"cko9sdw2i0066bw342tc51au8","_id":"cko9sdw2j006dbw345zvx3o0z"},{"post_id":"ckocz2h6t0000ag34g12j5ohz","category_id":"cko9sdvzs0015bw34b42g4e9p","_id":"ckocz2h7k0002ag34g8w6dica"}],"PostTag":[{"post_id":"cko9sdvz30009bw341yfqex2p","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdvz9000ebw34clcm095e"},{"post_id":"cko9sdvyo0001bw34cakb5jjc","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdvzi000pbw341w7jd810"},{"post_id":"cko9sdvyo0001bw34cakb5jjc","tag_id":"cko9sdvz6000dbw34e1j245oo","_id":"cko9sdvzl000ubw34blkh5vqj"},{"post_id":"cko9sdvyt0003bw34hlk9bcmc","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdvzm000xbw342hra6uya"},{"post_id":"cko9sdvz00007bw34ftjgar60","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdvzq0013bw34dvxe80ze"},{"post_id":"cko9sdvz5000bbw34cel0ahc6","tag_id":"cko9sdvzo0011bw3470jjc4f8","_id":"cko9sdvzw001ebw3478ts1kyu"},{"post_id":"cko9sdvz5000bbw34cel0ahc6","tag_id":"cko9sdvzs0017bw342kh7599v","_id":"cko9sdvzy001ibw34fpxrhht1"},{"post_id":"cko9sdvza000gbw342ir5fyy5","tag_id":"cko9sdvzo0011bw3470jjc4f8","_id":"cko9sdw00001mbw345bs8chqp"},{"post_id":"cko9sdvzd000ibw34f3q6d1cd","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw03001tbw34bbrcdzjm"},{"post_id":"cko9sdvzh000nbw34ggtzfzla","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw090020bw341luzf38r"},{"post_id":"cko9sdvzj000rbw34fd7ldzkz","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0e0026bw34hwt32y08"},{"post_id":"cko9sdvzm000wbw34963uaht5","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0g002abw34ddcsa7zd"},{"post_id":"cko9sdvzn000ybw343xt19nnp","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0h002ebw3472otfk7e"},{"post_id":"cko9sdvzp0012bw34fh043rqs","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0i002ibw34e794fc21"},{"post_id":"cko9sdvzr0014bw344eon9yys","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0j002mbw340zai4pku"},{"post_id":"cko9sdvzt0018bw34hzgx6xxa","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0l002qbw343qbg81pq"},{"post_id":"cko9sdvzu0019bw348xhg4xt5","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0m002ubw34fqnq8zk6"},{"post_id":"cko9sdvzv001dbw348l586y2s","tag_id":"cko9sdvzz001jbw34eaqccdha","_id":"cko9sdw0n002ybw344kxzbzjw"},{"post_id":"cko9sdvzw001fbw34ez9jhq7l","tag_id":"cko9sdw0m002xbw344qya70qs","_id":"cko9sdw0q0039bw34hclrf9r4"},{"post_id":"cko9sdvzw001fbw34ez9jhq7l","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0q003abw346ekx5qjq"},{"post_id":"cko9sdvzw001fbw34ez9jhq7l","tag_id":"cko9sdw0o0034bw34h5b63ulb","_id":"cko9sdw0r003cbw343w5o8knt"},{"post_id":"cko9sdvzw001fbw34ez9jhq7l","tag_id":"cko9sdw0p0036bw343g3ced61","_id":"cko9sdw0r003dbw34fvun884v"},{"post_id":"cko9sdvzz001kbw344jf6cl2s","tag_id":"cko9sdw0p0038bw344h7z6mal","_id":"cko9sdw0s003gbw340davds6f"},{"post_id":"cko9sdvzz001kbw344jf6cl2s","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0s003hbw349d5c0wh6"},{"post_id":"cko9sdvzz001kbw344jf6cl2s","tag_id":"cko9sdw0p0036bw343g3ced61","_id":"cko9sdw0s003jbw347dnqevpz"},{"post_id":"cko9sdw00001nbw34gvi97qi7","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0t003lbw344c3uamzh"},{"post_id":"cko9sdw00001nbw34gvi97qi7","tag_id":"cko9sdw0s003ibw34gynecjj2","_id":"cko9sdw0t003mbw341cpqdxsx"},{"post_id":"cko9sdw02001qbw344hc8evbk","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0v003pbw34fgcfg9iy"},{"post_id":"cko9sdw02001qbw344hc8evbk","tag_id":"cko9sdw0m002xbw344qya70qs","_id":"cko9sdw0v003qbw349u51ddgw"},{"post_id":"cko9sdw03001ubw346xf57dye","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0w003tbw3444nl8v9b"},{"post_id":"cko9sdw03001ubw346xf57dye","tag_id":"cko9sdw0v003rbw349ybk97mj","_id":"cko9sdw0w003ubw34av6kb6kz"},{"post_id":"cko9sdw05001xbw348zxqf4cc","tag_id":"cko9sdw0m002xbw344qya70qs","_id":"cko9sdw0x003wbw348i5mgpv3"},{"post_id":"cko9sdw090021bw341s6o5u3h","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0y003zbw344y8r38yr"},{"post_id":"cko9sdw090021bw341s6o5u3h","tag_id":"cko9sdw0v003rbw349ybk97mj","_id":"cko9sdw0y0040bw3470pedg55"},{"post_id":"cko9sdw0b0024bw348nmid1ys","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw0z0042bw34dy01a9bg"},{"post_id":"cko9sdw0b0024bw348nmid1ys","tag_id":"cko9sdw0z0041bw34h13edd7h","_id":"cko9sdw0z0043bw34bimn1kc8"},{"post_id":"cko9sdw150044bw34am014mh7","tag_id":"cko9sdw0o0031bw34475hfymn","_id":"cko9sdw170046bw34f5grgm2r"},{"post_id":"cko9sdw1b004cbw34270icxf6","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw1f004gbw34a1lifdd9"},{"post_id":"cko9sdw160045bw344vkyhes3","tag_id":"cko9sdw0p0038bw344h7z6mal","_id":"cko9sdw1i004ibw347dxzayfc"},{"post_id":"cko9sdw160045bw344vkyhes3","tag_id":"cko9sdw190049bw344c7899n1","_id":"cko9sdw1l004nbw3482xz9iov"},{"post_id":"cko9sdw1d004dbw3484072vu8","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw1m004qbw348d5t9smq"},{"post_id":"cko9sdw170047bw346zvu1fxf","tag_id":"cko9sdw0p0038bw344h7z6mal","_id":"cko9sdw1q004ubw342zcz0un6"},{"post_id":"cko9sdw170047bw346zvu1fxf","tag_id":"cko9sdw190049bw344c7899n1","_id":"cko9sdw1s004ybw347wiw4qic"},{"post_id":"cko9sdw1l004obw3463noentl","tag_id":"cko9sdvzo0011bw3470jjc4f8","_id":"cko9sdw1u0052bw348tqn4snd"},{"post_id":"cko9sdw19004abw34az1h4bqf","tag_id":"cko9sdw190049bw344c7899n1","_id":"cko9sdw1v0054bw34h5b8dq82"},{"post_id":"cko9sdw1f004hbw3446e86662","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw1w0058bw346q8401pd"},{"post_id":"cko9sdw1f004hbw3446e86662","tag_id":"cko9sdw1n004tbw34bdlu4cey","_id":"cko9sdw1x005abw3409skgzmv"},{"post_id":"cko9sdw1i004jbw34fcki41z0","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw1x005dbw348lko7v62"},{"post_id":"cko9sdw1i004jbw34fcki41z0","tag_id":"cko9sdw1u0051bw341rgcazn6","_id":"cko9sdw1y005fbw34acf7fbnu"},{"post_id":"cko9sdw1m004rbw346wm4bxci","tag_id":"cko9sdw1w0057bw34dcyg9fay","_id":"cko9sdw1y005ibw345o871fqo"},{"post_id":"cko9sdw1m004rbw346wm4bxci","tag_id":"cko9sdw1x005ebw34h3956wpt","_id":"cko9sdw1z005kbw34ddse2otz"},{"post_id":"cko9sdw1q004vbw343szweb64","tag_id":"cko9sdw1w0057bw34dcyg9fay","_id":"cko9sdw27005pbw34cmmw9czw"},{"post_id":"cko9sdw1q004vbw343szweb64","tag_id":"cko9sdw1z005lbw342y9h2c2p","_id":"cko9sdw27005qbw342vlg79x9"},{"post_id":"cko9sdw1q004vbw343szweb64","tag_id":"cko9sdw1z005mbw34f37d9noh","_id":"cko9sdw28005sbw343zew7zqp"},{"post_id":"cko9sdw1q004vbw343szweb64","tag_id":"cko9sdw20005nbw3485xffkma","_id":"cko9sdw28005tbw34d0tihz62"},{"post_id":"cko9sdw1s004zbw34ch51hiu3","tag_id":"cko9sdw1w0057bw34dcyg9fay","_id":"cko9sdw29005wbw34a8wzbqmf"},{"post_id":"cko9sdw1s004zbw34ch51hiu3","tag_id":"cko9sdw27005rbw340ojhfdve","_id":"cko9sdw29005xbw34azbr5q8n"},{"post_id":"cko9sdw1s004zbw34ch51hiu3","tag_id":"cko9sdw28005ubw341dot96e9","_id":"cko9sdw29005ybw3432pj6vg8"},{"post_id":"cko9sdw1s004zbw34ch51hiu3","tag_id":"cko9sdw28005vbw348gk3h9ww","_id":"cko9sdw29005zbw34bmgie9u3"},{"post_id":"cko9sdw2c0061bw345rg7091x","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw2h0064bw34fa3qg11q"},{"post_id":"cko9sdw2c0061bw345rg7091x","tag_id":"cko9sdw1w0057bw34dcyg9fay","_id":"cko9sdw2i0067bw34dc8b5bvh"},{"post_id":"cko9sdw2b0060bw34f5rn0tdt","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw2j006abw3499q1a0qa"},{"post_id":"cko9sdw2b0060bw34f5rn0tdt","tag_id":"cko9sdw2d0062bw34f9cd7wua","_id":"cko9sdw2j006bbw349ndx3tdh"},{"post_id":"cko9sdw2e0063bw342e2i8lqd","tag_id":"cko9sdvyy0005bw349zhd0epg","_id":"cko9sdw2j006cbw340b7j4wvf"},{"post_id":"cko9sdw2e0063bw342e2i8lqd","tag_id":"cko9sdw2i0069bw348mv2b8qr","_id":"cko9sdw2j006ebw34474o3i4a"},{"post_id":"ckocz2h6t0000ag34g12j5ohz","tag_id":"ckocz2h720001ag342woteips","_id":"ckocz2h7q0004ag34fh7l1w9k"},{"post_id":"ckocz2h6t0000ag34g12j5ohz","tag_id":"ckocz2h7m0003ag34c3zq8k21","_id":"ckocz2h7q0005ag3485rf9txv"}],"Tag":[{"name":"Java","_id":"cko9sdvyy0005bw349zhd0epg"},{"name":"IDEA","_id":"cko9sdvz6000dbw34e1j245oo"},{"name":"Python","_id":"cko9sdvzo0011bw3470jjc4f8"},{"name":"Pycharm","_id":"cko9sdvzs0017bw342kh7599v"},{"name":"剑指 Offer","_id":"cko9sdvzz001jbw34eaqccdha"},{"name":"工具","_id":"cko9sdw0m002xbw344qya70qs"},{"name":"教程","_id":"cko9sdw0o0031bw34475hfymn"},{"name":"Gitee","_id":"cko9sdw0o0034bw34h5b63ulb"},{"name":"图床","_id":"cko9sdw0p0036bw343g3ced61"},{"name":"Github","_id":"cko9sdw0p0038bw344h7z6mal"},{"name":"Markdown","_id":"cko9sdw0s003ibw34gynecjj2"},{"name":"Windows","_id":"cko9sdw0v003rbw349ybk97mj"},{"name":"博客","_id":"cko9sdw0z0041bw34h13edd7h"},{"name":"资源","_id":"cko9sdw190049bw344c7899n1"},{"name":"反射","_id":"cko9sdw1n004tbw34bdlu4cey"},{"name":"IO","_id":"cko9sdw1u0051bw341rgcazn6"},{"name":"面试","_id":"cko9sdw1w0057bw34dcyg9fay"},{"name":"计算机网络","_id":"cko9sdw1x005ebw34h3956wpt"},{"name":"数据库","_id":"cko9sdw1z005lbw342y9h2c2p"},{"name":"MySQL","_id":"cko9sdw1z005mbw34f37d9noh"},{"name":"SQL","_id":"cko9sdw20005nbw3485xffkma"},{"name":"Spring","_id":"cko9sdw27005rbw340ojhfdve"},{"name":"SpringBoot","_id":"cko9sdw28005ubw341dot96e9"},{"name":"SpringMVC","_id":"cko9sdw28005vbw348gk3h9ww"},{"name":"JDBC","_id":"cko9sdw2d0062bw34f9cd7wua"},{"name":"项目","_id":"cko9sdw2i0069bw348mv2b8qr"},{"name":"LeetCode","_id":"ckocz2h720001ag342woteips"},{"name":"位运算","_id":"ckocz2h7m0003ag34c3zq8k21"}]}}